
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060dc  080060dc  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  080060dc  080060dc  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060dc  080060dc  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  080060e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000274  08006358  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08006358  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100a9  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023bb  00000000  00000000  0003034d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  000330b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d278  00000000  00000000  00033990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbd0  00000000  00000000  00050c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4e9a  00000000  00000000  0005e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103672  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f30  00000000  00000000  001036c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000274 	.word	0x20000274
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005da8 	.word	0x08005da8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000278 	.word	0x20000278
 80001cc:	08005da8 	.word	0x08005da8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};
///////////////////////////////////////////////////
// Define cmd-line Command support functions below.
void LED(char* paramStr, int* paramValues) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 80002aa:	2202      	movs	r2, #2
 80002ac:	4939      	ldr	r1, [pc, #228]	; (8000394 <LED+0xf4>)
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f005 f84b 	bl	800534a <strncmp>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d111      	bne.n	80002de <LED+0x3e>
		printf("\r\nLED ON");
 80002ba:	4837      	ldr	r0, [pc, #220]	; (8000398 <LED+0xf8>)
 80002bc:	f004 fe9e 	bl	8004ffc <iprintf>
		paramValues[0] = 1;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3308      	adds	r3, #8
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
      led2 = ON;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <LED+0xfc>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 80002dc:	e055      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 80002de:	2203      	movs	r2, #3
 80002e0:	492f      	ldr	r1, [pc, #188]	; (80003a0 <LED+0x100>)
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f005 f831 	bl	800534a <strncmp>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d111      	bne.n	8000312 <LED+0x72>
		printf("\r\nLED OFF");
 80002ee:	482d      	ldr	r0, [pc, #180]	; (80003a4 <LED+0x104>)
 80002f0:	f004 fe84 	bl	8004ffc <iprintf>
		paramValues[0] = 0;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	3304      	adds	r3, #4
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	3308      	adds	r3, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <LED+0xfc>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
}
 8000310:	e03b      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000312:	2205      	movs	r2, #5
 8000314:	4924      	ldr	r1, [pc, #144]	; (80003a8 <LED+0x108>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f005 f817 	bl	800534a <strncmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d130      	bne.n	8000384 <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3306      	adds	r3, #6
 8000326:	4921      	ldr	r1, [pc, #132]	; (80003ac <LED+0x10c>)
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff51 	bl	80001d0 <strcmp>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01c      	beq.n	800036e <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	1d9a      	adds	r2, r3, #6
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f103 0408 	add.w	r4, r3, #8
 800033e:	4610      	mov	r0, r2
 8000340:	f004 fbae 	bl	8004aa0 <atoi>
 8000344:	4603      	mov	r3, r0
 8000346:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3306      	adds	r3, #6
 800034c:	4618      	mov	r0, r3
 800034e:	f004 fba7 	bl	8004aa0 <atoi>
 8000352:	4603      	mov	r3, r0
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <LED+0x110>)
 8000356:	6013      	str	r3, [r2, #0]
         paramValues[0] = 0;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
         paramValues[1] = 0;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
         led2 = BLINKING;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <LED+0xfc>)
 8000368:	2202      	movs	r2, #2
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e003      	b.n	8000376 <LED+0xd6>
			paramValues[2] = 0;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3308      	adds	r3, #8
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <LED+0x110>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LED+0x114>)
 800037e:	f004 fe3d 	bl	8004ffc <iprintf>
}
 8000382:	e002      	b.n	800038a <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LED+0x118>)
 8000386:	f004 fe39 	bl	8004ffc <iprintf>
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bd90      	pop	{r4, r7, pc}
 8000392:	bf00      	nop
 8000394:	08005dc0 	.word	0x08005dc0
 8000398:	08005dc4 	.word	0x08005dc4
 800039c:	2000029c 	.word	0x2000029c
 80003a0:	08005dd0 	.word	0x08005dd0
 80003a4:	08005dd4 	.word	0x08005dd4
 80003a8:	08005de0 	.word	0x08005de0
 80003ac:	08005de8 	.word	0x08005de8
 80003b0:	20000290 	.word	0x20000290
 80003b4:	08005dec 	.word	0x08005dec
 80003b8:	08005dfc 	.word	0x08005dfc

080003bc <ADC>:

void ADC(char* paramStr, int* paramValues){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "RO", 2) == 0) {
 80003c6:	2202      	movs	r2, #2
 80003c8:	4918      	ldr	r1, [pc, #96]	; (800042c <ADC+0x70>)
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f004 ffbd 	bl	800534a <strncmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d117      	bne.n	8000406 <ADC+0x4a>
      printf("\r\nADC READ ONCE");
 80003d6:	4816      	ldr	r0, [pc, #88]	; (8000430 <ADC+0x74>)
 80003d8:	f004 fe10 	bl	8004ffc <iprintf>
      // Start ADC Conversion
      HAL_ADC_Start(&hadc1);
 80003dc:	4815      	ldr	r0, [pc, #84]	; (8000434 <ADC+0x78>)
 80003de:	f000 fe83 	bl	80010e8 <HAL_ADC_Start>
      // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 80003e2:	2101      	movs	r1, #1
 80003e4:	4813      	ldr	r0, [pc, #76]	; (8000434 <ADC+0x78>)
 80003e6:	f000 feed 	bl	80011c4 <HAL_ADC_PollForConversion>
      // Read The ADC Conversion Result - using 3300 + 400 offset to
      // calculate the analog value
      printf("\r\nAA Battery voltage: %ld mV", 3700*HAL_ADC_GetValue(&hadc1)/4096);
 80003ea:	4812      	ldr	r0, [pc, #72]	; (8000434 <ADC+0x78>)
 80003ec:	f000 ffa8 	bl	8001340 <HAL_ADC_GetValue>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f640 6274 	movw	r2, #3700	; 0xe74
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	0b1b      	lsrs	r3, r3, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <ADC+0x7c>)
 8000400:	f004 fdfc 	bl	8004ffc <iprintf>
      printf("\r\nSome help text her...");
   }
   else {
      printf("\r\nUNKNOWN ADC COMMAND");
   }
}
 8000404:	e00e      	b.n	8000424 <ADC+0x68>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000406:	2202      	movs	r2, #2
 8000408:	490c      	ldr	r1, [pc, #48]	; (800043c <ADC+0x80>)
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f004 ff9d 	bl	800534a <strncmp>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d103      	bne.n	800041e <ADC+0x62>
      printf("\r\nSome help text her...");
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <ADC+0x84>)
 8000418:	f004 fdf0 	bl	8004ffc <iprintf>
}
 800041c:	e002      	b.n	8000424 <ADC+0x68>
      printf("\r\nUNKNOWN ADC COMMAND");
 800041e:	4809      	ldr	r0, [pc, #36]	; (8000444 <ADC+0x88>)
 8000420:	f004 fdec 	bl	8004ffc <iprintf>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	08005e14 	.word	0x08005e14
 8000430:	08005e18 	.word	0x08005e18
 8000434:	200002ac 	.word	0x200002ac
 8000438:	08005e28 	.word	0x08005e28
 800043c:	08005e48 	.word	0x08005e48
 8000440:	08005e50 	.word	0x08005e50
 8000444:	08005e68 	.word	0x08005e68

08000448 <dummy>:

void dummy(char* paramStr, int* paramValues){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
	printf("DUMMY\r\n");
 8000452:	4803      	ldr	r0, [pc, #12]	; (8000460 <dummy+0x18>)
 8000454:	f004 fe58 	bl	8005108 <puts>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	08005e80 	.word	0x08005e80

08000464 <promt>:
  {"LED", 3, 6, {"ON", "OFF", "BLINK"}, {0, 1, 500 }, &LED},
  {"ADC", 4, 6, {"RO", "AVRAGE", "POLL", "HELP"}, {0, 10, 500, 0}, &ADC},
  {"DUMMY", 2, 6, {"TRUE", "FALSE"}, {0, 0}, &dummy}
};

void promt() {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 8000468:	4805      	ldr	r0, [pc, #20]	; (8000480 <promt+0x1c>)
 800046a:	f004 fdc7 	bl	8004ffc <iprintf>
   fflush(stdout);
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <promt+0x20>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	4618      	mov	r0, r3
 8000476:	f004 fbdf 	bl	8004c38 <fflush>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	08005e88 	.word	0x08005e88
 8000484:	20000210 	.word	0x20000210

08000488 <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
   int i = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 8000496:	2303      	movs	r3, #3
 8000498:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 800049a:	e03d      	b.n	8000518 <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	22ac      	movs	r2, #172	; 0xac
 80004a0:	fb02 f303 	mul.w	r3, r2, r3
 80004a4:	4a27      	ldr	r2, [pc, #156]	; (8000544 <executeCmd+0xbc>)
 80004a6:	189c      	adds	r4, r3, r2
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	22ac      	movs	r2, #172	; 0xac
 80004ac:	fb02 f303 	mul.w	r3, r2, r3
 80004b0:	4a24      	ldr	r2, [pc, #144]	; (8000544 <executeCmd+0xbc>)
 80004b2:	4413      	add	r3, r2
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff fe95 	bl	80001e4 <strlen>
 80004ba:	4603      	mov	r3, r0
 80004bc:	461a      	mov	r2, r3
 80004be:	6879      	ldr	r1, [r7, #4]
 80004c0:	4620      	mov	r0, r4
 80004c2:	f004 ff42 	bl	800534a <strncmp>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d122      	bne.n	8000512 <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <executeCmd+0xbc>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	21ac      	movs	r1, #172	; 0xac
 80004d2:	fb01 f303 	mul.w	r3, r1, r3
 80004d6:	4413      	add	r3, r2
 80004d8:	33a8      	adds	r3, #168	; 0xa8
 80004da:	681c      	ldr	r4, [r3, #0]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	22ac      	movs	r2, #172	; 0xac
 80004e0:	fb02 f303 	mul.w	r3, r2, r3
 80004e4:	4a17      	ldr	r2, [pc, #92]	; (8000544 <executeCmd+0xbc>)
 80004e6:	4413      	add	r3, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fe7b 	bl	80001e4 <strlen>
 80004ee:	4603      	mov	r3, r0
 80004f0:	3301      	adds	r3, #1
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	441a      	add	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	21ac      	movs	r1, #172	; 0xac
 80004fa:	fb01 f303 	mul.w	r3, r1, r3
 80004fe:	3380      	adds	r3, #128	; 0x80
 8000500:	4910      	ldr	r1, [pc, #64]	; (8000544 <executeCmd+0xbc>)
 8000502:	440b      	add	r3, r1
 8000504:	4619      	mov	r1, r3
 8000506:	4610      	mov	r0, r2
 8000508:	47a0      	blx	r4
       /*** for test only...
 		 printf("\r\nparamValues[0]: %d, paramValues[1]: %d, paramValues[2]: %d",
               mcuCmds[i].paramValues[0],mcuCmds[i].paramValues[1],mcuCmds[i].paramValues[2]);
               ***/
 		 promt();
 800050a:	f7ff ffab 	bl	8000464 <promt>
     	 return 0;
 800050e:	2300      	movs	r3, #0
 8000510:	e014      	b.n	800053c <executeCmd+0xb4>
   for (; i < numberOfCommands; i++) {
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	429a      	cmp	r2, r3
 800051e:	d8bd      	bhi.n	800049c <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	429a      	cmp	r2, r3
 8000526:	d808      	bhi.n	800053a <executeCmd+0xb2>
      printf("\r\nThe command: %s[%d], is not recognized", termInput, numberOfCommands);
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	6879      	ldr	r1, [r7, #4]
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <executeCmd+0xc0>)
 800052e:	f004 fd65 	bl	8004ffc <iprintf>
      promt();
 8000532:	f7ff ff97 	bl	8000464 <promt>
      return -1;
 8000536:	23ff      	movs	r3, #255	; 0xff
 8000538:	e000      	b.n	800053c <executeCmd+0xb4>
   }
   else {
	  return -2;
 800053a:	23fe      	movs	r3, #254	; 0xfe
   }
}
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	20000000 	.word	0x20000000
 8000548:	08005e94 	.word	0x08005e94

0800054c <_write>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	b29a      	uxth	r2, r3
 800055c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000560:	68b9      	ldr	r1, [r7, #8]
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <_write+0x28>)
 8000564:	f003 f8c4 	bl	80036f0 <HAL_UART_Transmit>
	return len;
 8000568:	687b      	ldr	r3, [r7, #4]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200002fc 	.word	0x200002fc

08000578 <HAL_UART_RxCpltCallback>:
uint8_t UART1_rxBuffer = 0;
uint8_t cmdComplete;
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <HAL_UART_RxCpltCallback+0x90>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b0d      	cmp	r3, #13
 8000586:	d126      	bne.n	80005d6 <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <HAL_UART_RxCpltCallback+0x94>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd1a      	ble.n	80005c6 <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	481e      	ldr	r0, [pc, #120]	; (8000610 <HAL_UART_RxCpltCallback+0x98>)
 8000598:	f001 fd5a 	bl	8002050 <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_UART_RxCpltCallback+0x94>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	481c      	ldr	r0, [pc, #112]	; (8000614 <HAL_UART_RxCpltCallback+0x9c>)
 80005a4:	f7ff ff70 	bl	8000488 <executeCmd>
			bytesReceived = 0;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_UART_RxCpltCallback+0x94>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80005ae:	2250      	movs	r2, #80	; 0x50
 80005b0:	2100      	movs	r1, #0
 80005b2:	4818      	ldr	r0, [pc, #96]	; (8000614 <HAL_UART_RxCpltCallback+0x9c>)
 80005b4:	f004 fc6f 	bl	8004e96 <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005be:	4814      	ldr	r0, [pc, #80]	; (8000610 <HAL_UART_RxCpltCallback+0x98>)
 80005c0:	f001 fd46 	bl	8002050 <HAL_GPIO_WritePin>
 80005c4:	e001      	b.n	80005ca <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 80005c6:	f7ff ff4d 	bl	8000464 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	490e      	ldr	r1, [pc, #56]	; (8000608 <HAL_UART_RxCpltCallback+0x90>)
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <HAL_UART_RxCpltCallback+0xa0>)
 80005d0:	f003 f918 	bl	8003804 <HAL_UART_Receive_IT>
		return;
 80005d4:	e015      	b.n	8000602 <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2201      	movs	r2, #1
 80005da:	490b      	ldr	r1, [pc, #44]	; (8000608 <HAL_UART_RxCpltCallback+0x90>)
 80005dc:	480e      	ldr	r0, [pc, #56]	; (8000618 <HAL_UART_RxCpltCallback+0xa0>)
 80005de:	f003 f887 	bl	80036f0 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_UART_RxCpltCallback+0x94>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <HAL_UART_RxCpltCallback+0x90>)
 80005e8:	7811      	ldrb	r1, [r2, #0]
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_UART_RxCpltCallback+0x9c>)
 80005ec:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_UART_RxCpltCallback+0x94>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a05      	ldr	r2, [pc, #20]	; (800060c <HAL_UART_RxCpltCallback+0x94>)
 80005f6:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	4903      	ldr	r1, [pc, #12]	; (8000608 <HAL_UART_RxCpltCallback+0x90>)
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <HAL_UART_RxCpltCallback+0xa0>)
 80005fe:	f003 f901 	bl	8003804 <HAL_UART_Receive_IT>
}
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000294 	.word	0x20000294
 800060c:	20000298 	.word	0x20000298
 8000610:	48000400 	.word	0x48000400
 8000614:	20000384 	.word	0x20000384
 8000618:	200002fc 	.word	0x200002fc

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 8000622:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <main+0xb4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6898      	ldr	r0, [r3, #8]
 8000628:	2300      	movs	r3, #0
 800062a:	2202      	movs	r2, #2
 800062c:	2100      	movs	r1, #0
 800062e:	f004 fd83 	bl	8005138 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fb49 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f85b 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f94f 	bl	80008dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800063e:	f000 f91d 	bl	800087c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000642:	f000 f8a5 	bl	8000790 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8000646:	2201      	movs	r2, #1
 8000648:	4922      	ldr	r1, [pc, #136]	; (80006d4 <main+0xb8>)
 800064a:	4823      	ldr	r0, [pc, #140]	; (80006d8 <main+0xbc>)
 800064c:	f003 f8da 	bl	8003804 <HAL_UART_Receive_IT>
	uint8_t ledState = OFF;
 8000650:	2300      	movs	r3, #0
 8000652:	71fb      	strb	r3, [r7, #7]
	printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <main+0xc0>)
 8000656:	f004 fcd1 	bl	8004ffc <iprintf>
	printf("\r\nBuild No. %d", BUILD);
 800065a:	214a      	movs	r1, #74	; 0x4a
 800065c:	4820      	ldr	r0, [pc, #128]	; (80006e0 <main+0xc4>)
 800065e:	f004 fccd 	bl	8004ffc <iprintf>
	promt();
 8000662:	f7ff feff 	bl	8000464 <promt>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <main+0xc8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	79fa      	ldrb	r2, [r7, #7]
 800066c:	429a      	cmp	r2, r3
 800066e:	d013      	beq.n	8000698 <main+0x7c>
			ledState = led2;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <main+0xc8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	71fb      	strb	r3, [r7, #7]
			if (led2 == ON) {
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <main+0xc8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d106      	bne.n	800068c <main+0x70>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <main+0xcc>)
 8000686:	f001 fce3 	bl	8002050 <HAL_GPIO_WritePin>
 800068a:	e005      	b.n	8000698 <main+0x7c>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000692:	4815      	ldr	r0, [pc, #84]	; (80006e8 <main+0xcc>)
 8000694:	f001 fcdc 	bl	8002050 <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <main+0xc8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d1e2      	bne.n	8000666 <main+0x4a>
		   if (msValue > 0) {
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <main+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dd0a      	ble.n	80006be <main+0xa2>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <main+0xcc>)
 80006ae:	f001 fce7 	bl	8002080 <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <main+0xd0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fb6c 	bl	8000d94 <HAL_Delay>
 80006bc:	e7d3      	b.n	8000666 <main+0x4a>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <main+0xcc>)
 80006c6:	f001 fcc3 	bl	8002050 <HAL_GPIO_WritePin>
			   ledState = OFF;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]
		if (led2 != ledState) {
 80006ce:	e7ca      	b.n	8000666 <main+0x4a>
 80006d0:	20000210 	.word	0x20000210
 80006d4:	20000294 	.word	0x20000294
 80006d8:	200002fc 	.word	0x200002fc
 80006dc:	08005ec0 	.word	0x08005ec0
 80006e0:	08005efc 	.word	0x08005efc
 80006e4:	2000029c 	.word	0x2000029c
 80006e8:	48000400 	.word	0x48000400
 80006ec:	20000290 	.word	0x20000290

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09c      	sub	sp, #112	; 0x70
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fbc9 	bl	8004e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2234      	movs	r2, #52	; 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fbbb 	bl	8004e96 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	2300      	movs	r3, #0
 800072e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fcbd 	bl	80020b4 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000740:	f000 f918 	bl	8000974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000758:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fbb0 	bl	8002ec4 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800076a:	f000 f903 	bl	8000974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800076e:	2301      	movs	r3, #1
 8000770:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fdd9 	bl	8003330 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000784:	f000 f8f6 	bl	8000974 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3770      	adds	r7, #112	; 0x70
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ae:	4b32      	ldr	r3, [pc, #200]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007be:	2201      	movs	r2, #1
 80007c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d0:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007d8:	2201      	movs	r2, #1
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b26      	ldr	r3, [pc, #152]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007e4:	2203      	movs	r2, #3
 80007e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_ADC1_Init+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000802:	481d      	ldr	r0, [pc, #116]	; (8000878 <MX_ADC1_Init+0xe8>)
 8000804:	f000 faea 	bl	8000ddc <HAL_ADC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800080e:	f000 f8b1 	bl	8000974 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000812:	230f      	movs	r3, #15
 8000814:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000816:	2301      	movs	r3, #1
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <MX_ADC1_Init+0xe8>)
 8000830:	f000 fd94 	bl	800135c <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800083a:	f000 f89b 	bl	8000974 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800083e:	2302      	movs	r3, #2
 8000840:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_ADC1_Init+0xe8>)
 8000848:	f000 fd88 	bl	800135c <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000852:	f000 f88f 	bl	8000974 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000856:	2303      	movs	r3, #3
 8000858:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <MX_ADC1_Init+0xe8>)
 8000860:	f000 fd7c 	bl	800135c <HAL_ADC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800086a:	f000 f883 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200002ac 	.word	0x200002ac

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <MX_USART1_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 8000888:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART1_UART_Init+0x58>)
 80008c0:	f002 fec8 	bl	8003654 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f853 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200002fc 	.word	0x200002fc
 80008d8:	40013800 	.word	0x40013800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_GPIO_Init+0x90>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a1d      	ldr	r2, [pc, #116]	; (800096c <MX_GPIO_Init+0x90>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_GPIO_Init+0x90>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_GPIO_Init+0x90>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <MX_GPIO_Init+0x90>)
 8000910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_GPIO_Init+0x90>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_GPIO_Init+0x90>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <MX_GPIO_Init+0x90>)
 8000928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_GPIO_Init+0x90>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0x94>)
 8000942:	f001 fb85 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_GPIO_Init+0x94>)
 8000960:	f001 fa04 	bl	8001d6c <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000
 8000970:	48000400 	.word	0x48000400

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x44>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009e8:	d124      	bne.n	8000a34 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_ADC_MspInit+0x74>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_ADC_MspInit+0x74>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_ADC_MspInit+0x74>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_ADC_MspInit+0x74>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_ADC_MspInit+0x74>)
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_ADC_MspInit+0x74>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f001 f99c 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <HAL_UART_MspInit+0x8c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12f      	bne.n	8000ac2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_UART_MspInit+0x90>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a92:	2330      	movs	r3, #48	; 0x30
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <HAL_UART_MspInit+0x94>)
 8000aae:	f001 f95d 	bl	8001d6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2025      	movs	r0, #37	; 0x25
 8000ab8:	f001 f8ab 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000abc:	2025      	movs	r0, #37	; 0x25
 8000abe:	f001 f8c4 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	48000800 	.word	0x48000800

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f916 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <USART1_IRQHandler+0x10>)
 8000b32:	f002 feab 	bl	800388c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200002fc 	.word	0x200002fc

08000b40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e00a      	b.n	8000b68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b52:	f3af 8000 	nop.w
 8000b56:	4601      	mov	r1, r0
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	60ba      	str	r2, [r7, #8]
 8000b5e:	b2ca      	uxtb	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbf0      	blt.n	8000b52 <_read+0x12>
	}

return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	return -1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_isatty>:

int _isatty(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f003 ff48 	bl	8004aa8 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20004000 	.word	0x20004000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	200002a0 	.word	0x200002a0
 8000c4c:	200003f0 	.word	0x200003f0

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 f8d1 	bl	8004e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca6:	f7ff fcb9 	bl	800061c <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8000cb8:	080060e4 	.word	0x080060e4
  ldr r2, =_sbss
 8000cbc:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8000cc0:	200003ec 	.word	0x200003ec

08000cc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x28>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x28>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 ff8f 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fe4c 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 ffa7 	bl	8001c66 <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 ff6f 	bl	8001c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000204 	.word	0x20000204
 8000d4c:	2000020c 	.word	0x2000020c
 8000d50:	20000208 	.word	0x20000208

08000d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	2000020c 	.word	0x2000020c
 8000d78:	200003d8 	.word	0x200003d8

08000d7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200003d8 	.word	0x200003d8

08000d94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_Delay+0x44>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffde 	bl	8000d7c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000020c 	.word	0x2000020c

08000ddc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b09a      	sub	sp, #104	; 0x68
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e169      	b.n	80010d0 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d176      	bne.n	8000efc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d152      	bne.n	8000ebc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fdc9 	bl	80009c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d13b      	bne.n	8000ebc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 fda3 	bl	8001990 <ADC_Disable>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d12f      	bne.n	8000ebc <HAL_ADC_Init+0xe0>
 8000e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d12b      	bne.n	8000ebc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e6c:	f023 0302 	bic.w	r3, r3, #2
 8000e70:	f043 0202 	orr.w	r2, r3, #2
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e86:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e96:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e98:	4b8f      	ldr	r3, [pc, #572]	; (80010d8 <HAL_ADC_Init+0x2fc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a8f      	ldr	r2, [pc, #572]	; (80010dc <HAL_ADC_Init+0x300>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	0c9a      	lsrs	r2, r3, #18
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eae:	e002      	b.n	8000eb6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f9      	bne.n	8000eb0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ed8:	d110      	bne.n	8000efc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f023 0312 	bic.w	r3, r3, #18
 8000ee2:	f043 0210 	orr.w	r2, r3, #16
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 80d6 	bne.w	80010b6 <HAL_ADC_Init+0x2da>
 8000f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 80d1 	bne.w	80010b6 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 80c9 	bne.w	80010b6 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f2c:	f043 0202 	orr.w	r2, r3, #2
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f34:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <HAL_ADC_Init+0x304>)
 8000f36:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d108      	bne.n	8000f5c <HAL_ADC_Init+0x180>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_Init+0x180>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_ADC_Init+0x182>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d11c      	bne.n	8000f9c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f62:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d010      	beq.n	8000f8a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d107      	bne.n	8000f84 <HAL_ADC_Init+0x1a8>
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_ADC_Init+0x1a8>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_ADC_Init+0x1aa>
 8000f84:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d108      	bne.n	8000f9c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f9a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7e5b      	ldrb	r3, [r3, #25]
 8000fa0:	035b      	lsls	r3, r3, #13
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fa6:	2a01      	cmp	r2, #1
 8000fa8:	d002      	beq.n	8000fb0 <HAL_ADC_Init+0x1d4>
 8000faa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fae:	e000      	b.n	8000fb2 <HAL_ADC_Init+0x1d6>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d11b      	bne.n	8001008 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7e5b      	ldrb	r3, [r3, #25]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	045a      	lsls	r2, r3, #17
 8000fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	663b      	str	r3, [r7, #96]	; 0x60
 8000fea:	e00d      	b.n	8001008 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ff4:	f043 0220 	orr.w	r2, r3, #32
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	f043 0201 	orr.w	r2, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	2b01      	cmp	r3, #1
 800100e:	d007      	beq.n	8001020 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	4313      	orrs	r3, r2
 800101a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800101c:	4313      	orrs	r3, r2
 800101e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b00      	cmp	r3, #0
 800102c:	d114      	bne.n	8001058 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800103c:	f023 0302 	bic.w	r3, r3, #2
 8001040:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7e1b      	ldrb	r3, [r3, #24]
 8001046:	039a      	lsls	r2, r3, #14
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4313      	orrs	r3, r2
 8001052:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001054:	4313      	orrs	r3, r2
 8001056:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_ADC_Init+0x308>)
 8001060:	4013      	ands	r3, r2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6812      	ldr	r2, [r2, #0]
 8001066:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001068:	430b      	orrs	r3, r1
 800106a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d10c      	bne.n	800108e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f023 010f 	bic.w	r1, r3, #15
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	631a      	str	r2, [r3, #48]	; 0x30
 800108c:	e007      	b.n	800109e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 020f 	bic.w	r2, r2, #15
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f023 0303 	bic.w	r3, r3, #3
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
 80010b4:	e00a      	b.n	80010cc <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f023 0312 	bic.w	r3, r3, #18
 80010be:	f043 0210 	orr.w	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80010cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3768      	adds	r7, #104	; 0x68
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000204 	.word	0x20000204
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	50000300 	.word	0x50000300
 80010e4:	fff0c007 	.word	0xfff0c007

080010e8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d158      	bne.n	80011b4 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_ADC_Start+0x28>
 800110c:	2302      	movs	r3, #2
 800110e:	e054      	b.n	80011ba <HAL_ADC_Start+0xd2>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fbd5 	bl	80018c8 <ADC_Enable>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d140      	bne.n	80011aa <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001172:	d106      	bne.n	8001182 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f023 0206 	bic.w	r2, r3, #6
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
 8001180:	e002      	b.n	8001188 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	221c      	movs	r2, #28
 8001196:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0204 	orr.w	r2, r2, #4
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80011b2:	e001      	b.n	80011b8 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011b4:	2302      	movs	r3, #2
 80011b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d102      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80011da:	2308      	movs	r3, #8
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e02e      	b.n	800123e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e0:	4b56      	ldr	r3, [pc, #344]	; (800133c <HAL_ADC_PollForConversion+0x178>)
 80011e2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 031f 	and.w	r3, r3, #31
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d112      	bne.n	8001216 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d11d      	bne.n	800123a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f043 0220 	orr.w	r2, r3, #32
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e08d      	b.n	8001332 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f043 0220 	orr.w	r2, r3, #32
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e07b      	b.n	8001332 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800123a:	230c      	movs	r3, #12
 800123c:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001246:	f7ff fd99 	bl	8000d7c <HAL_GetTick>
 800124a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800124c:	e021      	b.n	8001292 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d01d      	beq.n	8001292 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d007      	beq.n	800126c <HAL_ADC_PollForConversion+0xa8>
 800125c:	f7ff fd8e 	bl	8000d7c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d212      	bcs.n	8001292 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10b      	bne.n	8001292 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f043 0204 	orr.w	r2, r3, #4
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e04f      	b.n	8001332 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0d6      	beq.n	800124e <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d131      	bne.n	800131e <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12c      	bne.n	800131e <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d125      	bne.n	800131e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d112      	bne.n	8001306 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d112      	bne.n	800131e <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
 8001304:	e00b      	b.n	800131e <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f043 0220 	orr.w	r2, r3, #32
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d103      	bne.n	8001330 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	50000300 	.word	0x50000300

08001340 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800135c:	b480      	push	{r7}
 800135e:	b09b      	sub	sp, #108	; 0x6c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001376:	2b01      	cmp	r3, #1
 8001378:	d101      	bne.n	800137e <HAL_ADC_ConfigChannel+0x22>
 800137a:	2302      	movs	r3, #2
 800137c:	e299      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x556>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 827d 	bne.w	8001890 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b04      	cmp	r3, #4
 800139c:	d81c      	bhi.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	461a      	mov	r2, r3
 80013b2:	231f      	movs	r3, #31
 80013b4:	4093      	lsls	r3, r2
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4019      	ands	r1, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa00 f203 	lsl.w	r2, r0, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
 80013d6:	e063      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b09      	cmp	r3, #9
 80013de:	d81e      	bhi.n	800141e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	3b1e      	subs	r3, #30
 80013f4:	221f      	movs	r2, #31
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4019      	ands	r1, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3b1e      	subs	r3, #30
 8001410:	fa00 f203 	lsl.w	r2, r0, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
 800141c:	e040      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b0e      	cmp	r3, #14
 8001424:	d81e      	bhi.n	8001464 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	3b3c      	subs	r3, #60	; 0x3c
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	3b3c      	subs	r3, #60	; 0x3c
 8001456:	fa00 f203 	lsl.w	r2, r0, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	639a      	str	r2, [r3, #56]	; 0x38
 8001462:	e01d      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	3b5a      	subs	r3, #90	; 0x5a
 8001478:	221f      	movs	r2, #31
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	4019      	ands	r1, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	3b5a      	subs	r3, #90	; 0x5a
 8001494:	fa00 f203 	lsl.w	r2, r0, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 80e5 	bne.w	800167a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d91c      	bls.n	80014f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6999      	ldr	r1, [r3, #24]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	3b1e      	subs	r3, #30
 80014ca:	2207      	movs	r2, #7
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4019      	ands	r1, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6898      	ldr	r0, [r3, #8]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	3b1e      	subs	r3, #30
 80014e4:	fa00 f203 	lsl.w	r2, r0, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	619a      	str	r2, [r3, #24]
 80014f0:	e019      	b.n	8001526 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6959      	ldr	r1, [r3, #20]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4019      	ands	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6898      	ldr	r0, [r3, #8]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	fa00 f203 	lsl.w	r2, r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	3b01      	subs	r3, #1
 8001544:	2b03      	cmp	r3, #3
 8001546:	d84f      	bhi.n	80015e8 <HAL_ADC_ConfigChannel+0x28c>
 8001548:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <HAL_ADC_ConfigChannel+0x1f4>)
 800154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154e:	bf00      	nop
 8001550:	08001561 	.word	0x08001561
 8001554:	08001583 	.word	0x08001583
 8001558:	080015a5 	.word	0x080015a5
 800155c:	080015c7 	.word	0x080015c7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001566:	4b99      	ldr	r3, [pc, #612]	; (80017cc <HAL_ADC_ConfigChannel+0x470>)
 8001568:	4013      	ands	r3, r2
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	0691      	lsls	r1, r2, #26
 8001570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001572:	430a      	orrs	r2, r1
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800157e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001580:	e07e      	b.n	8001680 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001588:	4b90      	ldr	r3, [pc, #576]	; (80017cc <HAL_ADC_ConfigChannel+0x470>)
 800158a:	4013      	ands	r3, r2
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	0691      	lsls	r1, r2, #26
 8001592:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001594:	430a      	orrs	r2, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015a0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015a2:	e06d      	b.n	8001680 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_ADC_ConfigChannel+0x470>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	0691      	lsls	r1, r2, #26
 80015b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015b6:	430a      	orrs	r2, r1
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015c2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015c4:	e05c      	b.n	8001680 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015cc:	4b7f      	ldr	r3, [pc, #508]	; (80017cc <HAL_ADC_ConfigChannel+0x470>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	0691      	lsls	r1, r2, #26
 80015d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015d8:	430a      	orrs	r2, r1
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015e4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015e6:	e04b      	b.n	8001680 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	069b      	lsls	r3, r3, #26
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d107      	bne.n	800160c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800160a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	069b      	lsls	r3, r3, #26
 800161c:	429a      	cmp	r2, r3
 800161e:	d107      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800162e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	069b      	lsls	r3, r3, #26
 8001640:	429a      	cmp	r2, r3
 8001642:	d107      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001652:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800165a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	069b      	lsls	r3, r3, #26
 8001664:	429a      	cmp	r2, r3
 8001666:	d10a      	bne.n	800167e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001676:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001678:	e001      	b.n	800167e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800167a:	bf00      	nop
 800167c:	e000      	b.n	8001680 <HAL_ADC_ConfigChannel+0x324>
      break;
 800167e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x344>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x344>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x346>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 80ff 	bne.w	80018a6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d00f      	beq.n	80016d0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	400a      	ands	r2, r1
 80016ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80016ce:	e049      	b.n	8001764 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	409a      	lsls	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b09      	cmp	r3, #9
 80016f0:	d91c      	bls.n	800172c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6999      	ldr	r1, [r3, #24]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	3b1b      	subs	r3, #27
 8001704:	2207      	movs	r2, #7
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	4019      	ands	r1, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6898      	ldr	r0, [r3, #8]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3b1b      	subs	r3, #27
 800171e:	fa00 f203 	lsl.w	r2, r0, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	619a      	str	r2, [r3, #24]
 800172a:	e01b      	b.n	8001764 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6959      	ldr	r1, [r3, #20]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	2207      	movs	r2, #7
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6898      	ldr	r0, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_ADC_ConfigChannel+0x474>)
 8001766:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b10      	cmp	r3, #16
 800176e:	d105      	bne.n	800177c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001778:	2b00      	cmp	r3, #0
 800177a:	d014      	beq.n	80017a6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001780:	2b11      	cmp	r3, #17
 8001782:	d105      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00a      	beq.n	80017a6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001794:	2b12      	cmp	r3, #18
 8001796:	f040 8086 	bne.w	80018a6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800179a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d17f      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10d      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x478>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d106      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x478>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e005      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x47a>
 80017ca:	bf00      	nop
 80017cc:	83fff000 	.word	0x83fff000
 80017d0:	50000300 	.word	0x50000300
 80017d4:	2300      	movs	r3, #0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d150      	bne.n	800187c <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017da:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d010      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x4a0>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x4a0>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_ADC_ConfigChannel+0x4a2>
 80017fc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d13c      	bne.n	800187c <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b10      	cmp	r3, #16
 8001808:	d11d      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x4ea>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001812:	d118      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800181c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_ADC_ConfigChannel+0x564>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_ADC_ConfigChannel+0x568>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9a      	lsrs	r2, r3, #18
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001836:	e002      	b.n	800183e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3b01      	subs	r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f9      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001844:	e02e      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b11      	cmp	r3, #17
 800184c:	d10b      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x50a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001856:	d106      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001862:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001864:	e01e      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b12      	cmp	r3, #18
 800186c:	d11a      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800186e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001878:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800187a:	e013      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f043 0220 	orr.w	r2, r3, #32
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800188e:	e00a      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018a2:	e000      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018a4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	376c      	adds	r7, #108	; 0x6c
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000204 	.word	0x20000204
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d108      	bne.n	80018f4 <ADC_Enable+0x2c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <ADC_Enable+0x2c>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <ADC_Enable+0x2e>
 80018f4:	2300      	movs	r3, #0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d143      	bne.n	8001982 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <ADC_Enable+0xc4>)
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00d      	beq.n	8001924 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f043 0210 	orr.w	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e02f      	b.n	8001984 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001934:	f7ff fa22 	bl	8000d7c <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800193a:	e01b      	b.n	8001974 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800193c:	f7ff fa1e 	bl	8000d7c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d914      	bls.n	8001974 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d00d      	beq.n	8001974 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f043 0210 	orr.w	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e007      	b.n	8001984 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d1dc      	bne.n	800193c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	8000003f 	.word	0x8000003f

08001990 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d108      	bne.n	80019bc <ADC_Disable+0x2c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <ADC_Disable+0x2c>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <ADC_Disable+0x2e>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d047      	beq.n	8001a52 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030d 	and.w	r3, r3, #13
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10f      	bne.n	80019f0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0202 	orr.w	r2, r2, #2
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2203      	movs	r2, #3
 80019e6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019e8:	f7ff f9c8 	bl	8000d7c <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019ee:	e029      	b.n	8001a44 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f043 0210 	orr.w	r2, r3, #16
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e023      	b.n	8001a54 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a0c:	f7ff f9b6 	bl	8000d7c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d914      	bls.n	8001a44 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10d      	bne.n	8001a44 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e007      	b.n	8001a54 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d0dc      	beq.n	8001a0c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff29 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff3e 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff8e 	bl	8001b50 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff31 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa2 	bl	8001bb8 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d008      	beq.n	8001ca2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2204      	movs	r2, #4
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e020      	b.n	8001ce4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 020e 	bic.w	r2, r2, #14
 8001cb0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d005      	beq.n	8001d12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e027      	b.n	8001d62 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 020e 	bic.w	r2, r2, #14
 8001d20:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d40:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
    } 
  }
  return status;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e14e      	b.n	800201a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8140 	beq.w	8002014 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_Init+0x40>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d017      	beq.n	8001e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d123      	bne.n	8001e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	6939      	ldr	r1, [r7, #16]
 8001e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0203 	and.w	r2, r3, #3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 809a 	beq.w	8002014 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee0:	4b55      	ldr	r3, [pc, #340]	; (8002038 <HAL_GPIO_Init+0x2cc>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a54      	ldr	r2, [pc, #336]	; (8002038 <HAL_GPIO_Init+0x2cc>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b52      	ldr	r3, [pc, #328]	; (8002038 <HAL_GPIO_Init+0x2cc>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef8:	4a50      	ldr	r2, [pc, #320]	; (800203c <HAL_GPIO_Init+0x2d0>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f22:	d013      	beq.n	8001f4c <HAL_GPIO_Init+0x1e0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_GPIO_Init+0x2d4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00d      	beq.n	8001f48 <HAL_GPIO_Init+0x1dc>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a45      	ldr	r2, [pc, #276]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <HAL_GPIO_Init+0x1d8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a44      	ldr	r2, [pc, #272]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_GPIO_Init+0x1d4>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e006      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f40:	2305      	movs	r3, #5
 8001f42:	e004      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e002      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_GPIO_Init+0x1e2>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	f002 0203 	and.w	r2, r2, #3
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	4093      	lsls	r3, r2
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f5e:	4937      	ldr	r1, [pc, #220]	; (800203c <HAL_GPIO_Init+0x2d0>)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6c:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fba:	4a24      	ldr	r2, [pc, #144]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800200e:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	f47f aea9 	bne.w	8001d7c <HAL_GPIO_Init+0x10>
  }
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000
 800203c:	40010000 	.word	0x40010000
 8002040:	48000400 	.word	0x48000400
 8002044:	48000800 	.word	0x48000800
 8002048:	48000c00 	.word	0x48000c00
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800206c:	e002      	b.n	8002074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43d9      	mvns	r1, r3
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	400b      	ands	r3, r1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f000 bef4 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 816a 	beq.w	80023b2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020de:	4bb3      	ldr	r3, [pc, #716]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d00c      	beq.n	8002104 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ea:	4bb0      	ldr	r3, [pc, #704]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d159      	bne.n	80021aa <HAL_RCC_OscConfig+0xf6>
 80020f6:	4bad      	ldr	r3, [pc, #692]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002102:	d152      	bne.n	80021aa <HAL_RCC_OscConfig+0xf6>
 8002104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002108:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002118:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d102      	bne.n	8002136 <HAL_RCC_OscConfig+0x82>
 8002130:	4b9e      	ldr	r3, [pc, #632]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	e015      	b.n	8002162 <HAL_RCC_OscConfig+0xae>
 8002136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800214a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002152:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800215e:	4b93      	ldr	r3, [pc, #588]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002166:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800216a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800216e:	fa92 f2a2 	rbit	r2, r2
 8002172:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002176:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0220 	orr.w	r2, r2, #32
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 810c 	beq.w	80023b0 <HAL_RCC_OscConfig+0x2fc>
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8106 	bne.w	80023b0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f000 be86 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x110>
 80021b6:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7c      	ldr	r2, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e030      	b.n	8002226 <HAL_RCC_OscConfig+0x172>
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x134>
 80021ce:	4b77      	ldr	r3, [pc, #476]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a76      	ldr	r2, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b74      	ldr	r3, [pc, #464]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a73      	ldr	r2, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01e      	b.n	8002226 <HAL_RCC_OscConfig+0x172>
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x15a>
 80021f4:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6c      	ldr	r2, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a69      	ldr	r2, [pc, #420]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x172>
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a66      	ldr	r2, [pc, #408]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b64      	ldr	r3, [pc, #400]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a63      	ldr	r2, [pc, #396]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f023 020f 	bic.w	r2, r3, #15
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	495d      	ldr	r1, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d059      	beq.n	80022f8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe fd9a 	bl	8000d7c <HAL_GetTick>
 8002248:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224e:	f7fe fd95 	bl	8000d7c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d902      	bls.n	8002264 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	f000 be29 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002268:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002278:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <HAL_RCC_OscConfig+0x1e2>
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x20e>
 8002296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80022ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022ce:	fa92 f2a2 	rbit	r2, r2
 80022d2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80022d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0ab      	beq.n	800224e <HAL_RCC_OscConfig+0x19a>
 80022f6:	e05c      	b.n	80023b2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe fd40 	bl	8000d7c <HAL_GetTick>
 80022fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002302:	f7fe fd3b 	bl	8000d7c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d902      	bls.n	8002318 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	f000 bdcf 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800232c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d102      	bne.n	800234a <HAL_RCC_OscConfig+0x296>
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	e015      	b.n	8002376 <HAL_RCC_OscConfig+0x2c2>
 800234a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800235e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002362:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002366:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800237a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800237e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800238a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f042 0220 	orr.w	r2, r2, #32
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f002 021f 	and.w	r2, r2, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ab      	bne.n	8002302 <HAL_RCC_OscConfig+0x24e>
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_OscConfig+0x2fe>
 80023ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 816f 	beq.w	80026a0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023c2:	4bd0      	ldr	r3, [pc, #832]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023ce:	4bcd      	ldr	r3, [pc, #820]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d16c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x400>
 80023da:	4bca      	ldr	r3, [pc, #808]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d166      	bne.n	80024b4 <HAL_RCC_OscConfig+0x400>
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80023f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d102      	bne.n	8002416 <HAL_RCC_OscConfig+0x362>
 8002410:	4bbc      	ldr	r3, [pc, #752]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	e013      	b.n	800243e <HAL_RCC_OscConfig+0x38a>
 8002416:	2302      	movs	r3, #2
 8002418:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800242e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800243a:	4bb2      	ldr	r3, [pc, #712]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2202      	movs	r2, #2
 8002440:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002444:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002450:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_RCC_OscConfig+0x3cc>
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d002      	beq.n	8002480 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	f000 bd1b 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4ba0      	ldr	r3, [pc, #640]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	21f8      	movs	r1, #248	; 0xf8
 8002490:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002498:	fa91 f1a1 	rbit	r1, r1
 800249c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80024a0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80024a4:	fab1 f181 	clz	r1, r1
 80024a8:	b2c9      	uxtb	r1, r1
 80024aa:	408b      	lsls	r3, r1
 80024ac:	4995      	ldr	r1, [pc, #596]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	e0f5      	b.n	80026a0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8085 	beq.w	80025ca <HAL_RCC_OscConfig+0x516>
 80024c0:	2301      	movs	r3, #1
 80024c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80024d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	461a      	mov	r2, r3
 80024e8:	2301      	movs	r3, #1
 80024ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fc46 	bl	8000d7c <HAL_GetTick>
 80024f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fc41 	bl	8000d7c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d902      	bls.n	800250c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	f000 bcd5 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
 800250c:	2302      	movs	r3, #2
 800250e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800251e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_RCC_OscConfig+0x488>
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0x4b0>
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002554:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2202      	movs	r2, #2
 8002566:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800256a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002576:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 021f 	and.w	r2, r2, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0af      	beq.n	80024f6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	21f8      	movs	r1, #248	; 0xf8
 80025a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025ae:	fa91 f1a1 	rbit	r1, r1
 80025b2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80025b6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80025ba:	fab1 f181 	clz	r1, r1
 80025be:	b2c9      	uxtb	r1, r1
 80025c0:	408b      	lsls	r3, r1
 80025c2:	4950      	ldr	r1, [pc, #320]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e06a      	b.n	80026a0 <HAL_RCC_OscConfig+0x5ec>
 80025ca:	2301      	movs	r3, #1
 80025cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80025dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	461a      	mov	r2, r3
 80025f2:	2300      	movs	r3, #0
 80025f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fbc1 	bl	8000d7c <HAL_GetTick>
 80025fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe fbbc 	bl	8000d7c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d902      	bls.n	8002616 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	f000 bc50 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d102      	bne.n	8002646 <HAL_RCC_OscConfig+0x592>
 8002640:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	e013      	b.n	800266e <HAL_RCC_OscConfig+0x5ba>
 8002646:	2302      	movs	r3, #2
 8002648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002658:	2302      	movs	r3, #2
 800265a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800265e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2202      	movs	r2, #2
 8002670:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002674:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002678:	fa92 f2a2 	rbit	r2, r2
 800267c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002680:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f042 0220 	orr.w	r2, r2, #32
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1af      	bne.n	8002600 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80da 	beq.w	8002864 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d069      	beq.n	800278e <HAL_RCC_OscConfig+0x6da>
 80026ba:	2301      	movs	r3, #1
 80026bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80026cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x654>)
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	461a      	mov	r2, r3
 80026e0:	2301      	movs	r3, #1
 80026e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fb4a 	bl	8000d7c <HAL_GetTick>
 80026e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ec:	e00e      	b.n	800270c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ee:	f7fe fb45 	bl	8000d7c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d906      	bls.n	800270c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e3d9      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	10908120 	.word	0x10908120
 800270c:	2302      	movs	r3, #2
 800270e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800271e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800273a:	2202      	movs	r2, #2
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800274c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4ba5      	ldr	r3, [pc, #660]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002752:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002756:	2102      	movs	r1, #2
 8002758:	6019      	str	r1, [r3, #0]
 800275a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f1a3 	rbit	r1, r3
 8002764:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002768:	6019      	str	r1, [r3, #0]
  return result;
 800276a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0b0      	beq.n	80026ee <HAL_RCC_OscConfig+0x63a>
 800278c:	e06a      	b.n	8002864 <HAL_RCC_OscConfig+0x7b0>
 800278e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027a4:	601a      	str	r2, [r3, #0]
  return result;
 80027a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b8c      	ldr	r3, [pc, #560]	; (80029e8 <HAL_RCC_OscConfig+0x934>)
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	461a      	mov	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c0:	f7fe fadc 	bl	8000d7c <HAL_GetTick>
 80027c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e009      	b.n	80027de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe fad7 	bl	8000d7c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e36b      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 80027de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027e2:	2202      	movs	r2, #2
 80027e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	fa93 f2a3 	rbit	r2, r3
 8002808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002812:	2202      	movs	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002824:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002826:	4b6f      	ldr	r3, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800282e:	2102      	movs	r1, #2
 8002830:	6019      	str	r1, [r3, #0]
 8002832:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f1a3 	rbit	r1, r3
 800283c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002840:	6019      	str	r1, [r3, #0]
  return result;
 8002842:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1b2      	bne.n	80027ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8158 	beq.w	8002b24 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287a:	4b5a      	ldr	r3, [pc, #360]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d112      	bne.n	80028ac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b54      	ldr	r3, [pc, #336]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800289a:	f107 0308 	add.w	r3, r7, #8
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <HAL_RCC_OscConfig+0x938>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d11a      	bne.n	80028ee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x938>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a4b      	ldr	r2, [pc, #300]	; (80029ec <HAL_RCC_OscConfig+0x938>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c4:	f7fe fa5a 	bl	8000d7c <HAL_GetTick>
 80028c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e009      	b.n	80028e2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe fa55 	bl	8000d7c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e2e9      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_RCC_OscConfig+0x938>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ef      	beq.n	80028ce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x852>
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a39      	ldr	r2, [pc, #228]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e02f      	b.n	8002966 <HAL_RCC_OscConfig+0x8b2>
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x876>
 8002910:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002922:	f023 0304 	bic.w	r3, r3, #4
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e01d      	b.n	8002966 <HAL_RCC_OscConfig+0x8b2>
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d10c      	bne.n	800294e <HAL_RCC_OscConfig+0x89a>
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800293a:	f043 0304 	orr.w	r3, r3, #4
 800293e:	6213      	str	r3, [r2, #32]
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	e00b      	b.n	8002966 <HAL_RCC_OscConfig+0x8b2>
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d06b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe fa04 	bl	8000d7c <HAL_GetTick>
 8002974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe f9ff 	bl	8000d7c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e291      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002992:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029ae:	2202      	movs	r2, #2
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029c0:	601a      	str	r2, [r3, #0]
  return result;
 80029c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d109      	bne.n	80029f0 <HAL_RCC_OscConfig+0x93c>
 80029dc:	4b01      	ldr	r3, [pc, #4]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	e014      	b.n	8002a0c <HAL_RCC_OscConfig+0x958>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	10908120 	.word	0x10908120
 80029ec:	40007000 	.word	0x40007000
 80029f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	4bbb      	ldr	r3, [pc, #748]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a10:	2102      	movs	r1, #2
 8002a12:	6011      	str	r1, [r2, #0]
 8002a14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	fa92 f1a2 	rbit	r1, r2
 8002a1e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a22:	6011      	str	r1, [r2, #0]
  return result;
 8002a24:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	fab2 f282 	clz	r2, r2
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f002 021f 	and.w	r2, r2, #31
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d099      	beq.n	800297a <HAL_RCC_OscConfig+0x8c6>
 8002a46:	e063      	b.n	8002b10 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fe f998 	bl	8000d7c <HAL_GetTick>
 8002a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe f993 	bl	8000d7c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e225      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002a6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a6e:	2202      	movs	r2, #2
 8002a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a86:	2202      	movs	r2, #2
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	fa93 f2a3 	rbit	r2, r3
 8002a94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a98:	601a      	str	r2, [r3, #0]
  return result;
 8002a9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_OscConfig+0xa06>
 8002ab4:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	e00d      	b.n	8002ad6 <HAL_RCC_OscConfig+0xa22>
 8002aba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002abe:	2202      	movs	r2, #2
 8002ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ada:	2102      	movs	r1, #2
 8002adc:	6011      	str	r1, [r2, #0]
 8002ade:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	fa92 f1a2 	rbit	r1, r2
 8002ae8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002aec:	6011      	str	r1, [r2, #0]
  return result;
 8002aee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	fab2 f282 	clz	r2, r2
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f002 021f 	and.w	r2, r2, #31
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1a0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b18:	4b77      	ldr	r3, [pc, #476]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4a76      	ldr	r2, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 81c2 	beq.w	8002eb4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b30:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	f000 819c 	beq.w	8002e76 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	f040 8114 	bne.w	8002d72 <HAL_RCC_OscConfig+0xcbe>
 8002b4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b62:	601a      	str	r2, [r3, #0]
  return result;
 8002b64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f8fc 	bl	8000d7c <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b88:	e009      	b.n	8002b9e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe f8f7 	bl	8000d7c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e18b      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002b9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bb6:	601a      	str	r2, [r3, #0]
  return result;
 8002bb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xb24>
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e01b      	b.n	8002c10 <HAL_RCC_OscConfig+0xb5c>
 8002bd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fa93 f2a3 	rbit	r2, r3
 8002bec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c18:	6011      	str	r1, [r2, #0]
 8002c1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	fa92 f1a2 	rbit	r1, r2
 8002c24:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c28:	6011      	str	r1, [r2, #0]
  return result;
 8002c2a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d19e      	bne.n	8002b8a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	4925      	ldr	r1, [pc, #148]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
 8002c68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c80:	601a      	str	r2, [r3, #0]
  return result;
 8002c82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c86:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe f86d 	bl	8000d7c <HAL_GetTick>
 8002ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca6:	e009      	b.n	8002cbc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe f868 	bl	8000d7c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0fc      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002cbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cd4:	601a      	str	r2, [r3, #0]
  return result;
 8002cd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCC_OscConfig+0xc48>
 8002cf0:	4b01      	ldr	r3, [pc, #4]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	e01e      	b.n	8002d34 <HAL_RCC_OscConfig+0xc80>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f2a3 	rbit	r2, r3
 8002d2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0xe0c>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d3c:	6011      	str	r1, [r2, #0]
 8002d3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	fa92 f1a2 	rbit	r1, r2
 8002d48:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d4c:	6011      	str	r1, [r2, #0]
  return result;
 8002d4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fab2 f282 	clz	r2, r2
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f042 0220 	orr.w	r2, r2, #32
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	f002 021f 	and.w	r2, r2, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d09b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xbf4>
 8002d70:	e0a0      	b.n	8002eb4 <HAL_RCC_OscConfig+0xe00>
 8002d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	2300      	movs	r3, #0
 8002da6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fd ffe8 	bl	8000d7c <HAL_GetTick>
 8002dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	e009      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fd ffe3 	bl	8000d7c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e077      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dde:	601a      	str	r2, [r3, #0]
  return result;
 8002de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_OscConfig+0xd4c>
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <HAL_RCC_OscConfig+0xe0c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0xd84>
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f107 0320 	add.w	r3, r7, #32
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f107 0318 	add.w	r3, r7, #24
 8002e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f107 0318 	add.w	r3, r7, #24
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_OscConfig+0xe0c>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f107 0210 	add.w	r2, r7, #16
 8002e3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	f107 0210 	add.w	r2, r7, #16
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	fa92 f1a2 	rbit	r1, r2
 8002e4c:	f107 020c 	add.w	r2, r7, #12
 8002e50:	6011      	str	r1, [r2, #0]
  return result;
 8002e52:	f107 020c 	add.w	r2, r7, #12
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	fab2 f282 	clz	r2, r2
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	f002 021f 	and.w	r2, r2, #31
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d19e      	bne.n	8002db2 <HAL_RCC_OscConfig+0xcfe>
 8002e74:	e01e      	b.n	8002eb4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e018      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCC_OscConfig+0xe0c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b09e      	sub	sp, #120	; 0x78
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e162      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b90      	ldr	r3, [pc, #576]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b8d      	ldr	r3, [pc, #564]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	498b      	ldr	r1, [pc, #556]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b89      	ldr	r3, [pc, #548]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e14a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b82      	ldr	r3, [pc, #520]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	497f      	ldr	r1, [pc, #508]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80dc 	beq.w	80030f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d13c      	bne.n	8002fba <HAL_RCC_ClockConfig+0xf6>
 8002f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d102      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xa6>
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	e00f      	b.n	8002f8a <HAL_RCC_ClockConfig+0xc6>
 8002f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	667b      	str	r3, [r7, #100]	; 0x64
 8002f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f86:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d17b      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0f3      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d13c      	bne.n	800303c <HAL_RCC_ClockConfig+0x178>
 8002fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d102      	bne.n	8002fec <HAL_RCC_ClockConfig+0x128>
 8002fe6:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	e00f      	b.n	800300c <HAL_RCC_ClockConfig+0x148>
 8002fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8003000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003008:	4b46      	ldr	r3, [pc, #280]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003010:	63ba      	str	r2, [r7, #56]	; 0x38
 8003012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003014:	fa92 f2a2 	rbit	r2, r2
 8003018:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800301a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800301c:	fab2 f282 	clz	r2, r2
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f002 021f 	and.w	r2, r2, #31
 800302c:	2101      	movs	r1, #1
 800302e:	fa01 f202 	lsl.w	r2, r1, r2
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d13a      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b2      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
 800303c:	2302      	movs	r3, #2
 800303e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HAL_RCC_ClockConfig+0x1a0>
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e00d      	b.n	8003080 <HAL_RCC_ClockConfig+0x1bc>
 8003064:	2302      	movs	r3, #2
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2202      	movs	r2, #2
 8003082:	61ba      	str	r2, [r7, #24]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	fa92 f2a2 	rbit	r2, r2
 800308a:	617a      	str	r2, [r7, #20]
  return result;
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0220 	orr.w	r2, r2, #32
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e079      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	491a      	ldr	r1, [pc, #104]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7fd fe5c 	bl	8000d7c <HAL_GetTick>
 80030c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fd fe58 	bl	8000d7c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e061      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d214      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	4906      	ldr	r1, [pc, #24]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e040      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
 8003120:	40022000 	.word	0x40022000
 8003124:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	491a      	ldr	r1, [pc, #104]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4912      	ldr	r1, [pc, #72]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003166:	f000 f829 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 800316a:	4601      	mov	r1, r0
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003174:	22f0      	movs	r2, #240	; 0xf0
 8003176:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	fa92 f2a2 	rbit	r2, r2
 800317e:	60fa      	str	r2, [r7, #12]
  return result;
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	fab2 f282 	clz	r2, r2
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	40d3      	lsrs	r3, r2
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x2ec>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	fa21 f303 	lsr.w	r3, r1, r3
 8003192:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <HAL_RCC_ClockConfig+0x2f0>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCC_ClockConfig+0x2f4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fdaa 	bl	8000cf4 <HAL_InitTick>
  
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3778      	adds	r7, #120	; 0x78
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	08005f0c 	.word	0x08005f0c
 80031b4:	20000204 	.word	0x20000204
 80031b8:	20000208 	.word	0x20000208

080031bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b08b      	sub	sp, #44	; 0x2c
 80031c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d002      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x30>
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ea:	e03c      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ee:	623b      	str	r3, [r7, #32]
      break;
 80031f0:	e03c      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	fa92 f2a2 	rbit	r2, r2
 8003204:	607a      	str	r2, [r7, #4]
  return result;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	40d3      	lsrs	r3, r2
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003216:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	220f      	movs	r2, #15
 8003220:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	fa92 f2a2 	rbit	r2, r2
 8003228:	60fa      	str	r2, [r7, #12]
  return result;
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	fab2 f282 	clz	r2, r2
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	40d3      	lsrs	r3, r2
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003236:	5cd3      	ldrb	r3, [r2, r3]
 8003238:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	fbb2 f2f3 	udiv	r2, r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
 8003254:	e004      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	4a0c      	ldr	r2, [pc, #48]	; (800328c <HAL_RCC_GetSysClockFreq+0xd0>)
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	623b      	str	r3, [r7, #32]
      break;
 8003264:	e002      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003268:	623b      	str	r3, [r7, #32]
      break;
 800326a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326c:	6a3b      	ldr	r3, [r7, #32]
}
 800326e:	4618      	mov	r0, r3
 8003270:	372c      	adds	r7, #44	; 0x2c
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	007a1200 	.word	0x007a1200
 8003284:	08005f24 	.word	0x08005f24
 8003288:	08005f34 	.word	0x08005f34
 800328c:	003d0900 	.word	0x003d0900

08003290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000204 	.word	0x20000204

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032ae:	f7ff ffef 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	fa92 f2a2 	rbit	r2, r2
 80032c8:	603a      	str	r2, [r7, #0]
  return result;
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	fab2 f282 	clz	r2, r2
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	40d3      	lsrs	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	08005f1c 	.word	0x08005f1c

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032f2:	f7ff ffcd 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032f6:	4601      	mov	r1, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003300:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003304:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	fa92 f2a2 	rbit	r2, r2
 800330c:	603a      	str	r2, [r7, #0]
  return result;
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	40d3      	lsrs	r3, r2
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <HAL_RCC_GetPCLK2Freq+0x40>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	08005f1c 	.word	0x08005f1c

08003330 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b092      	sub	sp, #72	; 0x48
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80d4 	beq.w	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003354:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10e      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4a4a      	ldr	r2, [pc, #296]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	61d3      	str	r3, [r2, #28]
 800336c:	4b48      	ldr	r3, [pc, #288]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b45      	ldr	r3, [pc, #276]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338a:	4b42      	ldr	r3, [pc, #264]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a41      	ldr	r2, [pc, #260]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fd fcf1 	bl	8000d7c <HAL_GetTick>
 800339a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	e008      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339e:	f7fd fced 	bl	8000d7c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e14b      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	4b38      	ldr	r3, [pc, #224]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033bc:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8084 	beq.w	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d8:	429a      	cmp	r2, r3
 80033da:	d07c      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033dc:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	461a      	mov	r2, r3
 8003406:	2301      	movs	r3, #1
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	461a      	mov	r2, r3
 800342a:	2300      	movs	r3, #0
 800342c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d04b      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fd fc9d 	bl	8000d7c <HAL_GetTick>
 8003442:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fd fc99 	bl	8000d7c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0f5      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800345c:	2302      	movs	r3, #2
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
 8003468:	2302      	movs	r3, #2
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	61fb      	str	r3, [r7, #28]
  return result;
 8003474:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d108      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800348a:	4b01      	ldr	r3, [pc, #4]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	e00d      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	10908100 	.word	0x10908100
 800349c:	2302      	movs	r3, #2
 800349e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	4b69      	ldr	r3, [pc, #420]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2202      	movs	r2, #2
 80034ae:	613a      	str	r2, [r7, #16]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	fa92 f2a2 	rbit	r2, r2
 80034b6:	60fa      	str	r2, [r7, #12]
  return result;
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	fab2 f282 	clz	r2, r2
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f002 021f 	and.w	r2, r2, #31
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0b7      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034d6:	4b5e      	ldr	r3, [pc, #376]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	495b      	ldr	r1, [pc, #364]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f0:	4b57      	ldr	r3, [pc, #348]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4a56      	ldr	r2, [pc, #344]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003508:	4b51      	ldr	r3, [pc, #324]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	f023 0203 	bic.w	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	494e      	ldr	r1, [pc, #312]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003516:	4313      	orrs	r3, r2
 8003518:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003526:	4b4a      	ldr	r3, [pc, #296]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f023 0210 	bic.w	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	4947      	ldr	r1, [pc, #284]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003534:	4313      	orrs	r3, r2
 8003536:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003544:	4b42      	ldr	r3, [pc, #264]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	493f      	ldr	r1, [pc, #252]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f023 0220 	bic.w	r2, r3, #32
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	4938      	ldr	r1, [pc, #224]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003570:	4313      	orrs	r3, r2
 8003572:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003580:	4b33      	ldr	r3, [pc, #204]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	4930      	ldr	r1, [pc, #192]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800358e:	4313      	orrs	r3, r2
 8003590:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4929      	ldr	r1, [pc, #164]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	4921      	ldr	r1, [pc, #132]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035da:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	491a      	ldr	r1, [pc, #104]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035f8:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	4912      	ldr	r1, [pc, #72]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003606:	4313      	orrs	r3, r2
 8003608:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	490b      	ldr	r1, [pc, #44]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003624:	4313      	orrs	r3, r2
 8003626:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003642:	4313      	orrs	r3, r2
 8003644:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3748      	adds	r7, #72	; 0x48
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e040      	b.n	80036e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd f9e2 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	; 0x24
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fc00 	bl	8003e98 <UART_SetConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e022      	b.n	80036e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fd2a 	bl	8004104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fdb1 	bl	8004248 <UART_CheckIdleState>
 80036e6:	4603      	mov	r3, r0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003704:	2b20      	cmp	r3, #32
 8003706:	d178      	bne.n	80037fa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_UART_Transmit+0x24>
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e071      	b.n	80037fc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2221      	movs	r2, #33	; 0x21
 8003724:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003726:	f7fd fb29 	bl	8000d7c <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003744:	d108      	bne.n	8003758 <HAL_UART_Transmit+0x68>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e003      	b.n	8003760 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003760:	e030      	b.n	80037c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fe13 	bl	8004398 <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e03c      	b.n	80037fc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003794:	b292      	uxth	r2, r2
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	3302      	adds	r3, #2
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e008      	b.n	80037b2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b292      	uxth	r2, r2
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3301      	adds	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1c8      	bne.n	8003762 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2200      	movs	r2, #0
 80037d8:	2140      	movs	r1, #64	; 0x40
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fddc 	bl	8004398 <UART_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e005      	b.n	80037fc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003818:	2b20      	cmp	r3, #32
 800381a:	d132      	bne.n	8003882 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_UART_Receive_IT+0x24>
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e02b      	b.n	8003884 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d018      	beq.n	8003872 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	613b      	str	r3, [r7, #16]
   return(result);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	69f9      	ldr	r1, [r7, #28]
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	61bb      	str	r3, [r7, #24]
   return(result);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e6      	bne.n	8003840 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	461a      	mov	r2, r3
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fdf5 	bl	8004468 <UART_Start_Receive_IT>
 800387e:	4603      	mov	r3, r0
 8003880:	e000      	b.n	8003884 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003882:	2302      	movs	r3, #2
  }
}
 8003884:	4618      	mov	r0, r3
 8003886:	3728      	adds	r7, #40	; 0x28
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b0ba      	sub	sp, #232	; 0xe8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80038ba:	4013      	ands	r3, r2
 80038bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d115      	bne.n	80038f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00f      	beq.n	80038f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 82ab 	beq.w	8003e40 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
      }
      return;
 80038f2:	e2a5      	b.n	8003e40 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8117 	beq.w	8003b2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800390a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800390e:	4b85      	ldr	r3, [pc, #532]	; (8003b24 <HAL_UART_IRQHandler+0x298>)
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 810a 	beq.w	8003b2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d011      	beq.n	8003948 <HAL_UART_IRQHandler+0xbc>
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2201      	movs	r2, #1
 8003936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393e:	f043 0201 	orr.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d011      	beq.n	8003978 <HAL_UART_IRQHandler+0xec>
 8003954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2202      	movs	r2, #2
 8003966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d011      	beq.n	80039a8 <HAL_UART_IRQHandler+0x11c>
 8003984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2204      	movs	r2, #4
 8003996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80039c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00b      	beq.n	80039e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2208      	movs	r2, #8
 80039d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	f043 0208 	orr.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <HAL_UART_IRQHandler+0x18a>
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00c      	beq.n	8003a16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8211 	beq.w	8003e44 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04f      	beq.n	8003b0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fdc0 	bl	80045f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	d141      	bne.n	8003b06 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3308      	adds	r3, #8
 8003a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1d9      	bne.n	8003a82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d013      	beq.n	8003afe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_UART_IRQHandler+0x29c>)
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe f904 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d017      	beq.n	8003b1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003af8:	4610      	mov	r0, r2
 8003afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	e00f      	b.n	8003b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9b4 	bl	8003e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e00b      	b.n	8003b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9b0 	bl	8003e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e007      	b.n	8003b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f9ac 	bl	8003e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003b1c:	e192      	b.n	8003e44 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1e:	bf00      	nop
    return;
 8003b20:	e190      	b.n	8003e44 <HAL_UART_IRQHandler+0x5b8>
 8003b22:	bf00      	nop
 8003b24:	04000120 	.word	0x04000120
 8003b28:	080046bd 	.word	0x080046bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f040 814b 	bne.w	8003dcc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8144 	beq.w	8003dcc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 813d 	beq.w	8003dcc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2210      	movs	r2, #16
 8003b58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	f040 80b5 	bne.w	8003cd4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8164 	beq.w	8003e48 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	f080 815c 	bcs.w	8003e48 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	f000 8086 	beq.w	8003cb2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1da      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e1      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e3      	bne.n	8003c2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c82:	f023 0310 	bic.w	r3, r3, #16
 8003c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c94:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e4      	bne.n	8003c72 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd ffe6 	bl	8001c7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f8d7 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cd2:	e0b9      	b.n	8003e48 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80ab 	beq.w	8003e4c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003cf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80a6 	beq.w	8003e4c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44
 8003d24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e4      	bne.n	8003d00 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	623b      	str	r3, [r7, #32]
   return(result);
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3308      	adds	r3, #8
 8003d56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e3      	bne.n	8003d36 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0310 	bic.w	r3, r3, #16
 8003d96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	617b      	str	r3, [r7, #20]
   return(result);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e4      	bne.n	8003d82 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f85b 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dca:	e03f      	b.n	8003e4c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00e      	beq.n	8003df6 <HAL_UART_IRQHandler+0x56a>
 8003dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fe4c 	bl	8004a8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003df4:	e02d      	b.n	8003e52 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01c      	beq.n	8003e50 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
    }
    return;
 8003e1e:	e017      	b.n	8003e50 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d012      	beq.n	8003e52 <HAL_UART_IRQHandler+0x5c6>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00c      	beq.n	8003e52 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fc55 	bl	80046e8 <UART_EndTransmit_IT>
    return;
 8003e3e:	e008      	b.n	8003e52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e40:	bf00      	nop
 8003e42:	e006      	b.n	8003e52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e44:	bf00      	nop
 8003e46:	e004      	b.n	8003e52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e48:	bf00      	nop
 8003e4a:	e002      	b.n	8003e52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003e4c:	bf00      	nop
 8003e4e:	e000      	b.n	8003e52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003e50:	bf00      	nop
  }

}
 8003e52:	37e8      	adds	r7, #232	; 0xe8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b8a      	ldr	r3, [pc, #552]	; (80040ec <UART_SetConfig+0x254>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a78      	ldr	r2, [pc, #480]	; (80040f0 <UART_SetConfig+0x258>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d120      	bne.n	8003f56 <UART_SetConfig+0xbe>
 8003f14:	4b77      	ldr	r3, [pc, #476]	; (80040f4 <UART_SetConfig+0x25c>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d817      	bhi.n	8003f50 <UART_SetConfig+0xb8>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0x90>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f45 	.word	0x08003f45
 8003f30:	08003f4b 	.word	0x08003f4b
 8003f34:	08003f3f 	.word	0x08003f3f
 8003f38:	2300      	movs	r3, #0
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e01d      	b.n	8003f7a <UART_SetConfig+0xe2>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e01a      	b.n	8003f7a <UART_SetConfig+0xe2>
 8003f44:	2304      	movs	r3, #4
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e017      	b.n	8003f7a <UART_SetConfig+0xe2>
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e014      	b.n	8003f7a <UART_SetConfig+0xe2>
 8003f50:	2310      	movs	r3, #16
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e011      	b.n	8003f7a <UART_SetConfig+0xe2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a67      	ldr	r2, [pc, #412]	; (80040f8 <UART_SetConfig+0x260>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d102      	bne.n	8003f66 <UART_SetConfig+0xce>
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e009      	b.n	8003f7a <UART_SetConfig+0xe2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a64      	ldr	r2, [pc, #400]	; (80040fc <UART_SetConfig+0x264>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d102      	bne.n	8003f76 <UART_SetConfig+0xde>
 8003f70:	2300      	movs	r3, #0
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e001      	b.n	8003f7a <UART_SetConfig+0xe2>
 8003f76:	2310      	movs	r3, #16
 8003f78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f82:	d15a      	bne.n	800403a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d827      	bhi.n	8003fda <UART_SetConfig+0x142>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0xf8>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08003fc5 	.word	0x08003fc5
 8003f9c:	08003fdb 	.word	0x08003fdb
 8003fa0:	08003fcb 	.word	0x08003fcb
 8003fa4:	08003fdb 	.word	0x08003fdb
 8003fa8:	08003fdb 	.word	0x08003fdb
 8003fac:	08003fdb 	.word	0x08003fdb
 8003fb0:	08003fd3 	.word	0x08003fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f7ff f978 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8003fb8:	61b8      	str	r0, [r7, #24]
        break;
 8003fba:	e013      	b.n	8003fe4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7ff f996 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8003fc0:	61b8      	str	r0, [r7, #24]
        break;
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc4:	4b4e      	ldr	r3, [pc, #312]	; (8004100 <UART_SetConfig+0x268>)
 8003fc6:	61bb      	str	r3, [r7, #24]
        break;
 8003fc8:	e00c      	b.n	8003fe4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fca:	f7ff f8f7 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8003fce:	61b8      	str	r0, [r7, #24]
        break;
 8003fd0:	e008      	b.n	8003fe4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd6:	61bb      	str	r3, [r7, #24]
        break;
 8003fd8:	e004      	b.n	8003fe4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	77bb      	strb	r3, [r7, #30]
        break;
 8003fe2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d074      	beq.n	80040d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	005a      	lsls	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	441a      	add	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	d916      	bls.n	8004034 <UART_SetConfig+0x19c>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d212      	bcs.n	8004034 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f023 030f 	bic.w	r3, r3, #15
 8004016:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	b29a      	uxth	r2, r3
 8004024:	89fb      	ldrh	r3, [r7, #14]
 8004026:	4313      	orrs	r3, r2
 8004028:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	89fa      	ldrh	r2, [r7, #14]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	e04f      	b.n	80040d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	77bb      	strb	r3, [r7, #30]
 8004038:	e04c      	b.n	80040d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d828      	bhi.n	8004092 <UART_SetConfig+0x1fa>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <UART_SetConfig+0x1b0>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800406d 	.word	0x0800406d
 800404c:	08004075 	.word	0x08004075
 8004050:	0800407d 	.word	0x0800407d
 8004054:	08004093 	.word	0x08004093
 8004058:	08004083 	.word	0x08004083
 800405c:	08004093 	.word	0x08004093
 8004060:	08004093 	.word	0x08004093
 8004064:	08004093 	.word	0x08004093
 8004068:	0800408b 	.word	0x0800408b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800406c:	f7ff f91c 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004070:	61b8      	str	r0, [r7, #24]
        break;
 8004072:	e013      	b.n	800409c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004074:	f7ff f93a 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8004078:	61b8      	str	r0, [r7, #24]
        break;
 800407a:	e00f      	b.n	800409c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800407c:	4b20      	ldr	r3, [pc, #128]	; (8004100 <UART_SetConfig+0x268>)
 800407e:	61bb      	str	r3, [r7, #24]
        break;
 8004080:	e00c      	b.n	800409c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004082:	f7ff f89b 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8004086:	61b8      	str	r0, [r7, #24]
        break;
 8004088:	e008      	b.n	800409c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408e:	61bb      	str	r3, [r7, #24]
        break;
 8004090:	e004      	b.n	800409c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	77bb      	strb	r3, [r7, #30]
        break;
 800409a:	bf00      	nop
    }

    if (pclk != 0U)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	085a      	lsrs	r2, r3, #1
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	441a      	add	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b0f      	cmp	r3, #15
 80040ba:	d909      	bls.n	80040d0 <UART_SetConfig+0x238>
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c2:	d205      	bcs.n	80040d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60da      	str	r2, [r3, #12]
 80040ce:	e001      	b.n	80040d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	efff69f3 	.word	0xefff69f3
 80040f0:	40013800 	.word	0x40013800
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40004400 	.word	0x40004400
 80040fc:	40004800 	.word	0x40004800
 8004100:	007a1200 	.word	0x007a1200

08004104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01a      	beq.n	800421a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004202:	d10a      	bne.n	800421a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b098      	sub	sp, #96	; 0x60
 800424c:	af02      	add	r7, sp, #8
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004258:	f7fc fd90 	bl	8000d7c <HAL_GetTick>
 800425c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d12e      	bne.n	80042ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800426c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004274:	2200      	movs	r2, #0
 8004276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f88c 	bl	8004398 <UART_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d021      	beq.n	80042ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429a:	653b      	str	r3, [r7, #80]	; 0x50
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e062      	b.n	8004390 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d149      	bne.n	800436c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f856 	bl	8004398 <UART_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d03c      	beq.n	800436c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
 8004312:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	60fb      	str	r3, [r7, #12]
   return(result);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0301 	bic.w	r3, r3, #1
 800433a:	64bb      	str	r3, [r7, #72]	; 0x48
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004344:	61fa      	str	r2, [r7, #28]
 8004346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	69b9      	ldr	r1, [r7, #24]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	617b      	str	r3, [r7, #20]
   return(result);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e011      	b.n	8004390 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3758      	adds	r7, #88	; 0x58
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a8:	e049      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d045      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b2:	f7fc fce3 	bl	8000d7c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e048      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d031      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d110      	bne.n	800440a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2208      	movs	r2, #8
 80043ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f8ff 	bl	80045f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2208      	movs	r2, #8
 80043fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e029      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004418:	d111      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f8e5 	bl	80045f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e00f      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	429a      	cmp	r2, r3
 800445a:	d0a6      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004468:	b480      	push	{r7}
 800446a:	b097      	sub	sp, #92	; 0x5c
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449a:	d10e      	bne.n	80044ba <UART_Start_Receive_IT+0x52>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <UART_Start_Receive_IT+0x48>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ae:	e02d      	b.n	800450c <UART_Start_Receive_IT+0xa4>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044b8:	e028      	b.n	800450c <UART_Start_Receive_IT+0xa4>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <UART_Start_Receive_IT+0x76>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d104      	bne.n	80044d4 <UART_Start_Receive_IT+0x6c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d2:	e01b      	b.n	800450c <UART_Start_Receive_IT+0xa4>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	227f      	movs	r2, #127	; 0x7f
 80044d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044dc:	e016      	b.n	800450c <UART_Start_Receive_IT+0xa4>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e6:	d10d      	bne.n	8004504 <UART_Start_Receive_IT+0x9c>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <UART_Start_Receive_IT+0x92>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	227f      	movs	r2, #127	; 0x7f
 80044f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f8:	e008      	b.n	800450c <UART_Start_Receive_IT+0xa4>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	223f      	movs	r2, #63	; 0x3f
 80044fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004502:	e003      	b.n	800450c <UART_Start_Receive_IT+0xa4>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2222      	movs	r2, #34	; 0x22
 8004518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3308      	adds	r3, #8
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	657b      	str	r3, [r7, #84]	; 0x54
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800453c:	64ba      	str	r2, [r7, #72]	; 0x48
 800453e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800454a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e5      	bne.n	800451c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004558:	d107      	bne.n	800456a <UART_Start_Receive_IT+0x102>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a21      	ldr	r2, [pc, #132]	; (80045ec <UART_Start_Receive_IT+0x184>)
 8004566:	669a      	str	r2, [r3, #104]	; 0x68
 8004568:	e002      	b.n	8004570 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a20      	ldr	r2, [pc, #128]	; (80045f0 <UART_Start_Receive_IT+0x188>)
 800456e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d019      	beq.n	80045ac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800458c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
 8004598:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800459c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e6      	bne.n	8004578 <UART_Start_Receive_IT+0x110>
 80045aa:	e018      	b.n	80045de <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f043 0320 	orr.w	r3, r3, #32
 80045c0:	653b      	str	r3, [r7, #80]	; 0x50
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ca:	623b      	str	r3, [r7, #32]
 80045cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e6      	bne.n	80045ac <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	375c      	adds	r7, #92	; 0x5c
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	080048e5 	.word	0x080048e5
 80045f0:	0800473d 	.word	0x0800473d

080045f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b095      	sub	sp, #84	; 0x54
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
 800461c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e6      	bne.n	80045fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	61fb      	str	r3, [r7, #28]
   return(result);
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3308      	adds	r3, #8
 800464c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800464e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e5      	bne.n	800462e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004666:	2b01      	cmp	r3, #1
 8004668:	d118      	bne.n	800469c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	60bb      	str	r3, [r7, #8]
   return(result);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f023 0310 	bic.w	r3, r3, #16
 800467e:	647b      	str	r3, [r7, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6979      	ldr	r1, [r7, #20]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	613b      	str	r3, [r7, #16]
   return(result);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046b0:	bf00      	nop
 80046b2:	3754      	adds	r7, #84	; 0x54
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fbc6 	bl	8003e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6979      	ldr	r1, [r7, #20]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	613b      	str	r3, [r7, #16]
   return(result);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e6      	bne.n	80046f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fb92 	bl	8003e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004734:	bf00      	nop
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b09c      	sub	sp, #112	; 0x70
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800474a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004754:	2b22      	cmp	r3, #34	; 0x22
 8004756:	f040 80b9 	bne.w	80048cc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004760:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004764:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004768:	b2d9      	uxtb	r1, r3
 800476a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800476e:	b2da      	uxtb	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	400a      	ands	r2, r1
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 809c 	bne.w	80048dc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e6      	bne.n	80047a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	667b      	str	r3, [r7, #100]	; 0x64
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047f6:	647a      	str	r2, [r7, #68]	; 0x44
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e5      	bne.n	80047d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d018      	beq.n	800485e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	623b      	str	r3, [r7, #32]
   return(result);
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004840:	663b      	str	r3, [r7, #96]	; 0x60
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484a:	633b      	str	r3, [r7, #48]	; 0x30
 800484c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e6      	bne.n	800482c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	2b01      	cmp	r3, #1
 8004864:	d12e      	bne.n	80048c4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	60fb      	str	r3, [r7, #12]
   return(result);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f023 0310 	bic.w	r3, r3, #16
 8004880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	69b9      	ldr	r1, [r7, #24]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	617b      	str	r3, [r7, #20]
   return(result);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e6      	bne.n	800486c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d103      	bne.n	80048b4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2210      	movs	r2, #16
 80048b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fadf 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048c2:	e00b      	b.n	80048dc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fb fe57 	bl	8000578 <HAL_UART_RxCpltCallback>
}
 80048ca:	e007      	b.n	80048dc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0208 	orr.w	r2, r2, #8
 80048da:	619a      	str	r2, [r3, #24]
}
 80048dc:	bf00      	nop
 80048de:	3770      	adds	r7, #112	; 0x70
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b09c      	sub	sp, #112	; 0x70
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fc:	2b22      	cmp	r3, #34	; 0x22
 80048fe:	f040 80b9 	bne.w	8004a74 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004908:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004912:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004916:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800491a:	4013      	ands	r3, r2
 800491c:	b29a      	uxth	r2, r3
 800491e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004920:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	1c9a      	adds	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 809c 	bne.w	8004a84 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800495a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004960:	667b      	str	r3, [r7, #100]	; 0x64
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800496a:	657b      	str	r3, [r7, #84]	; 0x54
 800496c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e6      	bne.n	800494c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	663b      	str	r3, [r7, #96]	; 0x60
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800499e:	643a      	str	r2, [r7, #64]	; 0x40
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d018      	beq.n	8004a06 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e6      	bne.n	80049d4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d12e      	bne.n	8004a6c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f023 0310 	bic.w	r3, r3, #16
 8004a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e6      	bne.n	8004a14 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d103      	bne.n	8004a5c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2210      	movs	r2, #16
 8004a5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fa0b 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a6a:	e00b      	b.n	8004a84 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7fb fd83 	bl	8000578 <HAL_UART_RxCpltCallback>
}
 8004a72:	e007      	b.n	8004a84 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0208 	orr.w	r2, r2, #8
 8004a82:	619a      	str	r2, [r3, #24]
}
 8004a84:	bf00      	nop
 8004a86:	3770      	adds	r7, #112	; 0x70
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <atoi>:
 8004aa0:	220a      	movs	r2, #10
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	f000 bce8 	b.w	8005478 <strtol>

08004aa8 <__errno>:
 8004aa8:	4b01      	ldr	r3, [pc, #4]	; (8004ab0 <__errno+0x8>)
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20000210 	.word	0x20000210

08004ab4 <__sflush_r>:
 8004ab4:	898a      	ldrh	r2, [r1, #12]
 8004ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	4605      	mov	r5, r0
 8004abc:	0710      	lsls	r0, r2, #28
 8004abe:	460c      	mov	r4, r1
 8004ac0:	d458      	bmi.n	8004b74 <__sflush_r+0xc0>
 8004ac2:	684b      	ldr	r3, [r1, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	dc05      	bgt.n	8004ad4 <__sflush_r+0x20>
 8004ac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dc02      	bgt.n	8004ad4 <__sflush_r+0x20>
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad6:	2e00      	cmp	r6, #0
 8004ad8:	d0f9      	beq.n	8004ace <__sflush_r+0x1a>
 8004ada:	2300      	movs	r3, #0
 8004adc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ae0:	682f      	ldr	r7, [r5, #0]
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	d032      	beq.n	8004b4c <__sflush_r+0x98>
 8004ae6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	075a      	lsls	r2, r3, #29
 8004aec:	d505      	bpl.n	8004afa <__sflush_r+0x46>
 8004aee:	6863      	ldr	r3, [r4, #4]
 8004af0:	1ac0      	subs	r0, r0, r3
 8004af2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af4:	b10b      	cbz	r3, 8004afa <__sflush_r+0x46>
 8004af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af8:	1ac0      	subs	r0, r0, r3
 8004afa:	2300      	movs	r3, #0
 8004afc:	4602      	mov	r2, r0
 8004afe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b00:	6a21      	ldr	r1, [r4, #32]
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b0      	blx	r6
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	d106      	bne.n	8004b1a <__sflush_r+0x66>
 8004b0c:	6829      	ldr	r1, [r5, #0]
 8004b0e:	291d      	cmp	r1, #29
 8004b10:	d82c      	bhi.n	8004b6c <__sflush_r+0xb8>
 8004b12:	4a2a      	ldr	r2, [pc, #168]	; (8004bbc <__sflush_r+0x108>)
 8004b14:	40ca      	lsrs	r2, r1
 8004b16:	07d6      	lsls	r6, r2, #31
 8004b18:	d528      	bpl.n	8004b6c <__sflush_r+0xb8>
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	6062      	str	r2, [r4, #4]
 8004b1e:	04d9      	lsls	r1, r3, #19
 8004b20:	6922      	ldr	r2, [r4, #16]
 8004b22:	6022      	str	r2, [r4, #0]
 8004b24:	d504      	bpl.n	8004b30 <__sflush_r+0x7c>
 8004b26:	1c42      	adds	r2, r0, #1
 8004b28:	d101      	bne.n	8004b2e <__sflush_r+0x7a>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	b903      	cbnz	r3, 8004b30 <__sflush_r+0x7c>
 8004b2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b32:	602f      	str	r7, [r5, #0]
 8004b34:	2900      	cmp	r1, #0
 8004b36:	d0ca      	beq.n	8004ace <__sflush_r+0x1a>
 8004b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	d002      	beq.n	8004b46 <__sflush_r+0x92>
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 f9b1 	bl	8004ea8 <_free_r>
 8004b46:	2000      	movs	r0, #0
 8004b48:	6360      	str	r0, [r4, #52]	; 0x34
 8004b4a:	e7c1      	b.n	8004ad0 <__sflush_r+0x1c>
 8004b4c:	6a21      	ldr	r1, [r4, #32]
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b0      	blx	r6
 8004b54:	1c41      	adds	r1, r0, #1
 8004b56:	d1c7      	bne.n	8004ae8 <__sflush_r+0x34>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0c4      	beq.n	8004ae8 <__sflush_r+0x34>
 8004b5e:	2b1d      	cmp	r3, #29
 8004b60:	d001      	beq.n	8004b66 <__sflush_r+0xb2>
 8004b62:	2b16      	cmp	r3, #22
 8004b64:	d101      	bne.n	8004b6a <__sflush_r+0xb6>
 8004b66:	602f      	str	r7, [r5, #0]
 8004b68:	e7b1      	b.n	8004ace <__sflush_r+0x1a>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	e7ad      	b.n	8004ad0 <__sflush_r+0x1c>
 8004b74:	690f      	ldr	r7, [r1, #16]
 8004b76:	2f00      	cmp	r7, #0
 8004b78:	d0a9      	beq.n	8004ace <__sflush_r+0x1a>
 8004b7a:	0793      	lsls	r3, r2, #30
 8004b7c:	680e      	ldr	r6, [r1, #0]
 8004b7e:	bf08      	it	eq
 8004b80:	694b      	ldreq	r3, [r1, #20]
 8004b82:	600f      	str	r7, [r1, #0]
 8004b84:	bf18      	it	ne
 8004b86:	2300      	movne	r3, #0
 8004b88:	eba6 0807 	sub.w	r8, r6, r7
 8004b8c:	608b      	str	r3, [r1, #8]
 8004b8e:	f1b8 0f00 	cmp.w	r8, #0
 8004b92:	dd9c      	ble.n	8004ace <__sflush_r+0x1a>
 8004b94:	6a21      	ldr	r1, [r4, #32]
 8004b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b98:	4643      	mov	r3, r8
 8004b9a:	463a      	mov	r2, r7
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	47b0      	blx	r6
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	dc06      	bgt.n	8004bb2 <__sflush_r+0xfe>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e78e      	b.n	8004ad0 <__sflush_r+0x1c>
 8004bb2:	4407      	add	r7, r0
 8004bb4:	eba8 0800 	sub.w	r8, r8, r0
 8004bb8:	e7e9      	b.n	8004b8e <__sflush_r+0xda>
 8004bba:	bf00      	nop
 8004bbc:	20400001 	.word	0x20400001

08004bc0 <_fflush_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	690b      	ldr	r3, [r1, #16]
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_fflush_r+0x10>
 8004bca:	2500      	movs	r5, #0
 8004bcc:	4628      	mov	r0, r5
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	b118      	cbz	r0, 8004bda <_fflush_r+0x1a>
 8004bd2:	6983      	ldr	r3, [r0, #24]
 8004bd4:	b90b      	cbnz	r3, 8004bda <_fflush_r+0x1a>
 8004bd6:	f000 f899 	bl	8004d0c <__sinit>
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <_fflush_r+0x6c>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	d11b      	bne.n	8004c18 <_fflush_r+0x58>
 8004be0:	686c      	ldr	r4, [r5, #4]
 8004be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ef      	beq.n	8004bca <_fflush_r+0xa>
 8004bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bec:	07d0      	lsls	r0, r2, #31
 8004bee:	d404      	bmi.n	8004bfa <_fflush_r+0x3a>
 8004bf0:	0599      	lsls	r1, r3, #22
 8004bf2:	d402      	bmi.n	8004bfa <_fflush_r+0x3a>
 8004bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf6:	f000 f94c 	bl	8004e92 <__retarget_lock_acquire_recursive>
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f7ff ff59 	bl	8004ab4 <__sflush_r>
 8004c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c04:	07da      	lsls	r2, r3, #31
 8004c06:	4605      	mov	r5, r0
 8004c08:	d4e0      	bmi.n	8004bcc <_fflush_r+0xc>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	059b      	lsls	r3, r3, #22
 8004c0e:	d4dd      	bmi.n	8004bcc <_fflush_r+0xc>
 8004c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c12:	f000 f93f 	bl	8004e94 <__retarget_lock_release_recursive>
 8004c16:	e7d9      	b.n	8004bcc <_fflush_r+0xc>
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <_fflush_r+0x70>)
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	d101      	bne.n	8004c22 <_fflush_r+0x62>
 8004c1e:	68ac      	ldr	r4, [r5, #8]
 8004c20:	e7df      	b.n	8004be2 <_fflush_r+0x22>
 8004c22:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <_fflush_r+0x74>)
 8004c24:	429c      	cmp	r4, r3
 8004c26:	bf08      	it	eq
 8004c28:	68ec      	ldreq	r4, [r5, #12]
 8004c2a:	e7da      	b.n	8004be2 <_fflush_r+0x22>
 8004c2c:	08005f64 	.word	0x08005f64
 8004c30:	08005f84 	.word	0x08005f84
 8004c34:	08005f44 	.word	0x08005f44

08004c38 <fflush>:
 8004c38:	4601      	mov	r1, r0
 8004c3a:	b920      	cbnz	r0, 8004c46 <fflush+0xe>
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <fflush+0x18>)
 8004c3e:	4905      	ldr	r1, [pc, #20]	; (8004c54 <fflush+0x1c>)
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	f000 b8e1 	b.w	8004e08 <_fwalk_reent>
 8004c46:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <fflush+0x20>)
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	f7ff bfb9 	b.w	8004bc0 <_fflush_r>
 8004c4e:	bf00      	nop
 8004c50:	08005fa4 	.word	0x08005fa4
 8004c54:	08004bc1 	.word	0x08004bc1
 8004c58:	20000210 	.word	0x20000210

08004c5c <std>:
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	4604      	mov	r4, r0
 8004c62:	e9c0 3300 	strd	r3, r3, [r0]
 8004c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c6a:	6083      	str	r3, [r0, #8]
 8004c6c:	8181      	strh	r1, [r0, #12]
 8004c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c70:	81c2      	strh	r2, [r0, #14]
 8004c72:	6183      	str	r3, [r0, #24]
 8004c74:	4619      	mov	r1, r3
 8004c76:	2208      	movs	r2, #8
 8004c78:	305c      	adds	r0, #92	; 0x5c
 8004c7a:	f000 f90c 	bl	8004e96 <memset>
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <std+0x38>)
 8004c80:	6263      	str	r3, [r4, #36]	; 0x24
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <std+0x3c>)
 8004c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <std+0x40>)
 8004c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <std+0x44>)
 8004c8c:	6224      	str	r4, [r4, #32]
 8004c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	bf00      	nop
 8004c94:	080052c5 	.word	0x080052c5
 8004c98:	080052e7 	.word	0x080052e7
 8004c9c:	0800531f 	.word	0x0800531f
 8004ca0:	08005343 	.word	0x08005343

08004ca4 <_cleanup_r>:
 8004ca4:	4901      	ldr	r1, [pc, #4]	; (8004cac <_cleanup_r+0x8>)
 8004ca6:	f000 b8af 	b.w	8004e08 <_fwalk_reent>
 8004caa:	bf00      	nop
 8004cac:	08004bc1 	.word	0x08004bc1

08004cb0 <__sfmoreglue>:
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	1e4a      	subs	r2, r1, #1
 8004cb4:	2568      	movs	r5, #104	; 0x68
 8004cb6:	4355      	muls	r5, r2
 8004cb8:	460e      	mov	r6, r1
 8004cba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cbe:	f000 f943 	bl	8004f48 <_malloc_r>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	b140      	cbz	r0, 8004cd8 <__sfmoreglue+0x28>
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	e9c0 1600 	strd	r1, r6, [r0]
 8004ccc:	300c      	adds	r0, #12
 8004cce:	60a0      	str	r0, [r4, #8]
 8004cd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cd4:	f000 f8df 	bl	8004e96 <memset>
 8004cd8:	4620      	mov	r0, r4
 8004cda:	bd70      	pop	{r4, r5, r6, pc}

08004cdc <__sfp_lock_acquire>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__sfp_lock_acquire+0x8>)
 8004cde:	f000 b8d8 	b.w	8004e92 <__retarget_lock_acquire_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	200003e4 	.word	0x200003e4

08004ce8 <__sfp_lock_release>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	; (8004cf0 <__sfp_lock_release+0x8>)
 8004cea:	f000 b8d3 	b.w	8004e94 <__retarget_lock_release_recursive>
 8004cee:	bf00      	nop
 8004cf0:	200003e4 	.word	0x200003e4

08004cf4 <__sinit_lock_acquire>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	; (8004cfc <__sinit_lock_acquire+0x8>)
 8004cf6:	f000 b8cc 	b.w	8004e92 <__retarget_lock_acquire_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	200003df 	.word	0x200003df

08004d00 <__sinit_lock_release>:
 8004d00:	4801      	ldr	r0, [pc, #4]	; (8004d08 <__sinit_lock_release+0x8>)
 8004d02:	f000 b8c7 	b.w	8004e94 <__retarget_lock_release_recursive>
 8004d06:	bf00      	nop
 8004d08:	200003df 	.word	0x200003df

08004d0c <__sinit>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	f7ff fff0 	bl	8004cf4 <__sinit_lock_acquire>
 8004d14:	69a3      	ldr	r3, [r4, #24]
 8004d16:	b11b      	cbz	r3, 8004d20 <__sinit+0x14>
 8004d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d1c:	f7ff bff0 	b.w	8004d00 <__sinit_lock_release>
 8004d20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d24:	6523      	str	r3, [r4, #80]	; 0x50
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <__sinit+0x68>)
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <__sinit+0x6c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d2e:	42a3      	cmp	r3, r4
 8004d30:	bf04      	itt	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	61a3      	streq	r3, [r4, #24]
 8004d36:	4620      	mov	r0, r4
 8004d38:	f000 f820 	bl	8004d7c <__sfp>
 8004d3c:	6060      	str	r0, [r4, #4]
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f000 f81c 	bl	8004d7c <__sfp>
 8004d44:	60a0      	str	r0, [r4, #8]
 8004d46:	4620      	mov	r0, r4
 8004d48:	f000 f818 	bl	8004d7c <__sfp>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	60e0      	str	r0, [r4, #12]
 8004d50:	2104      	movs	r1, #4
 8004d52:	6860      	ldr	r0, [r4, #4]
 8004d54:	f7ff ff82 	bl	8004c5c <std>
 8004d58:	68a0      	ldr	r0, [r4, #8]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2109      	movs	r1, #9
 8004d5e:	f7ff ff7d 	bl	8004c5c <std>
 8004d62:	68e0      	ldr	r0, [r4, #12]
 8004d64:	2202      	movs	r2, #2
 8004d66:	2112      	movs	r1, #18
 8004d68:	f7ff ff78 	bl	8004c5c <std>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	61a3      	str	r3, [r4, #24]
 8004d70:	e7d2      	b.n	8004d18 <__sinit+0xc>
 8004d72:	bf00      	nop
 8004d74:	08005fa4 	.word	0x08005fa4
 8004d78:	08004ca5 	.word	0x08004ca5

08004d7c <__sfp>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	4607      	mov	r7, r0
 8004d80:	f7ff ffac 	bl	8004cdc <__sfp_lock_acquire>
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <__sfp+0x84>)
 8004d86:	681e      	ldr	r6, [r3, #0]
 8004d88:	69b3      	ldr	r3, [r6, #24]
 8004d8a:	b913      	cbnz	r3, 8004d92 <__sfp+0x16>
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f7ff ffbd 	bl	8004d0c <__sinit>
 8004d92:	3648      	adds	r6, #72	; 0x48
 8004d94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	d503      	bpl.n	8004da4 <__sfp+0x28>
 8004d9c:	6833      	ldr	r3, [r6, #0]
 8004d9e:	b30b      	cbz	r3, 8004de4 <__sfp+0x68>
 8004da0:	6836      	ldr	r6, [r6, #0]
 8004da2:	e7f7      	b.n	8004d94 <__sfp+0x18>
 8004da4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004da8:	b9d5      	cbnz	r5, 8004de0 <__sfp+0x64>
 8004daa:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <__sfp+0x88>)
 8004dac:	60e3      	str	r3, [r4, #12]
 8004dae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004db2:	6665      	str	r5, [r4, #100]	; 0x64
 8004db4:	f000 f86c 	bl	8004e90 <__retarget_lock_init_recursive>
 8004db8:	f7ff ff96 	bl	8004ce8 <__sfp_lock_release>
 8004dbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004dc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004dc4:	6025      	str	r5, [r4, #0]
 8004dc6:	61a5      	str	r5, [r4, #24]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	4629      	mov	r1, r5
 8004dcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004dd0:	f000 f861 	bl	8004e96 <memset>
 8004dd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004dd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ddc:	4620      	mov	r0, r4
 8004dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de0:	3468      	adds	r4, #104	; 0x68
 8004de2:	e7d9      	b.n	8004d98 <__sfp+0x1c>
 8004de4:	2104      	movs	r1, #4
 8004de6:	4638      	mov	r0, r7
 8004de8:	f7ff ff62 	bl	8004cb0 <__sfmoreglue>
 8004dec:	4604      	mov	r4, r0
 8004dee:	6030      	str	r0, [r6, #0]
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d1d5      	bne.n	8004da0 <__sfp+0x24>
 8004df4:	f7ff ff78 	bl	8004ce8 <__sfp_lock_release>
 8004df8:	230c      	movs	r3, #12
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	e7ee      	b.n	8004ddc <__sfp+0x60>
 8004dfe:	bf00      	nop
 8004e00:	08005fa4 	.word	0x08005fa4
 8004e04:	ffff0001 	.word	0xffff0001

08004e08 <_fwalk_reent>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	4688      	mov	r8, r1
 8004e10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e14:	2700      	movs	r7, #0
 8004e16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e1a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e1e:	d505      	bpl.n	8004e2c <_fwalk_reent+0x24>
 8004e20:	6824      	ldr	r4, [r4, #0]
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d1f7      	bne.n	8004e16 <_fwalk_reent+0xe>
 8004e26:	4638      	mov	r0, r7
 8004e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e2c:	89ab      	ldrh	r3, [r5, #12]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d907      	bls.n	8004e42 <_fwalk_reent+0x3a>
 8004e32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e36:	3301      	adds	r3, #1
 8004e38:	d003      	beq.n	8004e42 <_fwalk_reent+0x3a>
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	47c0      	blx	r8
 8004e40:	4307      	orrs	r7, r0
 8004e42:	3568      	adds	r5, #104	; 0x68
 8004e44:	e7e9      	b.n	8004e1a <_fwalk_reent+0x12>
	...

08004e48 <__libc_init_array>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	4d0d      	ldr	r5, [pc, #52]	; (8004e80 <__libc_init_array+0x38>)
 8004e4c:	4c0d      	ldr	r4, [pc, #52]	; (8004e84 <__libc_init_array+0x3c>)
 8004e4e:	1b64      	subs	r4, r4, r5
 8004e50:	10a4      	asrs	r4, r4, #2
 8004e52:	2600      	movs	r6, #0
 8004e54:	42a6      	cmp	r6, r4
 8004e56:	d109      	bne.n	8004e6c <__libc_init_array+0x24>
 8004e58:	4d0b      	ldr	r5, [pc, #44]	; (8004e88 <__libc_init_array+0x40>)
 8004e5a:	4c0c      	ldr	r4, [pc, #48]	; (8004e8c <__libc_init_array+0x44>)
 8004e5c:	f000 ffa4 	bl	8005da8 <_init>
 8004e60:	1b64      	subs	r4, r4, r5
 8004e62:	10a4      	asrs	r4, r4, #2
 8004e64:	2600      	movs	r6, #0
 8004e66:	42a6      	cmp	r6, r4
 8004e68:	d105      	bne.n	8004e76 <__libc_init_array+0x2e>
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
 8004e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e70:	4798      	blx	r3
 8004e72:	3601      	adds	r6, #1
 8004e74:	e7ee      	b.n	8004e54 <__libc_init_array+0xc>
 8004e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7a:	4798      	blx	r3
 8004e7c:	3601      	adds	r6, #1
 8004e7e:	e7f2      	b.n	8004e66 <__libc_init_array+0x1e>
 8004e80:	080060dc 	.word	0x080060dc
 8004e84:	080060dc 	.word	0x080060dc
 8004e88:	080060dc 	.word	0x080060dc
 8004e8c:	080060e0 	.word	0x080060e0

08004e90 <__retarget_lock_init_recursive>:
 8004e90:	4770      	bx	lr

08004e92 <__retarget_lock_acquire_recursive>:
 8004e92:	4770      	bx	lr

08004e94 <__retarget_lock_release_recursive>:
 8004e94:	4770      	bx	lr

08004e96 <memset>:
 8004e96:	4402      	add	r2, r0
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d100      	bne.n	8004ea0 <memset+0xa>
 8004e9e:	4770      	bx	lr
 8004ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea4:	e7f9      	b.n	8004e9a <memset+0x4>
	...

08004ea8 <_free_r>:
 8004ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eaa:	2900      	cmp	r1, #0
 8004eac:	d048      	beq.n	8004f40 <_free_r+0x98>
 8004eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb2:	9001      	str	r0, [sp, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8004eba:	bfb8      	it	lt
 8004ebc:	18e4      	addlt	r4, r4, r3
 8004ebe:	f000 fc45 	bl	800574c <__malloc_lock>
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <_free_r+0x9c>)
 8004ec4:	9801      	ldr	r0, [sp, #4]
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	4615      	mov	r5, r2
 8004eca:	b933      	cbnz	r3, 8004eda <_free_r+0x32>
 8004ecc:	6063      	str	r3, [r4, #4]
 8004ece:	6014      	str	r4, [r2, #0]
 8004ed0:	b003      	add	sp, #12
 8004ed2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ed6:	f000 bc3f 	b.w	8005758 <__malloc_unlock>
 8004eda:	42a3      	cmp	r3, r4
 8004edc:	d90b      	bls.n	8004ef6 <_free_r+0x4e>
 8004ede:	6821      	ldr	r1, [r4, #0]
 8004ee0:	1862      	adds	r2, r4, r1
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	bf04      	itt	eq
 8004ee6:	681a      	ldreq	r2, [r3, #0]
 8004ee8:	685b      	ldreq	r3, [r3, #4]
 8004eea:	6063      	str	r3, [r4, #4]
 8004eec:	bf04      	itt	eq
 8004eee:	1852      	addeq	r2, r2, r1
 8004ef0:	6022      	streq	r2, [r4, #0]
 8004ef2:	602c      	str	r4, [r5, #0]
 8004ef4:	e7ec      	b.n	8004ed0 <_free_r+0x28>
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b10b      	cbz	r3, 8004f00 <_free_r+0x58>
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	d9fa      	bls.n	8004ef6 <_free_r+0x4e>
 8004f00:	6811      	ldr	r1, [r2, #0]
 8004f02:	1855      	adds	r5, r2, r1
 8004f04:	42a5      	cmp	r5, r4
 8004f06:	d10b      	bne.n	8004f20 <_free_r+0x78>
 8004f08:	6824      	ldr	r4, [r4, #0]
 8004f0a:	4421      	add	r1, r4
 8004f0c:	1854      	adds	r4, r2, r1
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	d1dd      	bne.n	8004ed0 <_free_r+0x28>
 8004f14:	681c      	ldr	r4, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	6053      	str	r3, [r2, #4]
 8004f1a:	4421      	add	r1, r4
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	e7d7      	b.n	8004ed0 <_free_r+0x28>
 8004f20:	d902      	bls.n	8004f28 <_free_r+0x80>
 8004f22:	230c      	movs	r3, #12
 8004f24:	6003      	str	r3, [r0, #0]
 8004f26:	e7d3      	b.n	8004ed0 <_free_r+0x28>
 8004f28:	6825      	ldr	r5, [r4, #0]
 8004f2a:	1961      	adds	r1, r4, r5
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	bf04      	itt	eq
 8004f30:	6819      	ldreq	r1, [r3, #0]
 8004f32:	685b      	ldreq	r3, [r3, #4]
 8004f34:	6063      	str	r3, [r4, #4]
 8004f36:	bf04      	itt	eq
 8004f38:	1949      	addeq	r1, r1, r5
 8004f3a:	6021      	streq	r1, [r4, #0]
 8004f3c:	6054      	str	r4, [r2, #4]
 8004f3e:	e7c7      	b.n	8004ed0 <_free_r+0x28>
 8004f40:	b003      	add	sp, #12
 8004f42:	bd30      	pop	{r4, r5, pc}
 8004f44:	200002a4 	.word	0x200002a4

08004f48 <_malloc_r>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	1ccd      	adds	r5, r1, #3
 8004f4c:	f025 0503 	bic.w	r5, r5, #3
 8004f50:	3508      	adds	r5, #8
 8004f52:	2d0c      	cmp	r5, #12
 8004f54:	bf38      	it	cc
 8004f56:	250c      	movcc	r5, #12
 8004f58:	2d00      	cmp	r5, #0
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	db01      	blt.n	8004f62 <_malloc_r+0x1a>
 8004f5e:	42a9      	cmp	r1, r5
 8004f60:	d903      	bls.n	8004f6a <_malloc_r+0x22>
 8004f62:	230c      	movs	r3, #12
 8004f64:	6033      	str	r3, [r6, #0]
 8004f66:	2000      	movs	r0, #0
 8004f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6a:	f000 fbef 	bl	800574c <__malloc_lock>
 8004f6e:	4921      	ldr	r1, [pc, #132]	; (8004ff4 <_malloc_r+0xac>)
 8004f70:	680a      	ldr	r2, [r1, #0]
 8004f72:	4614      	mov	r4, r2
 8004f74:	b99c      	cbnz	r4, 8004f9e <_malloc_r+0x56>
 8004f76:	4f20      	ldr	r7, [pc, #128]	; (8004ff8 <_malloc_r+0xb0>)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b923      	cbnz	r3, 8004f86 <_malloc_r+0x3e>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f000 f8ca 	bl	8005118 <_sbrk_r>
 8004f84:	6038      	str	r0, [r7, #0]
 8004f86:	4629      	mov	r1, r5
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f000 f8c5 	bl	8005118 <_sbrk_r>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	d123      	bne.n	8004fda <_malloc_r+0x92>
 8004f92:	230c      	movs	r3, #12
 8004f94:	6033      	str	r3, [r6, #0]
 8004f96:	4630      	mov	r0, r6
 8004f98:	f000 fbde 	bl	8005758 <__malloc_unlock>
 8004f9c:	e7e3      	b.n	8004f66 <_malloc_r+0x1e>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	1b5b      	subs	r3, r3, r5
 8004fa2:	d417      	bmi.n	8004fd4 <_malloc_r+0x8c>
 8004fa4:	2b0b      	cmp	r3, #11
 8004fa6:	d903      	bls.n	8004fb0 <_malloc_r+0x68>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	441c      	add	r4, r3
 8004fac:	6025      	str	r5, [r4, #0]
 8004fae:	e004      	b.n	8004fba <_malloc_r+0x72>
 8004fb0:	6863      	ldr	r3, [r4, #4]
 8004fb2:	42a2      	cmp	r2, r4
 8004fb4:	bf0c      	ite	eq
 8004fb6:	600b      	streq	r3, [r1, #0]
 8004fb8:	6053      	strne	r3, [r2, #4]
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f000 fbcc 	bl	8005758 <__malloc_unlock>
 8004fc0:	f104 000b 	add.w	r0, r4, #11
 8004fc4:	1d23      	adds	r3, r4, #4
 8004fc6:	f020 0007 	bic.w	r0, r0, #7
 8004fca:	1ac2      	subs	r2, r0, r3
 8004fcc:	d0cc      	beq.n	8004f68 <_malloc_r+0x20>
 8004fce:	1a1b      	subs	r3, r3, r0
 8004fd0:	50a3      	str	r3, [r4, r2]
 8004fd2:	e7c9      	b.n	8004f68 <_malloc_r+0x20>
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	6864      	ldr	r4, [r4, #4]
 8004fd8:	e7cc      	b.n	8004f74 <_malloc_r+0x2c>
 8004fda:	1cc4      	adds	r4, r0, #3
 8004fdc:	f024 0403 	bic.w	r4, r4, #3
 8004fe0:	42a0      	cmp	r0, r4
 8004fe2:	d0e3      	beq.n	8004fac <_malloc_r+0x64>
 8004fe4:	1a21      	subs	r1, r4, r0
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f000 f896 	bl	8005118 <_sbrk_r>
 8004fec:	3001      	adds	r0, #1
 8004fee:	d1dd      	bne.n	8004fac <_malloc_r+0x64>
 8004ff0:	e7cf      	b.n	8004f92 <_malloc_r+0x4a>
 8004ff2:	bf00      	nop
 8004ff4:	200002a4 	.word	0x200002a4
 8004ff8:	200002a8 	.word	0x200002a8

08004ffc <iprintf>:
 8004ffc:	b40f      	push	{r0, r1, r2, r3}
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <iprintf+0x2c>)
 8005000:	b513      	push	{r0, r1, r4, lr}
 8005002:	681c      	ldr	r4, [r3, #0]
 8005004:	b124      	cbz	r4, 8005010 <iprintf+0x14>
 8005006:	69a3      	ldr	r3, [r4, #24]
 8005008:	b913      	cbnz	r3, 8005010 <iprintf+0x14>
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff fe7e 	bl	8004d0c <__sinit>
 8005010:	ab05      	add	r3, sp, #20
 8005012:	9a04      	ldr	r2, [sp, #16]
 8005014:	68a1      	ldr	r1, [r4, #8]
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	4620      	mov	r0, r4
 800501a:	f000 fbcd 	bl	80057b8 <_vfiprintf_r>
 800501e:	b002      	add	sp, #8
 8005020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005024:	b004      	add	sp, #16
 8005026:	4770      	bx	lr
 8005028:	20000210 	.word	0x20000210

0800502c <_puts_r>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	460e      	mov	r6, r1
 8005030:	4605      	mov	r5, r0
 8005032:	b118      	cbz	r0, 800503c <_puts_r+0x10>
 8005034:	6983      	ldr	r3, [r0, #24]
 8005036:	b90b      	cbnz	r3, 800503c <_puts_r+0x10>
 8005038:	f7ff fe68 	bl	8004d0c <__sinit>
 800503c:	69ab      	ldr	r3, [r5, #24]
 800503e:	68ac      	ldr	r4, [r5, #8]
 8005040:	b913      	cbnz	r3, 8005048 <_puts_r+0x1c>
 8005042:	4628      	mov	r0, r5
 8005044:	f7ff fe62 	bl	8004d0c <__sinit>
 8005048:	4b2c      	ldr	r3, [pc, #176]	; (80050fc <_puts_r+0xd0>)
 800504a:	429c      	cmp	r4, r3
 800504c:	d120      	bne.n	8005090 <_puts_r+0x64>
 800504e:	686c      	ldr	r4, [r5, #4]
 8005050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005052:	07db      	lsls	r3, r3, #31
 8005054:	d405      	bmi.n	8005062 <_puts_r+0x36>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	0598      	lsls	r0, r3, #22
 800505a:	d402      	bmi.n	8005062 <_puts_r+0x36>
 800505c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800505e:	f7ff ff18 	bl	8004e92 <__retarget_lock_acquire_recursive>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	0719      	lsls	r1, r3, #28
 8005066:	d51d      	bpl.n	80050a4 <_puts_r+0x78>
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	b1db      	cbz	r3, 80050a4 <_puts_r+0x78>
 800506c:	3e01      	subs	r6, #1
 800506e:	68a3      	ldr	r3, [r4, #8]
 8005070:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005074:	3b01      	subs	r3, #1
 8005076:	60a3      	str	r3, [r4, #8]
 8005078:	bb39      	cbnz	r1, 80050ca <_puts_r+0x9e>
 800507a:	2b00      	cmp	r3, #0
 800507c:	da38      	bge.n	80050f0 <_puts_r+0xc4>
 800507e:	4622      	mov	r2, r4
 8005080:	210a      	movs	r1, #10
 8005082:	4628      	mov	r0, r5
 8005084:	f000 fa02 	bl	800548c <__swbuf_r>
 8005088:	3001      	adds	r0, #1
 800508a:	d011      	beq.n	80050b0 <_puts_r+0x84>
 800508c:	250a      	movs	r5, #10
 800508e:	e011      	b.n	80050b4 <_puts_r+0x88>
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <_puts_r+0xd4>)
 8005092:	429c      	cmp	r4, r3
 8005094:	d101      	bne.n	800509a <_puts_r+0x6e>
 8005096:	68ac      	ldr	r4, [r5, #8]
 8005098:	e7da      	b.n	8005050 <_puts_r+0x24>
 800509a:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <_puts_r+0xd8>)
 800509c:	429c      	cmp	r4, r3
 800509e:	bf08      	it	eq
 80050a0:	68ec      	ldreq	r4, [r5, #12]
 80050a2:	e7d5      	b.n	8005050 <_puts_r+0x24>
 80050a4:	4621      	mov	r1, r4
 80050a6:	4628      	mov	r0, r5
 80050a8:	f000 fa54 	bl	8005554 <__swsetup_r>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d0dd      	beq.n	800506c <_puts_r+0x40>
 80050b0:	f04f 35ff 	mov.w	r5, #4294967295
 80050b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050b6:	07da      	lsls	r2, r3, #31
 80050b8:	d405      	bmi.n	80050c6 <_puts_r+0x9a>
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	059b      	lsls	r3, r3, #22
 80050be:	d402      	bmi.n	80050c6 <_puts_r+0x9a>
 80050c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050c2:	f7ff fee7 	bl	8004e94 <__retarget_lock_release_recursive>
 80050c6:	4628      	mov	r0, r5
 80050c8:	bd70      	pop	{r4, r5, r6, pc}
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da04      	bge.n	80050d8 <_puts_r+0xac>
 80050ce:	69a2      	ldr	r2, [r4, #24]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	dc06      	bgt.n	80050e2 <_puts_r+0xb6>
 80050d4:	290a      	cmp	r1, #10
 80050d6:	d004      	beq.n	80050e2 <_puts_r+0xb6>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	6022      	str	r2, [r4, #0]
 80050de:	7019      	strb	r1, [r3, #0]
 80050e0:	e7c5      	b.n	800506e <_puts_r+0x42>
 80050e2:	4622      	mov	r2, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f9d1 	bl	800548c <__swbuf_r>
 80050ea:	3001      	adds	r0, #1
 80050ec:	d1bf      	bne.n	800506e <_puts_r+0x42>
 80050ee:	e7df      	b.n	80050b0 <_puts_r+0x84>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	250a      	movs	r5, #10
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	6022      	str	r2, [r4, #0]
 80050f8:	701d      	strb	r5, [r3, #0]
 80050fa:	e7db      	b.n	80050b4 <_puts_r+0x88>
 80050fc:	08005f64 	.word	0x08005f64
 8005100:	08005f84 	.word	0x08005f84
 8005104:	08005f44 	.word	0x08005f44

08005108 <puts>:
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <puts+0xc>)
 800510a:	4601      	mov	r1, r0
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f7ff bf8d 	b.w	800502c <_puts_r>
 8005112:	bf00      	nop
 8005114:	20000210 	.word	0x20000210

08005118 <_sbrk_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d06      	ldr	r5, [pc, #24]	; (8005134 <_sbrk_r+0x1c>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fb fd5e 	bl	8000be4 <_sbrk>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_sbrk_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_sbrk_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	200003e8 	.word	0x200003e8

08005138 <setvbuf>:
 8005138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800513c:	461d      	mov	r5, r3
 800513e:	4b5d      	ldr	r3, [pc, #372]	; (80052b4 <setvbuf+0x17c>)
 8005140:	681f      	ldr	r7, [r3, #0]
 8005142:	4604      	mov	r4, r0
 8005144:	460e      	mov	r6, r1
 8005146:	4690      	mov	r8, r2
 8005148:	b127      	cbz	r7, 8005154 <setvbuf+0x1c>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	b913      	cbnz	r3, 8005154 <setvbuf+0x1c>
 800514e:	4638      	mov	r0, r7
 8005150:	f7ff fddc 	bl	8004d0c <__sinit>
 8005154:	4b58      	ldr	r3, [pc, #352]	; (80052b8 <setvbuf+0x180>)
 8005156:	429c      	cmp	r4, r3
 8005158:	d167      	bne.n	800522a <setvbuf+0xf2>
 800515a:	687c      	ldr	r4, [r7, #4]
 800515c:	f1b8 0f02 	cmp.w	r8, #2
 8005160:	d006      	beq.n	8005170 <setvbuf+0x38>
 8005162:	f1b8 0f01 	cmp.w	r8, #1
 8005166:	f200 809f 	bhi.w	80052a8 <setvbuf+0x170>
 800516a:	2d00      	cmp	r5, #0
 800516c:	f2c0 809c 	blt.w	80052a8 <setvbuf+0x170>
 8005170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005172:	07db      	lsls	r3, r3, #31
 8005174:	d405      	bmi.n	8005182 <setvbuf+0x4a>
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	0598      	lsls	r0, r3, #22
 800517a:	d402      	bmi.n	8005182 <setvbuf+0x4a>
 800517c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517e:	f7ff fe88 	bl	8004e92 <__retarget_lock_acquire_recursive>
 8005182:	4621      	mov	r1, r4
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff fd1b 	bl	8004bc0 <_fflush_r>
 800518a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800518c:	b141      	cbz	r1, 80051a0 <setvbuf+0x68>
 800518e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005192:	4299      	cmp	r1, r3
 8005194:	d002      	beq.n	800519c <setvbuf+0x64>
 8005196:	4638      	mov	r0, r7
 8005198:	f7ff fe86 	bl	8004ea8 <_free_r>
 800519c:	2300      	movs	r3, #0
 800519e:	6363      	str	r3, [r4, #52]	; 0x34
 80051a0:	2300      	movs	r3, #0
 80051a2:	61a3      	str	r3, [r4, #24]
 80051a4:	6063      	str	r3, [r4, #4]
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	0619      	lsls	r1, r3, #24
 80051aa:	d503      	bpl.n	80051b4 <setvbuf+0x7c>
 80051ac:	6921      	ldr	r1, [r4, #16]
 80051ae:	4638      	mov	r0, r7
 80051b0:	f7ff fe7a 	bl	8004ea8 <_free_r>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	f1b8 0f02 	cmp.w	r8, #2
 80051c2:	81a3      	strh	r3, [r4, #12]
 80051c4:	d06c      	beq.n	80052a0 <setvbuf+0x168>
 80051c6:	ab01      	add	r3, sp, #4
 80051c8:	466a      	mov	r2, sp
 80051ca:	4621      	mov	r1, r4
 80051cc:	4638      	mov	r0, r7
 80051ce:	f000 fa51 	bl	8005674 <__swhatbuf_r>
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	4318      	orrs	r0, r3
 80051d6:	81a0      	strh	r0, [r4, #12]
 80051d8:	2d00      	cmp	r5, #0
 80051da:	d130      	bne.n	800523e <setvbuf+0x106>
 80051dc:	9d00      	ldr	r5, [sp, #0]
 80051de:	4628      	mov	r0, r5
 80051e0:	f000 faac 	bl	800573c <malloc>
 80051e4:	4606      	mov	r6, r0
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d155      	bne.n	8005296 <setvbuf+0x15e>
 80051ea:	f8dd 9000 	ldr.w	r9, [sp]
 80051ee:	45a9      	cmp	r9, r5
 80051f0:	d14a      	bne.n	8005288 <setvbuf+0x150>
 80051f2:	f04f 35ff 	mov.w	r5, #4294967295
 80051f6:	2200      	movs	r2, #0
 80051f8:	60a2      	str	r2, [r4, #8]
 80051fa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80051fe:	6022      	str	r2, [r4, #0]
 8005200:	6122      	str	r2, [r4, #16]
 8005202:	2201      	movs	r2, #1
 8005204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005208:	6162      	str	r2, [r4, #20]
 800520a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	07d2      	lsls	r2, r2, #31
 8005212:	81a3      	strh	r3, [r4, #12]
 8005214:	d405      	bmi.n	8005222 <setvbuf+0xea>
 8005216:	f413 7f00 	tst.w	r3, #512	; 0x200
 800521a:	d102      	bne.n	8005222 <setvbuf+0xea>
 800521c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800521e:	f7ff fe39 	bl	8004e94 <__retarget_lock_release_recursive>
 8005222:	4628      	mov	r0, r5
 8005224:	b003      	add	sp, #12
 8005226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <setvbuf+0x184>)
 800522c:	429c      	cmp	r4, r3
 800522e:	d101      	bne.n	8005234 <setvbuf+0xfc>
 8005230:	68bc      	ldr	r4, [r7, #8]
 8005232:	e793      	b.n	800515c <setvbuf+0x24>
 8005234:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <setvbuf+0x188>)
 8005236:	429c      	cmp	r4, r3
 8005238:	bf08      	it	eq
 800523a:	68fc      	ldreq	r4, [r7, #12]
 800523c:	e78e      	b.n	800515c <setvbuf+0x24>
 800523e:	2e00      	cmp	r6, #0
 8005240:	d0cd      	beq.n	80051de <setvbuf+0xa6>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	b913      	cbnz	r3, 800524c <setvbuf+0x114>
 8005246:	4638      	mov	r0, r7
 8005248:	f7ff fd60 	bl	8004d0c <__sinit>
 800524c:	f1b8 0f01 	cmp.w	r8, #1
 8005250:	bf08      	it	eq
 8005252:	89a3      	ldrheq	r3, [r4, #12]
 8005254:	6026      	str	r6, [r4, #0]
 8005256:	bf04      	itt	eq
 8005258:	f043 0301 	orreq.w	r3, r3, #1
 800525c:	81a3      	strheq	r3, [r4, #12]
 800525e:	89a2      	ldrh	r2, [r4, #12]
 8005260:	f012 0308 	ands.w	r3, r2, #8
 8005264:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005268:	d01c      	beq.n	80052a4 <setvbuf+0x16c>
 800526a:	07d3      	lsls	r3, r2, #31
 800526c:	bf41      	itttt	mi
 800526e:	2300      	movmi	r3, #0
 8005270:	426d      	negmi	r5, r5
 8005272:	60a3      	strmi	r3, [r4, #8]
 8005274:	61a5      	strmi	r5, [r4, #24]
 8005276:	bf58      	it	pl
 8005278:	60a5      	strpl	r5, [r4, #8]
 800527a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800527c:	f015 0501 	ands.w	r5, r5, #1
 8005280:	d115      	bne.n	80052ae <setvbuf+0x176>
 8005282:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005286:	e7c8      	b.n	800521a <setvbuf+0xe2>
 8005288:	4648      	mov	r0, r9
 800528a:	f000 fa57 	bl	800573c <malloc>
 800528e:	4606      	mov	r6, r0
 8005290:	2800      	cmp	r0, #0
 8005292:	d0ae      	beq.n	80051f2 <setvbuf+0xba>
 8005294:	464d      	mov	r5, r9
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	e7d0      	b.n	8005242 <setvbuf+0x10a>
 80052a0:	2500      	movs	r5, #0
 80052a2:	e7a8      	b.n	80051f6 <setvbuf+0xbe>
 80052a4:	60a3      	str	r3, [r4, #8]
 80052a6:	e7e8      	b.n	800527a <setvbuf+0x142>
 80052a8:	f04f 35ff 	mov.w	r5, #4294967295
 80052ac:	e7b9      	b.n	8005222 <setvbuf+0xea>
 80052ae:	2500      	movs	r5, #0
 80052b0:	e7b7      	b.n	8005222 <setvbuf+0xea>
 80052b2:	bf00      	nop
 80052b4:	20000210 	.word	0x20000210
 80052b8:	08005f64 	.word	0x08005f64
 80052bc:	08005f84 	.word	0x08005f84
 80052c0:	08005f44 	.word	0x08005f44

080052c4 <__sread>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	460c      	mov	r4, r1
 80052c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052cc:	f000 fd38 	bl	8005d40 <_read_r>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	bfab      	itete	ge
 80052d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052d6:	89a3      	ldrhlt	r3, [r4, #12]
 80052d8:	181b      	addge	r3, r3, r0
 80052da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052de:	bfac      	ite	ge
 80052e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052e2:	81a3      	strhlt	r3, [r4, #12]
 80052e4:	bd10      	pop	{r4, pc}

080052e6 <__swrite>:
 80052e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ea:	461f      	mov	r7, r3
 80052ec:	898b      	ldrh	r3, [r1, #12]
 80052ee:	05db      	lsls	r3, r3, #23
 80052f0:	4605      	mov	r5, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	4616      	mov	r6, r2
 80052f6:	d505      	bpl.n	8005304 <__swrite+0x1e>
 80052f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fc:	2302      	movs	r3, #2
 80052fe:	2200      	movs	r2, #0
 8005300:	f000 f9a6 	bl	8005650 <_lseek_r>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800530e:	81a3      	strh	r3, [r4, #12]
 8005310:	4632      	mov	r2, r6
 8005312:	463b      	mov	r3, r7
 8005314:	4628      	mov	r0, r5
 8005316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531a:	f000 b909 	b.w	8005530 <_write_r>

0800531e <__sseek>:
 800531e:	b510      	push	{r4, lr}
 8005320:	460c      	mov	r4, r1
 8005322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005326:	f000 f993 	bl	8005650 <_lseek_r>
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	89a3      	ldrh	r3, [r4, #12]
 800532e:	bf15      	itete	ne
 8005330:	6560      	strne	r0, [r4, #84]	; 0x54
 8005332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800533a:	81a3      	strheq	r3, [r4, #12]
 800533c:	bf18      	it	ne
 800533e:	81a3      	strhne	r3, [r4, #12]
 8005340:	bd10      	pop	{r4, pc}

08005342 <__sclose>:
 8005342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005346:	f000 b973 	b.w	8005630 <_close_r>

0800534a <strncmp>:
 800534a:	b510      	push	{r4, lr}
 800534c:	b16a      	cbz	r2, 800536a <strncmp+0x20>
 800534e:	3901      	subs	r1, #1
 8005350:	1884      	adds	r4, r0, r2
 8005352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005356:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800535a:	4293      	cmp	r3, r2
 800535c:	d103      	bne.n	8005366 <strncmp+0x1c>
 800535e:	42a0      	cmp	r0, r4
 8005360:	d001      	beq.n	8005366 <strncmp+0x1c>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f5      	bne.n	8005352 <strncmp+0x8>
 8005366:	1a98      	subs	r0, r3, r2
 8005368:	bd10      	pop	{r4, pc}
 800536a:	4610      	mov	r0, r2
 800536c:	e7fc      	b.n	8005368 <strncmp+0x1e>
	...

08005370 <_strtol_l.isra.0>:
 8005370:	2b01      	cmp	r3, #1
 8005372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005376:	d001      	beq.n	800537c <_strtol_l.isra.0+0xc>
 8005378:	2b24      	cmp	r3, #36	; 0x24
 800537a:	d906      	bls.n	800538a <_strtol_l.isra.0+0x1a>
 800537c:	f7ff fb94 	bl	8004aa8 <__errno>
 8005380:	2316      	movs	r3, #22
 8005382:	6003      	str	r3, [r0, #0]
 8005384:	2000      	movs	r0, #0
 8005386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538a:	4f3a      	ldr	r7, [pc, #232]	; (8005474 <_strtol_l.isra.0+0x104>)
 800538c:	468e      	mov	lr, r1
 800538e:	4676      	mov	r6, lr
 8005390:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005394:	5de5      	ldrb	r5, [r4, r7]
 8005396:	f015 0508 	ands.w	r5, r5, #8
 800539a:	d1f8      	bne.n	800538e <_strtol_l.isra.0+0x1e>
 800539c:	2c2d      	cmp	r4, #45	; 0x2d
 800539e:	d134      	bne.n	800540a <_strtol_l.isra.0+0x9a>
 80053a0:	f89e 4000 	ldrb.w	r4, [lr]
 80053a4:	f04f 0801 	mov.w	r8, #1
 80053a8:	f106 0e02 	add.w	lr, r6, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05c      	beq.n	800546a <_strtol_l.isra.0+0xfa>
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d10c      	bne.n	80053ce <_strtol_l.isra.0+0x5e>
 80053b4:	2c30      	cmp	r4, #48	; 0x30
 80053b6:	d10a      	bne.n	80053ce <_strtol_l.isra.0+0x5e>
 80053b8:	f89e 4000 	ldrb.w	r4, [lr]
 80053bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80053c0:	2c58      	cmp	r4, #88	; 0x58
 80053c2:	d14d      	bne.n	8005460 <_strtol_l.isra.0+0xf0>
 80053c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80053c8:	2310      	movs	r3, #16
 80053ca:	f10e 0e02 	add.w	lr, lr, #2
 80053ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80053d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053d6:	2600      	movs	r6, #0
 80053d8:	fbbc f9f3 	udiv	r9, ip, r3
 80053dc:	4635      	mov	r5, r6
 80053de:	fb03 ca19 	mls	sl, r3, r9, ip
 80053e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80053e6:	2f09      	cmp	r7, #9
 80053e8:	d818      	bhi.n	800541c <_strtol_l.isra.0+0xac>
 80053ea:	463c      	mov	r4, r7
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	dd24      	ble.n	800543a <_strtol_l.isra.0+0xca>
 80053f0:	2e00      	cmp	r6, #0
 80053f2:	db1f      	blt.n	8005434 <_strtol_l.isra.0+0xc4>
 80053f4:	45a9      	cmp	r9, r5
 80053f6:	d31d      	bcc.n	8005434 <_strtol_l.isra.0+0xc4>
 80053f8:	d101      	bne.n	80053fe <_strtol_l.isra.0+0x8e>
 80053fa:	45a2      	cmp	sl, r4
 80053fc:	db1a      	blt.n	8005434 <_strtol_l.isra.0+0xc4>
 80053fe:	fb05 4503 	mla	r5, r5, r3, r4
 8005402:	2601      	movs	r6, #1
 8005404:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005408:	e7eb      	b.n	80053e2 <_strtol_l.isra.0+0x72>
 800540a:	2c2b      	cmp	r4, #43	; 0x2b
 800540c:	bf08      	it	eq
 800540e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005412:	46a8      	mov	r8, r5
 8005414:	bf08      	it	eq
 8005416:	f106 0e02 	addeq.w	lr, r6, #2
 800541a:	e7c7      	b.n	80053ac <_strtol_l.isra.0+0x3c>
 800541c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005420:	2f19      	cmp	r7, #25
 8005422:	d801      	bhi.n	8005428 <_strtol_l.isra.0+0xb8>
 8005424:	3c37      	subs	r4, #55	; 0x37
 8005426:	e7e1      	b.n	80053ec <_strtol_l.isra.0+0x7c>
 8005428:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800542c:	2f19      	cmp	r7, #25
 800542e:	d804      	bhi.n	800543a <_strtol_l.isra.0+0xca>
 8005430:	3c57      	subs	r4, #87	; 0x57
 8005432:	e7db      	b.n	80053ec <_strtol_l.isra.0+0x7c>
 8005434:	f04f 36ff 	mov.w	r6, #4294967295
 8005438:	e7e4      	b.n	8005404 <_strtol_l.isra.0+0x94>
 800543a:	2e00      	cmp	r6, #0
 800543c:	da05      	bge.n	800544a <_strtol_l.isra.0+0xda>
 800543e:	2322      	movs	r3, #34	; 0x22
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	4665      	mov	r5, ip
 8005444:	b942      	cbnz	r2, 8005458 <_strtol_l.isra.0+0xe8>
 8005446:	4628      	mov	r0, r5
 8005448:	e79d      	b.n	8005386 <_strtol_l.isra.0+0x16>
 800544a:	f1b8 0f00 	cmp.w	r8, #0
 800544e:	d000      	beq.n	8005452 <_strtol_l.isra.0+0xe2>
 8005450:	426d      	negs	r5, r5
 8005452:	2a00      	cmp	r2, #0
 8005454:	d0f7      	beq.n	8005446 <_strtol_l.isra.0+0xd6>
 8005456:	b10e      	cbz	r6, 800545c <_strtol_l.isra.0+0xec>
 8005458:	f10e 31ff 	add.w	r1, lr, #4294967295
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	e7f2      	b.n	8005446 <_strtol_l.isra.0+0xd6>
 8005460:	2430      	movs	r4, #48	; 0x30
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1b3      	bne.n	80053ce <_strtol_l.isra.0+0x5e>
 8005466:	2308      	movs	r3, #8
 8005468:	e7b1      	b.n	80053ce <_strtol_l.isra.0+0x5e>
 800546a:	2c30      	cmp	r4, #48	; 0x30
 800546c:	d0a4      	beq.n	80053b8 <_strtol_l.isra.0+0x48>
 800546e:	230a      	movs	r3, #10
 8005470:	e7ad      	b.n	80053ce <_strtol_l.isra.0+0x5e>
 8005472:	bf00      	nop
 8005474:	08005fa9 	.word	0x08005fa9

08005478 <strtol>:
 8005478:	4613      	mov	r3, r2
 800547a:	460a      	mov	r2, r1
 800547c:	4601      	mov	r1, r0
 800547e:	4802      	ldr	r0, [pc, #8]	; (8005488 <strtol+0x10>)
 8005480:	6800      	ldr	r0, [r0, #0]
 8005482:	f7ff bf75 	b.w	8005370 <_strtol_l.isra.0>
 8005486:	bf00      	nop
 8005488:	20000210 	.word	0x20000210

0800548c <__swbuf_r>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	460e      	mov	r6, r1
 8005490:	4614      	mov	r4, r2
 8005492:	4605      	mov	r5, r0
 8005494:	b118      	cbz	r0, 800549e <__swbuf_r+0x12>
 8005496:	6983      	ldr	r3, [r0, #24]
 8005498:	b90b      	cbnz	r3, 800549e <__swbuf_r+0x12>
 800549a:	f7ff fc37 	bl	8004d0c <__sinit>
 800549e:	4b21      	ldr	r3, [pc, #132]	; (8005524 <__swbuf_r+0x98>)
 80054a0:	429c      	cmp	r4, r3
 80054a2:	d12b      	bne.n	80054fc <__swbuf_r+0x70>
 80054a4:	686c      	ldr	r4, [r5, #4]
 80054a6:	69a3      	ldr	r3, [r4, #24]
 80054a8:	60a3      	str	r3, [r4, #8]
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	071a      	lsls	r2, r3, #28
 80054ae:	d52f      	bpl.n	8005510 <__swbuf_r+0x84>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	b36b      	cbz	r3, 8005510 <__swbuf_r+0x84>
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	1ac0      	subs	r0, r0, r3
 80054ba:	6963      	ldr	r3, [r4, #20]
 80054bc:	b2f6      	uxtb	r6, r6
 80054be:	4283      	cmp	r3, r0
 80054c0:	4637      	mov	r7, r6
 80054c2:	dc04      	bgt.n	80054ce <__swbuf_r+0x42>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	f7ff fb7a 	bl	8004bc0 <_fflush_r>
 80054cc:	bb30      	cbnz	r0, 800551c <__swbuf_r+0x90>
 80054ce:	68a3      	ldr	r3, [r4, #8]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	60a3      	str	r3, [r4, #8]
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	6022      	str	r2, [r4, #0]
 80054da:	701e      	strb	r6, [r3, #0]
 80054dc:	6963      	ldr	r3, [r4, #20]
 80054de:	3001      	adds	r0, #1
 80054e0:	4283      	cmp	r3, r0
 80054e2:	d004      	beq.n	80054ee <__swbuf_r+0x62>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	07db      	lsls	r3, r3, #31
 80054e8:	d506      	bpl.n	80054f8 <__swbuf_r+0x6c>
 80054ea:	2e0a      	cmp	r6, #10
 80054ec:	d104      	bne.n	80054f8 <__swbuf_r+0x6c>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f7ff fb65 	bl	8004bc0 <_fflush_r>
 80054f6:	b988      	cbnz	r0, 800551c <__swbuf_r+0x90>
 80054f8:	4638      	mov	r0, r7
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <__swbuf_r+0x9c>)
 80054fe:	429c      	cmp	r4, r3
 8005500:	d101      	bne.n	8005506 <__swbuf_r+0x7a>
 8005502:	68ac      	ldr	r4, [r5, #8]
 8005504:	e7cf      	b.n	80054a6 <__swbuf_r+0x1a>
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <__swbuf_r+0xa0>)
 8005508:	429c      	cmp	r4, r3
 800550a:	bf08      	it	eq
 800550c:	68ec      	ldreq	r4, [r5, #12]
 800550e:	e7ca      	b.n	80054a6 <__swbuf_r+0x1a>
 8005510:	4621      	mov	r1, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f81e 	bl	8005554 <__swsetup_r>
 8005518:	2800      	cmp	r0, #0
 800551a:	d0cb      	beq.n	80054b4 <__swbuf_r+0x28>
 800551c:	f04f 37ff 	mov.w	r7, #4294967295
 8005520:	e7ea      	b.n	80054f8 <__swbuf_r+0x6c>
 8005522:	bf00      	nop
 8005524:	08005f64 	.word	0x08005f64
 8005528:	08005f84 	.word	0x08005f84
 800552c:	08005f44 	.word	0x08005f44

08005530 <_write_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d07      	ldr	r5, [pc, #28]	; (8005550 <_write_r+0x20>)
 8005534:	4604      	mov	r4, r0
 8005536:	4608      	mov	r0, r1
 8005538:	4611      	mov	r1, r2
 800553a:	2200      	movs	r2, #0
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fb f804 	bl	800054c <_write>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_write_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_write_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	200003e8 	.word	0x200003e8

08005554 <__swsetup_r>:
 8005554:	4b32      	ldr	r3, [pc, #200]	; (8005620 <__swsetup_r+0xcc>)
 8005556:	b570      	push	{r4, r5, r6, lr}
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	4606      	mov	r6, r0
 800555c:	460c      	mov	r4, r1
 800555e:	b125      	cbz	r5, 800556a <__swsetup_r+0x16>
 8005560:	69ab      	ldr	r3, [r5, #24]
 8005562:	b913      	cbnz	r3, 800556a <__swsetup_r+0x16>
 8005564:	4628      	mov	r0, r5
 8005566:	f7ff fbd1 	bl	8004d0c <__sinit>
 800556a:	4b2e      	ldr	r3, [pc, #184]	; (8005624 <__swsetup_r+0xd0>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d10f      	bne.n	8005590 <__swsetup_r+0x3c>
 8005570:	686c      	ldr	r4, [r5, #4]
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005578:	0719      	lsls	r1, r3, #28
 800557a:	d42c      	bmi.n	80055d6 <__swsetup_r+0x82>
 800557c:	06dd      	lsls	r5, r3, #27
 800557e:	d411      	bmi.n	80055a4 <__swsetup_r+0x50>
 8005580:	2309      	movs	r3, #9
 8005582:	6033      	str	r3, [r6, #0]
 8005584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	f04f 30ff 	mov.w	r0, #4294967295
 800558e:	e03e      	b.n	800560e <__swsetup_r+0xba>
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <__swsetup_r+0xd4>)
 8005592:	429c      	cmp	r4, r3
 8005594:	d101      	bne.n	800559a <__swsetup_r+0x46>
 8005596:	68ac      	ldr	r4, [r5, #8]
 8005598:	e7eb      	b.n	8005572 <__swsetup_r+0x1e>
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <__swsetup_r+0xd8>)
 800559c:	429c      	cmp	r4, r3
 800559e:	bf08      	it	eq
 80055a0:	68ec      	ldreq	r4, [r5, #12]
 80055a2:	e7e6      	b.n	8005572 <__swsetup_r+0x1e>
 80055a4:	0758      	lsls	r0, r3, #29
 80055a6:	d512      	bpl.n	80055ce <__swsetup_r+0x7a>
 80055a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055aa:	b141      	cbz	r1, 80055be <__swsetup_r+0x6a>
 80055ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d002      	beq.n	80055ba <__swsetup_r+0x66>
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff fc77 	bl	8004ea8 <_free_r>
 80055ba:	2300      	movs	r3, #0
 80055bc:	6363      	str	r3, [r4, #52]	; 0x34
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f043 0308 	orr.w	r3, r3, #8
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	b94b      	cbnz	r3, 80055ee <__swsetup_r+0x9a>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d003      	beq.n	80055ee <__swsetup_r+0x9a>
 80055e6:	4621      	mov	r1, r4
 80055e8:	4630      	mov	r0, r6
 80055ea:	f000 f867 	bl	80056bc <__smakebuf_r>
 80055ee:	89a0      	ldrh	r0, [r4, #12]
 80055f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055f4:	f010 0301 	ands.w	r3, r0, #1
 80055f8:	d00a      	beq.n	8005610 <__swsetup_r+0xbc>
 80055fa:	2300      	movs	r3, #0
 80055fc:	60a3      	str	r3, [r4, #8]
 80055fe:	6963      	ldr	r3, [r4, #20]
 8005600:	425b      	negs	r3, r3
 8005602:	61a3      	str	r3, [r4, #24]
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	b943      	cbnz	r3, 800561a <__swsetup_r+0xc6>
 8005608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800560c:	d1ba      	bne.n	8005584 <__swsetup_r+0x30>
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	0781      	lsls	r1, r0, #30
 8005612:	bf58      	it	pl
 8005614:	6963      	ldrpl	r3, [r4, #20]
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	e7f4      	b.n	8005604 <__swsetup_r+0xb0>
 800561a:	2000      	movs	r0, #0
 800561c:	e7f7      	b.n	800560e <__swsetup_r+0xba>
 800561e:	bf00      	nop
 8005620:	20000210 	.word	0x20000210
 8005624:	08005f64 	.word	0x08005f64
 8005628:	08005f84 	.word	0x08005f84
 800562c:	08005f44 	.word	0x08005f44

08005630 <_close_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4d06      	ldr	r5, [pc, #24]	; (800564c <_close_r+0x1c>)
 8005634:	2300      	movs	r3, #0
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	602b      	str	r3, [r5, #0]
 800563c:	f7fb fa9d 	bl	8000b7a <_close>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d102      	bne.n	800564a <_close_r+0x1a>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b103      	cbz	r3, 800564a <_close_r+0x1a>
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	200003e8 	.word	0x200003e8

08005650 <_lseek_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4d07      	ldr	r5, [pc, #28]	; (8005670 <_lseek_r+0x20>)
 8005654:	4604      	mov	r4, r0
 8005656:	4608      	mov	r0, r1
 8005658:	4611      	mov	r1, r2
 800565a:	2200      	movs	r2, #0
 800565c:	602a      	str	r2, [r5, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	f7fb fab2 	bl	8000bc8 <_lseek>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_lseek_r+0x1e>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	b103      	cbz	r3, 800566e <_lseek_r+0x1e>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	200003e8 	.word	0x200003e8

08005674 <__swhatbuf_r>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	460e      	mov	r6, r1
 8005678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567c:	2900      	cmp	r1, #0
 800567e:	b096      	sub	sp, #88	; 0x58
 8005680:	4614      	mov	r4, r2
 8005682:	461d      	mov	r5, r3
 8005684:	da07      	bge.n	8005696 <__swhatbuf_r+0x22>
 8005686:	2300      	movs	r3, #0
 8005688:	602b      	str	r3, [r5, #0]
 800568a:	89b3      	ldrh	r3, [r6, #12]
 800568c:	061a      	lsls	r2, r3, #24
 800568e:	d410      	bmi.n	80056b2 <__swhatbuf_r+0x3e>
 8005690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005694:	e00e      	b.n	80056b4 <__swhatbuf_r+0x40>
 8005696:	466a      	mov	r2, sp
 8005698:	f000 fb64 	bl	8005d64 <_fstat_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	dbf2      	blt.n	8005686 <__swhatbuf_r+0x12>
 80056a0:	9a01      	ldr	r2, [sp, #4]
 80056a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056aa:	425a      	negs	r2, r3
 80056ac:	415a      	adcs	r2, r3
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	e7ee      	b.n	8005690 <__swhatbuf_r+0x1c>
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	2000      	movs	r0, #0
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	b016      	add	sp, #88	; 0x58
 80056ba:	bd70      	pop	{r4, r5, r6, pc}

080056bc <__smakebuf_r>:
 80056bc:	898b      	ldrh	r3, [r1, #12]
 80056be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056c0:	079d      	lsls	r5, r3, #30
 80056c2:	4606      	mov	r6, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	d507      	bpl.n	80056d8 <__smakebuf_r+0x1c>
 80056c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	2301      	movs	r3, #1
 80056d2:	6163      	str	r3, [r4, #20]
 80056d4:	b002      	add	sp, #8
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	ab01      	add	r3, sp, #4
 80056da:	466a      	mov	r2, sp
 80056dc:	f7ff ffca 	bl	8005674 <__swhatbuf_r>
 80056e0:	9900      	ldr	r1, [sp, #0]
 80056e2:	4605      	mov	r5, r0
 80056e4:	4630      	mov	r0, r6
 80056e6:	f7ff fc2f 	bl	8004f48 <_malloc_r>
 80056ea:	b948      	cbnz	r0, 8005700 <__smakebuf_r+0x44>
 80056ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f0:	059a      	lsls	r2, r3, #22
 80056f2:	d4ef      	bmi.n	80056d4 <__smakebuf_r+0x18>
 80056f4:	f023 0303 	bic.w	r3, r3, #3
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	81a3      	strh	r3, [r4, #12]
 80056fe:	e7e3      	b.n	80056c8 <__smakebuf_r+0xc>
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <__smakebuf_r+0x7c>)
 8005702:	62b3      	str	r3, [r6, #40]	; 0x28
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	6020      	str	r0, [r4, #0]
 8005708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	9b00      	ldr	r3, [sp, #0]
 8005710:	6163      	str	r3, [r4, #20]
 8005712:	9b01      	ldr	r3, [sp, #4]
 8005714:	6120      	str	r0, [r4, #16]
 8005716:	b15b      	cbz	r3, 8005730 <__smakebuf_r+0x74>
 8005718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800571c:	4630      	mov	r0, r6
 800571e:	f000 fb33 	bl	8005d88 <_isatty_r>
 8005722:	b128      	cbz	r0, 8005730 <__smakebuf_r+0x74>
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	81a3      	strh	r3, [r4, #12]
 8005730:	89a0      	ldrh	r0, [r4, #12]
 8005732:	4305      	orrs	r5, r0
 8005734:	81a5      	strh	r5, [r4, #12]
 8005736:	e7cd      	b.n	80056d4 <__smakebuf_r+0x18>
 8005738:	08004ca5 	.word	0x08004ca5

0800573c <malloc>:
 800573c:	4b02      	ldr	r3, [pc, #8]	; (8005748 <malloc+0xc>)
 800573e:	4601      	mov	r1, r0
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	f7ff bc01 	b.w	8004f48 <_malloc_r>
 8005746:	bf00      	nop
 8005748:	20000210 	.word	0x20000210

0800574c <__malloc_lock>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__malloc_lock+0x8>)
 800574e:	f7ff bba0 	b.w	8004e92 <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	200003e0 	.word	0x200003e0

08005758 <__malloc_unlock>:
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <__malloc_unlock+0x8>)
 800575a:	f7ff bb9b 	b.w	8004e94 <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	200003e0 	.word	0x200003e0

08005764 <__sfputc_r>:
 8005764:	6893      	ldr	r3, [r2, #8]
 8005766:	3b01      	subs	r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	b410      	push	{r4}
 800576c:	6093      	str	r3, [r2, #8]
 800576e:	da08      	bge.n	8005782 <__sfputc_r+0x1e>
 8005770:	6994      	ldr	r4, [r2, #24]
 8005772:	42a3      	cmp	r3, r4
 8005774:	db01      	blt.n	800577a <__sfputc_r+0x16>
 8005776:	290a      	cmp	r1, #10
 8005778:	d103      	bne.n	8005782 <__sfputc_r+0x1e>
 800577a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800577e:	f7ff be85 	b.w	800548c <__swbuf_r>
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	1c58      	adds	r0, r3, #1
 8005786:	6010      	str	r0, [r2, #0]
 8005788:	7019      	strb	r1, [r3, #0]
 800578a:	4608      	mov	r0, r1
 800578c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005790:	4770      	bx	lr

08005792 <__sfputs_r>:
 8005792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005794:	4606      	mov	r6, r0
 8005796:	460f      	mov	r7, r1
 8005798:	4614      	mov	r4, r2
 800579a:	18d5      	adds	r5, r2, r3
 800579c:	42ac      	cmp	r4, r5
 800579e:	d101      	bne.n	80057a4 <__sfputs_r+0x12>
 80057a0:	2000      	movs	r0, #0
 80057a2:	e007      	b.n	80057b4 <__sfputs_r+0x22>
 80057a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a8:	463a      	mov	r2, r7
 80057aa:	4630      	mov	r0, r6
 80057ac:	f7ff ffda 	bl	8005764 <__sfputc_r>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d1f3      	bne.n	800579c <__sfputs_r+0xa>
 80057b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057b8 <_vfiprintf_r>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	460d      	mov	r5, r1
 80057be:	b09d      	sub	sp, #116	; 0x74
 80057c0:	4614      	mov	r4, r2
 80057c2:	4698      	mov	r8, r3
 80057c4:	4606      	mov	r6, r0
 80057c6:	b118      	cbz	r0, 80057d0 <_vfiprintf_r+0x18>
 80057c8:	6983      	ldr	r3, [r0, #24]
 80057ca:	b90b      	cbnz	r3, 80057d0 <_vfiprintf_r+0x18>
 80057cc:	f7ff fa9e 	bl	8004d0c <__sinit>
 80057d0:	4b89      	ldr	r3, [pc, #548]	; (80059f8 <_vfiprintf_r+0x240>)
 80057d2:	429d      	cmp	r5, r3
 80057d4:	d11b      	bne.n	800580e <_vfiprintf_r+0x56>
 80057d6:	6875      	ldr	r5, [r6, #4]
 80057d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057da:	07d9      	lsls	r1, r3, #31
 80057dc:	d405      	bmi.n	80057ea <_vfiprintf_r+0x32>
 80057de:	89ab      	ldrh	r3, [r5, #12]
 80057e0:	059a      	lsls	r2, r3, #22
 80057e2:	d402      	bmi.n	80057ea <_vfiprintf_r+0x32>
 80057e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057e6:	f7ff fb54 	bl	8004e92 <__retarget_lock_acquire_recursive>
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	071b      	lsls	r3, r3, #28
 80057ee:	d501      	bpl.n	80057f4 <_vfiprintf_r+0x3c>
 80057f0:	692b      	ldr	r3, [r5, #16]
 80057f2:	b9eb      	cbnz	r3, 8005830 <_vfiprintf_r+0x78>
 80057f4:	4629      	mov	r1, r5
 80057f6:	4630      	mov	r0, r6
 80057f8:	f7ff feac 	bl	8005554 <__swsetup_r>
 80057fc:	b1c0      	cbz	r0, 8005830 <_vfiprintf_r+0x78>
 80057fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005800:	07dc      	lsls	r4, r3, #31
 8005802:	d50e      	bpl.n	8005822 <_vfiprintf_r+0x6a>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	b01d      	add	sp, #116	; 0x74
 800580a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580e:	4b7b      	ldr	r3, [pc, #492]	; (80059fc <_vfiprintf_r+0x244>)
 8005810:	429d      	cmp	r5, r3
 8005812:	d101      	bne.n	8005818 <_vfiprintf_r+0x60>
 8005814:	68b5      	ldr	r5, [r6, #8]
 8005816:	e7df      	b.n	80057d8 <_vfiprintf_r+0x20>
 8005818:	4b79      	ldr	r3, [pc, #484]	; (8005a00 <_vfiprintf_r+0x248>)
 800581a:	429d      	cmp	r5, r3
 800581c:	bf08      	it	eq
 800581e:	68f5      	ldreq	r5, [r6, #12]
 8005820:	e7da      	b.n	80057d8 <_vfiprintf_r+0x20>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	0598      	lsls	r0, r3, #22
 8005826:	d4ed      	bmi.n	8005804 <_vfiprintf_r+0x4c>
 8005828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800582a:	f7ff fb33 	bl	8004e94 <__retarget_lock_release_recursive>
 800582e:	e7e9      	b.n	8005804 <_vfiprintf_r+0x4c>
 8005830:	2300      	movs	r3, #0
 8005832:	9309      	str	r3, [sp, #36]	; 0x24
 8005834:	2320      	movs	r3, #32
 8005836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800583a:	f8cd 800c 	str.w	r8, [sp, #12]
 800583e:	2330      	movs	r3, #48	; 0x30
 8005840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a04 <_vfiprintf_r+0x24c>
 8005844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005848:	f04f 0901 	mov.w	r9, #1
 800584c:	4623      	mov	r3, r4
 800584e:	469a      	mov	sl, r3
 8005850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005854:	b10a      	cbz	r2, 800585a <_vfiprintf_r+0xa2>
 8005856:	2a25      	cmp	r2, #37	; 0x25
 8005858:	d1f9      	bne.n	800584e <_vfiprintf_r+0x96>
 800585a:	ebba 0b04 	subs.w	fp, sl, r4
 800585e:	d00b      	beq.n	8005878 <_vfiprintf_r+0xc0>
 8005860:	465b      	mov	r3, fp
 8005862:	4622      	mov	r2, r4
 8005864:	4629      	mov	r1, r5
 8005866:	4630      	mov	r0, r6
 8005868:	f7ff ff93 	bl	8005792 <__sfputs_r>
 800586c:	3001      	adds	r0, #1
 800586e:	f000 80aa 	beq.w	80059c6 <_vfiprintf_r+0x20e>
 8005872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005874:	445a      	add	r2, fp
 8005876:	9209      	str	r2, [sp, #36]	; 0x24
 8005878:	f89a 3000 	ldrb.w	r3, [sl]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80a2 	beq.w	80059c6 <_vfiprintf_r+0x20e>
 8005882:	2300      	movs	r3, #0
 8005884:	f04f 32ff 	mov.w	r2, #4294967295
 8005888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800588c:	f10a 0a01 	add.w	sl, sl, #1
 8005890:	9304      	str	r3, [sp, #16]
 8005892:	9307      	str	r3, [sp, #28]
 8005894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005898:	931a      	str	r3, [sp, #104]	; 0x68
 800589a:	4654      	mov	r4, sl
 800589c:	2205      	movs	r2, #5
 800589e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a2:	4858      	ldr	r0, [pc, #352]	; (8005a04 <_vfiprintf_r+0x24c>)
 80058a4:	f7fa fcac 	bl	8000200 <memchr>
 80058a8:	9a04      	ldr	r2, [sp, #16]
 80058aa:	b9d8      	cbnz	r0, 80058e4 <_vfiprintf_r+0x12c>
 80058ac:	06d1      	lsls	r1, r2, #27
 80058ae:	bf44      	itt	mi
 80058b0:	2320      	movmi	r3, #32
 80058b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b6:	0713      	lsls	r3, r2, #28
 80058b8:	bf44      	itt	mi
 80058ba:	232b      	movmi	r3, #43	; 0x2b
 80058bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058c0:	f89a 3000 	ldrb.w	r3, [sl]
 80058c4:	2b2a      	cmp	r3, #42	; 0x2a
 80058c6:	d015      	beq.n	80058f4 <_vfiprintf_r+0x13c>
 80058c8:	9a07      	ldr	r2, [sp, #28]
 80058ca:	4654      	mov	r4, sl
 80058cc:	2000      	movs	r0, #0
 80058ce:	f04f 0c0a 	mov.w	ip, #10
 80058d2:	4621      	mov	r1, r4
 80058d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058d8:	3b30      	subs	r3, #48	; 0x30
 80058da:	2b09      	cmp	r3, #9
 80058dc:	d94e      	bls.n	800597c <_vfiprintf_r+0x1c4>
 80058de:	b1b0      	cbz	r0, 800590e <_vfiprintf_r+0x156>
 80058e0:	9207      	str	r2, [sp, #28]
 80058e2:	e014      	b.n	800590e <_vfiprintf_r+0x156>
 80058e4:	eba0 0308 	sub.w	r3, r0, r8
 80058e8:	fa09 f303 	lsl.w	r3, r9, r3
 80058ec:	4313      	orrs	r3, r2
 80058ee:	9304      	str	r3, [sp, #16]
 80058f0:	46a2      	mov	sl, r4
 80058f2:	e7d2      	b.n	800589a <_vfiprintf_r+0xe2>
 80058f4:	9b03      	ldr	r3, [sp, #12]
 80058f6:	1d19      	adds	r1, r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	9103      	str	r1, [sp, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bfbb      	ittet	lt
 8005900:	425b      	neglt	r3, r3
 8005902:	f042 0202 	orrlt.w	r2, r2, #2
 8005906:	9307      	strge	r3, [sp, #28]
 8005908:	9307      	strlt	r3, [sp, #28]
 800590a:	bfb8      	it	lt
 800590c:	9204      	strlt	r2, [sp, #16]
 800590e:	7823      	ldrb	r3, [r4, #0]
 8005910:	2b2e      	cmp	r3, #46	; 0x2e
 8005912:	d10c      	bne.n	800592e <_vfiprintf_r+0x176>
 8005914:	7863      	ldrb	r3, [r4, #1]
 8005916:	2b2a      	cmp	r3, #42	; 0x2a
 8005918:	d135      	bne.n	8005986 <_vfiprintf_r+0x1ce>
 800591a:	9b03      	ldr	r3, [sp, #12]
 800591c:	1d1a      	adds	r2, r3, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	9203      	str	r2, [sp, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	bfb8      	it	lt
 8005926:	f04f 33ff 	movlt.w	r3, #4294967295
 800592a:	3402      	adds	r4, #2
 800592c:	9305      	str	r3, [sp, #20]
 800592e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a14 <_vfiprintf_r+0x25c>
 8005932:	7821      	ldrb	r1, [r4, #0]
 8005934:	2203      	movs	r2, #3
 8005936:	4650      	mov	r0, sl
 8005938:	f7fa fc62 	bl	8000200 <memchr>
 800593c:	b140      	cbz	r0, 8005950 <_vfiprintf_r+0x198>
 800593e:	2340      	movs	r3, #64	; 0x40
 8005940:	eba0 000a 	sub.w	r0, r0, sl
 8005944:	fa03 f000 	lsl.w	r0, r3, r0
 8005948:	9b04      	ldr	r3, [sp, #16]
 800594a:	4303      	orrs	r3, r0
 800594c:	3401      	adds	r4, #1
 800594e:	9304      	str	r3, [sp, #16]
 8005950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005954:	482c      	ldr	r0, [pc, #176]	; (8005a08 <_vfiprintf_r+0x250>)
 8005956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800595a:	2206      	movs	r2, #6
 800595c:	f7fa fc50 	bl	8000200 <memchr>
 8005960:	2800      	cmp	r0, #0
 8005962:	d03f      	beq.n	80059e4 <_vfiprintf_r+0x22c>
 8005964:	4b29      	ldr	r3, [pc, #164]	; (8005a0c <_vfiprintf_r+0x254>)
 8005966:	bb1b      	cbnz	r3, 80059b0 <_vfiprintf_r+0x1f8>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	3307      	adds	r3, #7
 800596c:	f023 0307 	bic.w	r3, r3, #7
 8005970:	3308      	adds	r3, #8
 8005972:	9303      	str	r3, [sp, #12]
 8005974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005976:	443b      	add	r3, r7
 8005978:	9309      	str	r3, [sp, #36]	; 0x24
 800597a:	e767      	b.n	800584c <_vfiprintf_r+0x94>
 800597c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005980:	460c      	mov	r4, r1
 8005982:	2001      	movs	r0, #1
 8005984:	e7a5      	b.n	80058d2 <_vfiprintf_r+0x11a>
 8005986:	2300      	movs	r3, #0
 8005988:	3401      	adds	r4, #1
 800598a:	9305      	str	r3, [sp, #20]
 800598c:	4619      	mov	r1, r3
 800598e:	f04f 0c0a 	mov.w	ip, #10
 8005992:	4620      	mov	r0, r4
 8005994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005998:	3a30      	subs	r2, #48	; 0x30
 800599a:	2a09      	cmp	r2, #9
 800599c:	d903      	bls.n	80059a6 <_vfiprintf_r+0x1ee>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0c5      	beq.n	800592e <_vfiprintf_r+0x176>
 80059a2:	9105      	str	r1, [sp, #20]
 80059a4:	e7c3      	b.n	800592e <_vfiprintf_r+0x176>
 80059a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059aa:	4604      	mov	r4, r0
 80059ac:	2301      	movs	r3, #1
 80059ae:	e7f0      	b.n	8005992 <_vfiprintf_r+0x1da>
 80059b0:	ab03      	add	r3, sp, #12
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	462a      	mov	r2, r5
 80059b6:	4b16      	ldr	r3, [pc, #88]	; (8005a10 <_vfiprintf_r+0x258>)
 80059b8:	a904      	add	r1, sp, #16
 80059ba:	4630      	mov	r0, r6
 80059bc:	f3af 8000 	nop.w
 80059c0:	4607      	mov	r7, r0
 80059c2:	1c78      	adds	r0, r7, #1
 80059c4:	d1d6      	bne.n	8005974 <_vfiprintf_r+0x1bc>
 80059c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059c8:	07d9      	lsls	r1, r3, #31
 80059ca:	d405      	bmi.n	80059d8 <_vfiprintf_r+0x220>
 80059cc:	89ab      	ldrh	r3, [r5, #12]
 80059ce:	059a      	lsls	r2, r3, #22
 80059d0:	d402      	bmi.n	80059d8 <_vfiprintf_r+0x220>
 80059d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059d4:	f7ff fa5e 	bl	8004e94 <__retarget_lock_release_recursive>
 80059d8:	89ab      	ldrh	r3, [r5, #12]
 80059da:	065b      	lsls	r3, r3, #25
 80059dc:	f53f af12 	bmi.w	8005804 <_vfiprintf_r+0x4c>
 80059e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059e2:	e711      	b.n	8005808 <_vfiprintf_r+0x50>
 80059e4:	ab03      	add	r3, sp, #12
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	462a      	mov	r2, r5
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <_vfiprintf_r+0x258>)
 80059ec:	a904      	add	r1, sp, #16
 80059ee:	4630      	mov	r0, r6
 80059f0:	f000 f880 	bl	8005af4 <_printf_i>
 80059f4:	e7e4      	b.n	80059c0 <_vfiprintf_r+0x208>
 80059f6:	bf00      	nop
 80059f8:	08005f64 	.word	0x08005f64
 80059fc:	08005f84 	.word	0x08005f84
 8005a00:	08005f44 	.word	0x08005f44
 8005a04:	080060a9 	.word	0x080060a9
 8005a08:	080060b3 	.word	0x080060b3
 8005a0c:	00000000 	.word	0x00000000
 8005a10:	08005793 	.word	0x08005793
 8005a14:	080060af 	.word	0x080060af

08005a18 <_printf_common>:
 8005a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1c:	4616      	mov	r6, r2
 8005a1e:	4699      	mov	r9, r3
 8005a20:	688a      	ldr	r2, [r1, #8]
 8005a22:	690b      	ldr	r3, [r1, #16]
 8005a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	bfb8      	it	lt
 8005a2c:	4613      	movlt	r3, r2
 8005a2e:	6033      	str	r3, [r6, #0]
 8005a30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a34:	4607      	mov	r7, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	b10a      	cbz	r2, 8005a3e <_printf_common+0x26>
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	6033      	str	r3, [r6, #0]
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	0699      	lsls	r1, r3, #26
 8005a42:	bf42      	ittt	mi
 8005a44:	6833      	ldrmi	r3, [r6, #0]
 8005a46:	3302      	addmi	r3, #2
 8005a48:	6033      	strmi	r3, [r6, #0]
 8005a4a:	6825      	ldr	r5, [r4, #0]
 8005a4c:	f015 0506 	ands.w	r5, r5, #6
 8005a50:	d106      	bne.n	8005a60 <_printf_common+0x48>
 8005a52:	f104 0a19 	add.w	sl, r4, #25
 8005a56:	68e3      	ldr	r3, [r4, #12]
 8005a58:	6832      	ldr	r2, [r6, #0]
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	42ab      	cmp	r3, r5
 8005a5e:	dc26      	bgt.n	8005aae <_printf_common+0x96>
 8005a60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a64:	1e13      	subs	r3, r2, #0
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	bf18      	it	ne
 8005a6a:	2301      	movne	r3, #1
 8005a6c:	0692      	lsls	r2, r2, #26
 8005a6e:	d42b      	bmi.n	8005ac8 <_printf_common+0xb0>
 8005a70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a74:	4649      	mov	r1, r9
 8005a76:	4638      	mov	r0, r7
 8005a78:	47c0      	blx	r8
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d01e      	beq.n	8005abc <_printf_common+0xa4>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	68e5      	ldr	r5, [r4, #12]
 8005a82:	6832      	ldr	r2, [r6, #0]
 8005a84:	f003 0306 	and.w	r3, r3, #6
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	bf08      	it	eq
 8005a8c:	1aad      	subeq	r5, r5, r2
 8005a8e:	68a3      	ldr	r3, [r4, #8]
 8005a90:	6922      	ldr	r2, [r4, #16]
 8005a92:	bf0c      	ite	eq
 8005a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a98:	2500      	movne	r5, #0
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	bfc4      	itt	gt
 8005a9e:	1a9b      	subgt	r3, r3, r2
 8005aa0:	18ed      	addgt	r5, r5, r3
 8005aa2:	2600      	movs	r6, #0
 8005aa4:	341a      	adds	r4, #26
 8005aa6:	42b5      	cmp	r5, r6
 8005aa8:	d11a      	bne.n	8005ae0 <_printf_common+0xc8>
 8005aaa:	2000      	movs	r0, #0
 8005aac:	e008      	b.n	8005ac0 <_printf_common+0xa8>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4652      	mov	r2, sl
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	47c0      	blx	r8
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d103      	bne.n	8005ac4 <_printf_common+0xac>
 8005abc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	e7c6      	b.n	8005a56 <_printf_common+0x3e>
 8005ac8:	18e1      	adds	r1, r4, r3
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	2030      	movs	r0, #48	; 0x30
 8005ace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ad2:	4422      	add	r2, r4
 8005ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005adc:	3302      	adds	r3, #2
 8005ade:	e7c7      	b.n	8005a70 <_printf_common+0x58>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	47c0      	blx	r8
 8005aea:	3001      	adds	r0, #1
 8005aec:	d0e6      	beq.n	8005abc <_printf_common+0xa4>
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7d9      	b.n	8005aa6 <_printf_common+0x8e>
	...

08005af4 <_printf_i>:
 8005af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	460c      	mov	r4, r1
 8005afa:	4691      	mov	r9, r2
 8005afc:	7e27      	ldrb	r7, [r4, #24]
 8005afe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b00:	2f78      	cmp	r7, #120	; 0x78
 8005b02:	4680      	mov	r8, r0
 8005b04:	469a      	mov	sl, r3
 8005b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b0a:	d807      	bhi.n	8005b1c <_printf_i+0x28>
 8005b0c:	2f62      	cmp	r7, #98	; 0x62
 8005b0e:	d80a      	bhi.n	8005b26 <_printf_i+0x32>
 8005b10:	2f00      	cmp	r7, #0
 8005b12:	f000 80d8 	beq.w	8005cc6 <_printf_i+0x1d2>
 8005b16:	2f58      	cmp	r7, #88	; 0x58
 8005b18:	f000 80a3 	beq.w	8005c62 <_printf_i+0x16e>
 8005b1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b24:	e03a      	b.n	8005b9c <_printf_i+0xa8>
 8005b26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b2a:	2b15      	cmp	r3, #21
 8005b2c:	d8f6      	bhi.n	8005b1c <_printf_i+0x28>
 8005b2e:	a001      	add	r0, pc, #4	; (adr r0, 8005b34 <_printf_i+0x40>)
 8005b30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b34:	08005b8d 	.word	0x08005b8d
 8005b38:	08005ba1 	.word	0x08005ba1
 8005b3c:	08005b1d 	.word	0x08005b1d
 8005b40:	08005b1d 	.word	0x08005b1d
 8005b44:	08005b1d 	.word	0x08005b1d
 8005b48:	08005b1d 	.word	0x08005b1d
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005b1d 	.word	0x08005b1d
 8005b54:	08005b1d 	.word	0x08005b1d
 8005b58:	08005b1d 	.word	0x08005b1d
 8005b5c:	08005b1d 	.word	0x08005b1d
 8005b60:	08005cad 	.word	0x08005cad
 8005b64:	08005bd1 	.word	0x08005bd1
 8005b68:	08005c8f 	.word	0x08005c8f
 8005b6c:	08005b1d 	.word	0x08005b1d
 8005b70:	08005b1d 	.word	0x08005b1d
 8005b74:	08005ccf 	.word	0x08005ccf
 8005b78:	08005b1d 	.word	0x08005b1d
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005b1d 	.word	0x08005b1d
 8005b84:	08005b1d 	.word	0x08005b1d
 8005b88:	08005c97 	.word	0x08005c97
 8005b8c:	680b      	ldr	r3, [r1, #0]
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	600a      	str	r2, [r1, #0]
 8005b94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0a3      	b.n	8005ce8 <_printf_i+0x1f4>
 8005ba0:	6825      	ldr	r5, [r4, #0]
 8005ba2:	6808      	ldr	r0, [r1, #0]
 8005ba4:	062e      	lsls	r6, r5, #24
 8005ba6:	f100 0304 	add.w	r3, r0, #4
 8005baa:	d50a      	bpl.n	8005bc2 <_printf_i+0xce>
 8005bac:	6805      	ldr	r5, [r0, #0]
 8005bae:	600b      	str	r3, [r1, #0]
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	da03      	bge.n	8005bbc <_printf_i+0xc8>
 8005bb4:	232d      	movs	r3, #45	; 0x2d
 8005bb6:	426d      	negs	r5, r5
 8005bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bbc:	485e      	ldr	r0, [pc, #376]	; (8005d38 <_printf_i+0x244>)
 8005bbe:	230a      	movs	r3, #10
 8005bc0:	e019      	b.n	8005bf6 <_printf_i+0x102>
 8005bc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005bc6:	6805      	ldr	r5, [r0, #0]
 8005bc8:	600b      	str	r3, [r1, #0]
 8005bca:	bf18      	it	ne
 8005bcc:	b22d      	sxthne	r5, r5
 8005bce:	e7ef      	b.n	8005bb0 <_printf_i+0xbc>
 8005bd0:	680b      	ldr	r3, [r1, #0]
 8005bd2:	6825      	ldr	r5, [r4, #0]
 8005bd4:	1d18      	adds	r0, r3, #4
 8005bd6:	6008      	str	r0, [r1, #0]
 8005bd8:	0628      	lsls	r0, r5, #24
 8005bda:	d501      	bpl.n	8005be0 <_printf_i+0xec>
 8005bdc:	681d      	ldr	r5, [r3, #0]
 8005bde:	e002      	b.n	8005be6 <_printf_i+0xf2>
 8005be0:	0669      	lsls	r1, r5, #25
 8005be2:	d5fb      	bpl.n	8005bdc <_printf_i+0xe8>
 8005be4:	881d      	ldrh	r5, [r3, #0]
 8005be6:	4854      	ldr	r0, [pc, #336]	; (8005d38 <_printf_i+0x244>)
 8005be8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bea:	bf0c      	ite	eq
 8005bec:	2308      	moveq	r3, #8
 8005bee:	230a      	movne	r3, #10
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bf6:	6866      	ldr	r6, [r4, #4]
 8005bf8:	60a6      	str	r6, [r4, #8]
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	bfa2      	ittt	ge
 8005bfe:	6821      	ldrge	r1, [r4, #0]
 8005c00:	f021 0104 	bicge.w	r1, r1, #4
 8005c04:	6021      	strge	r1, [r4, #0]
 8005c06:	b90d      	cbnz	r5, 8005c0c <_printf_i+0x118>
 8005c08:	2e00      	cmp	r6, #0
 8005c0a:	d04d      	beq.n	8005ca8 <_printf_i+0x1b4>
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c12:	fb03 5711 	mls	r7, r3, r1, r5
 8005c16:	5dc7      	ldrb	r7, [r0, r7]
 8005c18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c1c:	462f      	mov	r7, r5
 8005c1e:	42bb      	cmp	r3, r7
 8005c20:	460d      	mov	r5, r1
 8005c22:	d9f4      	bls.n	8005c0e <_printf_i+0x11a>
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d10b      	bne.n	8005c40 <_printf_i+0x14c>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	07df      	lsls	r7, r3, #31
 8005c2c:	d508      	bpl.n	8005c40 <_printf_i+0x14c>
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	6861      	ldr	r1, [r4, #4]
 8005c32:	4299      	cmp	r1, r3
 8005c34:	bfde      	ittt	le
 8005c36:	2330      	movle	r3, #48	; 0x30
 8005c38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c40:	1b92      	subs	r2, r2, r6
 8005c42:	6122      	str	r2, [r4, #16]
 8005c44:	f8cd a000 	str.w	sl, [sp]
 8005c48:	464b      	mov	r3, r9
 8005c4a:	aa03      	add	r2, sp, #12
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4640      	mov	r0, r8
 8005c50:	f7ff fee2 	bl	8005a18 <_printf_common>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d14c      	bne.n	8005cf2 <_printf_i+0x1fe>
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	b004      	add	sp, #16
 8005c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c62:	4835      	ldr	r0, [pc, #212]	; (8005d38 <_printf_i+0x244>)
 8005c64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	680e      	ldr	r6, [r1, #0]
 8005c6c:	061f      	lsls	r7, r3, #24
 8005c6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c72:	600e      	str	r6, [r1, #0]
 8005c74:	d514      	bpl.n	8005ca0 <_printf_i+0x1ac>
 8005c76:	07d9      	lsls	r1, r3, #31
 8005c78:	bf44      	itt	mi
 8005c7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c7e:	6023      	strmi	r3, [r4, #0]
 8005c80:	b91d      	cbnz	r5, 8005c8a <_printf_i+0x196>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	f023 0320 	bic.w	r3, r3, #32
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	2310      	movs	r3, #16
 8005c8c:	e7b0      	b.n	8005bf0 <_printf_i+0xfc>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	f043 0320 	orr.w	r3, r3, #32
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	2378      	movs	r3, #120	; 0x78
 8005c98:	4828      	ldr	r0, [pc, #160]	; (8005d3c <_printf_i+0x248>)
 8005c9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c9e:	e7e3      	b.n	8005c68 <_printf_i+0x174>
 8005ca0:	065e      	lsls	r6, r3, #25
 8005ca2:	bf48      	it	mi
 8005ca4:	b2ad      	uxthmi	r5, r5
 8005ca6:	e7e6      	b.n	8005c76 <_printf_i+0x182>
 8005ca8:	4616      	mov	r6, r2
 8005caa:	e7bb      	b.n	8005c24 <_printf_i+0x130>
 8005cac:	680b      	ldr	r3, [r1, #0]
 8005cae:	6826      	ldr	r6, [r4, #0]
 8005cb0:	6960      	ldr	r0, [r4, #20]
 8005cb2:	1d1d      	adds	r5, r3, #4
 8005cb4:	600d      	str	r5, [r1, #0]
 8005cb6:	0635      	lsls	r5, r6, #24
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	d501      	bpl.n	8005cc0 <_printf_i+0x1cc>
 8005cbc:	6018      	str	r0, [r3, #0]
 8005cbe:	e002      	b.n	8005cc6 <_printf_i+0x1d2>
 8005cc0:	0671      	lsls	r1, r6, #25
 8005cc2:	d5fb      	bpl.n	8005cbc <_printf_i+0x1c8>
 8005cc4:	8018      	strh	r0, [r3, #0]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6123      	str	r3, [r4, #16]
 8005cca:	4616      	mov	r6, r2
 8005ccc:	e7ba      	b.n	8005c44 <_printf_i+0x150>
 8005cce:	680b      	ldr	r3, [r1, #0]
 8005cd0:	1d1a      	adds	r2, r3, #4
 8005cd2:	600a      	str	r2, [r1, #0]
 8005cd4:	681e      	ldr	r6, [r3, #0]
 8005cd6:	6862      	ldr	r2, [r4, #4]
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7fa fa90 	bl	8000200 <memchr>
 8005ce0:	b108      	cbz	r0, 8005ce6 <_printf_i+0x1f2>
 8005ce2:	1b80      	subs	r0, r0, r6
 8005ce4:	6060      	str	r0, [r4, #4]
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	2300      	movs	r3, #0
 8005cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf0:	e7a8      	b.n	8005c44 <_printf_i+0x150>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	47d0      	blx	sl
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d0ab      	beq.n	8005c58 <_printf_i+0x164>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	079b      	lsls	r3, r3, #30
 8005d04:	d413      	bmi.n	8005d2e <_printf_i+0x23a>
 8005d06:	68e0      	ldr	r0, [r4, #12]
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	4298      	cmp	r0, r3
 8005d0c:	bfb8      	it	lt
 8005d0e:	4618      	movlt	r0, r3
 8005d10:	e7a4      	b.n	8005c5c <_printf_i+0x168>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4632      	mov	r2, r6
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	47d0      	blx	sl
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d09b      	beq.n	8005c58 <_printf_i+0x164>
 8005d20:	3501      	adds	r5, #1
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	9903      	ldr	r1, [sp, #12]
 8005d26:	1a5b      	subs	r3, r3, r1
 8005d28:	42ab      	cmp	r3, r5
 8005d2a:	dcf2      	bgt.n	8005d12 <_printf_i+0x21e>
 8005d2c:	e7eb      	b.n	8005d06 <_printf_i+0x212>
 8005d2e:	2500      	movs	r5, #0
 8005d30:	f104 0619 	add.w	r6, r4, #25
 8005d34:	e7f5      	b.n	8005d22 <_printf_i+0x22e>
 8005d36:	bf00      	nop
 8005d38:	080060ba 	.word	0x080060ba
 8005d3c:	080060cb 	.word	0x080060cb

08005d40 <_read_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4d07      	ldr	r5, [pc, #28]	; (8005d60 <_read_r+0x20>)
 8005d44:	4604      	mov	r4, r0
 8005d46:	4608      	mov	r0, r1
 8005d48:	4611      	mov	r1, r2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	602a      	str	r2, [r5, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f7fa fef6 	bl	8000b40 <_read>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_read_r+0x1e>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_read_r+0x1e>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	200003e8 	.word	0x200003e8

08005d64 <_fstat_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d07      	ldr	r5, [pc, #28]	; (8005d84 <_fstat_r+0x20>)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	f7fa ff0e 	bl	8000b92 <_fstat>
 8005d76:	1c43      	adds	r3, r0, #1
 8005d78:	d102      	bne.n	8005d80 <_fstat_r+0x1c>
 8005d7a:	682b      	ldr	r3, [r5, #0]
 8005d7c:	b103      	cbz	r3, 8005d80 <_fstat_r+0x1c>
 8005d7e:	6023      	str	r3, [r4, #0]
 8005d80:	bd38      	pop	{r3, r4, r5, pc}
 8005d82:	bf00      	nop
 8005d84:	200003e8 	.word	0x200003e8

08005d88 <_isatty_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d06      	ldr	r5, [pc, #24]	; (8005da4 <_isatty_r+0x1c>)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	f7fa ff0d 	bl	8000bb2 <_isatty>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d102      	bne.n	8005da2 <_isatty_r+0x1a>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	b103      	cbz	r3, 8005da2 <_isatty_r+0x1a>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	200003e8 	.word	0x200003e8

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
