
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000679c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf8  08006cf8  00020324  2**0
                  CONTENTS
  4 .ARM          00000000  08006cf8  08006cf8  00020324  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cf8  08006cf8  00020324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cfc  08006cfc  00016cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  08006d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000324  08007024  00020324  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08007024  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155a6  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f5  00000000  00000000  000358fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00039128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1ed  00000000  00000000  00039f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013581  00000000  00000000  00058155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeb88  00000000  00000000  0006b6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a25e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a4  00000000  00000000  0011a2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000324 	.word	0x20000324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006914 	.word	0x08006914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000328 	.word	0x20000328
 80001cc:	08006914 	.word	0x08006914

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};
///////////////////////////////////////////////////
// Define cmd-line Command support functions below.
void LED(char* paramStr, int* paramValues) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 80002aa:	2202      	movs	r2, #2
 80002ac:	4939      	ldr	r1, [pc, #228]	; (8000394 <LED+0xf4>)
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f005 fe01 	bl	8005eb6 <strncmp>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d111      	bne.n	80002de <LED+0x3e>
		printf("\r\nLED ON");
 80002ba:	4837      	ldr	r0, [pc, #220]	; (8000398 <LED+0xf8>)
 80002bc:	f005 fc54 	bl	8005b68 <iprintf>
		paramValues[0] = 1;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3308      	adds	r3, #8
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
      led2 = ON;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <LED+0xfc>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 80002dc:	e055      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 80002de:	2203      	movs	r2, #3
 80002e0:	492f      	ldr	r1, [pc, #188]	; (80003a0 <LED+0x100>)
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f005 fde7 	bl	8005eb6 <strncmp>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d111      	bne.n	8000312 <LED+0x72>
		printf("\r\nLED OFF");
 80002ee:	482d      	ldr	r0, [pc, #180]	; (80003a4 <LED+0x104>)
 80002f0:	f005 fc3a 	bl	8005b68 <iprintf>
		paramValues[0] = 0;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	3304      	adds	r3, #4
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	3308      	adds	r3, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <LED+0xfc>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
}
 8000310:	e03b      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000312:	2205      	movs	r2, #5
 8000314:	4924      	ldr	r1, [pc, #144]	; (80003a8 <LED+0x108>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f005 fdcd 	bl	8005eb6 <strncmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d130      	bne.n	8000384 <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3306      	adds	r3, #6
 8000326:	4921      	ldr	r1, [pc, #132]	; (80003ac <LED+0x10c>)
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff51 	bl	80001d0 <strcmp>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01c      	beq.n	800036e <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	1d9a      	adds	r2, r3, #6
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f103 0408 	add.w	r4, r3, #8
 800033e:	4610      	mov	r0, r2
 8000340:	f005 f964 	bl	800560c <atoi>
 8000344:	4603      	mov	r3, r0
 8000346:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3306      	adds	r3, #6
 800034c:	4618      	mov	r0, r3
 800034e:	f005 f95d 	bl	800560c <atoi>
 8000352:	4603      	mov	r3, r0
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <LED+0x110>)
 8000356:	6013      	str	r3, [r2, #0]
         paramValues[0] = 0;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
         paramValues[1] = 0;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
         led2 = BLINKING;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <LED+0xfc>)
 8000368:	2202      	movs	r2, #2
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e003      	b.n	8000376 <LED+0xd6>
			paramValues[2] = 0;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3308      	adds	r3, #8
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <LED+0x110>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LED+0x114>)
 800037e:	f005 fbf3 	bl	8005b68 <iprintf>
}
 8000382:	e002      	b.n	800038a <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LED+0x118>)
 8000386:	f005 fbef 	bl	8005b68 <iprintf>
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bd90      	pop	{r4, r7, pc}
 8000392:	bf00      	nop
 8000394:	0800692c 	.word	0x0800692c
 8000398:	08006930 	.word	0x08006930
 800039c:	20000350 	.word	0x20000350
 80003a0:	0800693c 	.word	0x0800693c
 80003a4:	08006940 	.word	0x08006940
 80003a8:	0800694c 	.word	0x0800694c
 80003ac:	08006954 	.word	0x08006954
 80003b0:	20000344 	.word	0x20000344
 80003b4:	08006958 	.word	0x08006958
 80003b8:	08006968 	.word	0x08006968

080003bc <ADC>:

void ADC(char* paramStr, int* paramValues){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "RO", 2) == 0) {
 80003c6:	2202      	movs	r2, #2
 80003c8:	4918      	ldr	r1, [pc, #96]	; (800042c <ADC+0x70>)
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f005 fd73 	bl	8005eb6 <strncmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d117      	bne.n	8000406 <ADC+0x4a>
      printf("\r\nADC READ ONCE");
 80003d6:	4816      	ldr	r0, [pc, #88]	; (8000430 <ADC+0x74>)
 80003d8:	f005 fbc6 	bl	8005b68 <iprintf>
      // Start ADC Conversion
      HAL_ADC_Start(&hadc1);
 80003dc:	4815      	ldr	r0, [pc, #84]	; (8000434 <ADC+0x78>)
 80003de:	f000 ffc1 	bl	8001364 <HAL_ADC_Start>
      // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 80003e2:	2101      	movs	r1, #1
 80003e4:	4813      	ldr	r0, [pc, #76]	; (8000434 <ADC+0x78>)
 80003e6:	f001 f82b 	bl	8001440 <HAL_ADC_PollForConversion>
      // Read The ADC Conversion Result - using 3300 + 400 offset to
      // calculate the analog value
      printf("\r\nAA Battery voltage: %ld mV", 3700*HAL_ADC_GetValue(&hadc1)/4096);
 80003ea:	4812      	ldr	r0, [pc, #72]	; (8000434 <ADC+0x78>)
 80003ec:	f001 f8e6 	bl	80015bc <HAL_ADC_GetValue>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f640 6274 	movw	r2, #3700	; 0xe74
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	0b1b      	lsrs	r3, r3, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <ADC+0x7c>)
 8000400:	f005 fbb2 	bl	8005b68 <iprintf>
      printf("\r\nSome help text her...");
   }
   else {
      printf("\r\nUNKNOWN ADC COMMAND");
   }
}
 8000404:	e00e      	b.n	8000424 <ADC+0x68>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000406:	2202      	movs	r2, #2
 8000408:	490c      	ldr	r1, [pc, #48]	; (800043c <ADC+0x80>)
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f005 fd53 	bl	8005eb6 <strncmp>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d103      	bne.n	800041e <ADC+0x62>
      printf("\r\nSome help text her...");
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <ADC+0x84>)
 8000418:	f005 fba6 	bl	8005b68 <iprintf>
}
 800041c:	e002      	b.n	8000424 <ADC+0x68>
      printf("\r\nUNKNOWN ADC COMMAND");
 800041e:	4809      	ldr	r0, [pc, #36]	; (8000444 <ADC+0x88>)
 8000420:	f005 fba2 	bl	8005b68 <iprintf>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	08006980 	.word	0x08006980
 8000430:	08006984 	.word	0x08006984
 8000434:	20000360 	.word	0x20000360
 8000438:	08006994 	.word	0x08006994
 800043c:	080069b4 	.word	0x080069b4
 8000440:	080069bc 	.word	0x080069bc
 8000444:	080069d4 	.word	0x080069d4

08000448 <TIM>:

void TIM(char* paramStr, int* paramValues) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "OS", 2) == 0) {
 8000452:	2202      	movs	r2, #2
 8000454:	4935      	ldr	r1, [pc, #212]	; (800052c <TIM+0xe4>)
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f005 fd2d 	bl	8005eb6 <strncmp>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d114      	bne.n	800048c <TIM+0x44>
      printf("\r\nOne Shot timer");
 8000462:	4833      	ldr	r0, [pc, #204]	; (8000530 <TIM+0xe8>)
 8000464:	f005 fb80 	bl	8005b68 <iprintf>
      htim2.Init.Period = atoi(&paramStr[3]);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3303      	adds	r3, #3
 800046c:	4618      	mov	r0, r3
 800046e:	f005 f8cd 	bl	800560c <atoi>
 8000472:	4603      	mov	r3, r0
 8000474:	461a      	mov	r2, r3
 8000476:	4b2f      	ldr	r3, [pc, #188]	; (8000534 <TIM+0xec>)
 8000478:	60da      	str	r2, [r3, #12]
      HAL_TIM_Base_Start_IT(&htim2);
 800047a:	482e      	ldr	r0, [pc, #184]	; (8000534 <TIM+0xec>)
 800047c:	f003 fa80 	bl	8003980 <HAL_TIM_Base_Start_IT>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000484:	482c      	ldr	r0, [pc, #176]	; (8000538 <TIM+0xf0>)
 8000486:	f001 ff39 	bl	80022fc <HAL_GPIO_TogglePin>
      printf("\r\nSome help text for the TIM command-set here...");
   }
   else {
      printf("\r\nUNKNOWN TIM COMMAND");
   }
}
 800048a:	e04b      	b.n	8000524 <TIM+0xdc>
   else if (strncmp(paramStr, "PERIOD", 6) == 0) {
 800048c:	2206      	movs	r2, #6
 800048e:	492b      	ldr	r1, [pc, #172]	; (800053c <TIM+0xf4>)
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f005 fd10 	bl	8005eb6 <strncmp>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d10f      	bne.n	80004bc <TIM+0x74>
      htim2.Init.Period = atoi(&paramStr[7]);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3307      	adds	r3, #7
 80004a0:	4618      	mov	r0, r3
 80004a2:	f005 f8b3 	bl	800560c <atoi>
 80004a6:	4603      	mov	r3, r0
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <TIM+0xec>)
 80004ac:	60da      	str	r2, [r3, #12]
      printf("\r\nAuto-reload period: %d", (int)htim2.Init.Period);
 80004ae:	4b21      	ldr	r3, [pc, #132]	; (8000534 <TIM+0xec>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	4619      	mov	r1, r3
 80004b4:	4822      	ldr	r0, [pc, #136]	; (8000540 <TIM+0xf8>)
 80004b6:	f005 fb57 	bl	8005b68 <iprintf>
}
 80004ba:	e033      	b.n	8000524 <TIM+0xdc>
   else if (strncmp(paramStr, "REPEAT", 6) == 0) {
 80004bc:	2206      	movs	r2, #6
 80004be:	4921      	ldr	r1, [pc, #132]	; (8000544 <TIM+0xfc>)
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f005 fcf8 	bl	8005eb6 <strncmp>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d11c      	bne.n	8000506 <TIM+0xbe>
      timRepeat = atoi(&paramStr[7]);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3307      	adds	r3, #7
 80004d0:	4618      	mov	r0, r3
 80004d2:	f005 f89b 	bl	800560c <atoi>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <TIM+0x100>)
 80004da:	6013      	str	r3, [r2, #0]
      timRepeatCount = 0;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <TIM+0x104>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim2);
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <TIM+0xec>)
 80004e4:	f003 fa4c 	bl	8003980 <HAL_TIM_Base_Start_IT>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ec:	4812      	ldr	r0, [pc, #72]	; (8000538 <TIM+0xf0>)
 80004ee:	f001 ff05 	bl	80022fc <HAL_GPIO_TogglePin>
      timMode = REPEAT;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <TIM+0x108>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
      printf("\r\nAuto-reload repeat % times", timRepeat);
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <TIM+0x100>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4815      	ldr	r0, [pc, #84]	; (8000554 <TIM+0x10c>)
 8000500:	f005 fb32 	bl	8005b68 <iprintf>
}
 8000504:	e00e      	b.n	8000524 <TIM+0xdc>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000506:	2202      	movs	r2, #2
 8000508:	4913      	ldr	r1, [pc, #76]	; (8000558 <TIM+0x110>)
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f005 fcd3 	bl	8005eb6 <strncmp>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d103      	bne.n	800051e <TIM+0xd6>
      printf("\r\nSome help text for the TIM command-set here...");
 8000516:	4811      	ldr	r0, [pc, #68]	; (800055c <TIM+0x114>)
 8000518:	f005 fb26 	bl	8005b68 <iprintf>
}
 800051c:	e002      	b.n	8000524 <TIM+0xdc>
      printf("\r\nUNKNOWN TIM COMMAND");
 800051e:	4810      	ldr	r0, [pc, #64]	; (8000560 <TIM+0x118>)
 8000520:	f005 fb22 	bl	8005b68 <iprintf>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	080069ec 	.word	0x080069ec
 8000530:	080069f0 	.word	0x080069f0
 8000534:	2000048c 	.word	0x2000048c
 8000538:	48000400 	.word	0x48000400
 800053c:	08006a04 	.word	0x08006a04
 8000540:	08006a0c 	.word	0x08006a0c
 8000544:	08006a28 	.word	0x08006a28
 8000548:	20000000 	.word	0x20000000
 800054c:	20000340 	.word	0x20000340
 8000550:	20000351 	.word	0x20000351
 8000554:	08006a30 	.word	0x08006a30
 8000558:	080069b4 	.word	0x080069b4
 800055c:	08006a50 	.word	0x08006a50
 8000560:	08006a84 	.word	0x08006a84

08000564 <dummy>:

void dummy(char* paramStr, int* paramValues){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
	printf("DUMMY\r\n");
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <dummy+0x18>)
 8000570:	f005 fb80 	bl	8005c74 <puts>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	08006a9c 	.word	0x08006a9c

08000580 <promt>:
  {"ADC", 4, 7, {"RO", "AVRAGE", "POLL", "HELP"}, {0, 10, 500, 0}, &ADC},
  {"TCD", 4, 7, {"OS", "PERIOD", "REPEAT", "HELP"}, {0, 10, 500, 0}, &TIM},
  {"DUMMY", 2, 6, {"TRUE", "FALSE"}, {0, 0}, &dummy}
};

void promt() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <promt+0x1c>)
 8000586:	f005 faef 	bl	8005b68 <iprintf>
   fflush(stdout);
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <promt+0x20>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	4618      	mov	r0, r3
 8000592:	f005 f907 	bl	80057a4 <fflush>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	08006aa4 	.word	0x08006aa4
 80005a0:	200002c0 	.word	0x200002c0

080005a4 <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
   int i = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 80005b2:	2304      	movs	r3, #4
 80005b4:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 80005b6:	e03d      	b.n	8000634 <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	22ac      	movs	r2, #172	; 0xac
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <executeCmd+0xbc>)
 80005c2:	189c      	adds	r4, r3, r2
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	22ac      	movs	r2, #172	; 0xac
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	4a24      	ldr	r2, [pc, #144]	; (8000660 <executeCmd+0xbc>)
 80005ce:	4413      	add	r3, r2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe07 	bl	80001e4 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4620      	mov	r0, r4
 80005de:	f005 fc6a 	bl	8005eb6 <strncmp>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d122      	bne.n	800062e <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 80005e8:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <executeCmd+0xbc>)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	21ac      	movs	r1, #172	; 0xac
 80005ee:	fb01 f303 	mul.w	r3, r1, r3
 80005f2:	4413      	add	r3, r2
 80005f4:	33a8      	adds	r3, #168	; 0xa8
 80005f6:	681c      	ldr	r4, [r3, #0]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	22ac      	movs	r2, #172	; 0xac
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <executeCmd+0xbc>)
 8000602:	4413      	add	r3, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fded 	bl	80001e4 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	3301      	adds	r3, #1
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	441a      	add	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	21ac      	movs	r1, #172	; 0xac
 8000616:	fb01 f303 	mul.w	r3, r1, r3
 800061a:	3380      	adds	r3, #128	; 0x80
 800061c:	4910      	ldr	r1, [pc, #64]	; (8000660 <executeCmd+0xbc>)
 800061e:	440b      	add	r3, r1
 8000620:	4619      	mov	r1, r3
 8000622:	4610      	mov	r0, r2
 8000624:	47a0      	blx	r4
       /*** for test only...
 		 printf("\r\nparamValues[0]: %d, paramValues[1]: %d, paramValues[2]: %d",
               mcuCmds[i].paramValues[0],mcuCmds[i].paramValues[1],mcuCmds[i].paramValues[2]);
               ***/
 		 promt();
 8000626:	f7ff ffab 	bl	8000580 <promt>
     	 return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e014      	b.n	8000658 <executeCmd+0xb4>
   for (; i < numberOfCommands; i++) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8bd      	bhi.n	80005b8 <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d808      	bhi.n	8000656 <executeCmd+0xb2>
      printf("\r\nThe command: %s[%d], is not recognized", termInput, numberOfCommands);
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <executeCmd+0xc0>)
 800064a:	f005 fa8d 	bl	8005b68 <iprintf>
      promt();
 800064e:	f7ff ff97 	bl	8000580 <promt>
      return -1;
 8000652:	23ff      	movs	r3, #255	; 0xff
 8000654:	e000      	b.n	8000658 <executeCmd+0xb4>
   }
   else {
	  return -2;
 8000656:	23fe      	movs	r3, #254	; 0xfe
   }
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	20000004 	.word	0x20000004
 8000664:	08006ab0 	.word	0x08006ab0

08000668 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	b29a      	uxth	r2, r3
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	68b9      	ldr	r1, [r7, #8]
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <_write+0x28>)
 8000680:	f003 fdec 	bl	800425c <HAL_UART_Transmit>
	return len;
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200003b0 	.word	0x200003b0

08000694 <HAL_UART_RxCpltCallback>:
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
uint8_t timMode = ONE_SHOT;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <HAL_UART_RxCpltCallback+0x90>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b0d      	cmp	r3, #13
 80006a2:	d126      	bne.n	80006f2 <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <HAL_UART_RxCpltCallback+0x94>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dd1a      	ble.n	80006e2 <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	481e      	ldr	r0, [pc, #120]	; (800072c <HAL_UART_RxCpltCallback+0x98>)
 80006b4:	f001 fe0a 	bl	80022cc <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_UART_RxCpltCallback+0x94>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	481c      	ldr	r0, [pc, #112]	; (8000730 <HAL_UART_RxCpltCallback+0x9c>)
 80006c0:	f7ff ff70 	bl	80005a4 <executeCmd>
			bytesReceived = 0;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_UART_RxCpltCallback+0x94>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80006ca:	2250      	movs	r2, #80	; 0x50
 80006cc:	2100      	movs	r1, #0
 80006ce:	4818      	ldr	r0, [pc, #96]	; (8000730 <HAL_UART_RxCpltCallback+0x9c>)
 80006d0:	f005 f997 	bl	8005a02 <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <HAL_UART_RxCpltCallback+0x98>)
 80006dc:	f001 fdf6 	bl	80022cc <HAL_GPIO_WritePin>
 80006e0:	e001      	b.n	80006e6 <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 80006e2:	f7ff ff4d 	bl	8000580 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	490e      	ldr	r1, [pc, #56]	; (8000724 <HAL_UART_RxCpltCallback+0x90>)
 80006ea:	4812      	ldr	r0, [pc, #72]	; (8000734 <HAL_UART_RxCpltCallback+0xa0>)
 80006ec:	f003 fe40 	bl	8004370 <HAL_UART_Receive_IT>
		return;
 80006f0:	e015      	b.n	800071e <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	2201      	movs	r2, #1
 80006f6:	490b      	ldr	r1, [pc, #44]	; (8000724 <HAL_UART_RxCpltCallback+0x90>)
 80006f8:	480e      	ldr	r0, [pc, #56]	; (8000734 <HAL_UART_RxCpltCallback+0xa0>)
 80006fa:	f003 fdaf 	bl	800425c <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_UART_RxCpltCallback+0x94>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_UART_RxCpltCallback+0x90>)
 8000704:	7811      	ldrb	r1, [r2, #0]
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <HAL_UART_RxCpltCallback+0x9c>)
 8000708:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <HAL_UART_RxCpltCallback+0x94>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a05      	ldr	r2, [pc, #20]	; (8000728 <HAL_UART_RxCpltCallback+0x94>)
 8000712:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	4903      	ldr	r1, [pc, #12]	; (8000724 <HAL_UART_RxCpltCallback+0x90>)
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <HAL_UART_RxCpltCallback+0xa0>)
 800071a:	f003 fe29 	bl	8004370 <HAL_UART_Receive_IT>
}
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000348 	.word	0x20000348
 8000728:	2000034c 	.word	0x2000034c
 800072c:	48000400 	.word	0x48000400
 8000730:	20000438 	.word	0x20000438
 8000734:	200003b0 	.word	0x200003b0

08000738 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
   if (timMode == ONE_SHOT) {
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d108      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x22>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074c:	480e      	ldr	r0, [pc, #56]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800074e:	f001 fdd5 	bl	80022fc <HAL_GPIO_TogglePin>
      HAL_TIM_Base_Stop_IT(&htim2);
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000754:	f003 f968 	bl	8003a28 <HAL_TIM_Base_Stop_IT>
         HAL_TIM_Base_Stop_IT(&htim2);
      }
   }
   //printf("\r\nHAL_TIM_PeriodElapsedCallback");
   //promt();
}
 8000758:	e010      	b.n	800077c <HAL_TIM_PeriodElapsedCallback+0x44>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000760:	f001 fdcc 	bl	80022fc <HAL_GPIO_TogglePin>
      if (timRepeatCount++ > timRepeat) {
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	4909      	ldr	r1, [pc, #36]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800076c:	600a      	str	r2, [r1, #0]
 800076e:	4a09      	ldr	r2, [pc, #36]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	4293      	cmp	r3, r2
 8000774:	dd02      	ble.n	800077c <HAL_TIM_PeriodElapsedCallback+0x44>
         HAL_TIM_Base_Stop_IT(&htim2);
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000778:	f003 f956 	bl	8003a28 <HAL_TIM_Base_Stop_IT>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000351 	.word	0x20000351
 8000788:	48000400 	.word	0x48000400
 800078c:	2000048c 	.word	0x2000048c
 8000790:	20000340 	.word	0x20000340
 8000794:	20000000 	.word	0x20000000

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <main+0xb8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6898      	ldr	r0, [r3, #8]
 80007a4:	2300      	movs	r3, #0
 80007a6:	2202      	movs	r2, #2
 80007a8:	2100      	movs	r1, #0
 80007aa:	f005 fa7b 	bl	8005ca4 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fbc9 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f85d 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 f9a1 	bl	8000afc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007ba:	f000 f96f 	bl	8000a9c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80007be:	f000 f8a7 	bl	8000910 <MX_ADC1_Init>
  MX_TIM2_Init();
 80007c2:	f000 f91b 	bl	80009fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80007c6:	2201      	movs	r2, #1
 80007c8:	4922      	ldr	r1, [pc, #136]	; (8000854 <main+0xbc>)
 80007ca:	4823      	ldr	r0, [pc, #140]	; (8000858 <main+0xc0>)
 80007cc:	f003 fdd0 	bl	8004370 <HAL_UART_Receive_IT>

  //HAL_TIM_Base_Start_IT(&htim2);

  uint8_t ledState = OFF;
 80007d0:	2300      	movs	r3, #0
 80007d2:	71fb      	strb	r3, [r7, #7]
  printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <main+0xc4>)
 80007d6:	f005 f9c7 	bl	8005b68 <iprintf>
  printf("\r\nBuild No. %d", BUILD);
 80007da:	2164      	movs	r1, #100	; 0x64
 80007dc:	4820      	ldr	r0, [pc, #128]	; (8000860 <main+0xc8>)
 80007de:	f005 f9c3 	bl	8005b68 <iprintf>
  promt();
 80007e2:	f7ff fecd 	bl	8000580 <promt>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <main+0xcc>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d013      	beq.n	8000818 <main+0x80>
			ledState = led2;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <main+0xcc>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	71fb      	strb	r3, [r7, #7]
			if (led2 == ON) {
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <main+0xcc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d106      	bne.n	800080c <main+0x74>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	4818      	ldr	r0, [pc, #96]	; (8000868 <main+0xd0>)
 8000806:	f001 fd61 	bl	80022cc <HAL_GPIO_WritePin>
 800080a:	e005      	b.n	8000818 <main+0x80>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <main+0xd0>)
 8000814:	f001 fd5a 	bl	80022cc <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <main+0xcc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d1e2      	bne.n	80007e6 <main+0x4e>
		   if (msValue > 0) {
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <main+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dd0a      	ble.n	800083e <main+0xa6>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082c:	480e      	ldr	r0, [pc, #56]	; (8000868 <main+0xd0>)
 800082e:	f001 fd65 	bl	80022fc <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <main+0xd4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fbea 	bl	8001010 <HAL_Delay>
 800083c:	e7d3      	b.n	80007e6 <main+0x4e>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <main+0xd0>)
 8000846:	f001 fd41 	bl	80022cc <HAL_GPIO_WritePin>
			   ledState = OFF;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
		if (led2 != ledState) {
 800084e:	e7ca      	b.n	80007e6 <main+0x4e>
 8000850:	200002c0 	.word	0x200002c0
 8000854:	20000348 	.word	0x20000348
 8000858:	200003b0 	.word	0x200003b0
 800085c:	08006adc 	.word	0x08006adc
 8000860:	08006b18 	.word	0x08006b18
 8000864:	20000350 	.word	0x20000350
 8000868:	48000400 	.word	0x48000400
 800086c:	20000344 	.word	0x20000344

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	; 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800087a:	2228      	movs	r2, #40	; 0x28
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f005 f8bf 	bl	8005a02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f005 f8b1 	bl	8005a02 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	2310      	movs	r3, #16
 80008aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fd3b 	bl	8002330 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80008c0:	f000 f968 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fc2e 	bl	8003140 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008ea:	f000 f953 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fe57 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000904:	f000 f946 	bl	8000b94 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3770      	adds	r7, #112	; 0x70
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
 8000924:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000928:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800092c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800092e:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000930:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000936:	4b30      	ldr	r3, [pc, #192]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800093c:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <MX_ADC1_Init+0xe8>)
 800093e:	2201      	movs	r2, #1
 8000940:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000944:	2201      	movs	r2, #1
 8000946:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <MX_ADC1_Init+0xe8>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000956:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000958:	2201      	movs	r2, #1
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095c:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_ADC1_Init+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000964:	2203      	movs	r2, #3
 8000966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_ADC1_Init+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000972:	2208      	movs	r2, #8
 8000974:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000978:	2200      	movs	r2, #0
 800097a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_ADC1_Init+0xe8>)
 800097e:	2200      	movs	r2, #0
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000982:	481d      	ldr	r0, [pc, #116]	; (80009f8 <MX_ADC1_Init+0xe8>)
 8000984:	f000 fb68 	bl	8001058 <HAL_ADC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800098e:	f000 f901 	bl	8000b94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000992:	230f      	movs	r3, #15
 8000994:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000996:	2301      	movs	r3, #1
 8000998:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_ADC1_Init+0xe8>)
 80009b0:	f000 fe12 	bl	80015d8 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009ba:	f000 f8eb 	bl	8000b94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009be:	2302      	movs	r3, #2
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_ADC1_Init+0xe8>)
 80009c8:	f000 fe06 	bl	80015d8 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80009d2:	f000 f8df 	bl	8000b94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009d6:	2303      	movs	r3, #3
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_ADC1_Init+0xe8>)
 80009e0:	f000 fdfa 	bl	80015d8 <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009ea:	f000 f8d3 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000360 	.word	0x20000360

080009fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4814      	ldr	r0, [pc, #80]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a48:	f002 ff42 	bl	80038d0 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a52:	f000 f89f 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a64:	f003 f92e 	bl	8003cc4 <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000a6e:	f000 f891 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_TIM2_Init+0x9c>)
 8000a80:	f003 fb1a 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a8a:	f000 f883 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000048c 	.word	0x2000048c

08000a9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <MX_USART1_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000aa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART1_UART_Init+0x58>)
 8000ae0:	f003 fb6e 	bl	80041c0 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f853 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200003b0 	.word	0x200003b0
 8000af8:	40013800 	.word	0x40013800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4c:	6153      	str	r3, [r2, #20]
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_GPIO_Init+0x90>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <MX_GPIO_Init+0x94>)
 8000b62:	f001 fbb3 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_GPIO_Init+0x94>)
 8000b80:	f001 fa32 	bl	8001fe8 <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c08:	d124      	bne.n	8000c54 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_ADC_MspInit+0x74>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_ADC_MspInit+0x74>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_ADC_MspInit+0x74>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_ADC_MspInit+0x74>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_ADC_MspInit+0x74>)
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_ADC_MspInit+0x74>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f001 f9ca 	bl	8001fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c70:	d113      	bne.n	8000c9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_TIM_Base_MspInit+0x44>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <HAL_TIM_Base_MspInit+0x44>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_TIM_Base_MspInit+0x44>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	201c      	movs	r0, #28
 8000c90:	f001 f8fd 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c94:	201c      	movs	r0, #28
 8000c96:	f001 f916 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_UART_MspInit+0x8c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12f      	bne.n	8000d2a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cfa:	2330      	movs	r3, #48	; 0x30
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <HAL_UART_MspInit+0x94>)
 8000d16:	f001 f967 	bl	8001fe8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2025      	movs	r0, #37	; 0x25
 8000d20:	f001 f8b5 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d24:	2025      	movs	r0, #37	; 0x25
 8000d26:	f001 f8ce 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40013800 	.word	0x40013800
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000800 	.word	0x48000800

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f920 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM2_IRQHandler+0x10>)
 8000d9a:	f002 fe74 	bl	8003a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000048c 	.word	0x2000048c

08000da8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <USART1_IRQHandler+0x10>)
 8000dae:	f003 fb23 	bl	80043f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200003b0 	.word	0x200003b0

08000dbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e00a      	b.n	8000de4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dce:	f3af 8000 	nop.w
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbf0      	blt.n	8000dce <_read+0x12>
	}

return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_isatty>:

int _isatty(int file)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	return 1;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f004 fbc0 	bl	8005614 <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20004000 	.word	0x20004000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000354 	.word	0x20000354
 8000ec8:	200004f0 	.word	0x200004f0

08000ecc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef4:	f7ff ffea 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopForever+0xe>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopForever+0x16>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f004 fd49 	bl	80059b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f22:	f7ff fc39 	bl	8000798 <main>

08000f26 <LoopForever>:

LoopForever:
    b LoopForever
 8000f26:	e7fe      	b.n	8000f26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f28:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 8000f34:	08006d00 	.word	0x08006d00
  ldr r2, =_sbss
 8000f38:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 8000f3c:	200004ec 	.word	0x200004ec

08000f40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 ff8f 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fe1e 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 ffa7 	bl	8001ee2 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 ff6f 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200002b4 	.word	0x200002b4
 8000fc8:	200002bc 	.word	0x200002bc
 8000fcc:	200002b8 	.word	0x200002b8

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200002bc 	.word	0x200002bc
 8000ff4:	200004d8 	.word	0x200004d8

08000ff8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200004d8 	.word	0x200004d8

08001010 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200002bc 	.word	0x200002bc

08001058 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09a      	sub	sp, #104	; 0x68
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e169      	b.n	800134c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2b00      	cmp	r3, #0
 8001088:	d176      	bne.n	8001178 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	d152      	bne.n	8001138 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fd9b 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d13b      	bne.n	8001138 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fda3 	bl	8001c0c <ADC_Disable>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d12f      	bne.n	8001138 <HAL_ADC_Init+0xe0>
 80010d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d12b      	bne.n	8001138 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e8:	f023 0302 	bic.w	r3, r3, #2
 80010ec:	f043 0202 	orr.w	r2, r3, #2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001102:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001112:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001114:	4b8f      	ldr	r3, [pc, #572]	; (8001354 <HAL_ADC_Init+0x2fc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a8f      	ldr	r2, [pc, #572]	; (8001358 <HAL_ADC_Init+0x300>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	0c9a      	lsrs	r2, r3, #18
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800112a:	e002      	b.n	8001132 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3b01      	subs	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f9      	bne.n	800112c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001154:	d110      	bne.n	8001178 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f023 0312 	bic.w	r3, r3, #18
 800115e:	f043 0210 	orr.w	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f043 0201 	orr.w	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	f040 80d6 	bne.w	8001332 <HAL_ADC_Init+0x2da>
 8001186:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 80d1 	bne.w	8001332 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800119a:	2b00      	cmp	r3, #0
 800119c:	f040 80c9 	bne.w	8001332 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011a8:	f043 0202 	orr.w	r2, r3, #2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b0:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_ADC_Init+0x304>)
 80011b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_ADC_Init+0x180>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <HAL_ADC_Init+0x180>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <HAL_ADC_Init+0x182>
 80011d8:	2300      	movs	r3, #0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11c      	bne.n	8001218 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011de:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d010      	beq.n	8001206 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d107      	bne.n	8001200 <HAL_ADC_Init+0x1a8>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_Init+0x1a8>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_ADC_Init+0x1aa>
 8001200:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001202:	2b00      	cmp	r3, #0
 8001204:	d108      	bne.n	8001218 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	431a      	orrs	r2, r3
 8001214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001216:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e5b      	ldrb	r3, [r3, #25]
 800121c:	035b      	lsls	r3, r3, #13
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001222:	2a01      	cmp	r2, #1
 8001224:	d002      	beq.n	800122c <HAL_ADC_Init+0x1d4>
 8001226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122a:	e000      	b.n	800122e <HAL_ADC_Init+0x1d6>
 800122c:	2200      	movs	r2, #0
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	4313      	orrs	r3, r2
 800123c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800123e:	4313      	orrs	r3, r2
 8001240:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d11b      	bne.n	8001284 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7e5b      	ldrb	r3, [r3, #25]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d109      	bne.n	8001268 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	3b01      	subs	r3, #1
 800125a:	045a      	lsls	r2, r3, #17
 800125c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800125e:	4313      	orrs	r3, r2
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	663b      	str	r3, [r7, #96]	; 0x60
 8001266:	e00d      	b.n	8001284 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001270:	f043 0220 	orr.w	r2, r3, #32
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	2b01      	cmp	r3, #1
 800128a:	d007      	beq.n	800129c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	4313      	orrs	r3, r2
 8001296:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001298:	4313      	orrs	r3, r2
 800129a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d114      	bne.n	80012d4 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012b8:	f023 0302 	bic.w	r3, r3, #2
 80012bc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e1b      	ldrb	r3, [r3, #24]
 80012c2:	039a      	lsls	r2, r3, #14
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4313      	orrs	r3, r2
 80012ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012d0:	4313      	orrs	r3, r2
 80012d2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_ADC_Init+0x308>)
 80012dc:	4013      	ands	r3, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012e4:	430b      	orrs	r3, r1
 80012e6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10c      	bne.n	800130a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f023 010f 	bic.w	r1, r3, #15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
 8001308:	e007      	b.n	800131a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 020f 	bic.w	r2, r2, #15
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f023 0303 	bic.w	r3, r3, #3
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
 8001330:	e00a      	b.n	8001348 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f023 0312 	bic.w	r3, r3, #18
 800133a:	f043 0210 	orr.w	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001342:	2301      	movs	r3, #1
 8001344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001348:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800134c:	4618      	mov	r0, r3
 800134e:	3768      	adds	r7, #104	; 0x68
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200002b4 	.word	0x200002b4
 8001358:	431bde83 	.word	0x431bde83
 800135c:	50000300 	.word	0x50000300
 8001360:	fff0c007 	.word	0xfff0c007

08001364 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d158      	bne.n	8001430 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_ADC_Start+0x28>
 8001388:	2302      	movs	r3, #2
 800138a:	e054      	b.n	8001436 <HAL_ADC_Start+0xd2>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fbd5 	bl	8001b44 <ADC_Enable>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d140      	bne.n	8001426 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ee:	d106      	bne.n	80013fe <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	f023 0206 	bic.w	r2, r3, #6
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
 80013fc:	e002      	b.n	8001404 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	221c      	movs	r2, #28
 8001412:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0204 	orr.w	r2, r2, #4
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	e006      	b.n	8001434 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800142e:	e001      	b.n	8001434 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001430:	2302      	movs	r3, #2
 8001432:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b08      	cmp	r3, #8
 8001454:	d102      	bne.n	800145c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001456:	2308      	movs	r3, #8
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e02e      	b.n	80014ba <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145c:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <HAL_ADC_PollForConversion+0x178>)
 800145e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	2b00      	cmp	r3, #0
 800146a:	d112      	bne.n	8001492 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b01      	cmp	r3, #1
 8001478:	d11d      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f043 0220 	orr.w	r2, r3, #32
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e08d      	b.n	80015ae <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f043 0220 	orr.w	r2, r3, #32
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e07b      	b.n	80015ae <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014b6:	230c      	movs	r3, #12
 80014b8:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80014c2:	f7ff fd99 	bl	8000ff8 <HAL_GetTick>
 80014c6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014c8:	e021      	b.n	800150e <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d01d      	beq.n	800150e <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_ADC_PollForConversion+0xa8>
 80014d8:	f7ff fd8e 	bl	8000ff8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d212      	bcs.n	800150e <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10b      	bne.n	800150e <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f043 0204 	orr.w	r2, r3, #4
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e04f      	b.n	80015ae <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0d6      	beq.n	80014ca <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001532:	2b00      	cmp	r3, #0
 8001534:	d131      	bne.n	800159a <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800153c:	2b00      	cmp	r3, #0
 800153e:	d12c      	bne.n	800159a <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b08      	cmp	r3, #8
 800154c:	d125      	bne.n	800159a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d112      	bne.n	8001582 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d112      	bne.n	800159a <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
 8001580:	e00b      	b.n	800159a <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f043 0220 	orr.w	r2, r3, #32
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	50000300 	.word	0x50000300

080015bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015d8:	b480      	push	{r7}
 80015da:	b09b      	sub	sp, #108	; 0x6c
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x22>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e299      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x556>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 827d 	bne.w	8001b0c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b04      	cmp	r3, #4
 8001618:	d81c      	bhi.n	8001654 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	461a      	mov	r2, r3
 800162e:	231f      	movs	r3, #31
 8001630:	4093      	lsls	r3, r2
 8001632:	43db      	mvns	r3, r3
 8001634:	4019      	ands	r1, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	631a      	str	r2, [r3, #48]	; 0x30
 8001652:	e063      	b.n	800171c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b09      	cmp	r3, #9
 800165a:	d81e      	bhi.n	800169a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	3b1e      	subs	r3, #30
 8001670:	221f      	movs	r2, #31
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	4019      	ands	r1, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	3b1e      	subs	r3, #30
 800168c:	fa00 f203 	lsl.w	r2, r0, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	635a      	str	r2, [r3, #52]	; 0x34
 8001698:	e040      	b.n	800171c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b0e      	cmp	r3, #14
 80016a0:	d81e      	bhi.n	80016e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	3b3c      	subs	r3, #60	; 0x3c
 80016b6:	221f      	movs	r2, #31
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	4019      	ands	r1, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	3b3c      	subs	r3, #60	; 0x3c
 80016d2:	fa00 f203 	lsl.w	r2, r0, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
 80016de:	e01d      	b.n	800171c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	3b5a      	subs	r3, #90	; 0x5a
 80016f4:	221f      	movs	r2, #31
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	4019      	ands	r1, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	3b5a      	subs	r3, #90	; 0x5a
 8001710:	fa00 f203 	lsl.w	r2, r0, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80e5 	bne.w	80018f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d91c      	bls.n	800176e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6999      	ldr	r1, [r3, #24]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	3b1e      	subs	r3, #30
 8001746:	2207      	movs	r2, #7
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6898      	ldr	r0, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	3b1e      	subs	r3, #30
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	e019      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6959      	ldr	r1, [r3, #20]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	2207      	movs	r2, #7
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6898      	ldr	r0, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	fa00 f203 	lsl.w	r2, r0, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	3b01      	subs	r3, #1
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d84f      	bhi.n	8001864 <HAL_ADC_ConfigChannel+0x28c>
 80017c4:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <HAL_ADC_ConfigChannel+0x1f4>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017ff 	.word	0x080017ff
 80017d4:	08001821 	.word	0x08001821
 80017d8:	08001843 	.word	0x08001843
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017e2:	4b99      	ldr	r3, [pc, #612]	; (8001a48 <HAL_ADC_ConfigChannel+0x470>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	0691      	lsls	r1, r2, #26
 80017ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017ee:	430a      	orrs	r2, r1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017fc:	e07e      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001804:	4b90      	ldr	r3, [pc, #576]	; (8001a48 <HAL_ADC_ConfigChannel+0x470>)
 8001806:	4013      	ands	r3, r2
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	0691      	lsls	r1, r2, #26
 800180e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001810:	430a      	orrs	r2, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800181c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800181e:	e06d      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_ADC_ConfigChannel+0x470>)
 8001828:	4013      	ands	r3, r2
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	0691      	lsls	r1, r2, #26
 8001830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001832:	430a      	orrs	r2, r1
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800183e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001840:	e05c      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001848:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <HAL_ADC_ConfigChannel+0x470>)
 800184a:	4013      	ands	r3, r2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	0691      	lsls	r1, r2, #26
 8001852:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001854:	430a      	orrs	r2, r1
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001860:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001862:	e04b      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	069b      	lsls	r3, r3, #26
 8001874:	429a      	cmp	r2, r3
 8001876:	d107      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001886:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800188e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	069b      	lsls	r3, r3, #26
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	069b      	lsls	r3, r3, #26
 80018bc:	429a      	cmp	r2, r3
 80018be:	d107      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	069b      	lsls	r3, r3, #26
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d10a      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018f4:	e001      	b.n	80018fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80018fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d108      	bne.n	800191c <HAL_ADC_ConfigChannel+0x344>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x344>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_ADC_ConfigChannel+0x346>
 800191c:	2300      	movs	r3, #0
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 80ff 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d00f      	beq.n	800194c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800194a:	e049      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b09      	cmp	r3, #9
 800196c:	d91c      	bls.n	80019a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6999      	ldr	r1, [r3, #24]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	3b1b      	subs	r3, #27
 8001980:	2207      	movs	r2, #7
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	4019      	ands	r1, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6898      	ldr	r0, [r3, #8]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	3b1b      	subs	r3, #27
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	e01b      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6959      	ldr	r1, [r3, #20]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	2207      	movs	r2, #7
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4019      	ands	r1, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6898      	ldr	r0, [r3, #8]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	fa00 f203 	lsl.w	r2, r0, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_ADC_ConfigChannel+0x474>)
 80019e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d014      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019fc:	2b11      	cmp	r3, #17
 80019fe:	d105      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00a      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a10:	2b12      	cmp	r3, #18
 8001a12:	f040 8086 	bne.w	8001b22 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d17f      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10d      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x478>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x478>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e005      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x47a>
 8001a46:	bf00      	nop
 8001a48:	83fff000 	.word	0x83fff000
 8001a4c:	50000300 	.word	0x50000300
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d150      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a56:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x4a0>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x4a0>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x4a2>
 8001a78:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d13c      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d11d      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x4ea>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8e:	d118      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_ADC_ConfigChannel+0x564>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <HAL_ADC_ConfigChannel+0x568>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9a      	lsrs	r2, r3, #18
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab2:	e002      	b.n	8001aba <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f9      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ac0:	e02e      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b11      	cmp	r3, #17
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x50a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ade:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ae0:	e01e      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d11a      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001af6:	e013      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0220 	orr.w	r2, r3, #32
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b0a:	e00a      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f043 0220 	orr.w	r2, r3, #32
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b1e:	e000      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b20:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	376c      	adds	r7, #108	; 0x6c
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	200002b4 	.word	0x200002b4
 8001b40:	431bde83 	.word	0x431bde83

08001b44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <ADC_Enable+0x2c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <ADC_Enable+0x2c>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <ADC_Enable+0x2e>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d143      	bne.n	8001bfe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <ADC_Enable+0xc4>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00d      	beq.n	8001ba0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f043 0210 	orr.w	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e02f      	b.n	8001c00 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001bb0:	f7ff fa22 	bl	8000ff8 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bb6:	e01b      	b.n	8001bf0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bb8:	f7ff fa1e 	bl	8000ff8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d914      	bls.n	8001bf0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d00d      	beq.n	8001bf0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f043 0210 	orr.w	r2, r3, #16
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e007      	b.n	8001c00 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d1dc      	bne.n	8001bb8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	8000003f 	.word	0x8000003f

08001c0c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d108      	bne.n	8001c38 <ADC_Disable+0x2c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <ADC_Disable+0x2c>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <ADC_Disable+0x2e>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d047      	beq.n	8001cce <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030d 	and.w	r3, r3, #13
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10f      	bne.n	8001c6c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0202 	orr.w	r2, r2, #2
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2203      	movs	r2, #3
 8001c62:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c64:	f7ff f9c8 	bl	8000ff8 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c6a:	e029      	b.n	8001cc0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e023      	b.n	8001cd0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c88:	f7ff f9b6 	bl	8000ff8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d914      	bls.n	8001cc0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10d      	bne.n	8001cc0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f043 0210 	orr.w	r2, r3, #16
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e007      	b.n	8001cd0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d0dc      	beq.n	8001c88 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff29 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff3e 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff8e 	bl	8001dcc <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5d 	bl	8001d78 <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff31 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffa2 	bl	8001e34 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d008      	beq.n	8001f1e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e020      	b.n	8001f60 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 020e 	bic.w	r2, r2, #14
 8001f2c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d005      	beq.n	8001f8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2204      	movs	r2, #4
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e027      	b.n	8001fde <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 020e 	bic.w	r2, r2, #14
 8001f9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
    } 
  }
  return status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	e14e      	b.n	8002296 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8140 	beq.w	8002290 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d005      	beq.n	8002028 <HAL_GPIO_Init+0x40>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d130      	bne.n	800208a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205e:	2201      	movs	r2, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 0201 	and.w	r2, r3, #1
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b03      	cmp	r3, #3
 8002094:	d017      	beq.n	80020c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d123      	bne.n	800211a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	6939      	ldr	r1, [r7, #16]
 8002116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0203 	and.w	r2, r3, #3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 809a 	beq.w	8002290 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215c:	4b55      	ldr	r3, [pc, #340]	; (80022b4 <HAL_GPIO_Init+0x2cc>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a54      	ldr	r2, [pc, #336]	; (80022b4 <HAL_GPIO_Init+0x2cc>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b52      	ldr	r3, [pc, #328]	; (80022b4 <HAL_GPIO_Init+0x2cc>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x2d0>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_Init+0x1e0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a46      	ldr	r2, [pc, #280]	; (80022bc <HAL_GPIO_Init+0x2d4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1dc>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a45      	ldr	r2, [pc, #276]	; (80022c0 <HAL_GPIO_Init+0x2d8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1d8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a44      	ldr	r2, [pc, #272]	; (80022c4 <HAL_GPIO_Init+0x2dc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1d4>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_Init+0x1e2>
 80021bc:	2305      	movs	r3, #5
 80021be:	e004      	b.n	80021ca <HAL_GPIO_Init+0x1e2>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x1e2>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_Init+0x1e2>
 80021c8:	2300      	movs	r3, #0
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021da:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HAL_GPIO_Init+0x2d0>)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e8:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800220c:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002236:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f aea9 	bne.w	8001ff8 <HAL_GPIO_Init+0x10>
  }
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010000 	.word	0x40010000
 80022bc:	48000400 	.word	0x48000400
 80022c0:	48000800 	.word	0x48000800
 80022c4:	48000c00 	.word	0x48000c00
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43d9      	mvns	r1, r3
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	400b      	ands	r3, r1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002336:	af00      	add	r7, sp, #0
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	f000 bef4 	b.w	8003132 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 816a 	beq.w	800262e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800235a:	4bb3      	ldr	r3, [pc, #716]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d00c      	beq.n	8002380 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002366:	4bb0      	ldr	r3, [pc, #704]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b08      	cmp	r3, #8
 8002370:	d159      	bne.n	8002426 <HAL_RCC_OscConfig+0xf6>
 8002372:	4bad      	ldr	r3, [pc, #692]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237e:	d152      	bne.n	8002426 <HAL_RCC_OscConfig+0xf6>
 8002380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002384:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002394:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_OscConfig+0x82>
 80023ac:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0xae>
 80023b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80023da:	4b93      	ldr	r3, [pc, #588]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023e2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80023e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023ea:	fa92 f2a2 	rbit	r2, r2
 80023ee:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80023f2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f042 0220 	orr.w	r2, r2, #32
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f002 021f 	and.w	r2, r2, #31
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 810c 	beq.w	800262c <HAL_RCC_OscConfig+0x2fc>
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 8106 	bne.w	800262c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	f000 be86 	b.w	8003132 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d106      	bne.n	8002440 <HAL_RCC_OscConfig+0x110>
 8002432:	4b7d      	ldr	r3, [pc, #500]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7c      	ldr	r2, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e030      	b.n	80024a2 <HAL_RCC_OscConfig+0x172>
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x134>
 800244a:	4b77      	ldr	r3, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a76      	ldr	r2, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b74      	ldr	r3, [pc, #464]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a73      	ldr	r2, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01e      	b.n	80024a2 <HAL_RCC_OscConfig+0x172>
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x15a>
 8002470:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	e00b      	b.n	80024a2 <HAL_RCC_OscConfig+0x172>
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a63      	ldr	r2, [pc, #396]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 800249c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024a2:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f023 020f 	bic.w	r2, r3, #15
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	495d      	ldr	r1, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d059      	beq.n	8002574 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fd9a 	bl	8000ff8 <HAL_GetTick>
 80024c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ca:	f7fe fd95 	bl	8000ff8 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d902      	bls.n	80024e0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	f000 be29 	b.w	8003132 <HAL_RCC_OscConfig+0xe02>
 80024e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80024f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_RCC_OscConfig+0x1e2>
 800250c:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x20e>
 8002512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002516:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800252e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002542:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002546:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800254a:	fa92 f2a2 	rbit	r2, r2
 800254e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002552:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002556:	fab2 f282 	clz	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f042 0220 	orr.w	r2, r2, #32
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f002 021f 	and.w	r2, r2, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ab      	beq.n	80024ca <HAL_RCC_OscConfig+0x19a>
 8002572:	e05c      	b.n	800262e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fd40 	bl	8000ff8 <HAL_GetTick>
 8002578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257e:	f7fe fd3b 	bl	8000ff8 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d902      	bls.n	8002594 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	f000 bdcf 	b.w	8003132 <HAL_RCC_OscConfig+0xe02>
 8002594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002598:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_OscConfig+0x296>
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x2c2>
 80025c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_RCC_OscConfig+0x2f8>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80025fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025fe:	fa92 f2a2 	rbit	r2, r2
 8002602:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002606:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f042 0220 	orr.w	r2, r2, #32
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f002 021f 	and.w	r2, r2, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ab      	bne.n	800257e <HAL_RCC_OscConfig+0x24e>
 8002626:	e002      	b.n	800262e <HAL_RCC_OscConfig+0x2fe>
 8002628:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 816f 	beq.w	800291c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800263e:	4bd0      	ldr	r3, [pc, #832]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800264a:	4bcd      	ldr	r3, [pc, #820]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d16c      	bne.n	8002730 <HAL_RCC_OscConfig+0x400>
 8002656:	4bca      	ldr	r3, [pc, #808]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d166      	bne.n	8002730 <HAL_RCC_OscConfig+0x400>
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002674:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d102      	bne.n	8002692 <HAL_RCC_OscConfig+0x362>
 800268c:	4bbc      	ldr	r3, [pc, #752]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	e013      	b.n	80026ba <HAL_RCC_OscConfig+0x38a>
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026b6:	4bb2      	ldr	r3, [pc, #712]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	2202      	movs	r2, #2
 80026bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026c4:	fa92 f2a2 	rbit	r2, r2
 80026c8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80026cc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80026d0:	fab2 f282 	clz	r2, r2
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f042 0220 	orr.w	r2, r2, #32
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f002 021f 	and.w	r2, r2, #31
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f202 	lsl.w	r2, r1, r2
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_RCC_OscConfig+0x3cc>
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f000 bd1b 	b.w	8003132 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4ba0      	ldr	r3, [pc, #640]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	21f8      	movs	r1, #248	; 0xf8
 800270c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002714:	fa91 f1a1 	rbit	r1, r1
 8002718:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800271c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002720:	fab1 f181 	clz	r1, r1
 8002724:	b2c9      	uxtb	r1, r1
 8002726:	408b      	lsls	r3, r1
 8002728:	4995      	ldr	r1, [pc, #596]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	e0f5      	b.n	800291c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8085 	beq.w	8002846 <HAL_RCC_OscConfig+0x516>
 800273c:	2301      	movs	r3, #1
 800273e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800274e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800275c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	461a      	mov	r2, r3
 8002764:	2301      	movs	r3, #1
 8002766:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fc46 	bl	8000ff8 <HAL_GetTick>
 800276c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002772:	f7fe fc41 	bl	8000ff8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	f000 bcd5 	b.w	8003132 <HAL_RCC_OscConfig+0xe02>
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800279a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d102      	bne.n	80027b8 <HAL_RCC_OscConfig+0x488>
 80027b2:	4b73      	ldr	r3, [pc, #460]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	e013      	b.n	80027e0 <HAL_RCC_OscConfig+0x4b0>
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2202      	movs	r2, #2
 80027e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80027e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80027f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80027f6:	fab2 f282 	clz	r2, r2
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f002 021f 	and.w	r2, r2, #31
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0af      	beq.n	8002772 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	21f8      	movs	r1, #248	; 0xf8
 8002822:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800282a:	fa91 f1a1 	rbit	r1, r1
 800282e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002832:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002836:	fab1 f181 	clz	r1, r1
 800283a:	b2c9      	uxtb	r1, r1
 800283c:	408b      	lsls	r3, r1
 800283e:	4950      	ldr	r1, [pc, #320]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
 8002844:	e06a      	b.n	800291c <HAL_RCC_OscConfig+0x5ec>
 8002846:	2301      	movs	r3, #1
 8002848:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002858:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002866:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	461a      	mov	r2, r3
 800286e:	2300      	movs	r3, #0
 8002870:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe fbc1 	bl	8000ff8 <HAL_GetTick>
 8002876:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287c:	f7fe fbbc 	bl	8000ff8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d902      	bls.n	8002892 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	f000 bc50 	b.w	8003132 <HAL_RCC_OscConfig+0xe02>
 8002892:	2302      	movs	r3, #2
 8002894:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <HAL_RCC_OscConfig+0x592>
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	e013      	b.n	80028ea <HAL_RCC_OscConfig+0x5ba>
 80028c2:	2302      	movs	r3, #2
 80028c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028d4:	2302      	movs	r3, #2
 80028d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_RCC_OscConfig+0x650>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	2202      	movs	r2, #2
 80028ec:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80028f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028f4:	fa92 f2a2 	rbit	r2, r2
 80028f8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80028fc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f042 0220 	orr.w	r2, r2, #32
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f002 021f 	and.w	r2, r2, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1af      	bne.n	800287c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80da 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d069      	beq.n	8002a0a <HAL_RCC_OscConfig+0x6da>
 8002936:	2301      	movs	r3, #1
 8002938:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x654>)
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	461a      	mov	r2, r3
 800295c:	2301      	movs	r3, #1
 800295e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fb4a 	bl	8000ff8 <HAL_GetTick>
 8002964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002968:	e00e      	b.n	8002988 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fb45 	bl	8000ff8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d906      	bls.n	8002988 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e3d9      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	10908120 	.word	0x10908120
 8002988:	2302      	movs	r3, #2
 800298a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800299a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800299e:	2202      	movs	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029b6:	2202      	movs	r2, #2
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f2a3 	rbit	r2, r3
 80029c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4ba5      	ldr	r3, [pc, #660]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 80029cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029d2:	2102      	movs	r1, #2
 80029d4:	6019      	str	r1, [r3, #0]
 80029d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f1a3 	rbit	r1, r3
 80029e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029e4:	6019      	str	r1, [r3, #0]
  return result;
 80029e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0b0      	beq.n	800296a <HAL_RCC_OscConfig+0x63a>
 8002a08:	e06a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x7b0>
 8002a0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f2a3 	rbit	r2, r3
 8002a1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a20:	601a      	str	r2, [r3, #0]
  return result;
 8002a22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a26:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x934>)
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	461a      	mov	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fadc 	bl	8000ff8 <HAL_GetTick>
 8002a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	e009      	b.n	8002a5a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a46:	f7fe fad7 	bl	8000ff8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e36b      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
 8002a5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a5e:	2202      	movs	r2, #2
 8002a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f2a3 	rbit	r2, r3
 8002a6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a76:	2202      	movs	r2, #2
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a8e:	2202      	movs	r2, #2
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f2a3 	rbit	r2, r3
 8002a9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002aa0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002aaa:	2102      	movs	r1, #2
 8002aac:	6019      	str	r1, [r3, #0]
 8002aae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f1a3 	rbit	r1, r3
 8002ab8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002abc:	6019      	str	r1, [r3, #0]
  return result;
 8002abe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1b2      	bne.n	8002a46 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8158 	beq.w	8002da0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d112      	bne.n	8002b28 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	4a56      	ldr	r2, [pc, #344]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	61d3      	str	r3, [r2, #28]
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f107 0308 	add.w	r3, r7, #8
 8002b20:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b22:	2301      	movs	r3, #1
 8002b24:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_RCC_OscConfig+0x938>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11a      	bne.n	8002b6a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCC_OscConfig+0x938>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a4b      	ldr	r2, [pc, #300]	; (8002c68 <HAL_RCC_OscConfig+0x938>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fa5a 	bl	8000ff8 <HAL_GetTick>
 8002b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e009      	b.n	8002b5e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe fa55 	bl	8000ff8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e2e9      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_RCC_OscConfig+0x938>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ef      	beq.n	8002b4a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x852>
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a39      	ldr	r2, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	e02f      	b.n	8002be2 <HAL_RCC_OscConfig+0x8b2>
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x876>
 8002b8c:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4a33      	ldr	r2, [pc, #204]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6213      	str	r3, [r2, #32]
 8002b98:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a30      	ldr	r2, [pc, #192]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	e01d      	b.n	8002be2 <HAL_RCC_OscConfig+0x8b2>
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d10c      	bne.n	8002bca <HAL_RCC_OscConfig+0x89a>
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4a2a      	ldr	r2, [pc, #168]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	6213      	str	r3, [r2, #32]
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	e00b      	b.n	8002be2 <HAL_RCC_OscConfig+0x8b2>
 8002bca:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6213      	str	r3, [r2, #32]
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a21      	ldr	r2, [pc, #132]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d06b      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7fe fa04 	bl	8000ff8 <HAL_GetTick>
 8002bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe f9ff 	bl	8000ff8 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e291      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
 8002c0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	fa93 f2a3 	rbit	r2, r3
 8002c20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c3c:	601a      	str	r2, [r3, #0]
  return result;
 8002c3e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d109      	bne.n	8002c6c <HAL_RCC_OscConfig+0x93c>
 8002c58:	4b01      	ldr	r3, [pc, #4]	; (8002c60 <HAL_RCC_OscConfig+0x930>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	e014      	b.n	8002c88 <HAL_RCC_OscConfig+0x958>
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	10908120 	.word	0x10908120
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c70:	2202      	movs	r2, #2
 8002c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	fa93 f2a3 	rbit	r2, r3
 8002c7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	4bbb      	ldr	r3, [pc, #748]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	6011      	str	r1, [r2, #0]
 8002c90:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	fa92 f1a2 	rbit	r1, r2
 8002c9a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c9e:	6011      	str	r1, [r2, #0]
  return result;
 8002ca0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	fab2 f282 	clz	r2, r2
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	f002 021f 	and.w	r2, r2, #31
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d099      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x8c6>
 8002cc2:	e063      	b.n	8002d8c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7fe f998 	bl	8000ff8 <HAL_GetTick>
 8002cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00b      	b.n	8002ce6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe f993 	bl	8000ff8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e225      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
 8002ce6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d02:	2202      	movs	r2, #2
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d14:	601a      	str	r2, [r3, #0]
  return result;
 8002d16:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_OscConfig+0xa06>
 8002d30:	4b90      	ldr	r3, [pc, #576]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	e00d      	b.n	8002d52 <HAL_RCC_OscConfig+0xa22>
 8002d36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	4b89      	ldr	r3, [pc, #548]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d56:	2102      	movs	r1, #2
 8002d58:	6011      	str	r1, [r2, #0]
 8002d5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	fa92 f1a2 	rbit	r1, r2
 8002d64:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d68:	6011      	str	r1, [r2, #0]
  return result;
 8002d6a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	fab2 f282 	clz	r2, r2
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f002 021f 	and.w	r2, r2, #31
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f202 	lsl.w	r2, r1, r2
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1a0      	bne.n	8002cce <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d8c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b77      	ldr	r3, [pc, #476]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4a76      	ldr	r2, [pc, #472]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 81c2 	beq.w	8003130 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dac:	4b71      	ldr	r3, [pc, #452]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	f000 819c 	beq.w	80030f2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	f040 8114 	bne.w	8002fee <HAL_RCC_OscConfig+0xcbe>
 8002dc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dde:	601a      	str	r2, [r3, #0]
  return result;
 8002de0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002de4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	461a      	mov	r2, r3
 8002df8:	2300      	movs	r3, #0
 8002dfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f8fc 	bl	8000ff8 <HAL_GetTick>
 8002e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e04:	e009      	b.n	8002e1a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e06:	f7fe f8f7 	bl	8000ff8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e18b      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
 8002e1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e32:	601a      	str	r2, [r3, #0]
  return result;
 8002e34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_RCC_OscConfig+0xb24>
 8002e4e:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	e01b      	b.n	8002e8c <HAL_RCC_OscConfig+0xb5c>
 8002e54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	fa93 f2a3 	rbit	r2, r3
 8002e68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	fa93 f2a3 	rbit	r2, r3
 8002e82:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e94:	6011      	str	r1, [r2, #0]
 8002e96:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	fa92 f1a2 	rbit	r1, r2
 8002ea0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002ea4:	6011      	str	r1, [r2, #0]
  return result;
 8002ea6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f002 021f 	and.w	r2, r2, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d19e      	bne.n	8002e06 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	4925      	ldr	r1, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
 8002ee4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ee8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002efc:	601a      	str	r2, [r3, #0]
  return result;
 8002efe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f02:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	2301      	movs	r3, #1
 8002f18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe f86d 	bl	8000ff8 <HAL_GetTick>
 8002f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f22:	e009      	b.n	8002f38 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe f868 	bl	8000ff8 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0fc      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
 8002f38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f50:	601a      	str	r2, [r3, #0]
  return result;
 8002f52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0xc48>
 8002f6c:	4b01      	ldr	r3, [pc, #4]	; (8002f74 <HAL_RCC_OscConfig+0xc44>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	e01e      	b.n	8002fb0 <HAL_RCC_OscConfig+0xc80>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	4b63      	ldr	r3, [pc, #396]	; (800313c <HAL_RCC_OscConfig+0xe0c>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fb8:	6011      	str	r1, [r2, #0]
 8002fba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	fa92 f1a2 	rbit	r1, r2
 8002fc4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002fc8:	6011      	str	r1, [r2, #0]
  return result;
 8002fca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	fab2 f282 	clz	r2, r2
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f042 0220 	orr.w	r2, r2, #32
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f002 021f 	and.w	r2, r2, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d09b      	beq.n	8002f24 <HAL_RCC_OscConfig+0xbf4>
 8002fec:	e0a0      	b.n	8003130 <HAL_RCC_OscConfig+0xe00>
 8002fee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ff2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003006:	601a      	str	r2, [r3, #0]
  return result;
 8003008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003018:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	461a      	mov	r2, r3
 8003020:	2300      	movs	r3, #0
 8003022:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fd ffe8 	bl	8000ff8 <HAL_GetTick>
 8003028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302c:	e009      	b.n	8003042 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302e:	f7fd ffe3 	bl	8000ff8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e077      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
 8003042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003046:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800304a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	fa93 f2a3 	rbit	r2, r3
 8003056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305a:	601a      	str	r2, [r3, #0]
  return result;
 800305c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003060:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d102      	bne.n	800307c <HAL_RCC_OscConfig+0xd4c>
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <HAL_RCC_OscConfig+0xe0c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	e01b      	b.n	80030b4 <HAL_RCC_OscConfig+0xd84>
 800307c:	f107 0320 	add.w	r3, r7, #32
 8003080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f107 0320 	add.w	r3, r7, #32
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f107 031c 	add.w	r3, r7, #28
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f107 0318 	add.w	r3, r7, #24
 800309a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f107 0318 	add.w	r3, r7, #24
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f107 0314 	add.w	r3, r7, #20
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_RCC_OscConfig+0xe0c>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f107 0210 	add.w	r2, r7, #16
 80030b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030bc:	6011      	str	r1, [r2, #0]
 80030be:	f107 0210 	add.w	r2, r7, #16
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	fa92 f1a2 	rbit	r1, r2
 80030c8:	f107 020c 	add.w	r2, r7, #12
 80030cc:	6011      	str	r1, [r2, #0]
  return result;
 80030ce:	f107 020c 	add.w	r2, r7, #12
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	fab2 f282 	clz	r2, r2
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f042 0220 	orr.w	r2, r2, #32
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f002 021f 	and.w	r2, r2, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d19e      	bne.n	800302e <HAL_RCC_OscConfig+0xcfe>
 80030f0:	e01e      	b.n	8003130 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e018      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_RCC_OscConfig+0xe0c>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003108:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800310c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003110:	1d3b      	adds	r3, r7, #4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	429a      	cmp	r2, r3
 8003118:	d108      	bne.n	800312c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800311a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800311e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b09e      	sub	sp, #120	; 0x78
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e162      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b90      	ldr	r3, [pc, #576]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d910      	bls.n	8003188 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	498b      	ldr	r1, [pc, #556]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b89      	ldr	r3, [pc, #548]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e14a      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b82      	ldr	r3, [pc, #520]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	497f      	ldr	r1, [pc, #508]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80dc 	beq.w	800336c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d13c      	bne.n	8003236 <HAL_RCC_ClockConfig+0xf6>
 80031bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d102      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xa6>
 80031e0:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	e00f      	b.n	8003206 <HAL_RCC_ClockConfig+0xc6>
 80031e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	667b      	str	r3, [r7, #100]	; 0x64
 80031f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
 80031fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800320a:	65ba      	str	r2, [r7, #88]	; 0x58
 800320c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800320e:	fa92 f2a2 	rbit	r2, r2
 8003212:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f002 021f 	and.w	r2, r2, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d17b      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0f3      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d13c      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x178>
 800323e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003242:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800324c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HAL_RCC_ClockConfig+0x128>
 8003262:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e00f      	b.n	8003288 <HAL_RCC_ClockConfig+0x148>
 8003268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
 800327c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003284:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328c:	63ba      	str	r2, [r7, #56]	; 0x38
 800328e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d13a      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0b2      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
 80032b8:	2302      	movs	r3, #2
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x1a0>
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e00d      	b.n	80032fc <HAL_RCC_ClockConfig+0x1bc>
 80032e0:	2302      	movs	r3, #2
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	2302      	movs	r3, #2
 80032ee:	623b      	str	r3, [r7, #32]
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2202      	movs	r2, #2
 80032fe:	61ba      	str	r2, [r7, #24]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	fa92 f2a2 	rbit	r2, r2
 8003306:	617a      	str	r2, [r7, #20]
  return result;
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	fab2 f282 	clz	r2, r2
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f042 0220 	orr.w	r2, r2, #32
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f002 021f 	and.w	r2, r2, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f202 	lsl.w	r2, r1, r2
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e079      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	491a      	ldr	r1, [pc, #104]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd fe5c 	bl	8000ff8 <HAL_GetTick>
 8003340:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fd fe58 	bl	8000ff8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e061      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d214      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4906      	ldr	r1, [pc, #24]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e040      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
 800339c:	40022000 	.word	0x40022000
 80033a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	491a      	ldr	r1, [pc, #104]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4912      	ldr	r1, [pc, #72]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033e2:	f000 f829 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033e6:	4601      	mov	r1, r0
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	22f0      	movs	r2, #240	; 0xf0
 80033f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	60fa      	str	r2, [r7, #12]
  return result;
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	fab2 f282 	clz	r2, r2
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	40d3      	lsrs	r3, r2
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x2ec>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	fa21 f303 	lsr.w	r3, r1, r3
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <HAL_RCC_ClockConfig+0x2f0>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_RCC_ClockConfig+0x2f4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fdaa 	bl	8000f70 <HAL_InitTick>
  
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3778      	adds	r7, #120	; 0x78
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	08006b28 	.word	0x08006b28
 8003430:	200002b4 	.word	0x200002b4
 8003434:	200002b8 	.word	0x200002b8

08003438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b08b      	sub	sp, #44	; 0x2c
 800343c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x30>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x36>
 8003466:	e03c      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800346a:	623b      	str	r3, [r7, #32]
      break;
 800346c:	e03c      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003474:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003478:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	607a      	str	r2, [r7, #4]
  return result;
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	40d3      	lsrs	r3, r2
 800348c:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <HAL_RCC_GetSysClockFreq+0xc8>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003492:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	220f      	movs	r2, #15
 800349c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	fa92 f2a2 	rbit	r2, r2
 80034a4:	60fa      	str	r2, [r7, #12]
  return result;
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	fab2 f282 	clz	r2, r2
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	40d3      	lsrs	r3, r2
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034c0:	4a0e      	ldr	r2, [pc, #56]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e004      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	623b      	str	r3, [r7, #32]
      break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80034e4:	623b      	str	r3, [r7, #32]
      break;
 80034e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e8:	6a3b      	ldr	r3, [r7, #32]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	372c      	adds	r7, #44	; 0x2c
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	007a1200 	.word	0x007a1200
 8003500:	08006b40 	.word	0x08006b40
 8003504:	08006b50 	.word	0x08006b50
 8003508:	003d0900 	.word	0x003d0900

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_RCC_GetHCLKFreq+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	200002b4 	.word	0x200002b4

08003524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800352a:	f7ff ffef 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003538:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800353c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	603a      	str	r2, [r7, #0]
  return result;
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	08006b38 	.word	0x08006b38

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800356e:	f7ff ffcd 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003572:	4601      	mov	r1, r0
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800357c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003580:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	fa92 f2a2 	rbit	r2, r2
 8003588:	603a      	str	r2, [r7, #0]
  return result;
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	fab2 f282 	clz	r2, r2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	40d3      	lsrs	r3, r2
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08006b38 	.word	0x08006b38

080035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b092      	sub	sp, #72	; 0x48
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80d4 	beq.w	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d0:	4b4e      	ldr	r3, [pc, #312]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10e      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e6:	61d3      	str	r3, [r2, #28]
 80035e8:	4b48      	ldr	r3, [pc, #288]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b45      	ldr	r3, [pc, #276]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b42      	ldr	r3, [pc, #264]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a41      	ldr	r2, [pc, #260]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fd fcf1 	bl	8000ff8 <HAL_GetTick>
 8003616:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fd fced 	bl	8000ff8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d901      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e14b      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b38      	ldr	r3, [pc, #224]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003638:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8084 	beq.w	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003654:	429a      	cmp	r2, r3
 8003656:	d07c      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	461a      	mov	r2, r3
 8003682:	2301      	movs	r3, #1
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	461a      	mov	r2, r3
 80036a6:	2300      	movs	r3, #0
 80036a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04b      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fd fc9d 	bl	8000ff8 <HAL_GetTick>
 80036be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd fc99 	bl	8000ff8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0f5      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80036d8:	2302      	movs	r3, #2
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
 80036e4:	2302      	movs	r3, #2
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	61fb      	str	r3, [r7, #28]
  return result;
 80036f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d108      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003706:	4b01      	ldr	r3, [pc, #4]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	e00d      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
 8003714:	10908100 	.word	0x10908100
 8003718:	2302      	movs	r3, #2
 800371a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	4b69      	ldr	r3, [pc, #420]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2202      	movs	r2, #2
 800372a:	613a      	str	r2, [r7, #16]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	fa92 f2a2 	rbit	r2, r2
 8003732:	60fa      	str	r2, [r7, #12]
  return result;
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	fab2 f282 	clz	r2, r2
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f002 021f 	and.w	r2, r2, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f202 	lsl.w	r2, r1, r2
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0b7      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003752:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	495b      	ldr	r1, [pc, #364]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003760:	4313      	orrs	r3, r2
 8003762:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003764:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003784:	4b51      	ldr	r3, [pc, #324]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f023 0203 	bic.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	494e      	ldr	r1, [pc, #312]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003792:	4313      	orrs	r3, r2
 8003794:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a2:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f023 0210 	bic.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4947      	ldr	r1, [pc, #284]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037c0:	4b42      	ldr	r3, [pc, #264]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	493f      	ldr	r1, [pc, #252]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f023 0220 	bic.w	r2, r3, #32
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	4938      	ldr	r1, [pc, #224]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037fc:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	4930      	ldr	r1, [pc, #192]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380a:	4313      	orrs	r3, r2
 800380c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800381a:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4929      	ldr	r1, [pc, #164]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003838:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4921      	ldr	r1, [pc, #132]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003846:	4313      	orrs	r3, r2
 8003848:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	491a      	ldr	r1, [pc, #104]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003864:	4313      	orrs	r3, r2
 8003866:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	4912      	ldr	r1, [pc, #72]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003882:	4313      	orrs	r3, r2
 8003884:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	490b      	ldr	r1, [pc, #44]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3748      	adds	r7, #72	; 0x48
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000

080038d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e049      	b.n	8003976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd f9b2 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f000 faca 	bl	8003ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d001      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e03b      	b.n	8003a10 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <HAL_TIM_Base_Start_IT+0x9c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d009      	beq.n	80039ce <HAL_TIM_Base_Start_IT+0x4e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d004      	beq.n	80039ce <HAL_TIM_Base_Start_IT+0x4e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <HAL_TIM_Base_Start_IT+0xa0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d115      	bne.n	80039fa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_TIM_Base_Start_IT+0xa4>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d015      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0x8c>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e6:	d011      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	e008      	b.n	8003a0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e000      	b.n	8003a0e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40014000 	.word	0x40014000
 8003a24:	00010007 	.word	0x00010007

08003a28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a1a      	ldr	r2, [r3, #32]
 8003a46:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10f      	bne.n	8003a70 <HAL_TIM_Base_Stop_IT+0x48>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1a      	ldr	r2, [r3, #32]
 8003a56:	f240 4344 	movw	r3, #1092	; 0x444
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d107      	bne.n	8003a70 <HAL_TIM_Base_Stop_IT+0x48>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d122      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f06f 0202 	mvn.w	r2, #2
 8003ab2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f9ce 	bl	8003e6a <HAL_TIM_IC_CaptureCallback>
 8003ace:	e005      	b.n	8003adc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9c0 	bl	8003e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9d1 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d122      	bne.n	8003b36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d11b      	bne.n	8003b36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f06f 0204 	mvn.w	r2, #4
 8003b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f9a4 	bl	8003e6a <HAL_TIM_IC_CaptureCallback>
 8003b22:	e005      	b.n	8003b30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f996 	bl	8003e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f9a7 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d122      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d11b      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0208 	mvn.w	r2, #8
 8003b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2204      	movs	r2, #4
 8003b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f97a 	bl	8003e6a <HAL_TIM_IC_CaptureCallback>
 8003b76:	e005      	b.n	8003b84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f96c 	bl	8003e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f97d 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d122      	bne.n	8003bde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d11b      	bne.n	8003bde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0210 	mvn.w	r2, #16
 8003bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f950 	bl	8003e6a <HAL_TIM_IC_CaptureCallback>
 8003bca:	e005      	b.n	8003bd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f942 	bl	8003e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f953 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d10e      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0201 	mvn.w	r2, #1
 8003c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fc fd97 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d10e      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d107      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fab1 	bl	8004198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c44:	d10e      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b80      	cmp	r3, #128	; 0x80
 8003c52:	d107      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 faa4 	bl	80041ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d10e      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f901 	bl	8003e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d10e      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d107      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0220 	mvn.w	r2, #32
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fa64 	bl	8004184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e0b6      	b.n	8003e4e <HAL_TIM_ConfigClockSource+0x18a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1c:	d03e      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0xd8>
 8003d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d22:	f200 8087 	bhi.w	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	f000 8086 	beq.w	8003e3a <HAL_TIM_ConfigClockSource+0x176>
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d32:	d87f      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d34:	2b70      	cmp	r3, #112	; 0x70
 8003d36:	d01a      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0xaa>
 8003d38:	2b70      	cmp	r3, #112	; 0x70
 8003d3a:	d87b      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d3c:	2b60      	cmp	r3, #96	; 0x60
 8003d3e:	d050      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x11e>
 8003d40:	2b60      	cmp	r3, #96	; 0x60
 8003d42:	d877      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d44:	2b50      	cmp	r3, #80	; 0x50
 8003d46:	d03c      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0xfe>
 8003d48:	2b50      	cmp	r3, #80	; 0x50
 8003d4a:	d873      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d058      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x13e>
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d86f      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d064      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15e>
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d86b      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d060      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15e>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d867      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15e>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d05a      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15e>
 8003d6c:	e062      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f000 f97b 	bl	8004078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	609a      	str	r2, [r3, #8]
      break;
 8003d9a:	e04f      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f000 f964 	bl	8004078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dbe:	609a      	str	r2, [r3, #8]
      break;
 8003dc0:	e03c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 f8d8 	bl	8003f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2150      	movs	r1, #80	; 0x50
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f931 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e02c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 f8f7 	bl	8003fe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2160      	movs	r1, #96	; 0x60
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f921 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e00:	e01c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 f8b8 	bl	8003f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f911 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e20:	e00c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f000 f908 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e32:	e003      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      break;
 8003e38:	e000      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a2e      	ldr	r2, [pc, #184]	; (8003f74 <TIM_Base_SetConfig+0xcc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x20>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <TIM_Base_SetConfig+0xcc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00f      	beq.n	8003f02 <TIM_Base_SetConfig+0x5a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d00b      	beq.n	8003f02 <TIM_Base_SetConfig+0x5a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <TIM_Base_SetConfig+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <TIM_Base_SetConfig+0x5a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a21      	ldr	r2, [pc, #132]	; (8003f7c <TIM_Base_SetConfig+0xd4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_Base_SetConfig+0x5a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <TIM_Base_SetConfig+0xd8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d108      	bne.n	8003f14 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <TIM_Base_SetConfig+0xcc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0xb0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <TIM_Base_SetConfig+0xd0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0xb0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <TIM_Base_SetConfig+0xd4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0xb0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <TIM_Base_SetConfig+0xd8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	615a      	str	r2, [r3, #20]
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800

08003f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f023 030a 	bic.w	r3, r3, #10
 8003fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0210 	bic.w	r2, r3, #16
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800400c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	031b      	lsls	r3, r3, #12
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800401e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	f043 0307 	orr.w	r3, r3, #7
 8004064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	431a      	orrs	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e04f      	b.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d108      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004100:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a14      	ldr	r2, [pc, #80]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d004      	beq.n	8004144 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10c      	bne.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40014000 	.word	0x40014000

08004184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e040      	b.n	8004254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc fd60 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	; 0x24
 80041ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fc00 	bl	8004a04 <UART_SetConfig>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e022      	b.n	8004254 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fd2a 	bl	8004c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800422a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800423a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fdb1 	bl	8004db4 <UART_CheckIdleState>
 8004252:	4603      	mov	r3, r0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004270:	2b20      	cmp	r3, #32
 8004272:	d178      	bne.n	8004366 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Transmit+0x24>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e071      	b.n	8004368 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2221      	movs	r2, #33	; 0x21
 8004290:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004292:	f7fc feb1 	bl	8000ff8 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b0:	d108      	bne.n	80042c4 <HAL_UART_Transmit+0x68>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e003      	b.n	80042cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042cc:	e030      	b.n	8004330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2180      	movs	r1, #128	; 0x80
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fe13 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e03c      	b.n	8004368 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	881a      	ldrh	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004300:	b292      	uxth	r2, r2
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	3302      	adds	r3, #2
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	e008      	b.n	800431e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	781a      	ldrb	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	b292      	uxth	r2, r2
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1c8      	bne.n	80042ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fddc 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e005      	b.n	8004368 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004384:	2b20      	cmp	r3, #32
 8004386:	d132      	bne.n	80043ee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_UART_Receive_IT+0x24>
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e02b      	b.n	80043f0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d018      	beq.n	80043de <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	623b      	str	r3, [r7, #32]
 80043cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	6a3a      	ldr	r2, [r7, #32]
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e6      	bne.n	80043ac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	461a      	mov	r2, r3
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fdf5 	bl	8004fd4 <UART_Start_Receive_IT>
 80043ea:	4603      	mov	r3, r0
 80043ec:	e000      	b.n	80043f0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
  }
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3728      	adds	r7, #40	; 0x28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b0ba      	sub	sp, #232	; 0xe8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800441e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004422:	f640 030f 	movw	r3, #2063	; 0x80f
 8004426:	4013      	ands	r3, r2
 8004428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800442c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d115      	bne.n	8004460 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00f      	beq.n	8004460 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 82ab 	beq.w	80049ac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
      }
      return;
 800445e:	e2a5      	b.n	80049ac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8117 	beq.w	8004698 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800446a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800447a:	4b85      	ldr	r3, [pc, #532]	; (8004690 <HAL_UART_IRQHandler+0x298>)
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 810a 	beq.w	8004698 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <HAL_UART_IRQHandler+0xbc>
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <HAL_UART_IRQHandler+0xec>
 80044c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2202      	movs	r2, #2
 80044d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044da:	f043 0204 	orr.w	r2, r3, #4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d011      	beq.n	8004514 <HAL_UART_IRQHandler+0x11c>
 80044f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2204      	movs	r2, #4
 8004502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d017      	beq.n	8004550 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800452c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004530:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004546:	f043 0208 	orr.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004558:	2b00      	cmp	r3, #0
 800455a:	d012      	beq.n	8004582 <HAL_UART_IRQHandler+0x18a>
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8211 	beq.w	80049b0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800459a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d04f      	beq.n	800467a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fdc0 	bl	8005160 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d141      	bne.n	8004672 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800461a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800461e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1d9      	bne.n	80045ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463e:	2b00      	cmp	r3, #0
 8004640:	d013      	beq.n	800466a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	4a13      	ldr	r2, [pc, #76]	; (8004694 <HAL_UART_IRQHandler+0x29c>)
 8004648:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fc8c 	bl	8001f6c <HAL_DMA_Abort_IT>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d017      	beq.n	800468a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004664:	4610      	mov	r0, r2
 8004666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	e00f      	b.n	800468a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9b4 	bl	80049d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	e00b      	b.n	800468a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9b0 	bl	80049d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	e007      	b.n	800468a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f9ac 	bl	80049d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004688:	e192      	b.n	80049b0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468a:	bf00      	nop
    return;
 800468c:	e190      	b.n	80049b0 <HAL_UART_IRQHandler+0x5b8>
 800468e:	bf00      	nop
 8004690:	04000120 	.word	0x04000120
 8004694:	08005229 	.word	0x08005229

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469c:	2b01      	cmp	r3, #1
 800469e:	f040 814b 	bne.w	8004938 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8144 	beq.w	8004938 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 813d 	beq.w	8004938 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2210      	movs	r2, #16
 80046c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	f040 80b5 	bne.w	8004840 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8164 	beq.w	80049b4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046f6:	429a      	cmp	r2, r3
 80046f8:	f080 815c 	bcs.w	80049b4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b20      	cmp	r3, #32
 800470e:	f000 8086 	beq.w	800481e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800472a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800472e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800473c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004740:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004748:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1da      	bne.n	8004712 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3308      	adds	r3, #8
 8004762:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800476c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3308      	adds	r3, #8
 800477c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004780:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004784:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004788:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e1      	bne.n	800475c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3308      	adds	r3, #8
 80047b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e3      	bne.n	8004798 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004800:	65bb      	str	r3, [r7, #88]	; 0x58
 8004802:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e4      	bne.n	80047de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd fb6e 	bl	8001efa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004830:	b29b      	uxth	r3, r3
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	b29b      	uxth	r3, r3
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f8d7 	bl	80049ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800483e:	e0b9      	b.n	80049b4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800484c:	b29b      	uxth	r3, r3
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80ab 	beq.w	80049b8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004862:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80a6 	beq.w	80049b8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800488e:	647b      	str	r3, [r7, #68]	; 0x44
 8004890:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800489c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e4      	bne.n	800486c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	623b      	str	r3, [r7, #32]
   return(result);
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048c6:	633a      	str	r2, [r7, #48]	; 0x30
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e3      	bne.n	80048a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	617b      	str	r3, [r7, #20]
   return(result);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e4      	bne.n	80048ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800492a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f85b 	bl	80049ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004936:	e03f      	b.n	80049b8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00e      	beq.n	8004962 <HAL_UART_IRQHandler+0x56a>
 8004944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fe4c 	bl	80055f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004960:	e02d      	b.n	80049be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01c      	beq.n	80049bc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
    }
    return;
 800498a:	e017      	b.n	80049bc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d012      	beq.n	80049be <HAL_UART_IRQHandler+0x5c6>
 8004998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00c      	beq.n	80049be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fc55 	bl	8005254 <UART_EndTransmit_IT>
    return;
 80049aa:	e008      	b.n	80049be <HAL_UART_IRQHandler+0x5c6>
      return;
 80049ac:	bf00      	nop
 80049ae:	e006      	b.n	80049be <HAL_UART_IRQHandler+0x5c6>
    return;
 80049b0:	bf00      	nop
 80049b2:	e004      	b.n	80049be <HAL_UART_IRQHandler+0x5c6>
      return;
 80049b4:	bf00      	nop
 80049b6:	e002      	b.n	80049be <HAL_UART_IRQHandler+0x5c6>
      return;
 80049b8:	bf00      	nop
 80049ba:	e000      	b.n	80049be <HAL_UART_IRQHandler+0x5c6>
    return;
 80049bc:	bf00      	nop
  }

}
 80049be:	37e8      	adds	r7, #232	; 0xe8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b8a      	ldr	r3, [pc, #552]	; (8004c58 <UART_SetConfig+0x254>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	6979      	ldr	r1, [r7, #20]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a78      	ldr	r2, [pc, #480]	; (8004c5c <UART_SetConfig+0x258>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d120      	bne.n	8004ac2 <UART_SetConfig+0xbe>
 8004a80:	4b77      	ldr	r3, [pc, #476]	; (8004c60 <UART_SetConfig+0x25c>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d817      	bhi.n	8004abc <UART_SetConfig+0xb8>
 8004a8c:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <UART_SetConfig+0x90>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004aa5 	.word	0x08004aa5
 8004a98:	08004ab1 	.word	0x08004ab1
 8004a9c:	08004ab7 	.word	0x08004ab7
 8004aa0:	08004aab 	.word	0x08004aab
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e01d      	b.n	8004ae6 <UART_SetConfig+0xe2>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e01a      	b.n	8004ae6 <UART_SetConfig+0xe2>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e017      	b.n	8004ae6 <UART_SetConfig+0xe2>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0xe2>
 8004abc:	2310      	movs	r3, #16
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e011      	b.n	8004ae6 <UART_SetConfig+0xe2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a67      	ldr	r2, [pc, #412]	; (8004c64 <UART_SetConfig+0x260>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d102      	bne.n	8004ad2 <UART_SetConfig+0xce>
 8004acc:	2300      	movs	r3, #0
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e009      	b.n	8004ae6 <UART_SetConfig+0xe2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a64      	ldr	r2, [pc, #400]	; (8004c68 <UART_SetConfig+0x264>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d102      	bne.n	8004ae2 <UART_SetConfig+0xde>
 8004adc:	2300      	movs	r3, #0
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e001      	b.n	8004ae6 <UART_SetConfig+0xe2>
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aee:	d15a      	bne.n	8004ba6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004af0:	7ffb      	ldrb	r3, [r7, #31]
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d827      	bhi.n	8004b46 <UART_SetConfig+0x142>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0xf8>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b37 	.word	0x08004b37
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b47 	.word	0x08004b47
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fe fd00 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8004b24:	61b8      	str	r0, [r7, #24]
        break;
 8004b26:	e013      	b.n	8004b50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fe fd1e 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	61b8      	str	r0, [r7, #24]
        break;
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b4e      	ldr	r3, [pc, #312]	; (8004c6c <UART_SetConfig+0x268>)
 8004b32:	61bb      	str	r3, [r7, #24]
        break;
 8004b34:	e00c      	b.n	8004b50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fe fc7f 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 8004b3a:	61b8      	str	r0, [r7, #24]
        break;
 8004b3c:	e008      	b.n	8004b50 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e004      	b.n	8004b50 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d074      	beq.n	8004c40 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	005a      	lsls	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	441a      	add	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	d916      	bls.n	8004ba0 <UART_SetConfig+0x19c>
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d212      	bcs.n	8004ba0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f023 030f 	bic.w	r3, r3, #15
 8004b82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	89fb      	ldrh	r3, [r7, #14]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	89fa      	ldrh	r2, [r7, #14]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	e04f      	b.n	8004c40 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77bb      	strb	r3, [r7, #30]
 8004ba4:	e04c      	b.n	8004c40 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ba6:	7ffb      	ldrb	r3, [r7, #31]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d828      	bhi.n	8004bfe <UART_SetConfig+0x1fa>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0x1b0>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bff 	.word	0x08004bff
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7fe fca4 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	61b8      	str	r0, [r7, #24]
        break;
 8004bde:	e013      	b.n	8004c08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe fcc2 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8004be4:	61b8      	str	r0, [r7, #24]
        break;
 8004be6:	e00f      	b.n	8004c08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <UART_SetConfig+0x268>)
 8004bea:	61bb      	str	r3, [r7, #24]
        break;
 8004bec:	e00c      	b.n	8004c08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fe fc23 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 8004bf2:	61b8      	str	r0, [r7, #24]
        break;
 8004bf4:	e008      	b.n	8004c08 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e004      	b.n	8004c08 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	77bb      	strb	r3, [r7, #30]
        break;
 8004c06:	bf00      	nop
    }

    if (pclk != 0U)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	085a      	lsrs	r2, r3, #1
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	441a      	add	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b0f      	cmp	r3, #15
 8004c26:	d909      	bls.n	8004c3c <UART_SetConfig+0x238>
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2e:	d205      	bcs.n	8004c3c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	e001      	b.n	8004c40 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	efff69f3 	.word	0xefff69f3
 8004c5c:	40013800 	.word	0x40013800
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40004400 	.word	0x40004400
 8004c68:	40004800 	.word	0x40004800
 8004c6c:	007a1200 	.word	0x007a1200

08004c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d6e:	d10a      	bne.n	8004d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b098      	sub	sp, #96	; 0x60
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc4:	f7fc f918 	bl	8000ff8 <HAL_GetTick>
 8004dc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d12e      	bne.n	8004e36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f88c 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d021      	beq.n	8004e36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e06:	653b      	str	r3, [r7, #80]	; 0x50
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e10:	647b      	str	r3, [r7, #68]	; 0x44
 8004e12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e6      	bne.n	8004df2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e062      	b.n	8004efc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d149      	bne.n	8004ed8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f856 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d03c      	beq.n	8004ed8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e6      	bne.n	8004e5e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3308      	adds	r3, #8
 8004e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3308      	adds	r3, #8
 8004eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb0:	61fa      	str	r2, [r7, #28]
 8004eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	69b9      	ldr	r1, [r7, #24]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e5      	bne.n	8004e90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e011      	b.n	8004efc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3758      	adds	r7, #88	; 0x58
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f14:	e049      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d045      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7fc f86b 	bl	8000ff8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e048      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d031      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d110      	bne.n	8004f76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f8ff 	bl	8005160 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2208      	movs	r2, #8
 8004f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e029      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f84:	d111      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f8e5 	bl	8005160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e00f      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d0a6      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b097      	sub	sp, #92	; 0x5c
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d10e      	bne.n	8005026 <UART_Start_Receive_IT+0x52>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <UART_Start_Receive_IT+0x48>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005016:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800501a:	e02d      	b.n	8005078 <UART_Start_Receive_IT+0xa4>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	22ff      	movs	r2, #255	; 0xff
 8005020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005024:	e028      	b.n	8005078 <UART_Start_Receive_IT+0xa4>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10d      	bne.n	800504a <UART_Start_Receive_IT+0x76>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <UART_Start_Receive_IT+0x6c>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	22ff      	movs	r2, #255	; 0xff
 800503a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800503e:	e01b      	b.n	8005078 <UART_Start_Receive_IT+0xa4>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	227f      	movs	r2, #127	; 0x7f
 8005044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005048:	e016      	b.n	8005078 <UART_Start_Receive_IT+0xa4>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005052:	d10d      	bne.n	8005070 <UART_Start_Receive_IT+0x9c>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <UART_Start_Receive_IT+0x92>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	227f      	movs	r2, #127	; 0x7f
 8005060:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005064:	e008      	b.n	8005078 <UART_Start_Receive_IT+0xa4>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	223f      	movs	r2, #63	; 0x3f
 800506a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800506e:	e003      	b.n	8005078 <UART_Start_Receive_IT+0xa4>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2222      	movs	r2, #34	; 0x22
 8005084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	657b      	str	r3, [r7, #84]	; 0x54
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80050aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c4:	d107      	bne.n	80050d6 <UART_Start_Receive_IT+0x102>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d103      	bne.n	80050d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4a21      	ldr	r2, [pc, #132]	; (8005158 <UART_Start_Receive_IT+0x184>)
 80050d2:	669a      	str	r2, [r3, #104]	; 0x68
 80050d4:	e002      	b.n	80050dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a20      	ldr	r2, [pc, #128]	; (800515c <UART_Start_Receive_IT+0x188>)
 80050da:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d019      	beq.n	8005118 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80050f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
 8005104:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e6      	bne.n	80050e4 <UART_Start_Receive_IT+0x110>
 8005116:	e018      	b.n	800514a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	613b      	str	r3, [r7, #16]
   return(result);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f043 0320 	orr.w	r3, r3, #32
 800512c:	653b      	str	r3, [r7, #80]	; 0x50
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	69f9      	ldr	r1, [r7, #28]
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	61bb      	str	r3, [r7, #24]
   return(result);
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e6      	bne.n	8005118 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	375c      	adds	r7, #92	; 0x5c
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	08005451 	.word	0x08005451
 800515c:	080052a9 	.word	0x080052a9

08005160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b095      	sub	sp, #84	; 0x54
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800517c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	643b      	str	r3, [r7, #64]	; 0x40
 8005188:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800518c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e6      	bne.n	8005168 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3308      	adds	r3, #8
 80051b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e5      	bne.n	800519a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d118      	bne.n	8005208 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f023 0310 	bic.w	r3, r3, #16
 80051ea:	647b      	str	r3, [r7, #68]	; 0x44
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6979      	ldr	r1, [r7, #20]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	613b      	str	r3, [r7, #16]
   return(result);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800521c:	bf00      	nop
 800521e:	3754      	adds	r7, #84	; 0x54
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff fbc6 	bl	80049d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	60bb      	str	r3, [r7, #8]
   return(result);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6979      	ldr	r1, [r7, #20]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	613b      	str	r3, [r7, #16]
   return(result);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e6      	bne.n	800525c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff fb92 	bl	80049c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052a0:	bf00      	nop
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b09c      	sub	sp, #112	; 0x70
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c0:	2b22      	cmp	r3, #34	; 0x22
 80052c2:	f040 80b9 	bne.w	8005438 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052d4:	b2d9      	uxtb	r1, r3
 80052d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	400a      	ands	r2, r1
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 809c 	bne.w	8005448 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005324:	66bb      	str	r3, [r7, #104]	; 0x68
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800532e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005330:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800533c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3308      	adds	r3, #8
 8005348:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	667b      	str	r3, [r7, #100]	; 0x64
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005362:	647a      	str	r2, [r7, #68]	; 0x44
 8005364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e5      	bne.n	8005342 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d018      	beq.n	80053ca <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	623b      	str	r3, [r7, #32]
   return(result);
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053ac:	663b      	str	r3, [r7, #96]	; 0x60
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b6:	633b      	str	r3, [r7, #48]	; 0x30
 80053b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e6      	bne.n	8005398 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d12e      	bne.n	8005430 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f023 0310 	bic.w	r3, r3, #16
 80053ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	69b9      	ldr	r1, [r7, #24]
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	617b      	str	r3, [r7, #20]
   return(result);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e6      	bne.n	80053d8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b10      	cmp	r3, #16
 8005416:	d103      	bne.n	8005420 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2210      	movs	r2, #16
 800541e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fadf 	bl	80049ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800542e:	e00b      	b.n	8005448 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fb f92f 	bl	8000694 <HAL_UART_RxCpltCallback>
}
 8005436:	e007      	b.n	8005448 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0208 	orr.w	r2, r2, #8
 8005446:	619a      	str	r2, [r3, #24]
}
 8005448:	bf00      	nop
 800544a:	3770      	adds	r7, #112	; 0x70
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b09c      	sub	sp, #112	; 0x70
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800545e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005468:	2b22      	cmp	r3, #34	; 0x22
 800546a:	f040 80b9 	bne.w	80055e0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005474:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800547e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005482:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005486:	4013      	ands	r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800548c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	1c9a      	adds	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 809c 	bne.w	80055f0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80054c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054cc:	667b      	str	r3, [r7, #100]	; 0x64
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d6:	657b      	str	r3, [r7, #84]	; 0x54
 80054d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e6      	bne.n	80054b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	663b      	str	r3, [r7, #96]	; 0x60
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3308      	adds	r3, #8
 8005508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800550a:	643a      	str	r2, [r7, #64]	; 0x40
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e5      	bne.n	80054ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d018      	beq.n	8005572 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	61fb      	str	r3, [r7, #28]
   return(result);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005554:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005560:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005576:	2b01      	cmp	r3, #1
 8005578:	d12e      	bne.n	80055d8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	60bb      	str	r3, [r7, #8]
   return(result);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f023 0310 	bic.w	r3, r3, #16
 8005594:	65bb      	str	r3, [r7, #88]	; 0x58
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6979      	ldr	r1, [r7, #20]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	613b      	str	r3, [r7, #16]
   return(result);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e6      	bne.n	8005580 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d103      	bne.n	80055c8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2210      	movs	r2, #16
 80055c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff fa0b 	bl	80049ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055d6:	e00b      	b.n	80055f0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7fb f85b 	bl	8000694 <HAL_UART_RxCpltCallback>
}
 80055de:	e007      	b.n	80055f0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0208 	orr.w	r2, r2, #8
 80055ee:	619a      	str	r2, [r3, #24]
}
 80055f0:	bf00      	nop
 80055f2:	3770      	adds	r7, #112	; 0x70
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <atoi>:
 800560c:	220a      	movs	r2, #10
 800560e:	2100      	movs	r1, #0
 8005610:	f000 bce8 	b.w	8005fe4 <strtol>

08005614 <__errno>:
 8005614:	4b01      	ldr	r3, [pc, #4]	; (800561c <__errno+0x8>)
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	200002c0 	.word	0x200002c0

08005620 <__sflush_r>:
 8005620:	898a      	ldrh	r2, [r1, #12]
 8005622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005626:	4605      	mov	r5, r0
 8005628:	0710      	lsls	r0, r2, #28
 800562a:	460c      	mov	r4, r1
 800562c:	d458      	bmi.n	80056e0 <__sflush_r+0xc0>
 800562e:	684b      	ldr	r3, [r1, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	dc05      	bgt.n	8005640 <__sflush_r+0x20>
 8005634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	dc02      	bgt.n	8005640 <__sflush_r+0x20>
 800563a:	2000      	movs	r0, #0
 800563c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005642:	2e00      	cmp	r6, #0
 8005644:	d0f9      	beq.n	800563a <__sflush_r+0x1a>
 8005646:	2300      	movs	r3, #0
 8005648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800564c:	682f      	ldr	r7, [r5, #0]
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	d032      	beq.n	80056b8 <__sflush_r+0x98>
 8005652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	075a      	lsls	r2, r3, #29
 8005658:	d505      	bpl.n	8005666 <__sflush_r+0x46>
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	1ac0      	subs	r0, r0, r3
 800565e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005660:	b10b      	cbz	r3, 8005666 <__sflush_r+0x46>
 8005662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005664:	1ac0      	subs	r0, r0, r3
 8005666:	2300      	movs	r3, #0
 8005668:	4602      	mov	r2, r0
 800566a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800566c:	6a21      	ldr	r1, [r4, #32]
 800566e:	4628      	mov	r0, r5
 8005670:	47b0      	blx	r6
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	d106      	bne.n	8005686 <__sflush_r+0x66>
 8005678:	6829      	ldr	r1, [r5, #0]
 800567a:	291d      	cmp	r1, #29
 800567c:	d82c      	bhi.n	80056d8 <__sflush_r+0xb8>
 800567e:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <__sflush_r+0x108>)
 8005680:	40ca      	lsrs	r2, r1
 8005682:	07d6      	lsls	r6, r2, #31
 8005684:	d528      	bpl.n	80056d8 <__sflush_r+0xb8>
 8005686:	2200      	movs	r2, #0
 8005688:	6062      	str	r2, [r4, #4]
 800568a:	04d9      	lsls	r1, r3, #19
 800568c:	6922      	ldr	r2, [r4, #16]
 800568e:	6022      	str	r2, [r4, #0]
 8005690:	d504      	bpl.n	800569c <__sflush_r+0x7c>
 8005692:	1c42      	adds	r2, r0, #1
 8005694:	d101      	bne.n	800569a <__sflush_r+0x7a>
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	b903      	cbnz	r3, 800569c <__sflush_r+0x7c>
 800569a:	6560      	str	r0, [r4, #84]	; 0x54
 800569c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569e:	602f      	str	r7, [r5, #0]
 80056a0:	2900      	cmp	r1, #0
 80056a2:	d0ca      	beq.n	800563a <__sflush_r+0x1a>
 80056a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a8:	4299      	cmp	r1, r3
 80056aa:	d002      	beq.n	80056b2 <__sflush_r+0x92>
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 f9b1 	bl	8005a14 <_free_r>
 80056b2:	2000      	movs	r0, #0
 80056b4:	6360      	str	r0, [r4, #52]	; 0x34
 80056b6:	e7c1      	b.n	800563c <__sflush_r+0x1c>
 80056b8:	6a21      	ldr	r1, [r4, #32]
 80056ba:	2301      	movs	r3, #1
 80056bc:	4628      	mov	r0, r5
 80056be:	47b0      	blx	r6
 80056c0:	1c41      	adds	r1, r0, #1
 80056c2:	d1c7      	bne.n	8005654 <__sflush_r+0x34>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0c4      	beq.n	8005654 <__sflush_r+0x34>
 80056ca:	2b1d      	cmp	r3, #29
 80056cc:	d001      	beq.n	80056d2 <__sflush_r+0xb2>
 80056ce:	2b16      	cmp	r3, #22
 80056d0:	d101      	bne.n	80056d6 <__sflush_r+0xb6>
 80056d2:	602f      	str	r7, [r5, #0]
 80056d4:	e7b1      	b.n	800563a <__sflush_r+0x1a>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	e7ad      	b.n	800563c <__sflush_r+0x1c>
 80056e0:	690f      	ldr	r7, [r1, #16]
 80056e2:	2f00      	cmp	r7, #0
 80056e4:	d0a9      	beq.n	800563a <__sflush_r+0x1a>
 80056e6:	0793      	lsls	r3, r2, #30
 80056e8:	680e      	ldr	r6, [r1, #0]
 80056ea:	bf08      	it	eq
 80056ec:	694b      	ldreq	r3, [r1, #20]
 80056ee:	600f      	str	r7, [r1, #0]
 80056f0:	bf18      	it	ne
 80056f2:	2300      	movne	r3, #0
 80056f4:	eba6 0807 	sub.w	r8, r6, r7
 80056f8:	608b      	str	r3, [r1, #8]
 80056fa:	f1b8 0f00 	cmp.w	r8, #0
 80056fe:	dd9c      	ble.n	800563a <__sflush_r+0x1a>
 8005700:	6a21      	ldr	r1, [r4, #32]
 8005702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005704:	4643      	mov	r3, r8
 8005706:	463a      	mov	r2, r7
 8005708:	4628      	mov	r0, r5
 800570a:	47b0      	blx	r6
 800570c:	2800      	cmp	r0, #0
 800570e:	dc06      	bgt.n	800571e <__sflush_r+0xfe>
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	e78e      	b.n	800563c <__sflush_r+0x1c>
 800571e:	4407      	add	r7, r0
 8005720:	eba8 0800 	sub.w	r8, r8, r0
 8005724:	e7e9      	b.n	80056fa <__sflush_r+0xda>
 8005726:	bf00      	nop
 8005728:	20400001 	.word	0x20400001

0800572c <_fflush_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	690b      	ldr	r3, [r1, #16]
 8005730:	4605      	mov	r5, r0
 8005732:	460c      	mov	r4, r1
 8005734:	b913      	cbnz	r3, 800573c <_fflush_r+0x10>
 8005736:	2500      	movs	r5, #0
 8005738:	4628      	mov	r0, r5
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	b118      	cbz	r0, 8005746 <_fflush_r+0x1a>
 800573e:	6983      	ldr	r3, [r0, #24]
 8005740:	b90b      	cbnz	r3, 8005746 <_fflush_r+0x1a>
 8005742:	f000 f899 	bl	8005878 <__sinit>
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <_fflush_r+0x6c>)
 8005748:	429c      	cmp	r4, r3
 800574a:	d11b      	bne.n	8005784 <_fflush_r+0x58>
 800574c:	686c      	ldr	r4, [r5, #4]
 800574e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ef      	beq.n	8005736 <_fflush_r+0xa>
 8005756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005758:	07d0      	lsls	r0, r2, #31
 800575a:	d404      	bmi.n	8005766 <_fflush_r+0x3a>
 800575c:	0599      	lsls	r1, r3, #22
 800575e:	d402      	bmi.n	8005766 <_fflush_r+0x3a>
 8005760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005762:	f000 f94c 	bl	80059fe <__retarget_lock_acquire_recursive>
 8005766:	4628      	mov	r0, r5
 8005768:	4621      	mov	r1, r4
 800576a:	f7ff ff59 	bl	8005620 <__sflush_r>
 800576e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005770:	07da      	lsls	r2, r3, #31
 8005772:	4605      	mov	r5, r0
 8005774:	d4e0      	bmi.n	8005738 <_fflush_r+0xc>
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	059b      	lsls	r3, r3, #22
 800577a:	d4dd      	bmi.n	8005738 <_fflush_r+0xc>
 800577c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800577e:	f000 f93f 	bl	8005a00 <__retarget_lock_release_recursive>
 8005782:	e7d9      	b.n	8005738 <_fflush_r+0xc>
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <_fflush_r+0x70>)
 8005786:	429c      	cmp	r4, r3
 8005788:	d101      	bne.n	800578e <_fflush_r+0x62>
 800578a:	68ac      	ldr	r4, [r5, #8]
 800578c:	e7df      	b.n	800574e <_fflush_r+0x22>
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <_fflush_r+0x74>)
 8005790:	429c      	cmp	r4, r3
 8005792:	bf08      	it	eq
 8005794:	68ec      	ldreq	r4, [r5, #12]
 8005796:	e7da      	b.n	800574e <_fflush_r+0x22>
 8005798:	08006b80 	.word	0x08006b80
 800579c:	08006ba0 	.word	0x08006ba0
 80057a0:	08006b60 	.word	0x08006b60

080057a4 <fflush>:
 80057a4:	4601      	mov	r1, r0
 80057a6:	b920      	cbnz	r0, 80057b2 <fflush+0xe>
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <fflush+0x18>)
 80057aa:	4905      	ldr	r1, [pc, #20]	; (80057c0 <fflush+0x1c>)
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	f000 b8e1 	b.w	8005974 <_fwalk_reent>
 80057b2:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <fflush+0x20>)
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	f7ff bfb9 	b.w	800572c <_fflush_r>
 80057ba:	bf00      	nop
 80057bc:	08006bc0 	.word	0x08006bc0
 80057c0:	0800572d 	.word	0x0800572d
 80057c4:	200002c0 	.word	0x200002c0

080057c8 <std>:
 80057c8:	2300      	movs	r3, #0
 80057ca:	b510      	push	{r4, lr}
 80057cc:	4604      	mov	r4, r0
 80057ce:	e9c0 3300 	strd	r3, r3, [r0]
 80057d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057d6:	6083      	str	r3, [r0, #8]
 80057d8:	8181      	strh	r1, [r0, #12]
 80057da:	6643      	str	r3, [r0, #100]	; 0x64
 80057dc:	81c2      	strh	r2, [r0, #14]
 80057de:	6183      	str	r3, [r0, #24]
 80057e0:	4619      	mov	r1, r3
 80057e2:	2208      	movs	r2, #8
 80057e4:	305c      	adds	r0, #92	; 0x5c
 80057e6:	f000 f90c 	bl	8005a02 <memset>
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <std+0x38>)
 80057ec:	6263      	str	r3, [r4, #36]	; 0x24
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <std+0x3c>)
 80057f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <std+0x40>)
 80057f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <std+0x44>)
 80057f8:	6224      	str	r4, [r4, #32]
 80057fa:	6323      	str	r3, [r4, #48]	; 0x30
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	bf00      	nop
 8005800:	08005e31 	.word	0x08005e31
 8005804:	08005e53 	.word	0x08005e53
 8005808:	08005e8b 	.word	0x08005e8b
 800580c:	08005eaf 	.word	0x08005eaf

08005810 <_cleanup_r>:
 8005810:	4901      	ldr	r1, [pc, #4]	; (8005818 <_cleanup_r+0x8>)
 8005812:	f000 b8af 	b.w	8005974 <_fwalk_reent>
 8005816:	bf00      	nop
 8005818:	0800572d 	.word	0x0800572d

0800581c <__sfmoreglue>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	1e4a      	subs	r2, r1, #1
 8005820:	2568      	movs	r5, #104	; 0x68
 8005822:	4355      	muls	r5, r2
 8005824:	460e      	mov	r6, r1
 8005826:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800582a:	f000 f943 	bl	8005ab4 <_malloc_r>
 800582e:	4604      	mov	r4, r0
 8005830:	b140      	cbz	r0, 8005844 <__sfmoreglue+0x28>
 8005832:	2100      	movs	r1, #0
 8005834:	e9c0 1600 	strd	r1, r6, [r0]
 8005838:	300c      	adds	r0, #12
 800583a:	60a0      	str	r0, [r4, #8]
 800583c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005840:	f000 f8df 	bl	8005a02 <memset>
 8005844:	4620      	mov	r0, r4
 8005846:	bd70      	pop	{r4, r5, r6, pc}

08005848 <__sfp_lock_acquire>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__sfp_lock_acquire+0x8>)
 800584a:	f000 b8d8 	b.w	80059fe <__retarget_lock_acquire_recursive>
 800584e:	bf00      	nop
 8005850:	200004e4 	.word	0x200004e4

08005854 <__sfp_lock_release>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__sfp_lock_release+0x8>)
 8005856:	f000 b8d3 	b.w	8005a00 <__retarget_lock_release_recursive>
 800585a:	bf00      	nop
 800585c:	200004e4 	.word	0x200004e4

08005860 <__sinit_lock_acquire>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__sinit_lock_acquire+0x8>)
 8005862:	f000 b8cc 	b.w	80059fe <__retarget_lock_acquire_recursive>
 8005866:	bf00      	nop
 8005868:	200004df 	.word	0x200004df

0800586c <__sinit_lock_release>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__sinit_lock_release+0x8>)
 800586e:	f000 b8c7 	b.w	8005a00 <__retarget_lock_release_recursive>
 8005872:	bf00      	nop
 8005874:	200004df 	.word	0x200004df

08005878 <__sinit>:
 8005878:	b510      	push	{r4, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	f7ff fff0 	bl	8005860 <__sinit_lock_acquire>
 8005880:	69a3      	ldr	r3, [r4, #24]
 8005882:	b11b      	cbz	r3, 800588c <__sinit+0x14>
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	f7ff bff0 	b.w	800586c <__sinit_lock_release>
 800588c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005890:	6523      	str	r3, [r4, #80]	; 0x50
 8005892:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <__sinit+0x68>)
 8005894:	4a13      	ldr	r2, [pc, #76]	; (80058e4 <__sinit+0x6c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	62a2      	str	r2, [r4, #40]	; 0x28
 800589a:	42a3      	cmp	r3, r4
 800589c:	bf04      	itt	eq
 800589e:	2301      	moveq	r3, #1
 80058a0:	61a3      	streq	r3, [r4, #24]
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f820 	bl	80058e8 <__sfp>
 80058a8:	6060      	str	r0, [r4, #4]
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 f81c 	bl	80058e8 <__sfp>
 80058b0:	60a0      	str	r0, [r4, #8]
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 f818 	bl	80058e8 <__sfp>
 80058b8:	2200      	movs	r2, #0
 80058ba:	60e0      	str	r0, [r4, #12]
 80058bc:	2104      	movs	r1, #4
 80058be:	6860      	ldr	r0, [r4, #4]
 80058c0:	f7ff ff82 	bl	80057c8 <std>
 80058c4:	68a0      	ldr	r0, [r4, #8]
 80058c6:	2201      	movs	r2, #1
 80058c8:	2109      	movs	r1, #9
 80058ca:	f7ff ff7d 	bl	80057c8 <std>
 80058ce:	68e0      	ldr	r0, [r4, #12]
 80058d0:	2202      	movs	r2, #2
 80058d2:	2112      	movs	r1, #18
 80058d4:	f7ff ff78 	bl	80057c8 <std>
 80058d8:	2301      	movs	r3, #1
 80058da:	61a3      	str	r3, [r4, #24]
 80058dc:	e7d2      	b.n	8005884 <__sinit+0xc>
 80058de:	bf00      	nop
 80058e0:	08006bc0 	.word	0x08006bc0
 80058e4:	08005811 	.word	0x08005811

080058e8 <__sfp>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	4607      	mov	r7, r0
 80058ec:	f7ff ffac 	bl	8005848 <__sfp_lock_acquire>
 80058f0:	4b1e      	ldr	r3, [pc, #120]	; (800596c <__sfp+0x84>)
 80058f2:	681e      	ldr	r6, [r3, #0]
 80058f4:	69b3      	ldr	r3, [r6, #24]
 80058f6:	b913      	cbnz	r3, 80058fe <__sfp+0x16>
 80058f8:	4630      	mov	r0, r6
 80058fa:	f7ff ffbd 	bl	8005878 <__sinit>
 80058fe:	3648      	adds	r6, #72	; 0x48
 8005900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005904:	3b01      	subs	r3, #1
 8005906:	d503      	bpl.n	8005910 <__sfp+0x28>
 8005908:	6833      	ldr	r3, [r6, #0]
 800590a:	b30b      	cbz	r3, 8005950 <__sfp+0x68>
 800590c:	6836      	ldr	r6, [r6, #0]
 800590e:	e7f7      	b.n	8005900 <__sfp+0x18>
 8005910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005914:	b9d5      	cbnz	r5, 800594c <__sfp+0x64>
 8005916:	4b16      	ldr	r3, [pc, #88]	; (8005970 <__sfp+0x88>)
 8005918:	60e3      	str	r3, [r4, #12]
 800591a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800591e:	6665      	str	r5, [r4, #100]	; 0x64
 8005920:	f000 f86c 	bl	80059fc <__retarget_lock_init_recursive>
 8005924:	f7ff ff96 	bl	8005854 <__sfp_lock_release>
 8005928:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800592c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005930:	6025      	str	r5, [r4, #0]
 8005932:	61a5      	str	r5, [r4, #24]
 8005934:	2208      	movs	r2, #8
 8005936:	4629      	mov	r1, r5
 8005938:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800593c:	f000 f861 	bl	8005a02 <memset>
 8005940:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005944:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005948:	4620      	mov	r0, r4
 800594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800594c:	3468      	adds	r4, #104	; 0x68
 800594e:	e7d9      	b.n	8005904 <__sfp+0x1c>
 8005950:	2104      	movs	r1, #4
 8005952:	4638      	mov	r0, r7
 8005954:	f7ff ff62 	bl	800581c <__sfmoreglue>
 8005958:	4604      	mov	r4, r0
 800595a:	6030      	str	r0, [r6, #0]
 800595c:	2800      	cmp	r0, #0
 800595e:	d1d5      	bne.n	800590c <__sfp+0x24>
 8005960:	f7ff ff78 	bl	8005854 <__sfp_lock_release>
 8005964:	230c      	movs	r3, #12
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	e7ee      	b.n	8005948 <__sfp+0x60>
 800596a:	bf00      	nop
 800596c:	08006bc0 	.word	0x08006bc0
 8005970:	ffff0001 	.word	0xffff0001

08005974 <_fwalk_reent>:
 8005974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005978:	4606      	mov	r6, r0
 800597a:	4688      	mov	r8, r1
 800597c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005980:	2700      	movs	r7, #0
 8005982:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005986:	f1b9 0901 	subs.w	r9, r9, #1
 800598a:	d505      	bpl.n	8005998 <_fwalk_reent+0x24>
 800598c:	6824      	ldr	r4, [r4, #0]
 800598e:	2c00      	cmp	r4, #0
 8005990:	d1f7      	bne.n	8005982 <_fwalk_reent+0xe>
 8005992:	4638      	mov	r0, r7
 8005994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005998:	89ab      	ldrh	r3, [r5, #12]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d907      	bls.n	80059ae <_fwalk_reent+0x3a>
 800599e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a2:	3301      	adds	r3, #1
 80059a4:	d003      	beq.n	80059ae <_fwalk_reent+0x3a>
 80059a6:	4629      	mov	r1, r5
 80059a8:	4630      	mov	r0, r6
 80059aa:	47c0      	blx	r8
 80059ac:	4307      	orrs	r7, r0
 80059ae:	3568      	adds	r5, #104	; 0x68
 80059b0:	e7e9      	b.n	8005986 <_fwalk_reent+0x12>
	...

080059b4 <__libc_init_array>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4d0d      	ldr	r5, [pc, #52]	; (80059ec <__libc_init_array+0x38>)
 80059b8:	4c0d      	ldr	r4, [pc, #52]	; (80059f0 <__libc_init_array+0x3c>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	2600      	movs	r6, #0
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	d109      	bne.n	80059d8 <__libc_init_array+0x24>
 80059c4:	4d0b      	ldr	r5, [pc, #44]	; (80059f4 <__libc_init_array+0x40>)
 80059c6:	4c0c      	ldr	r4, [pc, #48]	; (80059f8 <__libc_init_array+0x44>)
 80059c8:	f000 ffa4 	bl	8006914 <_init>
 80059cc:	1b64      	subs	r4, r4, r5
 80059ce:	10a4      	asrs	r4, r4, #2
 80059d0:	2600      	movs	r6, #0
 80059d2:	42a6      	cmp	r6, r4
 80059d4:	d105      	bne.n	80059e2 <__libc_init_array+0x2e>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059dc:	4798      	blx	r3
 80059de:	3601      	adds	r6, #1
 80059e0:	e7ee      	b.n	80059c0 <__libc_init_array+0xc>
 80059e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e6:	4798      	blx	r3
 80059e8:	3601      	adds	r6, #1
 80059ea:	e7f2      	b.n	80059d2 <__libc_init_array+0x1e>
 80059ec:	08006cf8 	.word	0x08006cf8
 80059f0:	08006cf8 	.word	0x08006cf8
 80059f4:	08006cf8 	.word	0x08006cf8
 80059f8:	08006cfc 	.word	0x08006cfc

080059fc <__retarget_lock_init_recursive>:
 80059fc:	4770      	bx	lr

080059fe <__retarget_lock_acquire_recursive>:
 80059fe:	4770      	bx	lr

08005a00 <__retarget_lock_release_recursive>:
 8005a00:	4770      	bx	lr

08005a02 <memset>:
 8005a02:	4402      	add	r2, r0
 8005a04:	4603      	mov	r3, r0
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d100      	bne.n	8005a0c <memset+0xa>
 8005a0a:	4770      	bx	lr
 8005a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a10:	e7f9      	b.n	8005a06 <memset+0x4>
	...

08005a14 <_free_r>:
 8005a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a16:	2900      	cmp	r1, #0
 8005a18:	d048      	beq.n	8005aac <_free_r+0x98>
 8005a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a1e:	9001      	str	r0, [sp, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f1a1 0404 	sub.w	r4, r1, #4
 8005a26:	bfb8      	it	lt
 8005a28:	18e4      	addlt	r4, r4, r3
 8005a2a:	f000 fc45 	bl	80062b8 <__malloc_lock>
 8005a2e:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <_free_r+0x9c>)
 8005a30:	9801      	ldr	r0, [sp, #4]
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	4615      	mov	r5, r2
 8005a36:	b933      	cbnz	r3, 8005a46 <_free_r+0x32>
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	6014      	str	r4, [r2, #0]
 8005a3c:	b003      	add	sp, #12
 8005a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a42:	f000 bc3f 	b.w	80062c4 <__malloc_unlock>
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	d90b      	bls.n	8005a62 <_free_r+0x4e>
 8005a4a:	6821      	ldr	r1, [r4, #0]
 8005a4c:	1862      	adds	r2, r4, r1
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bf04      	itt	eq
 8005a52:	681a      	ldreq	r2, [r3, #0]
 8005a54:	685b      	ldreq	r3, [r3, #4]
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	bf04      	itt	eq
 8005a5a:	1852      	addeq	r2, r2, r1
 8005a5c:	6022      	streq	r2, [r4, #0]
 8005a5e:	602c      	str	r4, [r5, #0]
 8005a60:	e7ec      	b.n	8005a3c <_free_r+0x28>
 8005a62:	461a      	mov	r2, r3
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	b10b      	cbz	r3, 8005a6c <_free_r+0x58>
 8005a68:	42a3      	cmp	r3, r4
 8005a6a:	d9fa      	bls.n	8005a62 <_free_r+0x4e>
 8005a6c:	6811      	ldr	r1, [r2, #0]
 8005a6e:	1855      	adds	r5, r2, r1
 8005a70:	42a5      	cmp	r5, r4
 8005a72:	d10b      	bne.n	8005a8c <_free_r+0x78>
 8005a74:	6824      	ldr	r4, [r4, #0]
 8005a76:	4421      	add	r1, r4
 8005a78:	1854      	adds	r4, r2, r1
 8005a7a:	42a3      	cmp	r3, r4
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	d1dd      	bne.n	8005a3c <_free_r+0x28>
 8005a80:	681c      	ldr	r4, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	6053      	str	r3, [r2, #4]
 8005a86:	4421      	add	r1, r4
 8005a88:	6011      	str	r1, [r2, #0]
 8005a8a:	e7d7      	b.n	8005a3c <_free_r+0x28>
 8005a8c:	d902      	bls.n	8005a94 <_free_r+0x80>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	6003      	str	r3, [r0, #0]
 8005a92:	e7d3      	b.n	8005a3c <_free_r+0x28>
 8005a94:	6825      	ldr	r5, [r4, #0]
 8005a96:	1961      	adds	r1, r4, r5
 8005a98:	428b      	cmp	r3, r1
 8005a9a:	bf04      	itt	eq
 8005a9c:	6819      	ldreq	r1, [r3, #0]
 8005a9e:	685b      	ldreq	r3, [r3, #4]
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	bf04      	itt	eq
 8005aa4:	1949      	addeq	r1, r1, r5
 8005aa6:	6021      	streq	r1, [r4, #0]
 8005aa8:	6054      	str	r4, [r2, #4]
 8005aaa:	e7c7      	b.n	8005a3c <_free_r+0x28>
 8005aac:	b003      	add	sp, #12
 8005aae:	bd30      	pop	{r4, r5, pc}
 8005ab0:	20000358 	.word	0x20000358

08005ab4 <_malloc_r>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	1ccd      	adds	r5, r1, #3
 8005ab8:	f025 0503 	bic.w	r5, r5, #3
 8005abc:	3508      	adds	r5, #8
 8005abe:	2d0c      	cmp	r5, #12
 8005ac0:	bf38      	it	cc
 8005ac2:	250c      	movcc	r5, #12
 8005ac4:	2d00      	cmp	r5, #0
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	db01      	blt.n	8005ace <_malloc_r+0x1a>
 8005aca:	42a9      	cmp	r1, r5
 8005acc:	d903      	bls.n	8005ad6 <_malloc_r+0x22>
 8005ace:	230c      	movs	r3, #12
 8005ad0:	6033      	str	r3, [r6, #0]
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad6:	f000 fbef 	bl	80062b8 <__malloc_lock>
 8005ada:	4921      	ldr	r1, [pc, #132]	; (8005b60 <_malloc_r+0xac>)
 8005adc:	680a      	ldr	r2, [r1, #0]
 8005ade:	4614      	mov	r4, r2
 8005ae0:	b99c      	cbnz	r4, 8005b0a <_malloc_r+0x56>
 8005ae2:	4f20      	ldr	r7, [pc, #128]	; (8005b64 <_malloc_r+0xb0>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	b923      	cbnz	r3, 8005af2 <_malloc_r+0x3e>
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4630      	mov	r0, r6
 8005aec:	f000 f8ca 	bl	8005c84 <_sbrk_r>
 8005af0:	6038      	str	r0, [r7, #0]
 8005af2:	4629      	mov	r1, r5
 8005af4:	4630      	mov	r0, r6
 8005af6:	f000 f8c5 	bl	8005c84 <_sbrk_r>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	d123      	bne.n	8005b46 <_malloc_r+0x92>
 8005afe:	230c      	movs	r3, #12
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	4630      	mov	r0, r6
 8005b04:	f000 fbde 	bl	80062c4 <__malloc_unlock>
 8005b08:	e7e3      	b.n	8005ad2 <_malloc_r+0x1e>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	1b5b      	subs	r3, r3, r5
 8005b0e:	d417      	bmi.n	8005b40 <_malloc_r+0x8c>
 8005b10:	2b0b      	cmp	r3, #11
 8005b12:	d903      	bls.n	8005b1c <_malloc_r+0x68>
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	441c      	add	r4, r3
 8005b18:	6025      	str	r5, [r4, #0]
 8005b1a:	e004      	b.n	8005b26 <_malloc_r+0x72>
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	42a2      	cmp	r2, r4
 8005b20:	bf0c      	ite	eq
 8005b22:	600b      	streq	r3, [r1, #0]
 8005b24:	6053      	strne	r3, [r2, #4]
 8005b26:	4630      	mov	r0, r6
 8005b28:	f000 fbcc 	bl	80062c4 <__malloc_unlock>
 8005b2c:	f104 000b 	add.w	r0, r4, #11
 8005b30:	1d23      	adds	r3, r4, #4
 8005b32:	f020 0007 	bic.w	r0, r0, #7
 8005b36:	1ac2      	subs	r2, r0, r3
 8005b38:	d0cc      	beq.n	8005ad4 <_malloc_r+0x20>
 8005b3a:	1a1b      	subs	r3, r3, r0
 8005b3c:	50a3      	str	r3, [r4, r2]
 8005b3e:	e7c9      	b.n	8005ad4 <_malloc_r+0x20>
 8005b40:	4622      	mov	r2, r4
 8005b42:	6864      	ldr	r4, [r4, #4]
 8005b44:	e7cc      	b.n	8005ae0 <_malloc_r+0x2c>
 8005b46:	1cc4      	adds	r4, r0, #3
 8005b48:	f024 0403 	bic.w	r4, r4, #3
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d0e3      	beq.n	8005b18 <_malloc_r+0x64>
 8005b50:	1a21      	subs	r1, r4, r0
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 f896 	bl	8005c84 <_sbrk_r>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d1dd      	bne.n	8005b18 <_malloc_r+0x64>
 8005b5c:	e7cf      	b.n	8005afe <_malloc_r+0x4a>
 8005b5e:	bf00      	nop
 8005b60:	20000358 	.word	0x20000358
 8005b64:	2000035c 	.word	0x2000035c

08005b68 <iprintf>:
 8005b68:	b40f      	push	{r0, r1, r2, r3}
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <iprintf+0x2c>)
 8005b6c:	b513      	push	{r0, r1, r4, lr}
 8005b6e:	681c      	ldr	r4, [r3, #0]
 8005b70:	b124      	cbz	r4, 8005b7c <iprintf+0x14>
 8005b72:	69a3      	ldr	r3, [r4, #24]
 8005b74:	b913      	cbnz	r3, 8005b7c <iprintf+0x14>
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7ff fe7e 	bl	8005878 <__sinit>
 8005b7c:	ab05      	add	r3, sp, #20
 8005b7e:	9a04      	ldr	r2, [sp, #16]
 8005b80:	68a1      	ldr	r1, [r4, #8]
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 fbcd 	bl	8006324 <_vfiprintf_r>
 8005b8a:	b002      	add	sp, #8
 8005b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b90:	b004      	add	sp, #16
 8005b92:	4770      	bx	lr
 8005b94:	200002c0 	.word	0x200002c0

08005b98 <_puts_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	460e      	mov	r6, r1
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	b118      	cbz	r0, 8005ba8 <_puts_r+0x10>
 8005ba0:	6983      	ldr	r3, [r0, #24]
 8005ba2:	b90b      	cbnz	r3, 8005ba8 <_puts_r+0x10>
 8005ba4:	f7ff fe68 	bl	8005878 <__sinit>
 8005ba8:	69ab      	ldr	r3, [r5, #24]
 8005baa:	68ac      	ldr	r4, [r5, #8]
 8005bac:	b913      	cbnz	r3, 8005bb4 <_puts_r+0x1c>
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f7ff fe62 	bl	8005878 <__sinit>
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <_puts_r+0xd0>)
 8005bb6:	429c      	cmp	r4, r3
 8005bb8:	d120      	bne.n	8005bfc <_puts_r+0x64>
 8005bba:	686c      	ldr	r4, [r5, #4]
 8005bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bbe:	07db      	lsls	r3, r3, #31
 8005bc0:	d405      	bmi.n	8005bce <_puts_r+0x36>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	0598      	lsls	r0, r3, #22
 8005bc6:	d402      	bmi.n	8005bce <_puts_r+0x36>
 8005bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bca:	f7ff ff18 	bl	80059fe <__retarget_lock_acquire_recursive>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	0719      	lsls	r1, r3, #28
 8005bd2:	d51d      	bpl.n	8005c10 <_puts_r+0x78>
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	b1db      	cbz	r3, 8005c10 <_puts_r+0x78>
 8005bd8:	3e01      	subs	r6, #1
 8005bda:	68a3      	ldr	r3, [r4, #8]
 8005bdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005be0:	3b01      	subs	r3, #1
 8005be2:	60a3      	str	r3, [r4, #8]
 8005be4:	bb39      	cbnz	r1, 8005c36 <_puts_r+0x9e>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da38      	bge.n	8005c5c <_puts_r+0xc4>
 8005bea:	4622      	mov	r2, r4
 8005bec:	210a      	movs	r1, #10
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 fa02 	bl	8005ff8 <__swbuf_r>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d011      	beq.n	8005c1c <_puts_r+0x84>
 8005bf8:	250a      	movs	r5, #10
 8005bfa:	e011      	b.n	8005c20 <_puts_r+0x88>
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <_puts_r+0xd4>)
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d101      	bne.n	8005c06 <_puts_r+0x6e>
 8005c02:	68ac      	ldr	r4, [r5, #8]
 8005c04:	e7da      	b.n	8005bbc <_puts_r+0x24>
 8005c06:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <_puts_r+0xd8>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	bf08      	it	eq
 8005c0c:	68ec      	ldreq	r4, [r5, #12]
 8005c0e:	e7d5      	b.n	8005bbc <_puts_r+0x24>
 8005c10:	4621      	mov	r1, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 fa54 	bl	80060c0 <__swsetup_r>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d0dd      	beq.n	8005bd8 <_puts_r+0x40>
 8005c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c22:	07da      	lsls	r2, r3, #31
 8005c24:	d405      	bmi.n	8005c32 <_puts_r+0x9a>
 8005c26:	89a3      	ldrh	r3, [r4, #12]
 8005c28:	059b      	lsls	r3, r3, #22
 8005c2a:	d402      	bmi.n	8005c32 <_puts_r+0x9a>
 8005c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c2e:	f7ff fee7 	bl	8005a00 <__retarget_lock_release_recursive>
 8005c32:	4628      	mov	r0, r5
 8005c34:	bd70      	pop	{r4, r5, r6, pc}
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da04      	bge.n	8005c44 <_puts_r+0xac>
 8005c3a:	69a2      	ldr	r2, [r4, #24]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	dc06      	bgt.n	8005c4e <_puts_r+0xb6>
 8005c40:	290a      	cmp	r1, #10
 8005c42:	d004      	beq.n	8005c4e <_puts_r+0xb6>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	6022      	str	r2, [r4, #0]
 8005c4a:	7019      	strb	r1, [r3, #0]
 8005c4c:	e7c5      	b.n	8005bda <_puts_r+0x42>
 8005c4e:	4622      	mov	r2, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 f9d1 	bl	8005ff8 <__swbuf_r>
 8005c56:	3001      	adds	r0, #1
 8005c58:	d1bf      	bne.n	8005bda <_puts_r+0x42>
 8005c5a:	e7df      	b.n	8005c1c <_puts_r+0x84>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	250a      	movs	r5, #10
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	6022      	str	r2, [r4, #0]
 8005c64:	701d      	strb	r5, [r3, #0]
 8005c66:	e7db      	b.n	8005c20 <_puts_r+0x88>
 8005c68:	08006b80 	.word	0x08006b80
 8005c6c:	08006ba0 	.word	0x08006ba0
 8005c70:	08006b60 	.word	0x08006b60

08005c74 <puts>:
 8005c74:	4b02      	ldr	r3, [pc, #8]	; (8005c80 <puts+0xc>)
 8005c76:	4601      	mov	r1, r0
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	f7ff bf8d 	b.w	8005b98 <_puts_r>
 8005c7e:	bf00      	nop
 8005c80:	200002c0 	.word	0x200002c0

08005c84 <_sbrk_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d06      	ldr	r5, [pc, #24]	; (8005ca0 <_sbrk_r+0x1c>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	f7fb f8e6 	bl	8000e60 <_sbrk>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_sbrk_r+0x1a>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_sbrk_r+0x1a>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	200004e8 	.word	0x200004e8

08005ca4 <setvbuf>:
 8005ca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ca8:	461d      	mov	r5, r3
 8005caa:	4b5d      	ldr	r3, [pc, #372]	; (8005e20 <setvbuf+0x17c>)
 8005cac:	681f      	ldr	r7, [r3, #0]
 8005cae:	4604      	mov	r4, r0
 8005cb0:	460e      	mov	r6, r1
 8005cb2:	4690      	mov	r8, r2
 8005cb4:	b127      	cbz	r7, 8005cc0 <setvbuf+0x1c>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	b913      	cbnz	r3, 8005cc0 <setvbuf+0x1c>
 8005cba:	4638      	mov	r0, r7
 8005cbc:	f7ff fddc 	bl	8005878 <__sinit>
 8005cc0:	4b58      	ldr	r3, [pc, #352]	; (8005e24 <setvbuf+0x180>)
 8005cc2:	429c      	cmp	r4, r3
 8005cc4:	d167      	bne.n	8005d96 <setvbuf+0xf2>
 8005cc6:	687c      	ldr	r4, [r7, #4]
 8005cc8:	f1b8 0f02 	cmp.w	r8, #2
 8005ccc:	d006      	beq.n	8005cdc <setvbuf+0x38>
 8005cce:	f1b8 0f01 	cmp.w	r8, #1
 8005cd2:	f200 809f 	bhi.w	8005e14 <setvbuf+0x170>
 8005cd6:	2d00      	cmp	r5, #0
 8005cd8:	f2c0 809c 	blt.w	8005e14 <setvbuf+0x170>
 8005cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cde:	07db      	lsls	r3, r3, #31
 8005ce0:	d405      	bmi.n	8005cee <setvbuf+0x4a>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	0598      	lsls	r0, r3, #22
 8005ce6:	d402      	bmi.n	8005cee <setvbuf+0x4a>
 8005ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cea:	f7ff fe88 	bl	80059fe <__retarget_lock_acquire_recursive>
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	f7ff fd1b 	bl	800572c <_fflush_r>
 8005cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cf8:	b141      	cbz	r1, 8005d0c <setvbuf+0x68>
 8005cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	d002      	beq.n	8005d08 <setvbuf+0x64>
 8005d02:	4638      	mov	r0, r7
 8005d04:	f7ff fe86 	bl	8005a14 <_free_r>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61a3      	str	r3, [r4, #24]
 8005d10:	6063      	str	r3, [r4, #4]
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	0619      	lsls	r1, r3, #24
 8005d16:	d503      	bpl.n	8005d20 <setvbuf+0x7c>
 8005d18:	6921      	ldr	r1, [r4, #16]
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f7ff fe7a 	bl	8005a14 <_free_r>
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	f1b8 0f02 	cmp.w	r8, #2
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	d06c      	beq.n	8005e0c <setvbuf+0x168>
 8005d32:	ab01      	add	r3, sp, #4
 8005d34:	466a      	mov	r2, sp
 8005d36:	4621      	mov	r1, r4
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f000 fa51 	bl	80061e0 <__swhatbuf_r>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	4318      	orrs	r0, r3
 8005d42:	81a0      	strh	r0, [r4, #12]
 8005d44:	2d00      	cmp	r5, #0
 8005d46:	d130      	bne.n	8005daa <setvbuf+0x106>
 8005d48:	9d00      	ldr	r5, [sp, #0]
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f000 faac 	bl	80062a8 <malloc>
 8005d50:	4606      	mov	r6, r0
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d155      	bne.n	8005e02 <setvbuf+0x15e>
 8005d56:	f8dd 9000 	ldr.w	r9, [sp]
 8005d5a:	45a9      	cmp	r9, r5
 8005d5c:	d14a      	bne.n	8005df4 <setvbuf+0x150>
 8005d5e:	f04f 35ff 	mov.w	r5, #4294967295
 8005d62:	2200      	movs	r2, #0
 8005d64:	60a2      	str	r2, [r4, #8]
 8005d66:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005d6a:	6022      	str	r2, [r4, #0]
 8005d6c:	6122      	str	r2, [r4, #16]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d74:	6162      	str	r2, [r4, #20]
 8005d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d78:	f043 0302 	orr.w	r3, r3, #2
 8005d7c:	07d2      	lsls	r2, r2, #31
 8005d7e:	81a3      	strh	r3, [r4, #12]
 8005d80:	d405      	bmi.n	8005d8e <setvbuf+0xea>
 8005d82:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005d86:	d102      	bne.n	8005d8e <setvbuf+0xea>
 8005d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d8a:	f7ff fe39 	bl	8005a00 <__retarget_lock_release_recursive>
 8005d8e:	4628      	mov	r0, r5
 8005d90:	b003      	add	sp, #12
 8005d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d96:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <setvbuf+0x184>)
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	d101      	bne.n	8005da0 <setvbuf+0xfc>
 8005d9c:	68bc      	ldr	r4, [r7, #8]
 8005d9e:	e793      	b.n	8005cc8 <setvbuf+0x24>
 8005da0:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <setvbuf+0x188>)
 8005da2:	429c      	cmp	r4, r3
 8005da4:	bf08      	it	eq
 8005da6:	68fc      	ldreq	r4, [r7, #12]
 8005da8:	e78e      	b.n	8005cc8 <setvbuf+0x24>
 8005daa:	2e00      	cmp	r6, #0
 8005dac:	d0cd      	beq.n	8005d4a <setvbuf+0xa6>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	b913      	cbnz	r3, 8005db8 <setvbuf+0x114>
 8005db2:	4638      	mov	r0, r7
 8005db4:	f7ff fd60 	bl	8005878 <__sinit>
 8005db8:	f1b8 0f01 	cmp.w	r8, #1
 8005dbc:	bf08      	it	eq
 8005dbe:	89a3      	ldrheq	r3, [r4, #12]
 8005dc0:	6026      	str	r6, [r4, #0]
 8005dc2:	bf04      	itt	eq
 8005dc4:	f043 0301 	orreq.w	r3, r3, #1
 8005dc8:	81a3      	strheq	r3, [r4, #12]
 8005dca:	89a2      	ldrh	r2, [r4, #12]
 8005dcc:	f012 0308 	ands.w	r3, r2, #8
 8005dd0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005dd4:	d01c      	beq.n	8005e10 <setvbuf+0x16c>
 8005dd6:	07d3      	lsls	r3, r2, #31
 8005dd8:	bf41      	itttt	mi
 8005dda:	2300      	movmi	r3, #0
 8005ddc:	426d      	negmi	r5, r5
 8005dde:	60a3      	strmi	r3, [r4, #8]
 8005de0:	61a5      	strmi	r5, [r4, #24]
 8005de2:	bf58      	it	pl
 8005de4:	60a5      	strpl	r5, [r4, #8]
 8005de6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005de8:	f015 0501 	ands.w	r5, r5, #1
 8005dec:	d115      	bne.n	8005e1a <setvbuf+0x176>
 8005dee:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005df2:	e7c8      	b.n	8005d86 <setvbuf+0xe2>
 8005df4:	4648      	mov	r0, r9
 8005df6:	f000 fa57 	bl	80062a8 <malloc>
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d0ae      	beq.n	8005d5e <setvbuf+0xba>
 8005e00:	464d      	mov	r5, r9
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	e7d0      	b.n	8005dae <setvbuf+0x10a>
 8005e0c:	2500      	movs	r5, #0
 8005e0e:	e7a8      	b.n	8005d62 <setvbuf+0xbe>
 8005e10:	60a3      	str	r3, [r4, #8]
 8005e12:	e7e8      	b.n	8005de6 <setvbuf+0x142>
 8005e14:	f04f 35ff 	mov.w	r5, #4294967295
 8005e18:	e7b9      	b.n	8005d8e <setvbuf+0xea>
 8005e1a:	2500      	movs	r5, #0
 8005e1c:	e7b7      	b.n	8005d8e <setvbuf+0xea>
 8005e1e:	bf00      	nop
 8005e20:	200002c0 	.word	0x200002c0
 8005e24:	08006b80 	.word	0x08006b80
 8005e28:	08006ba0 	.word	0x08006ba0
 8005e2c:	08006b60 	.word	0x08006b60

08005e30 <__sread>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	460c      	mov	r4, r1
 8005e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e38:	f000 fd38 	bl	80068ac <_read_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	bfab      	itete	ge
 8005e40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e42:	89a3      	ldrhlt	r3, [r4, #12]
 8005e44:	181b      	addge	r3, r3, r0
 8005e46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e4a:	bfac      	ite	ge
 8005e4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e4e:	81a3      	strhlt	r3, [r4, #12]
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <__swrite>:
 8005e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	461f      	mov	r7, r3
 8005e58:	898b      	ldrh	r3, [r1, #12]
 8005e5a:	05db      	lsls	r3, r3, #23
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	4616      	mov	r6, r2
 8005e62:	d505      	bpl.n	8005e70 <__swrite+0x1e>
 8005e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e68:	2302      	movs	r3, #2
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f000 f9a6 	bl	80061bc <_lseek_r>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	463b      	mov	r3, r7
 8005e80:	4628      	mov	r0, r5
 8005e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e86:	f000 b909 	b.w	800609c <_write_r>

08005e8a <__sseek>:
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e92:	f000 f993 	bl	80061bc <_lseek_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	bf15      	itete	ne
 8005e9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ea6:	81a3      	strheq	r3, [r4, #12]
 8005ea8:	bf18      	it	ne
 8005eaa:	81a3      	strhne	r3, [r4, #12]
 8005eac:	bd10      	pop	{r4, pc}

08005eae <__sclose>:
 8005eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb2:	f000 b973 	b.w	800619c <_close_r>

08005eb6 <strncmp>:
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	b16a      	cbz	r2, 8005ed6 <strncmp+0x20>
 8005eba:	3901      	subs	r1, #1
 8005ebc:	1884      	adds	r4, r0, r2
 8005ebe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005ec2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d103      	bne.n	8005ed2 <strncmp+0x1c>
 8005eca:	42a0      	cmp	r0, r4
 8005ecc:	d001      	beq.n	8005ed2 <strncmp+0x1c>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f5      	bne.n	8005ebe <strncmp+0x8>
 8005ed2:	1a98      	subs	r0, r3, r2
 8005ed4:	bd10      	pop	{r4, pc}
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	e7fc      	b.n	8005ed4 <strncmp+0x1e>
	...

08005edc <_strtol_l.isra.0>:
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee2:	d001      	beq.n	8005ee8 <_strtol_l.isra.0+0xc>
 8005ee4:	2b24      	cmp	r3, #36	; 0x24
 8005ee6:	d906      	bls.n	8005ef6 <_strtol_l.isra.0+0x1a>
 8005ee8:	f7ff fb94 	bl	8005614 <__errno>
 8005eec:	2316      	movs	r3, #22
 8005eee:	6003      	str	r3, [r0, #0]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef6:	4f3a      	ldr	r7, [pc, #232]	; (8005fe0 <_strtol_l.isra.0+0x104>)
 8005ef8:	468e      	mov	lr, r1
 8005efa:	4676      	mov	r6, lr
 8005efc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005f00:	5de5      	ldrb	r5, [r4, r7]
 8005f02:	f015 0508 	ands.w	r5, r5, #8
 8005f06:	d1f8      	bne.n	8005efa <_strtol_l.isra.0+0x1e>
 8005f08:	2c2d      	cmp	r4, #45	; 0x2d
 8005f0a:	d134      	bne.n	8005f76 <_strtol_l.isra.0+0x9a>
 8005f0c:	f89e 4000 	ldrb.w	r4, [lr]
 8005f10:	f04f 0801 	mov.w	r8, #1
 8005f14:	f106 0e02 	add.w	lr, r6, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d05c      	beq.n	8005fd6 <_strtol_l.isra.0+0xfa>
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d10c      	bne.n	8005f3a <_strtol_l.isra.0+0x5e>
 8005f20:	2c30      	cmp	r4, #48	; 0x30
 8005f22:	d10a      	bne.n	8005f3a <_strtol_l.isra.0+0x5e>
 8005f24:	f89e 4000 	ldrb.w	r4, [lr]
 8005f28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f2c:	2c58      	cmp	r4, #88	; 0x58
 8005f2e:	d14d      	bne.n	8005fcc <_strtol_l.isra.0+0xf0>
 8005f30:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005f34:	2310      	movs	r3, #16
 8005f36:	f10e 0e02 	add.w	lr, lr, #2
 8005f3a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005f3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005f42:	2600      	movs	r6, #0
 8005f44:	fbbc f9f3 	udiv	r9, ip, r3
 8005f48:	4635      	mov	r5, r6
 8005f4a:	fb03 ca19 	mls	sl, r3, r9, ip
 8005f4e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005f52:	2f09      	cmp	r7, #9
 8005f54:	d818      	bhi.n	8005f88 <_strtol_l.isra.0+0xac>
 8005f56:	463c      	mov	r4, r7
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	dd24      	ble.n	8005fa6 <_strtol_l.isra.0+0xca>
 8005f5c:	2e00      	cmp	r6, #0
 8005f5e:	db1f      	blt.n	8005fa0 <_strtol_l.isra.0+0xc4>
 8005f60:	45a9      	cmp	r9, r5
 8005f62:	d31d      	bcc.n	8005fa0 <_strtol_l.isra.0+0xc4>
 8005f64:	d101      	bne.n	8005f6a <_strtol_l.isra.0+0x8e>
 8005f66:	45a2      	cmp	sl, r4
 8005f68:	db1a      	blt.n	8005fa0 <_strtol_l.isra.0+0xc4>
 8005f6a:	fb05 4503 	mla	r5, r5, r3, r4
 8005f6e:	2601      	movs	r6, #1
 8005f70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005f74:	e7eb      	b.n	8005f4e <_strtol_l.isra.0+0x72>
 8005f76:	2c2b      	cmp	r4, #43	; 0x2b
 8005f78:	bf08      	it	eq
 8005f7a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005f7e:	46a8      	mov	r8, r5
 8005f80:	bf08      	it	eq
 8005f82:	f106 0e02 	addeq.w	lr, r6, #2
 8005f86:	e7c7      	b.n	8005f18 <_strtol_l.isra.0+0x3c>
 8005f88:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005f8c:	2f19      	cmp	r7, #25
 8005f8e:	d801      	bhi.n	8005f94 <_strtol_l.isra.0+0xb8>
 8005f90:	3c37      	subs	r4, #55	; 0x37
 8005f92:	e7e1      	b.n	8005f58 <_strtol_l.isra.0+0x7c>
 8005f94:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005f98:	2f19      	cmp	r7, #25
 8005f9a:	d804      	bhi.n	8005fa6 <_strtol_l.isra.0+0xca>
 8005f9c:	3c57      	subs	r4, #87	; 0x57
 8005f9e:	e7db      	b.n	8005f58 <_strtol_l.isra.0+0x7c>
 8005fa0:	f04f 36ff 	mov.w	r6, #4294967295
 8005fa4:	e7e4      	b.n	8005f70 <_strtol_l.isra.0+0x94>
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	da05      	bge.n	8005fb6 <_strtol_l.isra.0+0xda>
 8005faa:	2322      	movs	r3, #34	; 0x22
 8005fac:	6003      	str	r3, [r0, #0]
 8005fae:	4665      	mov	r5, ip
 8005fb0:	b942      	cbnz	r2, 8005fc4 <_strtol_l.isra.0+0xe8>
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	e79d      	b.n	8005ef2 <_strtol_l.isra.0+0x16>
 8005fb6:	f1b8 0f00 	cmp.w	r8, #0
 8005fba:	d000      	beq.n	8005fbe <_strtol_l.isra.0+0xe2>
 8005fbc:	426d      	negs	r5, r5
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	d0f7      	beq.n	8005fb2 <_strtol_l.isra.0+0xd6>
 8005fc2:	b10e      	cbz	r6, 8005fc8 <_strtol_l.isra.0+0xec>
 8005fc4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005fc8:	6011      	str	r1, [r2, #0]
 8005fca:	e7f2      	b.n	8005fb2 <_strtol_l.isra.0+0xd6>
 8005fcc:	2430      	movs	r4, #48	; 0x30
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1b3      	bne.n	8005f3a <_strtol_l.isra.0+0x5e>
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	e7b1      	b.n	8005f3a <_strtol_l.isra.0+0x5e>
 8005fd6:	2c30      	cmp	r4, #48	; 0x30
 8005fd8:	d0a4      	beq.n	8005f24 <_strtol_l.isra.0+0x48>
 8005fda:	230a      	movs	r3, #10
 8005fdc:	e7ad      	b.n	8005f3a <_strtol_l.isra.0+0x5e>
 8005fde:	bf00      	nop
 8005fe0:	08006bc5 	.word	0x08006bc5

08005fe4 <strtol>:
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	460a      	mov	r2, r1
 8005fe8:	4601      	mov	r1, r0
 8005fea:	4802      	ldr	r0, [pc, #8]	; (8005ff4 <strtol+0x10>)
 8005fec:	6800      	ldr	r0, [r0, #0]
 8005fee:	f7ff bf75 	b.w	8005edc <_strtol_l.isra.0>
 8005ff2:	bf00      	nop
 8005ff4:	200002c0 	.word	0x200002c0

08005ff8 <__swbuf_r>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	460e      	mov	r6, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	4605      	mov	r5, r0
 8006000:	b118      	cbz	r0, 800600a <__swbuf_r+0x12>
 8006002:	6983      	ldr	r3, [r0, #24]
 8006004:	b90b      	cbnz	r3, 800600a <__swbuf_r+0x12>
 8006006:	f7ff fc37 	bl	8005878 <__sinit>
 800600a:	4b21      	ldr	r3, [pc, #132]	; (8006090 <__swbuf_r+0x98>)
 800600c:	429c      	cmp	r4, r3
 800600e:	d12b      	bne.n	8006068 <__swbuf_r+0x70>
 8006010:	686c      	ldr	r4, [r5, #4]
 8006012:	69a3      	ldr	r3, [r4, #24]
 8006014:	60a3      	str	r3, [r4, #8]
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	071a      	lsls	r2, r3, #28
 800601a:	d52f      	bpl.n	800607c <__swbuf_r+0x84>
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	b36b      	cbz	r3, 800607c <__swbuf_r+0x84>
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	6820      	ldr	r0, [r4, #0]
 8006024:	1ac0      	subs	r0, r0, r3
 8006026:	6963      	ldr	r3, [r4, #20]
 8006028:	b2f6      	uxtb	r6, r6
 800602a:	4283      	cmp	r3, r0
 800602c:	4637      	mov	r7, r6
 800602e:	dc04      	bgt.n	800603a <__swbuf_r+0x42>
 8006030:	4621      	mov	r1, r4
 8006032:	4628      	mov	r0, r5
 8006034:	f7ff fb7a 	bl	800572c <_fflush_r>
 8006038:	bb30      	cbnz	r0, 8006088 <__swbuf_r+0x90>
 800603a:	68a3      	ldr	r3, [r4, #8]
 800603c:	3b01      	subs	r3, #1
 800603e:	60a3      	str	r3, [r4, #8]
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	6022      	str	r2, [r4, #0]
 8006046:	701e      	strb	r6, [r3, #0]
 8006048:	6963      	ldr	r3, [r4, #20]
 800604a:	3001      	adds	r0, #1
 800604c:	4283      	cmp	r3, r0
 800604e:	d004      	beq.n	800605a <__swbuf_r+0x62>
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	07db      	lsls	r3, r3, #31
 8006054:	d506      	bpl.n	8006064 <__swbuf_r+0x6c>
 8006056:	2e0a      	cmp	r6, #10
 8006058:	d104      	bne.n	8006064 <__swbuf_r+0x6c>
 800605a:	4621      	mov	r1, r4
 800605c:	4628      	mov	r0, r5
 800605e:	f7ff fb65 	bl	800572c <_fflush_r>
 8006062:	b988      	cbnz	r0, 8006088 <__swbuf_r+0x90>
 8006064:	4638      	mov	r0, r7
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <__swbuf_r+0x9c>)
 800606a:	429c      	cmp	r4, r3
 800606c:	d101      	bne.n	8006072 <__swbuf_r+0x7a>
 800606e:	68ac      	ldr	r4, [r5, #8]
 8006070:	e7cf      	b.n	8006012 <__swbuf_r+0x1a>
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <__swbuf_r+0xa0>)
 8006074:	429c      	cmp	r4, r3
 8006076:	bf08      	it	eq
 8006078:	68ec      	ldreq	r4, [r5, #12]
 800607a:	e7ca      	b.n	8006012 <__swbuf_r+0x1a>
 800607c:	4621      	mov	r1, r4
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f81e 	bl	80060c0 <__swsetup_r>
 8006084:	2800      	cmp	r0, #0
 8006086:	d0cb      	beq.n	8006020 <__swbuf_r+0x28>
 8006088:	f04f 37ff 	mov.w	r7, #4294967295
 800608c:	e7ea      	b.n	8006064 <__swbuf_r+0x6c>
 800608e:	bf00      	nop
 8006090:	08006b80 	.word	0x08006b80
 8006094:	08006ba0 	.word	0x08006ba0
 8006098:	08006b60 	.word	0x08006b60

0800609c <_write_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d07      	ldr	r5, [pc, #28]	; (80060bc <_write_r+0x20>)
 80060a0:	4604      	mov	r4, r0
 80060a2:	4608      	mov	r0, r1
 80060a4:	4611      	mov	r1, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	602a      	str	r2, [r5, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f7fa fadc 	bl	8000668 <_write>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_write_r+0x1e>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_write_r+0x1e>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	200004e8 	.word	0x200004e8

080060c0 <__swsetup_r>:
 80060c0:	4b32      	ldr	r3, [pc, #200]	; (800618c <__swsetup_r+0xcc>)
 80060c2:	b570      	push	{r4, r5, r6, lr}
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	4606      	mov	r6, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	b125      	cbz	r5, 80060d6 <__swsetup_r+0x16>
 80060cc:	69ab      	ldr	r3, [r5, #24]
 80060ce:	b913      	cbnz	r3, 80060d6 <__swsetup_r+0x16>
 80060d0:	4628      	mov	r0, r5
 80060d2:	f7ff fbd1 	bl	8005878 <__sinit>
 80060d6:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <__swsetup_r+0xd0>)
 80060d8:	429c      	cmp	r4, r3
 80060da:	d10f      	bne.n	80060fc <__swsetup_r+0x3c>
 80060dc:	686c      	ldr	r4, [r5, #4]
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060e4:	0719      	lsls	r1, r3, #28
 80060e6:	d42c      	bmi.n	8006142 <__swsetup_r+0x82>
 80060e8:	06dd      	lsls	r5, r3, #27
 80060ea:	d411      	bmi.n	8006110 <__swsetup_r+0x50>
 80060ec:	2309      	movs	r3, #9
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	e03e      	b.n	800617a <__swsetup_r+0xba>
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <__swsetup_r+0xd4>)
 80060fe:	429c      	cmp	r4, r3
 8006100:	d101      	bne.n	8006106 <__swsetup_r+0x46>
 8006102:	68ac      	ldr	r4, [r5, #8]
 8006104:	e7eb      	b.n	80060de <__swsetup_r+0x1e>
 8006106:	4b24      	ldr	r3, [pc, #144]	; (8006198 <__swsetup_r+0xd8>)
 8006108:	429c      	cmp	r4, r3
 800610a:	bf08      	it	eq
 800610c:	68ec      	ldreq	r4, [r5, #12]
 800610e:	e7e6      	b.n	80060de <__swsetup_r+0x1e>
 8006110:	0758      	lsls	r0, r3, #29
 8006112:	d512      	bpl.n	800613a <__swsetup_r+0x7a>
 8006114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006116:	b141      	cbz	r1, 800612a <__swsetup_r+0x6a>
 8006118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800611c:	4299      	cmp	r1, r3
 800611e:	d002      	beq.n	8006126 <__swsetup_r+0x66>
 8006120:	4630      	mov	r0, r6
 8006122:	f7ff fc77 	bl	8005a14 <_free_r>
 8006126:	2300      	movs	r3, #0
 8006128:	6363      	str	r3, [r4, #52]	; 0x34
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006130:	81a3      	strh	r3, [r4, #12]
 8006132:	2300      	movs	r3, #0
 8006134:	6063      	str	r3, [r4, #4]
 8006136:	6923      	ldr	r3, [r4, #16]
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	f043 0308 	orr.w	r3, r3, #8
 8006140:	81a3      	strh	r3, [r4, #12]
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	b94b      	cbnz	r3, 800615a <__swsetup_r+0x9a>
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800614c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006150:	d003      	beq.n	800615a <__swsetup_r+0x9a>
 8006152:	4621      	mov	r1, r4
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f867 	bl	8006228 <__smakebuf_r>
 800615a:	89a0      	ldrh	r0, [r4, #12]
 800615c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006160:	f010 0301 	ands.w	r3, r0, #1
 8006164:	d00a      	beq.n	800617c <__swsetup_r+0xbc>
 8006166:	2300      	movs	r3, #0
 8006168:	60a3      	str	r3, [r4, #8]
 800616a:	6963      	ldr	r3, [r4, #20]
 800616c:	425b      	negs	r3, r3
 800616e:	61a3      	str	r3, [r4, #24]
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	b943      	cbnz	r3, 8006186 <__swsetup_r+0xc6>
 8006174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006178:	d1ba      	bne.n	80060f0 <__swsetup_r+0x30>
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	0781      	lsls	r1, r0, #30
 800617e:	bf58      	it	pl
 8006180:	6963      	ldrpl	r3, [r4, #20]
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	e7f4      	b.n	8006170 <__swsetup_r+0xb0>
 8006186:	2000      	movs	r0, #0
 8006188:	e7f7      	b.n	800617a <__swsetup_r+0xba>
 800618a:	bf00      	nop
 800618c:	200002c0 	.word	0x200002c0
 8006190:	08006b80 	.word	0x08006b80
 8006194:	08006ba0 	.word	0x08006ba0
 8006198:	08006b60 	.word	0x08006b60

0800619c <_close_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d06      	ldr	r5, [pc, #24]	; (80061b8 <_close_r+0x1c>)
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fa fe25 	bl	8000df6 <_close>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_close_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_close_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	200004e8 	.word	0x200004e8

080061bc <_lseek_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_lseek_r+0x20>)
 80061c0:	4604      	mov	r4, r0
 80061c2:	4608      	mov	r0, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	2200      	movs	r2, #0
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fa fe3a 	bl	8000e44 <_lseek>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_lseek_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_lseek_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	200004e8 	.word	0x200004e8

080061e0 <__swhatbuf_r>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	460e      	mov	r6, r1
 80061e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e8:	2900      	cmp	r1, #0
 80061ea:	b096      	sub	sp, #88	; 0x58
 80061ec:	4614      	mov	r4, r2
 80061ee:	461d      	mov	r5, r3
 80061f0:	da07      	bge.n	8006202 <__swhatbuf_r+0x22>
 80061f2:	2300      	movs	r3, #0
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	89b3      	ldrh	r3, [r6, #12]
 80061f8:	061a      	lsls	r2, r3, #24
 80061fa:	d410      	bmi.n	800621e <__swhatbuf_r+0x3e>
 80061fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006200:	e00e      	b.n	8006220 <__swhatbuf_r+0x40>
 8006202:	466a      	mov	r2, sp
 8006204:	f000 fb64 	bl	80068d0 <_fstat_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	dbf2      	blt.n	80061f2 <__swhatbuf_r+0x12>
 800620c:	9a01      	ldr	r2, [sp, #4]
 800620e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006212:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006216:	425a      	negs	r2, r3
 8006218:	415a      	adcs	r2, r3
 800621a:	602a      	str	r2, [r5, #0]
 800621c:	e7ee      	b.n	80061fc <__swhatbuf_r+0x1c>
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	2000      	movs	r0, #0
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	b016      	add	sp, #88	; 0x58
 8006226:	bd70      	pop	{r4, r5, r6, pc}

08006228 <__smakebuf_r>:
 8006228:	898b      	ldrh	r3, [r1, #12]
 800622a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800622c:	079d      	lsls	r5, r3, #30
 800622e:	4606      	mov	r6, r0
 8006230:	460c      	mov	r4, r1
 8006232:	d507      	bpl.n	8006244 <__smakebuf_r+0x1c>
 8006234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	2301      	movs	r3, #1
 800623e:	6163      	str	r3, [r4, #20]
 8006240:	b002      	add	sp, #8
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	ab01      	add	r3, sp, #4
 8006246:	466a      	mov	r2, sp
 8006248:	f7ff ffca 	bl	80061e0 <__swhatbuf_r>
 800624c:	9900      	ldr	r1, [sp, #0]
 800624e:	4605      	mov	r5, r0
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff fc2f 	bl	8005ab4 <_malloc_r>
 8006256:	b948      	cbnz	r0, 800626c <__smakebuf_r+0x44>
 8006258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800625c:	059a      	lsls	r2, r3, #22
 800625e:	d4ef      	bmi.n	8006240 <__smakebuf_r+0x18>
 8006260:	f023 0303 	bic.w	r3, r3, #3
 8006264:	f043 0302 	orr.w	r3, r3, #2
 8006268:	81a3      	strh	r3, [r4, #12]
 800626a:	e7e3      	b.n	8006234 <__smakebuf_r+0xc>
 800626c:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <__smakebuf_r+0x7c>)
 800626e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	6020      	str	r0, [r4, #0]
 8006274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	9b00      	ldr	r3, [sp, #0]
 800627c:	6163      	str	r3, [r4, #20]
 800627e:	9b01      	ldr	r3, [sp, #4]
 8006280:	6120      	str	r0, [r4, #16]
 8006282:	b15b      	cbz	r3, 800629c <__smakebuf_r+0x74>
 8006284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006288:	4630      	mov	r0, r6
 800628a:	f000 fb33 	bl	80068f4 <_isatty_r>
 800628e:	b128      	cbz	r0, 800629c <__smakebuf_r+0x74>
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	81a3      	strh	r3, [r4, #12]
 800629c:	89a0      	ldrh	r0, [r4, #12]
 800629e:	4305      	orrs	r5, r0
 80062a0:	81a5      	strh	r5, [r4, #12]
 80062a2:	e7cd      	b.n	8006240 <__smakebuf_r+0x18>
 80062a4:	08005811 	.word	0x08005811

080062a8 <malloc>:
 80062a8:	4b02      	ldr	r3, [pc, #8]	; (80062b4 <malloc+0xc>)
 80062aa:	4601      	mov	r1, r0
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f7ff bc01 	b.w	8005ab4 <_malloc_r>
 80062b2:	bf00      	nop
 80062b4:	200002c0 	.word	0x200002c0

080062b8 <__malloc_lock>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__malloc_lock+0x8>)
 80062ba:	f7ff bba0 	b.w	80059fe <__retarget_lock_acquire_recursive>
 80062be:	bf00      	nop
 80062c0:	200004e0 	.word	0x200004e0

080062c4 <__malloc_unlock>:
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <__malloc_unlock+0x8>)
 80062c6:	f7ff bb9b 	b.w	8005a00 <__retarget_lock_release_recursive>
 80062ca:	bf00      	nop
 80062cc:	200004e0 	.word	0x200004e0

080062d0 <__sfputc_r>:
 80062d0:	6893      	ldr	r3, [r2, #8]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	b410      	push	{r4}
 80062d8:	6093      	str	r3, [r2, #8]
 80062da:	da08      	bge.n	80062ee <__sfputc_r+0x1e>
 80062dc:	6994      	ldr	r4, [r2, #24]
 80062de:	42a3      	cmp	r3, r4
 80062e0:	db01      	blt.n	80062e6 <__sfputc_r+0x16>
 80062e2:	290a      	cmp	r1, #10
 80062e4:	d103      	bne.n	80062ee <__sfputc_r+0x1e>
 80062e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ea:	f7ff be85 	b.w	8005ff8 <__swbuf_r>
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	1c58      	adds	r0, r3, #1
 80062f2:	6010      	str	r0, [r2, #0]
 80062f4:	7019      	strb	r1, [r3, #0]
 80062f6:	4608      	mov	r0, r1
 80062f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <__sfputs_r>:
 80062fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	4614      	mov	r4, r2
 8006306:	18d5      	adds	r5, r2, r3
 8006308:	42ac      	cmp	r4, r5
 800630a:	d101      	bne.n	8006310 <__sfputs_r+0x12>
 800630c:	2000      	movs	r0, #0
 800630e:	e007      	b.n	8006320 <__sfputs_r+0x22>
 8006310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006314:	463a      	mov	r2, r7
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ffda 	bl	80062d0 <__sfputc_r>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d1f3      	bne.n	8006308 <__sfputs_r+0xa>
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006324 <_vfiprintf_r>:
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	460d      	mov	r5, r1
 800632a:	b09d      	sub	sp, #116	; 0x74
 800632c:	4614      	mov	r4, r2
 800632e:	4698      	mov	r8, r3
 8006330:	4606      	mov	r6, r0
 8006332:	b118      	cbz	r0, 800633c <_vfiprintf_r+0x18>
 8006334:	6983      	ldr	r3, [r0, #24]
 8006336:	b90b      	cbnz	r3, 800633c <_vfiprintf_r+0x18>
 8006338:	f7ff fa9e 	bl	8005878 <__sinit>
 800633c:	4b89      	ldr	r3, [pc, #548]	; (8006564 <_vfiprintf_r+0x240>)
 800633e:	429d      	cmp	r5, r3
 8006340:	d11b      	bne.n	800637a <_vfiprintf_r+0x56>
 8006342:	6875      	ldr	r5, [r6, #4]
 8006344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006346:	07d9      	lsls	r1, r3, #31
 8006348:	d405      	bmi.n	8006356 <_vfiprintf_r+0x32>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	059a      	lsls	r2, r3, #22
 800634e:	d402      	bmi.n	8006356 <_vfiprintf_r+0x32>
 8006350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006352:	f7ff fb54 	bl	80059fe <__retarget_lock_acquire_recursive>
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	071b      	lsls	r3, r3, #28
 800635a:	d501      	bpl.n	8006360 <_vfiprintf_r+0x3c>
 800635c:	692b      	ldr	r3, [r5, #16]
 800635e:	b9eb      	cbnz	r3, 800639c <_vfiprintf_r+0x78>
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff feac 	bl	80060c0 <__swsetup_r>
 8006368:	b1c0      	cbz	r0, 800639c <_vfiprintf_r+0x78>
 800636a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800636c:	07dc      	lsls	r4, r3, #31
 800636e:	d50e      	bpl.n	800638e <_vfiprintf_r+0x6a>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	b01d      	add	sp, #116	; 0x74
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	4b7b      	ldr	r3, [pc, #492]	; (8006568 <_vfiprintf_r+0x244>)
 800637c:	429d      	cmp	r5, r3
 800637e:	d101      	bne.n	8006384 <_vfiprintf_r+0x60>
 8006380:	68b5      	ldr	r5, [r6, #8]
 8006382:	e7df      	b.n	8006344 <_vfiprintf_r+0x20>
 8006384:	4b79      	ldr	r3, [pc, #484]	; (800656c <_vfiprintf_r+0x248>)
 8006386:	429d      	cmp	r5, r3
 8006388:	bf08      	it	eq
 800638a:	68f5      	ldreq	r5, [r6, #12]
 800638c:	e7da      	b.n	8006344 <_vfiprintf_r+0x20>
 800638e:	89ab      	ldrh	r3, [r5, #12]
 8006390:	0598      	lsls	r0, r3, #22
 8006392:	d4ed      	bmi.n	8006370 <_vfiprintf_r+0x4c>
 8006394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006396:	f7ff fb33 	bl	8005a00 <__retarget_lock_release_recursive>
 800639a:	e7e9      	b.n	8006370 <_vfiprintf_r+0x4c>
 800639c:	2300      	movs	r3, #0
 800639e:	9309      	str	r3, [sp, #36]	; 0x24
 80063a0:	2320      	movs	r3, #32
 80063a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80063aa:	2330      	movs	r3, #48	; 0x30
 80063ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006570 <_vfiprintf_r+0x24c>
 80063b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063b4:	f04f 0901 	mov.w	r9, #1
 80063b8:	4623      	mov	r3, r4
 80063ba:	469a      	mov	sl, r3
 80063bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c0:	b10a      	cbz	r2, 80063c6 <_vfiprintf_r+0xa2>
 80063c2:	2a25      	cmp	r2, #37	; 0x25
 80063c4:	d1f9      	bne.n	80063ba <_vfiprintf_r+0x96>
 80063c6:	ebba 0b04 	subs.w	fp, sl, r4
 80063ca:	d00b      	beq.n	80063e4 <_vfiprintf_r+0xc0>
 80063cc:	465b      	mov	r3, fp
 80063ce:	4622      	mov	r2, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7ff ff93 	bl	80062fe <__sfputs_r>
 80063d8:	3001      	adds	r0, #1
 80063da:	f000 80aa 	beq.w	8006532 <_vfiprintf_r+0x20e>
 80063de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e0:	445a      	add	r2, fp
 80063e2:	9209      	str	r2, [sp, #36]	; 0x24
 80063e4:	f89a 3000 	ldrb.w	r3, [sl]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80a2 	beq.w	8006532 <_vfiprintf_r+0x20e>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f04f 32ff 	mov.w	r2, #4294967295
 80063f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063f8:	f10a 0a01 	add.w	sl, sl, #1
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006404:	931a      	str	r3, [sp, #104]	; 0x68
 8006406:	4654      	mov	r4, sl
 8006408:	2205      	movs	r2, #5
 800640a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640e:	4858      	ldr	r0, [pc, #352]	; (8006570 <_vfiprintf_r+0x24c>)
 8006410:	f7f9 fef6 	bl	8000200 <memchr>
 8006414:	9a04      	ldr	r2, [sp, #16]
 8006416:	b9d8      	cbnz	r0, 8006450 <_vfiprintf_r+0x12c>
 8006418:	06d1      	lsls	r1, r2, #27
 800641a:	bf44      	itt	mi
 800641c:	2320      	movmi	r3, #32
 800641e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006422:	0713      	lsls	r3, r2, #28
 8006424:	bf44      	itt	mi
 8006426:	232b      	movmi	r3, #43	; 0x2b
 8006428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642c:	f89a 3000 	ldrb.w	r3, [sl]
 8006430:	2b2a      	cmp	r3, #42	; 0x2a
 8006432:	d015      	beq.n	8006460 <_vfiprintf_r+0x13c>
 8006434:	9a07      	ldr	r2, [sp, #28]
 8006436:	4654      	mov	r4, sl
 8006438:	2000      	movs	r0, #0
 800643a:	f04f 0c0a 	mov.w	ip, #10
 800643e:	4621      	mov	r1, r4
 8006440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006444:	3b30      	subs	r3, #48	; 0x30
 8006446:	2b09      	cmp	r3, #9
 8006448:	d94e      	bls.n	80064e8 <_vfiprintf_r+0x1c4>
 800644a:	b1b0      	cbz	r0, 800647a <_vfiprintf_r+0x156>
 800644c:	9207      	str	r2, [sp, #28]
 800644e:	e014      	b.n	800647a <_vfiprintf_r+0x156>
 8006450:	eba0 0308 	sub.w	r3, r0, r8
 8006454:	fa09 f303 	lsl.w	r3, r9, r3
 8006458:	4313      	orrs	r3, r2
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	46a2      	mov	sl, r4
 800645e:	e7d2      	b.n	8006406 <_vfiprintf_r+0xe2>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	1d19      	adds	r1, r3, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	9103      	str	r1, [sp, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	bfbb      	ittet	lt
 800646c:	425b      	neglt	r3, r3
 800646e:	f042 0202 	orrlt.w	r2, r2, #2
 8006472:	9307      	strge	r3, [sp, #28]
 8006474:	9307      	strlt	r3, [sp, #28]
 8006476:	bfb8      	it	lt
 8006478:	9204      	strlt	r2, [sp, #16]
 800647a:	7823      	ldrb	r3, [r4, #0]
 800647c:	2b2e      	cmp	r3, #46	; 0x2e
 800647e:	d10c      	bne.n	800649a <_vfiprintf_r+0x176>
 8006480:	7863      	ldrb	r3, [r4, #1]
 8006482:	2b2a      	cmp	r3, #42	; 0x2a
 8006484:	d135      	bne.n	80064f2 <_vfiprintf_r+0x1ce>
 8006486:	9b03      	ldr	r3, [sp, #12]
 8006488:	1d1a      	adds	r2, r3, #4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	9203      	str	r2, [sp, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfb8      	it	lt
 8006492:	f04f 33ff 	movlt.w	r3, #4294967295
 8006496:	3402      	adds	r4, #2
 8006498:	9305      	str	r3, [sp, #20]
 800649a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006580 <_vfiprintf_r+0x25c>
 800649e:	7821      	ldrb	r1, [r4, #0]
 80064a0:	2203      	movs	r2, #3
 80064a2:	4650      	mov	r0, sl
 80064a4:	f7f9 feac 	bl	8000200 <memchr>
 80064a8:	b140      	cbz	r0, 80064bc <_vfiprintf_r+0x198>
 80064aa:	2340      	movs	r3, #64	; 0x40
 80064ac:	eba0 000a 	sub.w	r0, r0, sl
 80064b0:	fa03 f000 	lsl.w	r0, r3, r0
 80064b4:	9b04      	ldr	r3, [sp, #16]
 80064b6:	4303      	orrs	r3, r0
 80064b8:	3401      	adds	r4, #1
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c0:	482c      	ldr	r0, [pc, #176]	; (8006574 <_vfiprintf_r+0x250>)
 80064c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064c6:	2206      	movs	r2, #6
 80064c8:	f7f9 fe9a 	bl	8000200 <memchr>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d03f      	beq.n	8006550 <_vfiprintf_r+0x22c>
 80064d0:	4b29      	ldr	r3, [pc, #164]	; (8006578 <_vfiprintf_r+0x254>)
 80064d2:	bb1b      	cbnz	r3, 800651c <_vfiprintf_r+0x1f8>
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	3307      	adds	r3, #7
 80064d8:	f023 0307 	bic.w	r3, r3, #7
 80064dc:	3308      	adds	r3, #8
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e2:	443b      	add	r3, r7
 80064e4:	9309      	str	r3, [sp, #36]	; 0x24
 80064e6:	e767      	b.n	80063b8 <_vfiprintf_r+0x94>
 80064e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ec:	460c      	mov	r4, r1
 80064ee:	2001      	movs	r0, #1
 80064f0:	e7a5      	b.n	800643e <_vfiprintf_r+0x11a>
 80064f2:	2300      	movs	r3, #0
 80064f4:	3401      	adds	r4, #1
 80064f6:	9305      	str	r3, [sp, #20]
 80064f8:	4619      	mov	r1, r3
 80064fa:	f04f 0c0a 	mov.w	ip, #10
 80064fe:	4620      	mov	r0, r4
 8006500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006504:	3a30      	subs	r2, #48	; 0x30
 8006506:	2a09      	cmp	r2, #9
 8006508:	d903      	bls.n	8006512 <_vfiprintf_r+0x1ee>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0c5      	beq.n	800649a <_vfiprintf_r+0x176>
 800650e:	9105      	str	r1, [sp, #20]
 8006510:	e7c3      	b.n	800649a <_vfiprintf_r+0x176>
 8006512:	fb0c 2101 	mla	r1, ip, r1, r2
 8006516:	4604      	mov	r4, r0
 8006518:	2301      	movs	r3, #1
 800651a:	e7f0      	b.n	80064fe <_vfiprintf_r+0x1da>
 800651c:	ab03      	add	r3, sp, #12
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	462a      	mov	r2, r5
 8006522:	4b16      	ldr	r3, [pc, #88]	; (800657c <_vfiprintf_r+0x258>)
 8006524:	a904      	add	r1, sp, #16
 8006526:	4630      	mov	r0, r6
 8006528:	f3af 8000 	nop.w
 800652c:	4607      	mov	r7, r0
 800652e:	1c78      	adds	r0, r7, #1
 8006530:	d1d6      	bne.n	80064e0 <_vfiprintf_r+0x1bc>
 8006532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006534:	07d9      	lsls	r1, r3, #31
 8006536:	d405      	bmi.n	8006544 <_vfiprintf_r+0x220>
 8006538:	89ab      	ldrh	r3, [r5, #12]
 800653a:	059a      	lsls	r2, r3, #22
 800653c:	d402      	bmi.n	8006544 <_vfiprintf_r+0x220>
 800653e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006540:	f7ff fa5e 	bl	8005a00 <__retarget_lock_release_recursive>
 8006544:	89ab      	ldrh	r3, [r5, #12]
 8006546:	065b      	lsls	r3, r3, #25
 8006548:	f53f af12 	bmi.w	8006370 <_vfiprintf_r+0x4c>
 800654c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800654e:	e711      	b.n	8006374 <_vfiprintf_r+0x50>
 8006550:	ab03      	add	r3, sp, #12
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	462a      	mov	r2, r5
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <_vfiprintf_r+0x258>)
 8006558:	a904      	add	r1, sp, #16
 800655a:	4630      	mov	r0, r6
 800655c:	f000 f880 	bl	8006660 <_printf_i>
 8006560:	e7e4      	b.n	800652c <_vfiprintf_r+0x208>
 8006562:	bf00      	nop
 8006564:	08006b80 	.word	0x08006b80
 8006568:	08006ba0 	.word	0x08006ba0
 800656c:	08006b60 	.word	0x08006b60
 8006570:	08006cc5 	.word	0x08006cc5
 8006574:	08006ccf 	.word	0x08006ccf
 8006578:	00000000 	.word	0x00000000
 800657c:	080062ff 	.word	0x080062ff
 8006580:	08006ccb 	.word	0x08006ccb

08006584 <_printf_common>:
 8006584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006588:	4616      	mov	r6, r2
 800658a:	4699      	mov	r9, r3
 800658c:	688a      	ldr	r2, [r1, #8]
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006594:	4293      	cmp	r3, r2
 8006596:	bfb8      	it	lt
 8006598:	4613      	movlt	r3, r2
 800659a:	6033      	str	r3, [r6, #0]
 800659c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065a0:	4607      	mov	r7, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	b10a      	cbz	r2, 80065aa <_printf_common+0x26>
 80065a6:	3301      	adds	r3, #1
 80065a8:	6033      	str	r3, [r6, #0]
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	0699      	lsls	r1, r3, #26
 80065ae:	bf42      	ittt	mi
 80065b0:	6833      	ldrmi	r3, [r6, #0]
 80065b2:	3302      	addmi	r3, #2
 80065b4:	6033      	strmi	r3, [r6, #0]
 80065b6:	6825      	ldr	r5, [r4, #0]
 80065b8:	f015 0506 	ands.w	r5, r5, #6
 80065bc:	d106      	bne.n	80065cc <_printf_common+0x48>
 80065be:	f104 0a19 	add.w	sl, r4, #25
 80065c2:	68e3      	ldr	r3, [r4, #12]
 80065c4:	6832      	ldr	r2, [r6, #0]
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	42ab      	cmp	r3, r5
 80065ca:	dc26      	bgt.n	800661a <_printf_common+0x96>
 80065cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065d0:	1e13      	subs	r3, r2, #0
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	bf18      	it	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	0692      	lsls	r2, r2, #26
 80065da:	d42b      	bmi.n	8006634 <_printf_common+0xb0>
 80065dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e0:	4649      	mov	r1, r9
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c0      	blx	r8
 80065e6:	3001      	adds	r0, #1
 80065e8:	d01e      	beq.n	8006628 <_printf_common+0xa4>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	68e5      	ldr	r5, [r4, #12]
 80065ee:	6832      	ldr	r2, [r6, #0]
 80065f0:	f003 0306 	and.w	r3, r3, #6
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	bf08      	it	eq
 80065f8:	1aad      	subeq	r5, r5, r2
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	6922      	ldr	r2, [r4, #16]
 80065fe:	bf0c      	ite	eq
 8006600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006604:	2500      	movne	r5, #0
 8006606:	4293      	cmp	r3, r2
 8006608:	bfc4      	itt	gt
 800660a:	1a9b      	subgt	r3, r3, r2
 800660c:	18ed      	addgt	r5, r5, r3
 800660e:	2600      	movs	r6, #0
 8006610:	341a      	adds	r4, #26
 8006612:	42b5      	cmp	r5, r6
 8006614:	d11a      	bne.n	800664c <_printf_common+0xc8>
 8006616:	2000      	movs	r0, #0
 8006618:	e008      	b.n	800662c <_printf_common+0xa8>
 800661a:	2301      	movs	r3, #1
 800661c:	4652      	mov	r2, sl
 800661e:	4649      	mov	r1, r9
 8006620:	4638      	mov	r0, r7
 8006622:	47c0      	blx	r8
 8006624:	3001      	adds	r0, #1
 8006626:	d103      	bne.n	8006630 <_printf_common+0xac>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006630:	3501      	adds	r5, #1
 8006632:	e7c6      	b.n	80065c2 <_printf_common+0x3e>
 8006634:	18e1      	adds	r1, r4, r3
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	2030      	movs	r0, #48	; 0x30
 800663a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800663e:	4422      	add	r2, r4
 8006640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006648:	3302      	adds	r3, #2
 800664a:	e7c7      	b.n	80065dc <_printf_common+0x58>
 800664c:	2301      	movs	r3, #1
 800664e:	4622      	mov	r2, r4
 8006650:	4649      	mov	r1, r9
 8006652:	4638      	mov	r0, r7
 8006654:	47c0      	blx	r8
 8006656:	3001      	adds	r0, #1
 8006658:	d0e6      	beq.n	8006628 <_printf_common+0xa4>
 800665a:	3601      	adds	r6, #1
 800665c:	e7d9      	b.n	8006612 <_printf_common+0x8e>
	...

08006660 <_printf_i>:
 8006660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	460c      	mov	r4, r1
 8006666:	4691      	mov	r9, r2
 8006668:	7e27      	ldrb	r7, [r4, #24]
 800666a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800666c:	2f78      	cmp	r7, #120	; 0x78
 800666e:	4680      	mov	r8, r0
 8006670:	469a      	mov	sl, r3
 8006672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006676:	d807      	bhi.n	8006688 <_printf_i+0x28>
 8006678:	2f62      	cmp	r7, #98	; 0x62
 800667a:	d80a      	bhi.n	8006692 <_printf_i+0x32>
 800667c:	2f00      	cmp	r7, #0
 800667e:	f000 80d8 	beq.w	8006832 <_printf_i+0x1d2>
 8006682:	2f58      	cmp	r7, #88	; 0x58
 8006684:	f000 80a3 	beq.w	80067ce <_printf_i+0x16e>
 8006688:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800668c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006690:	e03a      	b.n	8006708 <_printf_i+0xa8>
 8006692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006696:	2b15      	cmp	r3, #21
 8006698:	d8f6      	bhi.n	8006688 <_printf_i+0x28>
 800669a:	a001      	add	r0, pc, #4	; (adr r0, 80066a0 <_printf_i+0x40>)
 800669c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80066a0:	080066f9 	.word	0x080066f9
 80066a4:	0800670d 	.word	0x0800670d
 80066a8:	08006689 	.word	0x08006689
 80066ac:	08006689 	.word	0x08006689
 80066b0:	08006689 	.word	0x08006689
 80066b4:	08006689 	.word	0x08006689
 80066b8:	0800670d 	.word	0x0800670d
 80066bc:	08006689 	.word	0x08006689
 80066c0:	08006689 	.word	0x08006689
 80066c4:	08006689 	.word	0x08006689
 80066c8:	08006689 	.word	0x08006689
 80066cc:	08006819 	.word	0x08006819
 80066d0:	0800673d 	.word	0x0800673d
 80066d4:	080067fb 	.word	0x080067fb
 80066d8:	08006689 	.word	0x08006689
 80066dc:	08006689 	.word	0x08006689
 80066e0:	0800683b 	.word	0x0800683b
 80066e4:	08006689 	.word	0x08006689
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	08006689 	.word	0x08006689
 80066f0:	08006689 	.word	0x08006689
 80066f4:	08006803 	.word	0x08006803
 80066f8:	680b      	ldr	r3, [r1, #0]
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	600a      	str	r2, [r1, #0]
 8006700:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006708:	2301      	movs	r3, #1
 800670a:	e0a3      	b.n	8006854 <_printf_i+0x1f4>
 800670c:	6825      	ldr	r5, [r4, #0]
 800670e:	6808      	ldr	r0, [r1, #0]
 8006710:	062e      	lsls	r6, r5, #24
 8006712:	f100 0304 	add.w	r3, r0, #4
 8006716:	d50a      	bpl.n	800672e <_printf_i+0xce>
 8006718:	6805      	ldr	r5, [r0, #0]
 800671a:	600b      	str	r3, [r1, #0]
 800671c:	2d00      	cmp	r5, #0
 800671e:	da03      	bge.n	8006728 <_printf_i+0xc8>
 8006720:	232d      	movs	r3, #45	; 0x2d
 8006722:	426d      	negs	r5, r5
 8006724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006728:	485e      	ldr	r0, [pc, #376]	; (80068a4 <_printf_i+0x244>)
 800672a:	230a      	movs	r3, #10
 800672c:	e019      	b.n	8006762 <_printf_i+0x102>
 800672e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006732:	6805      	ldr	r5, [r0, #0]
 8006734:	600b      	str	r3, [r1, #0]
 8006736:	bf18      	it	ne
 8006738:	b22d      	sxthne	r5, r5
 800673a:	e7ef      	b.n	800671c <_printf_i+0xbc>
 800673c:	680b      	ldr	r3, [r1, #0]
 800673e:	6825      	ldr	r5, [r4, #0]
 8006740:	1d18      	adds	r0, r3, #4
 8006742:	6008      	str	r0, [r1, #0]
 8006744:	0628      	lsls	r0, r5, #24
 8006746:	d501      	bpl.n	800674c <_printf_i+0xec>
 8006748:	681d      	ldr	r5, [r3, #0]
 800674a:	e002      	b.n	8006752 <_printf_i+0xf2>
 800674c:	0669      	lsls	r1, r5, #25
 800674e:	d5fb      	bpl.n	8006748 <_printf_i+0xe8>
 8006750:	881d      	ldrh	r5, [r3, #0]
 8006752:	4854      	ldr	r0, [pc, #336]	; (80068a4 <_printf_i+0x244>)
 8006754:	2f6f      	cmp	r7, #111	; 0x6f
 8006756:	bf0c      	ite	eq
 8006758:	2308      	moveq	r3, #8
 800675a:	230a      	movne	r3, #10
 800675c:	2100      	movs	r1, #0
 800675e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006762:	6866      	ldr	r6, [r4, #4]
 8006764:	60a6      	str	r6, [r4, #8]
 8006766:	2e00      	cmp	r6, #0
 8006768:	bfa2      	ittt	ge
 800676a:	6821      	ldrge	r1, [r4, #0]
 800676c:	f021 0104 	bicge.w	r1, r1, #4
 8006770:	6021      	strge	r1, [r4, #0]
 8006772:	b90d      	cbnz	r5, 8006778 <_printf_i+0x118>
 8006774:	2e00      	cmp	r6, #0
 8006776:	d04d      	beq.n	8006814 <_printf_i+0x1b4>
 8006778:	4616      	mov	r6, r2
 800677a:	fbb5 f1f3 	udiv	r1, r5, r3
 800677e:	fb03 5711 	mls	r7, r3, r1, r5
 8006782:	5dc7      	ldrb	r7, [r0, r7]
 8006784:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006788:	462f      	mov	r7, r5
 800678a:	42bb      	cmp	r3, r7
 800678c:	460d      	mov	r5, r1
 800678e:	d9f4      	bls.n	800677a <_printf_i+0x11a>
 8006790:	2b08      	cmp	r3, #8
 8006792:	d10b      	bne.n	80067ac <_printf_i+0x14c>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	07df      	lsls	r7, r3, #31
 8006798:	d508      	bpl.n	80067ac <_printf_i+0x14c>
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	6861      	ldr	r1, [r4, #4]
 800679e:	4299      	cmp	r1, r3
 80067a0:	bfde      	ittt	le
 80067a2:	2330      	movle	r3, #48	; 0x30
 80067a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067ac:	1b92      	subs	r2, r2, r6
 80067ae:	6122      	str	r2, [r4, #16]
 80067b0:	f8cd a000 	str.w	sl, [sp]
 80067b4:	464b      	mov	r3, r9
 80067b6:	aa03      	add	r2, sp, #12
 80067b8:	4621      	mov	r1, r4
 80067ba:	4640      	mov	r0, r8
 80067bc:	f7ff fee2 	bl	8006584 <_printf_common>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d14c      	bne.n	800685e <_printf_i+0x1fe>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	b004      	add	sp, #16
 80067ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ce:	4835      	ldr	r0, [pc, #212]	; (80068a4 <_printf_i+0x244>)
 80067d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	680e      	ldr	r6, [r1, #0]
 80067d8:	061f      	lsls	r7, r3, #24
 80067da:	f856 5b04 	ldr.w	r5, [r6], #4
 80067de:	600e      	str	r6, [r1, #0]
 80067e0:	d514      	bpl.n	800680c <_printf_i+0x1ac>
 80067e2:	07d9      	lsls	r1, r3, #31
 80067e4:	bf44      	itt	mi
 80067e6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ea:	6023      	strmi	r3, [r4, #0]
 80067ec:	b91d      	cbnz	r5, 80067f6 <_printf_i+0x196>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	f023 0320 	bic.w	r3, r3, #32
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	2310      	movs	r3, #16
 80067f8:	e7b0      	b.n	800675c <_printf_i+0xfc>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	2378      	movs	r3, #120	; 0x78
 8006804:	4828      	ldr	r0, [pc, #160]	; (80068a8 <_printf_i+0x248>)
 8006806:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800680a:	e7e3      	b.n	80067d4 <_printf_i+0x174>
 800680c:	065e      	lsls	r6, r3, #25
 800680e:	bf48      	it	mi
 8006810:	b2ad      	uxthmi	r5, r5
 8006812:	e7e6      	b.n	80067e2 <_printf_i+0x182>
 8006814:	4616      	mov	r6, r2
 8006816:	e7bb      	b.n	8006790 <_printf_i+0x130>
 8006818:	680b      	ldr	r3, [r1, #0]
 800681a:	6826      	ldr	r6, [r4, #0]
 800681c:	6960      	ldr	r0, [r4, #20]
 800681e:	1d1d      	adds	r5, r3, #4
 8006820:	600d      	str	r5, [r1, #0]
 8006822:	0635      	lsls	r5, r6, #24
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	d501      	bpl.n	800682c <_printf_i+0x1cc>
 8006828:	6018      	str	r0, [r3, #0]
 800682a:	e002      	b.n	8006832 <_printf_i+0x1d2>
 800682c:	0671      	lsls	r1, r6, #25
 800682e:	d5fb      	bpl.n	8006828 <_printf_i+0x1c8>
 8006830:	8018      	strh	r0, [r3, #0]
 8006832:	2300      	movs	r3, #0
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	4616      	mov	r6, r2
 8006838:	e7ba      	b.n	80067b0 <_printf_i+0x150>
 800683a:	680b      	ldr	r3, [r1, #0]
 800683c:	1d1a      	adds	r2, r3, #4
 800683e:	600a      	str	r2, [r1, #0]
 8006840:	681e      	ldr	r6, [r3, #0]
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	2100      	movs	r1, #0
 8006846:	4630      	mov	r0, r6
 8006848:	f7f9 fcda 	bl	8000200 <memchr>
 800684c:	b108      	cbz	r0, 8006852 <_printf_i+0x1f2>
 800684e:	1b80      	subs	r0, r0, r6
 8006850:	6060      	str	r0, [r4, #4]
 8006852:	6863      	ldr	r3, [r4, #4]
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	2300      	movs	r3, #0
 8006858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685c:	e7a8      	b.n	80067b0 <_printf_i+0x150>
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	4632      	mov	r2, r6
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d0ab      	beq.n	80067c4 <_printf_i+0x164>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	079b      	lsls	r3, r3, #30
 8006870:	d413      	bmi.n	800689a <_printf_i+0x23a>
 8006872:	68e0      	ldr	r0, [r4, #12]
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	4298      	cmp	r0, r3
 8006878:	bfb8      	it	lt
 800687a:	4618      	movlt	r0, r3
 800687c:	e7a4      	b.n	80067c8 <_printf_i+0x168>
 800687e:	2301      	movs	r3, #1
 8006880:	4632      	mov	r2, r6
 8006882:	4649      	mov	r1, r9
 8006884:	4640      	mov	r0, r8
 8006886:	47d0      	blx	sl
 8006888:	3001      	adds	r0, #1
 800688a:	d09b      	beq.n	80067c4 <_printf_i+0x164>
 800688c:	3501      	adds	r5, #1
 800688e:	68e3      	ldr	r3, [r4, #12]
 8006890:	9903      	ldr	r1, [sp, #12]
 8006892:	1a5b      	subs	r3, r3, r1
 8006894:	42ab      	cmp	r3, r5
 8006896:	dcf2      	bgt.n	800687e <_printf_i+0x21e>
 8006898:	e7eb      	b.n	8006872 <_printf_i+0x212>
 800689a:	2500      	movs	r5, #0
 800689c:	f104 0619 	add.w	r6, r4, #25
 80068a0:	e7f5      	b.n	800688e <_printf_i+0x22e>
 80068a2:	bf00      	nop
 80068a4:	08006cd6 	.word	0x08006cd6
 80068a8:	08006ce7 	.word	0x08006ce7

080068ac <_read_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4d07      	ldr	r5, [pc, #28]	; (80068cc <_read_r+0x20>)
 80068b0:	4604      	mov	r4, r0
 80068b2:	4608      	mov	r0, r1
 80068b4:	4611      	mov	r1, r2
 80068b6:	2200      	movs	r2, #0
 80068b8:	602a      	str	r2, [r5, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f7fa fa7e 	bl	8000dbc <_read>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_read_r+0x1e>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_read_r+0x1e>
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	200004e8 	.word	0x200004e8

080068d0 <_fstat_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4d07      	ldr	r5, [pc, #28]	; (80068f0 <_fstat_r+0x20>)
 80068d4:	2300      	movs	r3, #0
 80068d6:	4604      	mov	r4, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	602b      	str	r3, [r5, #0]
 80068de:	f7fa fa96 	bl	8000e0e <_fstat>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	d102      	bne.n	80068ec <_fstat_r+0x1c>
 80068e6:	682b      	ldr	r3, [r5, #0]
 80068e8:	b103      	cbz	r3, 80068ec <_fstat_r+0x1c>
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	bd38      	pop	{r3, r4, r5, pc}
 80068ee:	bf00      	nop
 80068f0:	200004e8 	.word	0x200004e8

080068f4 <_isatty_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_isatty_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fa fa95 	bl	8000e2e <_isatty>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_isatty_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_isatty_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	200004e8 	.word	0x200004e8

08006914 <_init>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr

08006920 <_fini>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr
