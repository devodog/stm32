
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080052b0  080052b0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052b0  080052b0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080052b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001d4  0800548c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  0800548c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de02  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002157  00000000  00000000  0002e006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00030160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  000309b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c709  00000000  00000000  00031138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd2a  00000000  00000000  0004d841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8a9  00000000  00000000  0005956b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7e14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  000f7e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fb0 	.word	0x08004fb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08004fb0 	.word	0x08004fb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LED>:
  char paramWords[COMMAND_PARAMS][COMMAND_PARAM_LENGTH];
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*); // the command support function...
};

void LED(char* paramStr){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	printf("%s", paramStr);
 8000288:	6879      	ldr	r1, [r7, #4]
 800028a:	4803      	ldr	r0, [pc, #12]	; (8000298 <LED+0x18>)
 800028c:	f003 ffba 	bl	8004204 <iprintf>
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	08004fc8 	.word	0x08004fc8

0800029c <dummy>:

void dummy(char* paramStr){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	printf("DUMMY\r\n");
 80002a4:	4803      	ldr	r0, [pc, #12]	; (80002b4 <dummy+0x18>)
 80002a6:	f004 f833 	bl	8004310 <puts>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	08004fcc 	.word	0x08004fcc

080002b8 <promt>:

char *argList[] = {"on", "off", "blink"};
//


void promt() {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <promt+0x1c>)
 80002be:	f003 ffa1 	bl	8004204 <iprintf>
   fflush(stdout);
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <promt+0x20>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fdb9 	bl	8003e40 <fflush>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	08004ff0 	.word	0x08004ff0
 80002d8:	20000170 	.word	0x20000170

080002dc <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b08b      	sub	sp, #44	; 0x2c
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
   int i = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	627b      	str	r3, [r7, #36]	; 0x24

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 80002ea:	e079      	b.n	80003e0 <executeCmd+0x104>

	  // TEST OF THE NEW COMMAND IMPLEMENTATION...
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 80002ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ee:	22ac      	movs	r2, #172	; 0xac
 80002f0:	fb02 f303 	mul.w	r3, r2, r3
 80002f4:	4a8a      	ldr	r2, [pc, #552]	; (8000520 <executeCmd+0x244>)
 80002f6:	189c      	adds	r4, r3, r2
 80002f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fa:	22ac      	movs	r2, #172	; 0xac
 80002fc:	fb02 f303 	mul.w	r3, r2, r3
 8000300:	4a87      	ldr	r2, [pc, #540]	; (8000520 <executeCmd+0x244>)
 8000302:	4413      	add	r3, r2
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff63 	bl	80001d0 <strlen>
 800030a:	4603      	mov	r3, r0
 800030c:	461a      	mov	r2, r3
 800030e:	6879      	ldr	r1, [r7, #4]
 8000310:	4620      	mov	r0, r4
 8000312:	f004 f91e 	bl	8004552 <strncmp>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14a      	bne.n	80003b2 <executeCmd+0xd6>
 		 // The command entered is implemented partly or in full...
 		 // Has the command 1 or more parameters?
 		 // Should the command-structure have an extra element that holds the pointer
 		 // to a subroutine that handles the complete user command?
 		 // ...what about the following?
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1]);
 800031c:	4a80      	ldr	r2, [pc, #512]	; (8000520 <executeCmd+0x244>)
 800031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000320:	21ac      	movs	r1, #172	; 0xac
 8000322:	fb01 f303 	mul.w	r3, r1, r3
 8000326:	4413      	add	r3, r2
 8000328:	33a8      	adds	r3, #168	; 0xa8
 800032a:	681c      	ldr	r4, [r3, #0]
 800032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800032e:	22ac      	movs	r2, #172	; 0xac
 8000330:	fb02 f303 	mul.w	r3, r2, r3
 8000334:	4a7a      	ldr	r2, [pc, #488]	; (8000520 <executeCmd+0x244>)
 8000336:	4413      	add	r3, r2
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff49 	bl	80001d0 <strlen>
 800033e:	4603      	mov	r3, r0
 8000340:	3301      	adds	r3, #1
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	4618      	mov	r0, r3
 8000348:	47a0      	blx	r4

 		 printf("\r\n");
 800034a:	4876      	ldr	r0, [pc, #472]	; (8000524 <executeCmd+0x248>)
 800034c:	f003 ffe0 	bl	8004310 <puts>
 		 for(int p=0; p<mcuCmds[i].params; p++){
 8000350:	2300      	movs	r3, #0
 8000352:	623b      	str	r3, [r7, #32]
 8000354:	e01e      	b.n	8000394 <executeCmd+0xb8>
     		 printf("%s = %d\r\n", mcuCmds[i].paramWords[p], mcuCmds[i].paramValues[p]);
 8000356:	6a3a      	ldr	r2, [r7, #32]
 8000358:	4613      	mov	r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4413      	add	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000362:	21ac      	movs	r1, #172	; 0xac
 8000364:	fb01 f202 	mul.w	r2, r1, r2
 8000368:	4413      	add	r3, r2
 800036a:	3318      	adds	r3, #24
 800036c:	4a6c      	ldr	r2, [pc, #432]	; (8000520 <executeCmd+0x244>)
 800036e:	4413      	add	r3, r2
 8000370:	1d19      	adds	r1, r3, #4
 8000372:	486b      	ldr	r0, [pc, #428]	; (8000520 <executeCmd+0x244>)
 8000374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000376:	222b      	movs	r2, #43	; 0x2b
 8000378:	fb02 f203 	mul.w	r2, r2, r3
 800037c:	6a3b      	ldr	r3, [r7, #32]
 800037e:	4413      	add	r3, r2
 8000380:	3320      	adds	r3, #32
 8000382:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000386:	461a      	mov	r2, r3
 8000388:	4867      	ldr	r0, [pc, #412]	; (8000528 <executeCmd+0x24c>)
 800038a:	f003 ff3b 	bl	8004204 <iprintf>
 		 for(int p=0; p<mcuCmds[i].params; p++){
 800038e:	6a3b      	ldr	r3, [r7, #32]
 8000390:	3301      	adds	r3, #1
 8000392:	623b      	str	r3, [r7, #32]
 8000394:	4a62      	ldr	r2, [pc, #392]	; (8000520 <executeCmd+0x244>)
 8000396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000398:	21ac      	movs	r1, #172	; 0xac
 800039a:	fb01 f303 	mul.w	r3, r1, r3
 800039e:	4413      	add	r3, r2
 80003a0:	3314      	adds	r3, #20
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	6a3a      	ldr	r2, [r7, #32]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	dbd5      	blt.n	8000356 <executeCmd+0x7a>
     	 }
 		 promt();
 80003aa:	f7ff ff85 	bl	80002b8 <promt>
     	 return 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	e0b2      	b.n	8000518 <executeCmd+0x23c>
      }

      if (strncmp(cmdList[i], termInput, strlen(cmdList[i])) == 0) {
 80003b2:	4a5e      	ldr	r2, [pc, #376]	; (800052c <executeCmd+0x250>)
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003ba:	4a5c      	ldr	r2, [pc, #368]	; (800052c <executeCmd+0x250>)
 80003bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff04 	bl	80001d0 <strlen>
 80003c8:	4603      	mov	r3, r0
 80003ca:	461a      	mov	r2, r3
 80003cc:	6879      	ldr	r1, [r7, #4]
 80003ce:	4620      	mov	r0, r4
 80003d0:	f004 f8bf 	bl	8004552 <strncmp>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d00a      	beq.n	80003f0 <executeCmd+0x114>
   for (; i < numberOfCommands; i++) {
 80003da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003dc:	3301      	adds	r3, #1
 80003de:	627b      	str	r3, [r7, #36]	; 0x24
 80003e0:	4b53      	ldr	r3, [pc, #332]	; (8000530 <executeCmd+0x254>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	461a      	mov	r2, r3
 80003e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e8:	4293      	cmp	r3, r2
 80003ea:	f6ff af7f 	blt.w	80002ec <executeCmd+0x10>
 80003ee:	e000      	b.n	80003f2 <executeCmd+0x116>
    	 // The command entered is found in the command-list
         break;
 80003f0:	bf00      	nop
      }
   }

   // Execute the command if part of the command-list.
   if (i >= sizeof(cmdList)) {
 80003f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f4:	2b07      	cmp	r3, #7
 80003f6:	d907      	bls.n	8000408 <executeCmd+0x12c>
      printf("\r\n%s is not recognized\r\n", termInput);
 80003f8:	6879      	ldr	r1, [r7, #4]
 80003fa:	484e      	ldr	r0, [pc, #312]	; (8000534 <executeCmd+0x258>)
 80003fc:	f003 ff02 	bl	8004204 <iprintf>
      promt();
 8000400:	f7ff ff5a 	bl	80002b8 <promt>
      return -1;
 8000404:	23ff      	movs	r3, #255	; 0xff
 8000406:	e087      	b.n	8000518 <executeCmd+0x23c>
   }
   else {
      switch (i) {
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	2b00      	cmp	r3, #0
 800040c:	d003      	beq.n	8000416 <executeCmd+0x13a>
 800040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000410:	2b01      	cmp	r3, #1
 8000412:	d077      	beq.n	8000504 <executeCmd+0x228>
 8000414:	e079      	b.n	800050a <executeCmd+0x22e>
         case LD2: { // Parsing parameters
		   char param1[5] = {0};
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
 800041a:	2300      	movs	r3, #0
 800041c:	753b      	strb	r3, [r7, #20]
		   char param2[5] = {0};
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	2300      	movs	r3, #0
 8000424:	733b      	strb	r3, [r7, #12]
		   int j = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
		   // The first parameter
		   for (; j<5; j++){
 800042a:	e016      	b.n	800045a <executeCmd+0x17e>
			  if (termInput[4+j] != ' ') {
 800042c:	69fb      	ldr	r3, [r7, #28]
 800042e:	3304      	adds	r3, #4
 8000430:	461a      	mov	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b20      	cmp	r3, #32
 800043a:	d012      	beq.n	8000462 <executeCmd+0x186>
				  param1[j] = termInput[4+j];
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	3304      	adds	r3, #4
 8000440:	461a      	mov	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	7819      	ldrb	r1, [r3, #0]
 8000448:	f107 0210 	add.w	r2, r7, #16
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	4413      	add	r3, r2
 8000450:	460a      	mov	r2, r1
 8000452:	701a      	strb	r2, [r3, #0]
		   for (; j<5; j++){
 8000454:	69fb      	ldr	r3, [r7, #28]
 8000456:	3301      	adds	r3, #1
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	2b04      	cmp	r3, #4
 800045e:	dde5      	ble.n	800042c <executeCmd+0x150>
 8000460:	e000      	b.n	8000464 <executeCmd+0x188>
			  }
			  else
			  break;
 8000462:	bf00      	nop
		   }

		   if ((j > 0)&&(param1[1]=='l')) {
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	2b00      	cmp	r3, #0
 8000468:	dd37      	ble.n	80004da <executeCmd+0x1fe>
 800046a:	7c7b      	ldrb	r3, [r7, #17]
 800046c:	2b6c      	cmp	r3, #108	; 0x6c
 800046e:	d134      	bne.n	80004da <executeCmd+0x1fe>
			   int k = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
			   // read the next argument/parameter
			   for (; k<5; k++){
 8000474:	e01a      	b.n	80004ac <executeCmd+0x1d0>
				  if (termInput[5+j+k] != ' ') {
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	1d5a      	adds	r2, r3, #5
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	4413      	add	r3, r2
 800047e:	461a      	mov	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4413      	add	r3, r2
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b20      	cmp	r3, #32
 8000488:	d014      	beq.n	80004b4 <executeCmd+0x1d8>
					 param2[k] = termInput[5+j+k];
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	1d5a      	adds	r2, r3, #5
 800048e:	69bb      	ldr	r3, [r7, #24]
 8000490:	4413      	add	r3, r2
 8000492:	461a      	mov	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4413      	add	r3, r2
 8000498:	7819      	ldrb	r1, [r3, #0]
 800049a:	f107 0208 	add.w	r2, r7, #8
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	4413      	add	r3, r2
 80004a2:	460a      	mov	r2, r1
 80004a4:	701a      	strb	r2, [r3, #0]
			   for (; k<5; k++){
 80004a6:	69bb      	ldr	r3, [r7, #24]
 80004a8:	3301      	adds	r3, #1
 80004aa:	61bb      	str	r3, [r7, #24]
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	dde1      	ble.n	8000476 <executeCmd+0x19a>
 80004b2:	e000      	b.n	80004b6 <executeCmd+0x1da>
				  }
				  else
					 break;
 80004b4:	bf00      	nop
			   }
			   msValue = atoi(&param2[0]);
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 fbf4 	bl	8003ca8 <atoi>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <executeCmd+0x25c>)
 80004c4:	6013      	str	r3, [r2, #0]
			   printf("\r\nBlinking LD2 every %d ms\r\n", msValue);
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <executeCmd+0x25c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4619      	mov	r1, r3
 80004cc:	481b      	ldr	r0, [pc, #108]	; (800053c <executeCmd+0x260>)
 80004ce:	f003 fe99 	bl	8004204 <iprintf>
			   led2 = BLINKING;
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <executeCmd+0x264>)
 80004d4:	2202      	movs	r2, #2
 80004d6:	701a      	strb	r2, [r3, #0]
		   if ((j > 0)&&(param1[1]=='l')) {
 80004d8:	e013      	b.n	8000502 <executeCmd+0x226>
		   }
		   else if ((j > 0)&&(param1[1]=='n')){
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dd09      	ble.n	80004f4 <executeCmd+0x218>
 80004e0:	7c7b      	ldrb	r3, [r7, #17]
 80004e2:	2b6e      	cmp	r3, #110	; 0x6e
 80004e4:	d106      	bne.n	80004f4 <executeCmd+0x218>
			   printf("\r\nSetting LD2 ON\r\n");
 80004e6:	4817      	ldr	r0, [pc, #92]	; (8000544 <executeCmd+0x268>)
 80004e8:	f003 ff12 	bl	8004310 <puts>
			   led2 = ON;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <executeCmd+0x264>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	701a      	strb	r2, [r3, #0]
 80004f2:	e006      	b.n	8000502 <executeCmd+0x226>
		   }
		   else{
			   printf("\r\nSetting LD2 OFF\r\n");
 80004f4:	4814      	ldr	r0, [pc, #80]	; (8000548 <executeCmd+0x26c>)
 80004f6:	f003 ff0b 	bl	8004310 <puts>
			   led2 = OFF;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <executeCmd+0x264>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
		   }
		}
		break;
 8000500:	e007      	b.n	8000512 <executeCmd+0x236>
 8000502:	e006      	b.n	8000512 <executeCmd+0x236>

	 case DUMMY:
		printf("\r\ndummy command....\r\n");
 8000504:	4811      	ldr	r0, [pc, #68]	; (800054c <executeCmd+0x270>)
 8000506:	f003 ff03 	bl	8004310 <puts>
	 default:
		printf("\nNOP[i=%d]", i);
 800050a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800050c:	4810      	ldr	r0, [pc, #64]	; (8000550 <executeCmd+0x274>)
 800050e:	f003 fe79 	bl	8004204 <iprintf>
      }
   }
   promt();
 8000512:	f7ff fed1 	bl	80002b8 <promt>
   return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	4618      	mov	r0, r3
 800051a:	372c      	adds	r7, #44	; 0x2c
 800051c:	46bd      	mov	sp, r7
 800051e:	bd90      	pop	{r4, r7, pc}
 8000520:	20000000 	.word	0x20000000
 8000524:	08004ffc 	.word	0x08004ffc
 8000528:	08005000 	.word	0x08005000
 800052c:	20000158 	.word	0x20000158
 8000530:	20000160 	.word	0x20000160
 8000534:	0800500c 	.word	0x0800500c
 8000538:	200001f0 	.word	0x200001f0
 800053c:	08005028 	.word	0x08005028
 8000540:	200001fc 	.word	0x200001fc
 8000544:	08005048 	.word	0x08005048
 8000548:	0800505c 	.word	0x0800505c
 800054c:	08005070 	.word	0x08005070
 8000550:	08005088 	.word	0x08005088

08000554 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	b29a      	uxth	r2, r3
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	68b9      	ldr	r1, [r7, #8]
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <_write+0x28>)
 800056c:	f002 f9c4 	bl	80028f8 <HAL_UART_Transmit>
	return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000020c 	.word	0x2000020c

08000580 <HAL_UART_RxCpltCallback>:
uint8_t UART1_rxBuffer = 0;
uint8_t cmdComplete;
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <HAL_UART_RxCpltCallback+0x90>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b0d      	cmp	r3, #13
 800058e:	d126      	bne.n	80005de <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <HAL_UART_RxCpltCallback+0x94>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	dd1a      	ble.n	80005ce <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	481e      	ldr	r0, [pc, #120]	; (8000618 <HAL_UART_RxCpltCallback+0x98>)
 80005a0:	f000 fe5a 	bl	8001258 <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <HAL_UART_RxCpltCallback+0x94>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	481c      	ldr	r0, [pc, #112]	; (800061c <HAL_UART_RxCpltCallback+0x9c>)
 80005ac:	f7ff fe96 	bl	80002dc <executeCmd>
			bytesReceived = 0;
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <HAL_UART_RxCpltCallback+0x94>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80005b6:	2250      	movs	r2, #80	; 0x50
 80005b8:	2100      	movs	r1, #0
 80005ba:	4818      	ldr	r0, [pc, #96]	; (800061c <HAL_UART_RxCpltCallback+0x9c>)
 80005bc:	f003 fd6f 	bl	800409e <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4814      	ldr	r0, [pc, #80]	; (8000618 <HAL_UART_RxCpltCallback+0x98>)
 80005c8:	f000 fe46 	bl	8001258 <HAL_GPIO_WritePin>
 80005cc:	e001      	b.n	80005d2 <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 80005ce:	f7ff fe73 	bl	80002b8 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	490e      	ldr	r1, [pc, #56]	; (8000610 <HAL_UART_RxCpltCallback+0x90>)
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <HAL_UART_RxCpltCallback+0xa0>)
 80005d8:	f002 fa18 	bl	8002a0c <HAL_UART_Receive_IT>
		return;
 80005dc:	e015      	b.n	800060a <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 80005de:	2364      	movs	r3, #100	; 0x64
 80005e0:	2201      	movs	r2, #1
 80005e2:	490b      	ldr	r1, [pc, #44]	; (8000610 <HAL_UART_RxCpltCallback+0x90>)
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <HAL_UART_RxCpltCallback+0xa0>)
 80005e6:	f002 f987 	bl	80028f8 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_UART_RxCpltCallback+0x94>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_UART_RxCpltCallback+0x90>)
 80005f0:	7811      	ldrb	r1, [r2, #0]
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_UART_RxCpltCallback+0x9c>)
 80005f4:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <HAL_UART_RxCpltCallback+0x94>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <HAL_UART_RxCpltCallback+0x94>)
 80005fe:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	4903      	ldr	r1, [pc, #12]	; (8000610 <HAL_UART_RxCpltCallback+0x90>)
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <HAL_UART_RxCpltCallback+0xa0>)
 8000606:	f002 fa01 	bl	8002a0c <HAL_UART_Receive_IT>
}
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200001f4 	.word	0x200001f4
 8000614:	200001f8 	.word	0x200001f8
 8000618:	48000400 	.word	0x48000400
 800061c:	20000294 	.word	0x20000294
 8000620:	2000020c 	.word	0x2000020c

08000624 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <main+0xb0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6898      	ldr	r0, [r3, #8]
 8000630:	2300      	movs	r3, #0
 8000632:	2202      	movs	r2, #2
 8000634:	2100      	movs	r1, #0
 8000636:	f003 fe83 	bl	8004340 <setvbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800063a:	f000 fa89 	bl	8000b50 <HAL_Init>
	/* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800063e:	f000 f859 	bl	80006f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000642:	f000 f8d7 	bl	80007f4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000646:	f000 f8a5 	bl	8000794 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	4922      	ldr	r1, [pc, #136]	; (80006d8 <main+0xb4>)
 800064e:	4823      	ldr	r0, [pc, #140]	; (80006dc <main+0xb8>)
 8000650:	f002 f9dc 	bl	8002a0c <HAL_UART_Receive_IT>
	uint8_t ledState = OFF;
 8000654:	2300      	movs	r3, #0
 8000656:	71fb      	strb	r3, [r7, #7]
	printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 8000658:	4821      	ldr	r0, [pc, #132]	; (80006e0 <main+0xbc>)
 800065a:	f003 fdd3 	bl	8004204 <iprintf>
	printf("\r\nBuild No. %d", BUILD);
 800065e:	2110      	movs	r1, #16
 8000660:	4820      	ldr	r0, [pc, #128]	; (80006e4 <main+0xc0>)
 8000662:	f003 fdcf 	bl	8004204 <iprintf>
	promt();
 8000666:	f7ff fe27 	bl	80002b8 <promt>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <main+0xc4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	429a      	cmp	r2, r3
 8000672:	d013      	beq.n	800069c <main+0x78>
			ledState = led2;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0xc4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	71fb      	strb	r3, [r7, #7]
			if (led2 == ON) {
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <main+0xc4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d106      	bne.n	8000690 <main+0x6c>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4818      	ldr	r0, [pc, #96]	; (80006ec <main+0xc8>)
 800068a:	f000 fde5 	bl	8001258 <HAL_GPIO_WritePin>
 800068e:	e005      	b.n	800069c <main+0x78>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	4815      	ldr	r0, [pc, #84]	; (80006ec <main+0xc8>)
 8000698:	f000 fdde 	bl	8001258 <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <main+0xc4>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d1e2      	bne.n	800066a <main+0x46>
		   if (msValue > 0) {
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <main+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dd0a      	ble.n	80006c2 <main+0x9e>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b0:	480e      	ldr	r0, [pc, #56]	; (80006ec <main+0xc8>)
 80006b2:	f000 fde9 	bl	8001288 <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <main+0xcc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 faae 	bl	8000c1c <HAL_Delay>
 80006c0:	e7d3      	b.n	800066a <main+0x46>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c8:	4808      	ldr	r0, [pc, #32]	; (80006ec <main+0xc8>)
 80006ca:	f000 fdc5 	bl	8001258 <HAL_GPIO_WritePin>
			   ledState = OFF;
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]
		if (led2 != ledState) {
 80006d2:	e7ca      	b.n	800066a <main+0x46>
 80006d4:	20000170 	.word	0x20000170
 80006d8:	200001f4 	.word	0x200001f4
 80006dc:	2000020c 	.word	0x2000020c
 80006e0:	08005094 	.word	0x08005094
 80006e4:	080050d0 	.word	0x080050d0
 80006e8:	200001fc 	.word	0x200001fc
 80006ec:	48000400 	.word	0x48000400
 80006f0:	200001f0 	.word	0x200001f0

080006f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09c      	sub	sp, #112	; 0x70
 80006f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fe:	2228      	movs	r2, #40	; 0x28
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fccb 	bl	800409e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000718:	463b      	mov	r3, r7
 800071a:	2234      	movs	r2, #52	; 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fcbd 	bl	800409e <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000730:	2300      	movs	r3, #0
 8000732:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000734:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fdbf 	bl	80012bc <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x54>
		Error_Handler();
 8000744:	f000 f896 	bl	8000874 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800075c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fcb2 	bl	80020cc <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x7e>
		Error_Handler();
 800076e:	f000 f881 	bl	8000874 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000772:	2301      	movs	r3, #1
 8000774:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800077a:	463b      	mov	r3, r7
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fedb 	bl	8002538 <HAL_RCCEx_PeriphCLKConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x98>
		Error_Handler();
 8000788:	f000 f874 	bl	8000874 <Error_Handler>
	}
}
 800078c:	bf00      	nop
 800078e:	3770      	adds	r7, #112	; 0x70
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_USART1_UART_Init+0x58>)
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <MX_USART1_UART_Init+0x5c>)
 800079c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007d8:	f002 f840 	bl	800285c <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80007e2:	f000 f847 	bl	8000874 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000020c 	.word	0x2000020c
 80007f0:	40013800 	.word	0x40013800

080007f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_GPIO_Init+0x78>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <MX_GPIO_Init+0x78>)
 8000810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_GPIO_Init+0x78>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_GPIO_Init+0x78>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <MX_GPIO_Init+0x78>)
 8000828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_GPIO_Init+0x78>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <MX_GPIO_Init+0x7c>)
 8000842:	f000 fd09 	bl	8001258 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_GPIO_Init+0x7c>)
 8000860:	f000 fb88 	bl	8000f74 <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400

08000874 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x44>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_MspInit+0x44>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_MspInit+0x44>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x44>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x44>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x44>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <HAL_UART_MspInit+0x8c>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d12f      	bne.n	800094a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_UART_MspInit+0x90>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <HAL_UART_MspInit+0x90>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_UART_MspInit+0x90>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_UART_MspInit+0x90>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <HAL_UART_MspInit+0x90>)
 8000908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_UART_MspInit+0x90>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800091a:	2330      	movs	r3, #48	; 0x30
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800092a:	2307      	movs	r3, #7
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <HAL_UART_MspInit+0x94>)
 8000936:	f000 fb1d 	bl	8000f74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2025      	movs	r0, #37	; 0x25
 8000940:	f000 fa6b 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000944:	2025      	movs	r0, #37	; 0x25
 8000946:	f000 fa84 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40013800 	.word	0x40013800
 8000958:	40021000 	.word	0x40021000
 800095c:	48000800 	.word	0x48000800

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f916 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <USART1_IRQHandler+0x10>)
 80009ba:	f002 f86b 	bl	8002a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000020c 	.word	0x2000020c

080009c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e00a      	b.n	80009f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009da:	f3af 8000 	nop.w
 80009de:	4601      	mov	r1, r0
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	60ba      	str	r2, [r7, #8]
 80009e6:	b2ca      	uxtb	r2, r1
 80009e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbf0      	blt.n	80009da <_read+0x12>
	}

return len;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	return -1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_isatty>:

int _isatty(int file)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
	return 1;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f003 f908 	bl	8003cb0 <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20004000 	.word	0x20004000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	20000200 	.word	0x20000200
 8000ad4:	20000300 	.word	0x20000300

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b00:	f7ff ffea 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f003 fa91 	bl	8004050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2e:	f7ff fd79 	bl	8000624 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b34:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000b40:	080052b8 	.word	0x080052b8
  ldr r2, =_sbss
 8000b44:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000b48:	200002fc 	.word	0x200002fc

08000b4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x28>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f94f 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe88 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f967 	bl	8000e6e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f92f 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000164 	.word	0x20000164
 8000bd4:	2000016c 	.word	0x2000016c
 8000bd8:	20000168 	.word	0x20000168

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000016c 	.word	0x2000016c
 8000c00:	200002e8 	.word	0x200002e8

08000c04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200002e8 	.word	0x200002e8

08000c1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000016c 	.word	0x2000016c

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d008      	beq.n	8000eaa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e020      	b.n	8000eec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 020e 	bic.w	r2, r2, #14
 8000eb8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0201 	bic.w	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d005      	beq.n	8000f1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2204      	movs	r2, #4
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e027      	b.n	8000f6a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 020e 	bic.w	r2, r2, #14
 8000f28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	4798      	blx	r3
    } 
  }
  return status;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f82:	e14e      	b.n	8001222 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8140 	beq.w	800121c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d005      	beq.n	8000fb4 <HAL_GPIO_Init+0x40>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d130      	bne.n	8001016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	f003 0201 	and.w	r2, r3, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b03      	cmp	r3, #3
 8001020:	d017      	beq.n	8001052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d123      	bne.n	80010a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	6939      	ldr	r1, [r7, #16]
 80010a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0203 	and.w	r2, r3, #3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 809a 	beq.w	800121c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e8:	4b55      	ldr	r3, [pc, #340]	; (8001240 <HAL_GPIO_Init+0x2cc>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a54      	ldr	r2, [pc, #336]	; (8001240 <HAL_GPIO_Init+0x2cc>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b52      	ldr	r3, [pc, #328]	; (8001240 <HAL_GPIO_Init+0x2cc>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800112a:	d013      	beq.n	8001154 <HAL_GPIO_Init+0x1e0>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a46      	ldr	r2, [pc, #280]	; (8001248 <HAL_GPIO_Init+0x2d4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00d      	beq.n	8001150 <HAL_GPIO_Init+0x1dc>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a45      	ldr	r2, [pc, #276]	; (800124c <HAL_GPIO_Init+0x2d8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x1d8>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a44      	ldr	r2, [pc, #272]	; (8001250 <HAL_GPIO_Init+0x2dc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_Init+0x1d4>
 8001144:	2303      	movs	r3, #3
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x1e2>
 8001148:	2305      	movs	r3, #5
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x1e2>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x1e2>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x1e2>
 8001154:	2300      	movs	r3, #0
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001166:	4937      	ldr	r1, [pc, #220]	; (8001244 <HAL_GPIO_Init+0x2d0>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001174:	4b37      	ldr	r3, [pc, #220]	; (8001254 <HAL_GPIO_Init+0x2e0>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001198:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_GPIO_Init+0x2e0>)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_GPIO_Init+0x2e0>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011c2:	4a24      	ldr	r2, [pc, #144]	; (8001254 <HAL_GPIO_Init+0x2e0>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_GPIO_Init+0x2e0>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_GPIO_Init+0x2e0>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_GPIO_Init+0x2e0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <HAL_GPIO_Init+0x2e0>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa22 f303 	lsr.w	r3, r2, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	f47f aea9 	bne.w	8000f84 <HAL_GPIO_Init+0x10>
  }
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000800 	.word	0x48000800
 8001250:	48000c00 	.word	0x48000c00
 8001254:	40010400 	.word	0x40010400

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001274:	e002      	b.n	800127c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43d9      	mvns	r1, r3
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	400b      	ands	r3, r1
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f000 bef4 	b.w	80020be <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 816a 	beq.w	80015ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012e6:	4bb3      	ldr	r3, [pc, #716]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d00c      	beq.n	800130c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f2:	4bb0      	ldr	r3, [pc, #704]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d159      	bne.n	80013b2 <HAL_RCC_OscConfig+0xf6>
 80012fe:	4bad      	ldr	r3, [pc, #692]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130a:	d152      	bne.n	80013b2 <HAL_RCC_OscConfig+0xf6>
 800130c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001310:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001320:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d102      	bne.n	800133e <HAL_RCC_OscConfig+0x82>
 8001338:	4b9e      	ldr	r3, [pc, #632]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0xae>
 800133e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001342:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001356:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800135a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001366:	4b93      	ldr	r3, [pc, #588]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800136e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001372:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001376:	fa92 f2a2 	rbit	r2, r2
 800137a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800137e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001382:	fab2 f282 	clz	r2, r2
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	f042 0220 	orr.w	r2, r2, #32
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	f002 021f 	and.w	r2, r2, #31
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 810c 	beq.w	80015b8 <HAL_RCC_OscConfig+0x2fc>
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 8106 	bne.w	80015b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f000 be86 	b.w	80020be <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x110>
 80013be:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a7c      	ldr	r2, [pc, #496]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e030      	b.n	800142e <HAL_RCC_OscConfig+0x172>
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x134>
 80013d6:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a76      	ldr	r2, [pc, #472]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80013dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a73      	ldr	r2, [pc, #460]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80013e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01e      	b.n	800142e <HAL_RCC_OscConfig+0x172>
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fa:	d10c      	bne.n	8001416 <HAL_RCC_OscConfig+0x15a>
 80013fc:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6c      	ldr	r2, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 8001402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b6a      	ldr	r3, [pc, #424]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a69      	ldr	r2, [pc, #420]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e00b      	b.n	800142e <HAL_RCC_OscConfig+0x172>
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a66      	ldr	r2, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a63      	ldr	r2, [pc, #396]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800142e:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	f023 020f 	bic.w	r2, r3, #15
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	495d      	ldr	r1, [pc, #372]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 800143e:	4313      	orrs	r3, r2
 8001440:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d059      	beq.n	8001500 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fbda 	bl	8000c04 <HAL_GetTick>
 8001450:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff fbd5 	bl	8000c04 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d902      	bls.n	800146c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	f000 be29 	b.w	80020be <HAL_RCC_OscConfig+0xe02>
 800146c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001470:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001480:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d102      	bne.n	800149e <HAL_RCC_OscConfig+0x1e2>
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x20e>
 800149e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80014ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80014d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80014d6:	fa92 f2a2 	rbit	r2, r2
 80014da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80014de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80014e2:	fab2 f282 	clz	r2, r2
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f042 0220 	orr.w	r2, r2, #32
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	f002 021f 	and.w	r2, r2, #31
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0ab      	beq.n	8001456 <HAL_RCC_OscConfig+0x19a>
 80014fe:	e05c      	b.n	80015ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fb80 	bl	8000c04 <HAL_GetTick>
 8001504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150a:	f7ff fb7b 	bl	8000c04 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d902      	bls.n	8001520 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	f000 bdcf 	b.w	80020be <HAL_RCC_OscConfig+0xe02>
 8001520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001524:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800152c:	fa93 f3a3 	rbit	r3, r3
 8001530:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001534:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d102      	bne.n	8001552 <HAL_RCC_OscConfig+0x296>
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x2c2>
 8001552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001556:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800156e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_RCC_OscConfig+0x2f8>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001582:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001586:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800158a:	fa92 f2a2 	rbit	r2, r2
 800158e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001592:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001596:	fab2 f282 	clz	r2, r2
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	f042 0220 	orr.w	r2, r2, #32
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	f002 021f 	and.w	r2, r2, #31
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ab      	bne.n	800150a <HAL_RCC_OscConfig+0x24e>
 80015b2:	e002      	b.n	80015ba <HAL_RCC_OscConfig+0x2fe>
 80015b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 816f 	beq.w	80018a8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015ca:	4bd0      	ldr	r3, [pc, #832]	; (800190c <HAL_RCC_OscConfig+0x650>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015d6:	4bcd      	ldr	r3, [pc, #820]	; (800190c <HAL_RCC_OscConfig+0x650>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d16c      	bne.n	80016bc <HAL_RCC_OscConfig+0x400>
 80015e2:	4bca      	ldr	r3, [pc, #808]	; (800190c <HAL_RCC_OscConfig+0x650>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d166      	bne.n	80016bc <HAL_RCC_OscConfig+0x400>
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001600:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x362>
 8001618:	4bbc      	ldr	r3, [pc, #752]	; (800190c <HAL_RCC_OscConfig+0x650>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e013      	b.n	8001646 <HAL_RCC_OscConfig+0x38a>
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001636:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001642:	4bb2      	ldr	r3, [pc, #712]	; (800190c <HAL_RCC_OscConfig+0x650>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2202      	movs	r2, #2
 8001648:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800164c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001650:	fa92 f2a2 	rbit	r2, r2
 8001654:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001658:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800165c:	fab2 f282 	clz	r2, r2
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f002 021f 	and.w	r2, r2, #31
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <HAL_RCC_OscConfig+0x3cc>
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d002      	beq.n	8001688 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	f000 bd1b 	b.w	80020be <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4ba0      	ldr	r3, [pc, #640]	; (800190c <HAL_RCC_OscConfig+0x650>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	21f8      	movs	r1, #248	; 0xf8
 8001698:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016a0:	fa91 f1a1 	rbit	r1, r1
 80016a4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80016a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80016ac:	fab1 f181 	clz	r1, r1
 80016b0:	b2c9      	uxtb	r1, r1
 80016b2:	408b      	lsls	r3, r1
 80016b4:	4995      	ldr	r1, [pc, #596]	; (800190c <HAL_RCC_OscConfig+0x650>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e0f5      	b.n	80018a8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8085 	beq.w	80017d2 <HAL_RCC_OscConfig+0x516>
 80016c8:	2301      	movs	r3, #1
 80016ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80016da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	461a      	mov	r2, r3
 80016f0:	2301      	movs	r3, #1
 80016f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa86 	bl	8000c04 <HAL_GetTick>
 80016f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fa81 	bl	8000c04 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d902      	bls.n	8001714 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	f000 bcd5 	b.w	80020be <HAL_RCC_OscConfig+0xe02>
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001726:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b01      	cmp	r3, #1
 800173c:	d102      	bne.n	8001744 <HAL_RCC_OscConfig+0x488>
 800173e:	4b73      	ldr	r3, [pc, #460]	; (800190c <HAL_RCC_OscConfig+0x650>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	e013      	b.n	800176c <HAL_RCC_OscConfig+0x4b0>
 8001744:	2302      	movs	r3, #2
 8001746:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800175c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x650>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	2202      	movs	r2, #2
 800176e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001772:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001776:	fa92 f2a2 	rbit	r2, r2
 800177a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800177e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001782:	fab2 f282 	clz	r2, r2
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	f042 0220 	orr.w	r2, r2, #32
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	f002 021f 	and.w	r2, r2, #31
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0af      	beq.n	80016fe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b5b      	ldr	r3, [pc, #364]	; (800190c <HAL_RCC_OscConfig+0x650>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	21f8      	movs	r1, #248	; 0xf8
 80017ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017b6:	fa91 f1a1 	rbit	r1, r1
 80017ba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80017be:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80017c2:	fab1 f181 	clz	r1, r1
 80017c6:	b2c9      	uxtb	r1, r1
 80017c8:	408b      	lsls	r3, r1
 80017ca:	4950      	ldr	r1, [pc, #320]	; (800190c <HAL_RCC_OscConfig+0x650>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e06a      	b.n	80018a8 <HAL_RCC_OscConfig+0x5ec>
 80017d2:	2301      	movs	r3, #1
 80017d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80017e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	461a      	mov	r2, r3
 80017fa:	2300      	movs	r3, #0
 80017fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fa01 	bl	8000c04 <HAL_GetTick>
 8001802:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff f9fc 	bl	8000c04 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d902      	bls.n	800181e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	f000 bc50 	b.w	80020be <HAL_RCC_OscConfig+0xe02>
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d102      	bne.n	800184e <HAL_RCC_OscConfig+0x592>
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_RCC_OscConfig+0x650>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	e013      	b.n	8001876 <HAL_RCC_OscConfig+0x5ba>
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001858:	fa93 f3a3 	rbit	r3, r3
 800185c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001866:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_RCC_OscConfig+0x650>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2202      	movs	r2, #2
 8001878:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800187c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001880:	fa92 f2a2 	rbit	r2, r2
 8001884:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001888:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800188c:	fab2 f282 	clz	r2, r2
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f002 021f 	and.w	r2, r2, #31
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1af      	bne.n	8001808 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80da 	beq.w	8001a6c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d069      	beq.n	8001996 <HAL_RCC_OscConfig+0x6da>
 80018c2:	2301      	movs	r3, #1
 80018c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80018d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_OscConfig+0x654>)
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff f98a 	bl	8000c04 <HAL_GetTick>
 80018f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f4:	e00e      	b.n	8001914 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff f985 	bl	8000c04 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d906      	bls.n	8001914 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e3d9      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	10908120 	.word	0x10908120
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001926:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800192a:	2202      	movs	r2, #2
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001942:	2202      	movs	r2, #2
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001954:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4ba5      	ldr	r3, [pc, #660]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800195e:	2102      	movs	r1, #2
 8001960:	6019      	str	r1, [r3, #0]
 8001962:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f1a3 	rbit	r1, r3
 800196c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001970:	6019      	str	r1, [r3, #0]
  return result;
 8001972:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0b0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x63a>
 8001994:	e06a      	b.n	8001a6c <HAL_RCC_OscConfig+0x7b0>
 8001996:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	fa93 f2a3 	rbit	r2, r3
 80019a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019ac:	601a      	str	r2, [r3, #0]
  return result;
 80019ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <HAL_RCC_OscConfig+0x934>)
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	461a      	mov	r2, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff f91c 	bl	8000c04 <HAL_GetTick>
 80019cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff f917 	bl	8000c04 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e36b      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
 80019e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a02:	2202      	movs	r2, #2
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fa93 f2a3 	rbit	r2, r3
 8001a28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a36:	2102      	movs	r1, #2
 8001a38:	6019      	str	r1, [r3, #0]
 8001a3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f1a3 	rbit	r1, r3
 8001a44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a48:	6019      	str	r1, [r3, #0]
  return result;
 8001a4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1b2      	bne.n	80019d2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8158 	beq.w	8001d2c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d112      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a56      	ldr	r2, [pc, #344]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b54      	ldr	r3, [pc, #336]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <HAL_RCC_OscConfig+0x938>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11a      	bne.n	8001af6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x938>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_RCC_OscConfig+0x938>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001acc:	f7ff f89a 	bl	8000c04 <HAL_GetTick>
 8001ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff f895 	bl	8000c04 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e2e9      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aea:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_RCC_OscConfig+0x938>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0ef      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x852>
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a39      	ldr	r2, [pc, #228]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6213      	str	r3, [r2, #32]
 8001b0c:	e02f      	b.n	8001b6e <HAL_RCC_OscConfig+0x8b2>
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x876>
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a33      	ldr	r2, [pc, #204]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a30      	ldr	r2, [pc, #192]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e01d      	b.n	8001b6e <HAL_RCC_OscConfig+0x8b2>
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x89a>
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x8b2>
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a24      	ldr	r2, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d06b      	beq.n	8001c50 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff f844 	bl	8000c04 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff f83f 	bl	8000c04 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e291      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
 8001b9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bc8:	601a      	str	r2, [r3, #0]
  return result;
 8001bca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d109      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x93c>
 8001be4:	4b01      	ldr	r3, [pc, #4]	; (8001bec <HAL_RCC_OscConfig+0x930>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	e014      	b.n	8001c14 <HAL_RCC_OscConfig+0x958>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	10908120 	.word	0x10908120
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	4bbb      	ldr	r3, [pc, #748]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c18:	2102      	movs	r1, #2
 8001c1a:	6011      	str	r1, [r2, #0]
 8001c1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	fa92 f1a2 	rbit	r1, r2
 8001c26:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c2a:	6011      	str	r1, [r2, #0]
  return result;
 8001c2c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	fab2 f282 	clz	r2, r2
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f002 021f 	and.w	r2, r2, #31
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f202 	lsl.w	r2, r1, r2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d099      	beq.n	8001b82 <HAL_RCC_OscConfig+0x8c6>
 8001c4e:	e063      	b.n	8001d18 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7fe ffd8 	bl	8000c04 <HAL_GetTick>
 8001c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe ffd3 	bl	8000c04 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e225      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
 8001c72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c8e:	2202      	movs	r2, #2
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ca0:	601a      	str	r2, [r3, #0]
  return result;
 8001ca2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ca6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_OscConfig+0xa06>
 8001cbc:	4b90      	ldr	r3, [pc, #576]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	e00d      	b.n	8001cde <HAL_RCC_OscConfig+0xa22>
 8001cc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	4b89      	ldr	r3, [pc, #548]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	6011      	str	r1, [r2, #0]
 8001ce6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fa92 f1a2 	rbit	r1, r2
 8001cf0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001cf4:	6011      	str	r1, [r2, #0]
  return result;
 8001cf6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1a0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d18:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d20:	4b77      	ldr	r3, [pc, #476]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	4a76      	ldr	r2, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 81c2 	beq.w	80020bc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d38:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	f000 819c 	beq.w	800207e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	f040 8114 	bne.w	8001f7a <HAL_RCC_OscConfig+0xcbe>
 8001d52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe ff3c 	bl	8000c04 <HAL_GetTick>
 8001d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe ff37 	bl	8000c04 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e18b      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
 8001da6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dbe:	601a      	str	r2, [r3, #0]
  return result;
 8001dc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0xb24>
 8001dda:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	e01b      	b.n	8001e18 <HAL_RCC_OscConfig+0xb5c>
 8001de0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e20:	6011      	str	r1, [r2, #0]
 8001e22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	fa92 f1a2 	rbit	r1, r2
 8001e2c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e30:	6011      	str	r1, [r2, #0]
  return result;
 8001e32:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	fab2 f282 	clz	r2, r2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f002 021f 	and.w	r2, r2, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d19e      	bne.n	8001d92 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	4925      	ldr	r1, [pc, #148]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e88:	601a      	str	r2, [r3, #0]
  return result;
 8001e8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e8e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fead 	bl	8000c04 <HAL_GetTick>
 8001eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eae:	e009      	b.n	8001ec4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7fe fea8 	bl	8000c04 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0fc      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
 8001ec4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001edc:	601a      	str	r2, [r3, #0]
  return result;
 8001ede:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ee2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCC_OscConfig+0xc48>
 8001ef8:	4b01      	ldr	r3, [pc, #4]	; (8001f00 <HAL_RCC_OscConfig+0xc44>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	e01e      	b.n	8001f3c <HAL_RCC_OscConfig+0xc80>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_OscConfig+0xe0c>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fa92 f1a2 	rbit	r1, r2
 8001f50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f54:	6011      	str	r1, [r2, #0]
  return result;
 8001f56:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f042 0220 	orr.w	r2, r2, #32
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f002 021f 	and.w	r2, r2, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d09b      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xbf4>
 8001f78:	e0a0      	b.n	80020bc <HAL_RCC_OscConfig+0xe00>
 8001f7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f2a3 	rbit	r2, r3
 8001f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f92:	601a      	str	r2, [r3, #0]
  return result;
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	461a      	mov	r2, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fe28 	bl	8000c04 <HAL_GetTick>
 8001fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7fe fe23 	bl	8000c04 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e077      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
 8001fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	601a      	str	r2, [r3, #0]
  return result;
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_RCC_OscConfig+0xd4c>
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_OscConfig+0xe0c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e01b      	b.n	8002040 <HAL_RCC_OscConfig+0xd84>
 8002008:	f107 0320 	add.w	r3, r7, #32
 800200c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f107 0320 	add.w	r3, r7, #32
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	fa93 f2a3 	rbit	r2, r3
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_RCC_OscConfig+0xe0c>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	f107 0210 	add.w	r2, r7, #16
 8002044:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002048:	6011      	str	r1, [r2, #0]
 800204a:	f107 0210 	add.w	r2, r7, #16
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	fa92 f1a2 	rbit	r1, r2
 8002054:	f107 020c 	add.w	r2, r7, #12
 8002058:	6011      	str	r1, [r2, #0]
  return result;
 800205a:	f107 020c 	add.w	r2, r7, #12
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	fab2 f282 	clz	r2, r2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f042 0220 	orr.w	r2, r2, #32
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	f002 021f 	and.w	r2, r2, #31
 8002070:	2101      	movs	r1, #1
 8002072:	fa01 f202 	lsl.w	r2, r1, r2
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d19e      	bne.n	8001fba <HAL_RCC_OscConfig+0xcfe>
 800207c:	e01e      	b.n	80020bc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e018      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_RCC_OscConfig+0xe0c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002094:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d108      	bne.n	80020b8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b09e      	sub	sp, #120	; 0x78
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e162      	b.n	80023aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b90      	ldr	r3, [pc, #576]	; (8002328 <HAL_RCC_ClockConfig+0x25c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d910      	bls.n	8002114 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b8d      	ldr	r3, [pc, #564]	; (8002328 <HAL_RCC_ClockConfig+0x25c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	498b      	ldr	r1, [pc, #556]	; (8002328 <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b89      	ldr	r3, [pc, #548]	; (8002328 <HAL_RCC_ClockConfig+0x25c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e14a      	b.n	80023aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b82      	ldr	r3, [pc, #520]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	497f      	ldr	r1, [pc, #508]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80dc 	beq.w	80022f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d13c      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xf6>
 8002148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d102      	bne.n	8002172 <HAL_RCC_ClockConfig+0xa6>
 800216c:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	e00f      	b.n	8002192 <HAL_RCC_ClockConfig+0xc6>
 8002172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002176:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	667b      	str	r3, [r7, #100]	; 0x64
 8002180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002184:	663b      	str	r3, [r7, #96]	; 0x60
 8002186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002196:	65ba      	str	r2, [r7, #88]	; 0x58
 8002198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800219a:	fa92 f2a2 	rbit	r2, r2
 800219e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021a2:	fab2 f282 	clz	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f042 0220 	orr.w	r2, r2, #32
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f002 021f 	and.w	r2, r2, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d17b      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0f3      	b.n	80023aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d13c      	bne.n	8002244 <HAL_RCC_ClockConfig+0x178>
 80021ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d102      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x128>
 80021ee:	4b4f      	ldr	r3, [pc, #316]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	e00f      	b.n	8002214 <HAL_RCC_ClockConfig+0x148>
 80021f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	647b      	str	r3, [r7, #68]	; 0x44
 8002202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002206:	643b      	str	r3, [r7, #64]	; 0x40
 8002208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002210:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002218:	63ba      	str	r2, [r7, #56]	; 0x38
 800221a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800221c:	fa92 f2a2 	rbit	r2, r2
 8002220:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f042 0220 	orr.w	r2, r2, #32
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f002 021f 	and.w	r2, r2, #31
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f202 	lsl.w	r2, r1, r2
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d13a      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0b2      	b.n	80023aa <HAL_RCC_ClockConfig+0x2de>
 8002244:	2302      	movs	r3, #2
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
 8002266:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e00d      	b.n	8002288 <HAL_RCC_ClockConfig+0x1bc>
 800226c:	2302      	movs	r3, #2
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	2302      	movs	r3, #2
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2202      	movs	r2, #2
 800228a:	61ba      	str	r2, [r7, #24]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	fa92 f2a2 	rbit	r2, r2
 8002292:	617a      	str	r2, [r7, #20]
  return result;
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	fab2 f282 	clz	r2, r2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f042 0220 	orr.w	r2, r2, #32
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f002 021f 	and.w	r2, r2, #31
 80022a6:	2101      	movs	r1, #1
 80022a8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e079      	b.n	80023aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	491a      	ldr	r1, [pc, #104]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fc9c 	bl	8000c04 <HAL_GetTick>
 80022cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fc98 	bl	8000c04 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e061      	b.n	80023aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_ClockConfig+0x260>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 020c 	and.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1eb      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_ClockConfig+0x25c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d214      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_RCC_ClockConfig+0x25c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 0207 	bic.w	r2, r3, #7
 800230e:	4906      	ldr	r1, [pc, #24]	; (8002328 <HAL_RCC_ClockConfig+0x25c>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_RCC_ClockConfig+0x25c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e040      	b.n	80023aa <HAL_RCC_ClockConfig+0x2de>
 8002328:	40022000 	.word	0x40022000
 800232c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_ClockConfig+0x2e8>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	491a      	ldr	r1, [pc, #104]	; (80023b4 <HAL_RCC_ClockConfig+0x2e8>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_RCC_ClockConfig+0x2e8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4912      	ldr	r1, [pc, #72]	; (80023b4 <HAL_RCC_ClockConfig+0x2e8>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800236e:	f000 f829 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002372:	4601      	mov	r1, r0
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237c:	22f0      	movs	r2, #240	; 0xf0
 800237e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	60fa      	str	r2, [r7, #12]
  return result;
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	40d3      	lsrs	r3, r2
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002394:	5cd3      	ldrb	r3, [r2, r3]
 8002396:	fa21 f303 	lsr.w	r3, r1, r3
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_RCC_ClockConfig+0x2f0>)
 800239c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_RCC_ClockConfig+0x2f4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fbea 	bl	8000b7c <HAL_InitTick>
  
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3778      	adds	r7, #120	; 0x78
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	080050e0 	.word	0x080050e0
 80023bc:	20000164 	.word	0x20000164
 80023c0:	20000168 	.word	0x20000168

080023c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b08b      	sub	sp, #44	; 0x2c
 80023c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x30>
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d003      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x36>
 80023f2:	e03c      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023f6:	623b      	str	r3, [r7, #32]
      break;
 80023f8:	e03c      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002400:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002404:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	607a      	str	r2, [r7, #4]
  return result;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	fab2 f282 	clz	r2, r2
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	40d3      	lsrs	r3, r2
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_RCC_GetSysClockFreq+0xc8>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	220f      	movs	r2, #15
 8002428:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	fa92 f2a2 	rbit	r2, r2
 8002430:	60fa      	str	r2, [r7, #12]
  return result;
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	fab2 f282 	clz	r2, r2
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	40d3      	lsrs	r3, r2
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_RCC_GetSysClockFreq+0xcc>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800244c:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc4>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	fbb2 f2f3 	udiv	r2, r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
 800245c:	e004      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	623b      	str	r3, [r7, #32]
      break;
 800246c:	e002      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002470:	623b      	str	r3, [r7, #32]
      break;
 8002472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002474:	6a3b      	ldr	r3, [r7, #32]
}
 8002476:	4618      	mov	r0, r3
 8002478:	372c      	adds	r7, #44	; 0x2c
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	080050f8 	.word	0x080050f8
 8002490:	08005108 	.word	0x08005108
 8002494:	003d0900 	.word	0x003d0900

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCC_GetHCLKFreq+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000164 	.word	0x20000164

080024b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024b6:	f7ff ffef 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024ba:	4601      	mov	r1, r0
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	fa92 f2a2 	rbit	r2, r2
 80024d0:	603a      	str	r2, [r7, #0]
  return result;
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	fab2 f282 	clz	r2, r2
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	40d3      	lsrs	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	080050f0 	.word	0x080050f0

080024f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024fa:	f7ff ffcd 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024fe:	4601      	mov	r1, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002508:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800250c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	fa92 f2a2 	rbit	r2, r2
 8002514:	603a      	str	r2, [r7, #0]
  return result;
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	40d3      	lsrs	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	080050f0 	.word	0x080050f0

08002538 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b092      	sub	sp, #72	; 0x48
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80d4 	beq.w	8002704 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255c:	4b4e      	ldr	r3, [pc, #312]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10e      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	61d3      	str	r3, [r2, #28]
 8002574:	4b48      	ldr	r3, [pc, #288]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b45      	ldr	r3, [pc, #276]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4b42      	ldr	r3, [pc, #264]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a41      	ldr	r2, [pc, #260]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe fb31 	bl	8000c04 <HAL_GetTick>
 80025a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7fe fb2d 	bl	8000c04 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b64      	cmp	r3, #100	; 0x64
 80025b2:	d901      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e14b      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	4b38      	ldr	r3, [pc, #224]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8084 	beq.w	80026de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d07c      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	461a      	mov	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	461a      	mov	r2, r3
 8002632:	2300      	movs	r3, #0
 8002634:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d04b      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fadd 	bl	8000c04 <HAL_GetTick>
 800264a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fad9 	bl	8000c04 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0f5      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002664:	2302      	movs	r3, #2
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
 8002670:	2302      	movs	r3, #2
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	61fb      	str	r3, [r7, #28]
  return result;
 800267c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d108      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002692:	4b01      	ldr	r3, [pc, #4]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	e00d      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
 80026a0:	10908100 	.word	0x10908100
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	4b69      	ldr	r3, [pc, #420]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2202      	movs	r2, #2
 80026b6:	613a      	str	r2, [r7, #16]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	60fa      	str	r2, [r7, #12]
  return result;
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	fab2 f282 	clz	r2, r2
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f002 021f 	and.w	r2, r2, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0b7      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026de:	4b5e      	ldr	r3, [pc, #376]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	495b      	ldr	r1, [pc, #364]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b57      	ldr	r3, [pc, #348]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	4a56      	ldr	r2, [pc, #344]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002702:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002710:	4b51      	ldr	r3, [pc, #324]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	f023 0203 	bic.w	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	494e      	ldr	r1, [pc, #312]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800271e:	4313      	orrs	r3, r2
 8002720:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800272e:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f023 0210 	bic.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4947      	ldr	r1, [pc, #284]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800273c:	4313      	orrs	r3, r2
 800273e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800274c:	4b42      	ldr	r3, [pc, #264]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	493f      	ldr	r1, [pc, #252]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f023 0220 	bic.w	r2, r3, #32
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	4938      	ldr	r1, [pc, #224]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002778:	4313      	orrs	r3, r2
 800277a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002788:	4b33      	ldr	r3, [pc, #204]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	4930      	ldr	r1, [pc, #192]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002796:	4313      	orrs	r3, r2
 8002798:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4929      	ldr	r1, [pc, #164]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4921      	ldr	r1, [pc, #132]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	491a      	ldr	r1, [pc, #104]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	4912      	ldr	r1, [pc, #72]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800280e:	4313      	orrs	r3, r2
 8002810:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	490b      	ldr	r1, [pc, #44]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800282c:	4313      	orrs	r3, r2
 800282e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800284a:	4313      	orrs	r3, r2
 800284c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3748      	adds	r7, #72	; 0x48
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e040      	b.n	80028f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe f822 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fc00 	bl	80030a0 <UART_SetConfig>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e022      	b.n	80028f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fd2a 	bl	800330c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fdb1 	bl	8003450 <UART_CheckIdleState>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800290c:	2b20      	cmp	r3, #32
 800290e:	d178      	bne.n	8002a02 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_UART_Transmit+0x24>
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e071      	b.n	8002a04 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2221      	movs	r2, #33	; 0x21
 800292c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292e:	f7fe f969 	bl	8000c04 <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294c:	d108      	bne.n	8002960 <HAL_UART_Transmit+0x68>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e003      	b.n	8002968 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002968:	e030      	b.n	80029cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fe13 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e03c      	b.n	8002a04 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299c:	b292      	uxth	r2, r2
 800299e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	3302      	adds	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e008      	b.n	80029ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b292      	uxth	r2, r2
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1c8      	bne.n	800296a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2200      	movs	r2, #0
 80029e0:	2140      	movs	r1, #64	; 0x40
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fddc 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d004      	beq.n	80029f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e005      	b.n	8002a04 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3720      	adds	r7, #32
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d132      	bne.n	8002a8a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_UART_Receive_IT+0x24>
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e02b      	b.n	8002a8c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d018      	beq.n	8002a7a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	e853 3f00 	ldrex	r3, [r3]
 8002a54:	613b      	str	r3, [r7, #16]
   return(result);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6a:	69f9      	ldr	r1, [r7, #28]
 8002a6c:	6a3a      	ldr	r2, [r7, #32]
 8002a6e:	e841 2300 	strex	r3, r2, [r1]
 8002a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1e6      	bne.n	8002a48 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fdf5 	bl	8003670 <UART_Start_Receive_IT>
 8002a86:	4603      	mov	r3, r0
 8002a88:	e000      	b.n	8002a8c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b0ba      	sub	sp, #232	; 0xe8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002aba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002abe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d115      	bne.n	8002afc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00f      	beq.n	8002afc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 82ab 	beq.w	8003048 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
      }
      return;
 8002afa:	e2a5      	b.n	8003048 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8117 	beq.w	8002d34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <HAL_UART_IRQHandler+0x298>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 810a 	beq.w	8002d34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d011      	beq.n	8002b50 <HAL_UART_IRQHandler+0xbc>
 8002b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d011      	beq.n	8002b80 <HAL_UART_IRQHandler+0xec>
 8002b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b76:	f043 0204 	orr.w	r2, r3, #4
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d011      	beq.n	8002bb0 <HAL_UART_IRQHandler+0x11c>
 8002b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba6:	f043 0202 	orr.w	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bcc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be2:	f043 0208 	orr.w	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d012      	beq.n	8002c1e <HAL_UART_IRQHandler+0x18a>
 8002bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8211 	beq.w	800304c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d005      	beq.n	8002c76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d04f      	beq.n	8002d16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fdc0 	bl	80037fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d141      	bne.n	8002d0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3308      	adds	r3, #8
 8002c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c98:	e853 3f00 	ldrex	r3, [r3]
 8002c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1d9      	bne.n	8002c8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d013      	beq.n	8002d06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <HAL_UART_IRQHandler+0x29c>)
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f904 	bl	8000ef8 <HAL_DMA_Abort_IT>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d017      	beq.n	8002d26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d00:	4610      	mov	r0, r2
 8002d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	e00f      	b.n	8002d26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f9b4 	bl	8003074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0c:	e00b      	b.n	8002d26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f9b0 	bl	8003074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e007      	b.n	8002d26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f9ac 	bl	8003074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002d24:	e192      	b.n	800304c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d26:	bf00      	nop
    return;
 8002d28:	e190      	b.n	800304c <HAL_UART_IRQHandler+0x5b8>
 8002d2a:	bf00      	nop
 8002d2c:	04000120 	.word	0x04000120
 8002d30:	080038c5 	.word	0x080038c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	f040 814b 	bne.w	8002fd4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8144 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 813d 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	f040 80b5 	bne.w	8002edc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8164 	beq.w	8003050 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d92:	429a      	cmp	r2, r3
 8002d94:	f080 815c 	bcs.w	8003050 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	f000 8086 	beq.w	8002eba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ddc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002de4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1da      	bne.n	8002dae <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e1c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e20:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e1      	bne.n	8002df8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3308      	adds	r3, #8
 8002e3a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3308      	adds	r3, #8
 8002e54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e58:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e3      	bne.n	8002e34 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e82:	e853 3f00 	ldrex	r3, [r3]
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8a:	f023 0310 	bic.w	r3, r3, #16
 8002e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e9e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ea2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ea4:	e841 2300 	strex	r3, r2, [r1]
 8002ea8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e4      	bne.n	8002e7a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd ffe6 	bl	8000e86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f8d7 	bl	8003088 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eda:	e0b9      	b.n	8003050 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80ab 	beq.w	8003054 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002efe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80a6 	beq.w	8003054 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e4      	bne.n	8002f08 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3308      	adds	r3, #8
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f62:	633a      	str	r2, [r7, #48]	; 0x30
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e3      	bne.n	8002f3e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0310 	bic.w	r3, r3, #16
 8002f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	69b9      	ldr	r1, [r7, #24]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e4      	bne.n	8002f8a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f85b 	bl	8003088 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fd2:	e03f      	b.n	8003054 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_UART_IRQHandler+0x56a>
 8002fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ff4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fe4c 	bl	8003c94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ffc:	e02d      	b.n	800305a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800300a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01c      	beq.n	8003058 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
    }
    return;
 8003026:	e017      	b.n	8003058 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d012      	beq.n	800305a <HAL_UART_IRQHandler+0x5c6>
 8003034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00c      	beq.n	800305a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fc55 	bl	80038f0 <UART_EndTransmit_IT>
    return;
 8003046:	e008      	b.n	800305a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003048:	bf00      	nop
 800304a:	e006      	b.n	800305a <HAL_UART_IRQHandler+0x5c6>
    return;
 800304c:	bf00      	nop
 800304e:	e004      	b.n	800305a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003050:	bf00      	nop
 8003052:	e002      	b.n	800305a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003054:	bf00      	nop
 8003056:	e000      	b.n	800305a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003058:	bf00      	nop
  }

}
 800305a:	37e8      	adds	r7, #232	; 0xe8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b8a      	ldr	r3, [pc, #552]	; (80032f4 <UART_SetConfig+0x254>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	6979      	ldr	r1, [r7, #20]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a78      	ldr	r2, [pc, #480]	; (80032f8 <UART_SetConfig+0x258>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d120      	bne.n	800315e <UART_SetConfig+0xbe>
 800311c:	4b77      	ldr	r3, [pc, #476]	; (80032fc <UART_SetConfig+0x25c>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b03      	cmp	r3, #3
 8003126:	d817      	bhi.n	8003158 <UART_SetConfig+0xb8>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <UART_SetConfig+0x90>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003141 	.word	0x08003141
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003153 	.word	0x08003153
 800313c:	08003147 	.word	0x08003147
 8003140:	2300      	movs	r3, #0
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e01d      	b.n	8003182 <UART_SetConfig+0xe2>
 8003146:	2302      	movs	r3, #2
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e01a      	b.n	8003182 <UART_SetConfig+0xe2>
 800314c:	2304      	movs	r3, #4
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e017      	b.n	8003182 <UART_SetConfig+0xe2>
 8003152:	2308      	movs	r3, #8
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e014      	b.n	8003182 <UART_SetConfig+0xe2>
 8003158:	2310      	movs	r3, #16
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e011      	b.n	8003182 <UART_SetConfig+0xe2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a67      	ldr	r2, [pc, #412]	; (8003300 <UART_SetConfig+0x260>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d102      	bne.n	800316e <UART_SetConfig+0xce>
 8003168:	2300      	movs	r3, #0
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e009      	b.n	8003182 <UART_SetConfig+0xe2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a64      	ldr	r2, [pc, #400]	; (8003304 <UART_SetConfig+0x264>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d102      	bne.n	800317e <UART_SetConfig+0xde>
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e001      	b.n	8003182 <UART_SetConfig+0xe2>
 800317e:	2310      	movs	r3, #16
 8003180:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318a:	d15a      	bne.n	8003242 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800318c:	7ffb      	ldrb	r3, [r7, #31]
 800318e:	2b08      	cmp	r3, #8
 8003190:	d827      	bhi.n	80031e2 <UART_SetConfig+0x142>
 8003192:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <UART_SetConfig+0xf8>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031bd 	.word	0x080031bd
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	080031cd 	.word	0x080031cd
 80031a4:	080031e3 	.word	0x080031e3
 80031a8:	080031d3 	.word	0x080031d3
 80031ac:	080031e3 	.word	0x080031e3
 80031b0:	080031e3 	.word	0x080031e3
 80031b4:	080031e3 	.word	0x080031e3
 80031b8:	080031db 	.word	0x080031db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031bc:	f7ff f978 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 80031c0:	61b8      	str	r0, [r7, #24]
        break;
 80031c2:	e013      	b.n	80031ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c4:	f7ff f996 	bl	80024f4 <HAL_RCC_GetPCLK2Freq>
 80031c8:	61b8      	str	r0, [r7, #24]
        break;
 80031ca:	e00f      	b.n	80031ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031cc:	4b4e      	ldr	r3, [pc, #312]	; (8003308 <UART_SetConfig+0x268>)
 80031ce:	61bb      	str	r3, [r7, #24]
        break;
 80031d0:	e00c      	b.n	80031ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d2:	f7ff f8f7 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 80031d6:	61b8      	str	r0, [r7, #24]
        break;
 80031d8:	e008      	b.n	80031ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031de:	61bb      	str	r3, [r7, #24]
        break;
 80031e0:	e004      	b.n	80031ec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	77bb      	strb	r3, [r7, #30]
        break;
 80031ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d074      	beq.n	80032dc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	005a      	lsls	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	d916      	bls.n	800323c <UART_SetConfig+0x19c>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d212      	bcs.n	800323c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	b29b      	uxth	r3, r3
 800321a:	f023 030f 	bic.w	r3, r3, #15
 800321e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	b29b      	uxth	r3, r3
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	b29a      	uxth	r2, r3
 800322c:	89fb      	ldrh	r3, [r7, #14]
 800322e:	4313      	orrs	r3, r2
 8003230:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	89fa      	ldrh	r2, [r7, #14]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	e04f      	b.n	80032dc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	77bb      	strb	r3, [r7, #30]
 8003240:	e04c      	b.n	80032dc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003242:	7ffb      	ldrb	r3, [r7, #31]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d828      	bhi.n	800329a <UART_SetConfig+0x1fa>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <UART_SetConfig+0x1b0>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003275 	.word	0x08003275
 8003254:	0800327d 	.word	0x0800327d
 8003258:	08003285 	.word	0x08003285
 800325c:	0800329b 	.word	0x0800329b
 8003260:	0800328b 	.word	0x0800328b
 8003264:	0800329b 	.word	0x0800329b
 8003268:	0800329b 	.word	0x0800329b
 800326c:	0800329b 	.word	0x0800329b
 8003270:	08003293 	.word	0x08003293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003274:	f7ff f91c 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8003278:	61b8      	str	r0, [r7, #24]
        break;
 800327a:	e013      	b.n	80032a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800327c:	f7ff f93a 	bl	80024f4 <HAL_RCC_GetPCLK2Freq>
 8003280:	61b8      	str	r0, [r7, #24]
        break;
 8003282:	e00f      	b.n	80032a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <UART_SetConfig+0x268>)
 8003286:	61bb      	str	r3, [r7, #24]
        break;
 8003288:	e00c      	b.n	80032a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328a:	f7ff f89b 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 800328e:	61b8      	str	r0, [r7, #24]
        break;
 8003290:	e008      	b.n	80032a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003296:	61bb      	str	r3, [r7, #24]
        break;
 8003298:	e004      	b.n	80032a4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	77bb      	strb	r3, [r7, #30]
        break;
 80032a2:	bf00      	nop
    }

    if (pclk != 0U)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d018      	beq.n	80032dc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	085a      	lsrs	r2, r3, #1
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	441a      	add	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d909      	bls.n	80032d8 <UART_SetConfig+0x238>
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d205      	bcs.n	80032d8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e001      	b.n	80032dc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	efff69f3 	.word	0xefff69f3
 80032f8:	40013800 	.word	0x40013800
 80032fc:	40021000 	.word	0x40021000
 8003300:	40004400 	.word	0x40004400
 8003304:	40004800 	.word	0x40004800
 8003308:	007a1200 	.word	0x007a1200

0800330c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01a      	beq.n	8003422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340a:	d10a      	bne.n	8003422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b098      	sub	sp, #96	; 0x60
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003460:	f7fd fbd0 	bl	8000c04 <HAL_GetTick>
 8003464:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b08      	cmp	r3, #8
 8003472:	d12e      	bne.n	80034d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f88c 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d021      	beq.n	80034d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800349c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a2:	653b      	str	r3, [r7, #80]	; 0x50
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ac:	647b      	str	r3, [r7, #68]	; 0x44
 80034ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034b4:	e841 2300 	strex	r3, r2, [r1]
 80034b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e6      	bne.n	800348e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e062      	b.n	8003598 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d149      	bne.n	8003574 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e8:	2200      	movs	r2, #0
 80034ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f856 	bl	80035a0 <UART_WaitOnFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d03c      	beq.n	8003574 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	623b      	str	r3, [r7, #32]
   return(result);
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800350e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
 800351a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800351e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e6      	bne.n	80034fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3308      	adds	r3, #8
 8003532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	60fb      	str	r3, [r7, #12]
   return(result);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3308      	adds	r3, #8
 800354a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354c:	61fa      	str	r2, [r7, #28]
 800354e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	69b9      	ldr	r1, [r7, #24]
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	617b      	str	r3, [r7, #20]
   return(result);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e5      	bne.n	800352c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e011      	b.n	8003598 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3758      	adds	r7, #88	; 0x58
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b0:	e049      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d045      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7fd fb23 	bl	8000c04 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e048      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d031      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d110      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2208      	movs	r2, #8
 80035f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f8ff 	bl	80037fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2208      	movs	r2, #8
 8003602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e029      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003620:	d111      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800362a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f8e5 	bl	80037fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0a6      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003670:	b480      	push	{r7}
 8003672:	b097      	sub	sp, #92	; 0x5c
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a2:	d10e      	bne.n	80036c2 <UART_Start_Receive_IT+0x52>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <UART_Start_Receive_IT+0x48>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b6:	e02d      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	22ff      	movs	r2, #255	; 0xff
 80036bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036c0:	e028      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <UART_Start_Receive_IT+0x76>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <UART_Start_Receive_IT+0x6c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036da:	e01b      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	227f      	movs	r2, #127	; 0x7f
 80036e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036e4:	e016      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ee:	d10d      	bne.n	800370c <UART_Start_Receive_IT+0x9c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <UART_Start_Receive_IT+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	227f      	movs	r2, #127	; 0x7f
 80036fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003700:	e008      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	223f      	movs	r2, #63	; 0x3f
 8003706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800370a:	e003      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2222      	movs	r2, #34	; 0x22
 8003720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3308      	adds	r3, #8
 800372a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	657b      	str	r3, [r7, #84]	; 0x54
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3308      	adds	r3, #8
 8003742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003744:	64ba      	str	r2, [r7, #72]	; 0x48
 8003746:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800374a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d107      	bne.n	8003772 <UART_Start_Receive_IT+0x102>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <UART_Start_Receive_IT+0x184>)
 800376e:	669a      	str	r2, [r3, #104]	; 0x68
 8003770:	e002      	b.n	8003778 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <UART_Start_Receive_IT+0x188>)
 8003776:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d019      	beq.n	80037b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
 80037a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e6      	bne.n	8003780 <UART_Start_Receive_IT+0x110>
 80037b2:	e018      	b.n	80037e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	613b      	str	r3, [r7, #16]
   return(result);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f043 0320 	orr.w	r3, r3, #32
 80037c8:	653b      	str	r3, [r7, #80]	; 0x50
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	69f9      	ldr	r1, [r7, #28]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e6      	bne.n	80037b4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	375c      	adds	r7, #92	; 0x5c
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	08003aed 	.word	0x08003aed
 80037f8:	08003945 	.word	0x08003945

080037fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b095      	sub	sp, #84	; 0x54
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003822:	643b      	str	r3, [r7, #64]	; 0x40
 8003824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e6      	bne.n	8003804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	61fb      	str	r3, [r7, #28]
   return(result);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	64bb      	str	r3, [r7, #72]	; 0x48
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800385c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	2b01      	cmp	r3, #1
 8003870:	d118      	bne.n	80038a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0310 	bic.w	r3, r3, #16
 8003886:	647b      	str	r3, [r7, #68]	; 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	613b      	str	r3, [r7, #16]
   return(result);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e6      	bne.n	8003872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038b8:	bf00      	nop
 80038ba:	3754      	adds	r7, #84	; 0x54
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fbc6 	bl	8003074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	60bb      	str	r3, [r7, #8]
   return(result);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	613b      	str	r3, [r7, #16]
   return(result);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e6      	bne.n	80038f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fb92 	bl	8003060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393c:	bf00      	nop
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b09c      	sub	sp, #112	; 0x70
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003952:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800395c:	2b22      	cmp	r3, #34	; 0x22
 800395e:	f040 80b9 	bne.w	8003ad4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003968:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800396c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003976:	b2da      	uxtb	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	400a      	ands	r2, r1
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 809c 	bne.w	8003ae4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80039cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e6      	bne.n	80039ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	667b      	str	r3, [r7, #100]	; 0x64
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039fe:	647a      	str	r2, [r7, #68]	; 0x44
 8003a00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d018      	beq.n	8003a66 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	623b      	str	r3, [r7, #32]
   return(result);
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a48:	663b      	str	r3, [r7, #96]	; 0x60
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
 8003a54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e6      	bne.n	8003a34 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d12e      	bne.n	8003acc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f023 0310 	bic.w	r3, r3, #16
 8003a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	69b9      	ldr	r1, [r7, #24]
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e6      	bne.n	8003a74 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d103      	bne.n	8003abc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2210      	movs	r2, #16
 8003aba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fadf 	bl	8003088 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003aca:	e00b      	b.n	8003ae4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fc fd57 	bl	8000580 <HAL_UART_RxCpltCallback>
}
 8003ad2:	e007      	b.n	8003ae4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0208 	orr.w	r2, r2, #8
 8003ae2:	619a      	str	r2, [r3, #24]
}
 8003ae4:	bf00      	nop
 8003ae6:	3770      	adds	r7, #112	; 0x70
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b09c      	sub	sp, #112	; 0x70
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003afa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b04:	2b22      	cmp	r3, #34	; 0x22
 8003b06:	f040 80b9 	bne.w	8003c7c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b1a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003b1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003b22:	4013      	ands	r3, r2
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	1c9a      	adds	r2, r3, #2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f040 809c 	bne.w	8003c8c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b68:	667b      	str	r3, [r7, #100]	; 0x64
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b72:	657b      	str	r3, [r7, #84]	; 0x54
 8003b74:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e6      	bne.n	8003b54 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ba6:	643a      	str	r2, [r7, #64]	; 0x40
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e5      	bne.n	8003b86 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d018      	beq.n	8003c0e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e6      	bne.n	8003bdc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d12e      	bne.n	8003c74 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f023 0310 	bic.w	r3, r3, #16
 8003c30:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6979      	ldr	r1, [r7, #20]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	613b      	str	r3, [r7, #16]
   return(result);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e6      	bne.n	8003c1c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d103      	bne.n	8003c64 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2210      	movs	r2, #16
 8003c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fa0b 	bl	8003088 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c72:	e00b      	b.n	8003c8c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fc fc83 	bl	8000580 <HAL_UART_RxCpltCallback>
}
 8003c7a:	e007      	b.n	8003c8c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0208 	orr.w	r2, r2, #8
 8003c8a:	619a      	str	r2, [r3, #24]
}
 8003c8c:	bf00      	nop
 8003c8e:	3770      	adds	r7, #112	; 0x70
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <atoi>:
 8003ca8:	220a      	movs	r2, #10
 8003caa:	2100      	movs	r1, #0
 8003cac:	f000 bce8 	b.w	8004680 <strtol>

08003cb0 <__errno>:
 8003cb0:	4b01      	ldr	r3, [pc, #4]	; (8003cb8 <__errno+0x8>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000170 	.word	0x20000170

08003cbc <__sflush_r>:
 8003cbc:	898a      	ldrh	r2, [r1, #12]
 8003cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	0710      	lsls	r0, r2, #28
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	d458      	bmi.n	8003d7c <__sflush_r+0xc0>
 8003cca:	684b      	ldr	r3, [r1, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	dc05      	bgt.n	8003cdc <__sflush_r+0x20>
 8003cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dc02      	bgt.n	8003cdc <__sflush_r+0x20>
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cde:	2e00      	cmp	r6, #0
 8003ce0:	d0f9      	beq.n	8003cd6 <__sflush_r+0x1a>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ce8:	682f      	ldr	r7, [r5, #0]
 8003cea:	602b      	str	r3, [r5, #0]
 8003cec:	d032      	beq.n	8003d54 <__sflush_r+0x98>
 8003cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	075a      	lsls	r2, r3, #29
 8003cf4:	d505      	bpl.n	8003d02 <__sflush_r+0x46>
 8003cf6:	6863      	ldr	r3, [r4, #4]
 8003cf8:	1ac0      	subs	r0, r0, r3
 8003cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cfc:	b10b      	cbz	r3, 8003d02 <__sflush_r+0x46>
 8003cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d00:	1ac0      	subs	r0, r0, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	4602      	mov	r2, r0
 8003d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d08:	6a21      	ldr	r1, [r4, #32]
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b0      	blx	r6
 8003d0e:	1c43      	adds	r3, r0, #1
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	d106      	bne.n	8003d22 <__sflush_r+0x66>
 8003d14:	6829      	ldr	r1, [r5, #0]
 8003d16:	291d      	cmp	r1, #29
 8003d18:	d82c      	bhi.n	8003d74 <__sflush_r+0xb8>
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <__sflush_r+0x108>)
 8003d1c:	40ca      	lsrs	r2, r1
 8003d1e:	07d6      	lsls	r6, r2, #31
 8003d20:	d528      	bpl.n	8003d74 <__sflush_r+0xb8>
 8003d22:	2200      	movs	r2, #0
 8003d24:	6062      	str	r2, [r4, #4]
 8003d26:	04d9      	lsls	r1, r3, #19
 8003d28:	6922      	ldr	r2, [r4, #16]
 8003d2a:	6022      	str	r2, [r4, #0]
 8003d2c:	d504      	bpl.n	8003d38 <__sflush_r+0x7c>
 8003d2e:	1c42      	adds	r2, r0, #1
 8003d30:	d101      	bne.n	8003d36 <__sflush_r+0x7a>
 8003d32:	682b      	ldr	r3, [r5, #0]
 8003d34:	b903      	cbnz	r3, 8003d38 <__sflush_r+0x7c>
 8003d36:	6560      	str	r0, [r4, #84]	; 0x54
 8003d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d3a:	602f      	str	r7, [r5, #0]
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d0ca      	beq.n	8003cd6 <__sflush_r+0x1a>
 8003d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d44:	4299      	cmp	r1, r3
 8003d46:	d002      	beq.n	8003d4e <__sflush_r+0x92>
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 f9b1 	bl	80040b0 <_free_r>
 8003d4e:	2000      	movs	r0, #0
 8003d50:	6360      	str	r0, [r4, #52]	; 0x34
 8003d52:	e7c1      	b.n	8003cd8 <__sflush_r+0x1c>
 8003d54:	6a21      	ldr	r1, [r4, #32]
 8003d56:	2301      	movs	r3, #1
 8003d58:	4628      	mov	r0, r5
 8003d5a:	47b0      	blx	r6
 8003d5c:	1c41      	adds	r1, r0, #1
 8003d5e:	d1c7      	bne.n	8003cf0 <__sflush_r+0x34>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0c4      	beq.n	8003cf0 <__sflush_r+0x34>
 8003d66:	2b1d      	cmp	r3, #29
 8003d68:	d001      	beq.n	8003d6e <__sflush_r+0xb2>
 8003d6a:	2b16      	cmp	r3, #22
 8003d6c:	d101      	bne.n	8003d72 <__sflush_r+0xb6>
 8003d6e:	602f      	str	r7, [r5, #0]
 8003d70:	e7b1      	b.n	8003cd6 <__sflush_r+0x1a>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	e7ad      	b.n	8003cd8 <__sflush_r+0x1c>
 8003d7c:	690f      	ldr	r7, [r1, #16]
 8003d7e:	2f00      	cmp	r7, #0
 8003d80:	d0a9      	beq.n	8003cd6 <__sflush_r+0x1a>
 8003d82:	0793      	lsls	r3, r2, #30
 8003d84:	680e      	ldr	r6, [r1, #0]
 8003d86:	bf08      	it	eq
 8003d88:	694b      	ldreq	r3, [r1, #20]
 8003d8a:	600f      	str	r7, [r1, #0]
 8003d8c:	bf18      	it	ne
 8003d8e:	2300      	movne	r3, #0
 8003d90:	eba6 0807 	sub.w	r8, r6, r7
 8003d94:	608b      	str	r3, [r1, #8]
 8003d96:	f1b8 0f00 	cmp.w	r8, #0
 8003d9a:	dd9c      	ble.n	8003cd6 <__sflush_r+0x1a>
 8003d9c:	6a21      	ldr	r1, [r4, #32]
 8003d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003da0:	4643      	mov	r3, r8
 8003da2:	463a      	mov	r2, r7
 8003da4:	4628      	mov	r0, r5
 8003da6:	47b0      	blx	r6
 8003da8:	2800      	cmp	r0, #0
 8003daa:	dc06      	bgt.n	8003dba <__sflush_r+0xfe>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db2:	81a3      	strh	r3, [r4, #12]
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	e78e      	b.n	8003cd8 <__sflush_r+0x1c>
 8003dba:	4407      	add	r7, r0
 8003dbc:	eba8 0800 	sub.w	r8, r8, r0
 8003dc0:	e7e9      	b.n	8003d96 <__sflush_r+0xda>
 8003dc2:	bf00      	nop
 8003dc4:	20400001 	.word	0x20400001

08003dc8 <_fflush_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	690b      	ldr	r3, [r1, #16]
 8003dcc:	4605      	mov	r5, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	b913      	cbnz	r3, 8003dd8 <_fflush_r+0x10>
 8003dd2:	2500      	movs	r5, #0
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	b118      	cbz	r0, 8003de2 <_fflush_r+0x1a>
 8003dda:	6983      	ldr	r3, [r0, #24]
 8003ddc:	b90b      	cbnz	r3, 8003de2 <_fflush_r+0x1a>
 8003dde:	f000 f899 	bl	8003f14 <__sinit>
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <_fflush_r+0x6c>)
 8003de4:	429c      	cmp	r4, r3
 8003de6:	d11b      	bne.n	8003e20 <_fflush_r+0x58>
 8003de8:	686c      	ldr	r4, [r5, #4]
 8003dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0ef      	beq.n	8003dd2 <_fflush_r+0xa>
 8003df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003df4:	07d0      	lsls	r0, r2, #31
 8003df6:	d404      	bmi.n	8003e02 <_fflush_r+0x3a>
 8003df8:	0599      	lsls	r1, r3, #22
 8003dfa:	d402      	bmi.n	8003e02 <_fflush_r+0x3a>
 8003dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dfe:	f000 f94c 	bl	800409a <__retarget_lock_acquire_recursive>
 8003e02:	4628      	mov	r0, r5
 8003e04:	4621      	mov	r1, r4
 8003e06:	f7ff ff59 	bl	8003cbc <__sflush_r>
 8003e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e0c:	07da      	lsls	r2, r3, #31
 8003e0e:	4605      	mov	r5, r0
 8003e10:	d4e0      	bmi.n	8003dd4 <_fflush_r+0xc>
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	059b      	lsls	r3, r3, #22
 8003e16:	d4dd      	bmi.n	8003dd4 <_fflush_r+0xc>
 8003e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e1a:	f000 f93f 	bl	800409c <__retarget_lock_release_recursive>
 8003e1e:	e7d9      	b.n	8003dd4 <_fflush_r+0xc>
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <_fflush_r+0x70>)
 8003e22:	429c      	cmp	r4, r3
 8003e24:	d101      	bne.n	8003e2a <_fflush_r+0x62>
 8003e26:	68ac      	ldr	r4, [r5, #8]
 8003e28:	e7df      	b.n	8003dea <_fflush_r+0x22>
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <_fflush_r+0x74>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	bf08      	it	eq
 8003e30:	68ec      	ldreq	r4, [r5, #12]
 8003e32:	e7da      	b.n	8003dea <_fflush_r+0x22>
 8003e34:	08005138 	.word	0x08005138
 8003e38:	08005158 	.word	0x08005158
 8003e3c:	08005118 	.word	0x08005118

08003e40 <fflush>:
 8003e40:	4601      	mov	r1, r0
 8003e42:	b920      	cbnz	r0, 8003e4e <fflush+0xe>
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <fflush+0x18>)
 8003e46:	4905      	ldr	r1, [pc, #20]	; (8003e5c <fflush+0x1c>)
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	f000 b8e1 	b.w	8004010 <_fwalk_reent>
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <fflush+0x20>)
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	f7ff bfb9 	b.w	8003dc8 <_fflush_r>
 8003e56:	bf00      	nop
 8003e58:	08005178 	.word	0x08005178
 8003e5c:	08003dc9 	.word	0x08003dc9
 8003e60:	20000170 	.word	0x20000170

08003e64 <std>:
 8003e64:	2300      	movs	r3, #0
 8003e66:	b510      	push	{r4, lr}
 8003e68:	4604      	mov	r4, r0
 8003e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e72:	6083      	str	r3, [r0, #8]
 8003e74:	8181      	strh	r1, [r0, #12]
 8003e76:	6643      	str	r3, [r0, #100]	; 0x64
 8003e78:	81c2      	strh	r2, [r0, #14]
 8003e7a:	6183      	str	r3, [r0, #24]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	2208      	movs	r2, #8
 8003e80:	305c      	adds	r0, #92	; 0x5c
 8003e82:	f000 f90c 	bl	800409e <memset>
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <std+0x38>)
 8003e88:	6263      	str	r3, [r4, #36]	; 0x24
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <std+0x3c>)
 8003e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <std+0x40>)
 8003e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <std+0x44>)
 8003e94:	6224      	str	r4, [r4, #32]
 8003e96:	6323      	str	r3, [r4, #48]	; 0x30
 8003e98:	bd10      	pop	{r4, pc}
 8003e9a:	bf00      	nop
 8003e9c:	080044cd 	.word	0x080044cd
 8003ea0:	080044ef 	.word	0x080044ef
 8003ea4:	08004527 	.word	0x08004527
 8003ea8:	0800454b 	.word	0x0800454b

08003eac <_cleanup_r>:
 8003eac:	4901      	ldr	r1, [pc, #4]	; (8003eb4 <_cleanup_r+0x8>)
 8003eae:	f000 b8af 	b.w	8004010 <_fwalk_reent>
 8003eb2:	bf00      	nop
 8003eb4:	08003dc9 	.word	0x08003dc9

08003eb8 <__sfmoreglue>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	1e4a      	subs	r2, r1, #1
 8003ebc:	2568      	movs	r5, #104	; 0x68
 8003ebe:	4355      	muls	r5, r2
 8003ec0:	460e      	mov	r6, r1
 8003ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ec6:	f000 f943 	bl	8004150 <_malloc_r>
 8003eca:	4604      	mov	r4, r0
 8003ecc:	b140      	cbz	r0, 8003ee0 <__sfmoreglue+0x28>
 8003ece:	2100      	movs	r1, #0
 8003ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ed4:	300c      	adds	r0, #12
 8003ed6:	60a0      	str	r0, [r4, #8]
 8003ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003edc:	f000 f8df 	bl	800409e <memset>
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}

08003ee4 <__sfp_lock_acquire>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	; (8003eec <__sfp_lock_acquire+0x8>)
 8003ee6:	f000 b8d8 	b.w	800409a <__retarget_lock_acquire_recursive>
 8003eea:	bf00      	nop
 8003eec:	200002f4 	.word	0x200002f4

08003ef0 <__sfp_lock_release>:
 8003ef0:	4801      	ldr	r0, [pc, #4]	; (8003ef8 <__sfp_lock_release+0x8>)
 8003ef2:	f000 b8d3 	b.w	800409c <__retarget_lock_release_recursive>
 8003ef6:	bf00      	nop
 8003ef8:	200002f4 	.word	0x200002f4

08003efc <__sinit_lock_acquire>:
 8003efc:	4801      	ldr	r0, [pc, #4]	; (8003f04 <__sinit_lock_acquire+0x8>)
 8003efe:	f000 b8cc 	b.w	800409a <__retarget_lock_acquire_recursive>
 8003f02:	bf00      	nop
 8003f04:	200002ef 	.word	0x200002ef

08003f08 <__sinit_lock_release>:
 8003f08:	4801      	ldr	r0, [pc, #4]	; (8003f10 <__sinit_lock_release+0x8>)
 8003f0a:	f000 b8c7 	b.w	800409c <__retarget_lock_release_recursive>
 8003f0e:	bf00      	nop
 8003f10:	200002ef 	.word	0x200002ef

08003f14 <__sinit>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	4604      	mov	r4, r0
 8003f18:	f7ff fff0 	bl	8003efc <__sinit_lock_acquire>
 8003f1c:	69a3      	ldr	r3, [r4, #24]
 8003f1e:	b11b      	cbz	r3, 8003f28 <__sinit+0x14>
 8003f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f24:	f7ff bff0 	b.w	8003f08 <__sinit_lock_release>
 8003f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <__sinit+0x68>)
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <__sinit+0x6c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	bf04      	itt	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	61a3      	streq	r3, [r4, #24]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f000 f820 	bl	8003f84 <__sfp>
 8003f44:	6060      	str	r0, [r4, #4]
 8003f46:	4620      	mov	r0, r4
 8003f48:	f000 f81c 	bl	8003f84 <__sfp>
 8003f4c:	60a0      	str	r0, [r4, #8]
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f000 f818 	bl	8003f84 <__sfp>
 8003f54:	2200      	movs	r2, #0
 8003f56:	60e0      	str	r0, [r4, #12]
 8003f58:	2104      	movs	r1, #4
 8003f5a:	6860      	ldr	r0, [r4, #4]
 8003f5c:	f7ff ff82 	bl	8003e64 <std>
 8003f60:	68a0      	ldr	r0, [r4, #8]
 8003f62:	2201      	movs	r2, #1
 8003f64:	2109      	movs	r1, #9
 8003f66:	f7ff ff7d 	bl	8003e64 <std>
 8003f6a:	68e0      	ldr	r0, [r4, #12]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	2112      	movs	r1, #18
 8003f70:	f7ff ff78 	bl	8003e64 <std>
 8003f74:	2301      	movs	r3, #1
 8003f76:	61a3      	str	r3, [r4, #24]
 8003f78:	e7d2      	b.n	8003f20 <__sinit+0xc>
 8003f7a:	bf00      	nop
 8003f7c:	08005178 	.word	0x08005178
 8003f80:	08003ead 	.word	0x08003ead

08003f84 <__sfp>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	4607      	mov	r7, r0
 8003f88:	f7ff ffac 	bl	8003ee4 <__sfp_lock_acquire>
 8003f8c:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <__sfp+0x84>)
 8003f8e:	681e      	ldr	r6, [r3, #0]
 8003f90:	69b3      	ldr	r3, [r6, #24]
 8003f92:	b913      	cbnz	r3, 8003f9a <__sfp+0x16>
 8003f94:	4630      	mov	r0, r6
 8003f96:	f7ff ffbd 	bl	8003f14 <__sinit>
 8003f9a:	3648      	adds	r6, #72	; 0x48
 8003f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	d503      	bpl.n	8003fac <__sfp+0x28>
 8003fa4:	6833      	ldr	r3, [r6, #0]
 8003fa6:	b30b      	cbz	r3, 8003fec <__sfp+0x68>
 8003fa8:	6836      	ldr	r6, [r6, #0]
 8003faa:	e7f7      	b.n	8003f9c <__sfp+0x18>
 8003fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fb0:	b9d5      	cbnz	r5, 8003fe8 <__sfp+0x64>
 8003fb2:	4b16      	ldr	r3, [pc, #88]	; (800400c <__sfp+0x88>)
 8003fb4:	60e3      	str	r3, [r4, #12]
 8003fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fba:	6665      	str	r5, [r4, #100]	; 0x64
 8003fbc:	f000 f86c 	bl	8004098 <__retarget_lock_init_recursive>
 8003fc0:	f7ff ff96 	bl	8003ef0 <__sfp_lock_release>
 8003fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003fcc:	6025      	str	r5, [r4, #0]
 8003fce:	61a5      	str	r5, [r4, #24]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fd8:	f000 f861 	bl	800409e <memset>
 8003fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe8:	3468      	adds	r4, #104	; 0x68
 8003fea:	e7d9      	b.n	8003fa0 <__sfp+0x1c>
 8003fec:	2104      	movs	r1, #4
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f7ff ff62 	bl	8003eb8 <__sfmoreglue>
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	6030      	str	r0, [r6, #0]
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d1d5      	bne.n	8003fa8 <__sfp+0x24>
 8003ffc:	f7ff ff78 	bl	8003ef0 <__sfp_lock_release>
 8004000:	230c      	movs	r3, #12
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	e7ee      	b.n	8003fe4 <__sfp+0x60>
 8004006:	bf00      	nop
 8004008:	08005178 	.word	0x08005178
 800400c:	ffff0001 	.word	0xffff0001

08004010 <_fwalk_reent>:
 8004010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004014:	4606      	mov	r6, r0
 8004016:	4688      	mov	r8, r1
 8004018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800401c:	2700      	movs	r7, #0
 800401e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004022:	f1b9 0901 	subs.w	r9, r9, #1
 8004026:	d505      	bpl.n	8004034 <_fwalk_reent+0x24>
 8004028:	6824      	ldr	r4, [r4, #0]
 800402a:	2c00      	cmp	r4, #0
 800402c:	d1f7      	bne.n	800401e <_fwalk_reent+0xe>
 800402e:	4638      	mov	r0, r7
 8004030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004034:	89ab      	ldrh	r3, [r5, #12]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d907      	bls.n	800404a <_fwalk_reent+0x3a>
 800403a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800403e:	3301      	adds	r3, #1
 8004040:	d003      	beq.n	800404a <_fwalk_reent+0x3a>
 8004042:	4629      	mov	r1, r5
 8004044:	4630      	mov	r0, r6
 8004046:	47c0      	blx	r8
 8004048:	4307      	orrs	r7, r0
 800404a:	3568      	adds	r5, #104	; 0x68
 800404c:	e7e9      	b.n	8004022 <_fwalk_reent+0x12>
	...

08004050 <__libc_init_array>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4d0d      	ldr	r5, [pc, #52]	; (8004088 <__libc_init_array+0x38>)
 8004054:	4c0d      	ldr	r4, [pc, #52]	; (800408c <__libc_init_array+0x3c>)
 8004056:	1b64      	subs	r4, r4, r5
 8004058:	10a4      	asrs	r4, r4, #2
 800405a:	2600      	movs	r6, #0
 800405c:	42a6      	cmp	r6, r4
 800405e:	d109      	bne.n	8004074 <__libc_init_array+0x24>
 8004060:	4d0b      	ldr	r5, [pc, #44]	; (8004090 <__libc_init_array+0x40>)
 8004062:	4c0c      	ldr	r4, [pc, #48]	; (8004094 <__libc_init_array+0x44>)
 8004064:	f000 ffa4 	bl	8004fb0 <_init>
 8004068:	1b64      	subs	r4, r4, r5
 800406a:	10a4      	asrs	r4, r4, #2
 800406c:	2600      	movs	r6, #0
 800406e:	42a6      	cmp	r6, r4
 8004070:	d105      	bne.n	800407e <__libc_init_array+0x2e>
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	f855 3b04 	ldr.w	r3, [r5], #4
 8004078:	4798      	blx	r3
 800407a:	3601      	adds	r6, #1
 800407c:	e7ee      	b.n	800405c <__libc_init_array+0xc>
 800407e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004082:	4798      	blx	r3
 8004084:	3601      	adds	r6, #1
 8004086:	e7f2      	b.n	800406e <__libc_init_array+0x1e>
 8004088:	080052b0 	.word	0x080052b0
 800408c:	080052b0 	.word	0x080052b0
 8004090:	080052b0 	.word	0x080052b0
 8004094:	080052b4 	.word	0x080052b4

08004098 <__retarget_lock_init_recursive>:
 8004098:	4770      	bx	lr

0800409a <__retarget_lock_acquire_recursive>:
 800409a:	4770      	bx	lr

0800409c <__retarget_lock_release_recursive>:
 800409c:	4770      	bx	lr

0800409e <memset>:
 800409e:	4402      	add	r2, r0
 80040a0:	4603      	mov	r3, r0
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d100      	bne.n	80040a8 <memset+0xa>
 80040a6:	4770      	bx	lr
 80040a8:	f803 1b01 	strb.w	r1, [r3], #1
 80040ac:	e7f9      	b.n	80040a2 <memset+0x4>
	...

080040b0 <_free_r>:
 80040b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040b2:	2900      	cmp	r1, #0
 80040b4:	d048      	beq.n	8004148 <_free_r+0x98>
 80040b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ba:	9001      	str	r0, [sp, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f1a1 0404 	sub.w	r4, r1, #4
 80040c2:	bfb8      	it	lt
 80040c4:	18e4      	addlt	r4, r4, r3
 80040c6:	f000 fc45 	bl	8004954 <__malloc_lock>
 80040ca:	4a20      	ldr	r2, [pc, #128]	; (800414c <_free_r+0x9c>)
 80040cc:	9801      	ldr	r0, [sp, #4]
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	4615      	mov	r5, r2
 80040d2:	b933      	cbnz	r3, 80040e2 <_free_r+0x32>
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	6014      	str	r4, [r2, #0]
 80040d8:	b003      	add	sp, #12
 80040da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040de:	f000 bc3f 	b.w	8004960 <__malloc_unlock>
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	d90b      	bls.n	80040fe <_free_r+0x4e>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	1862      	adds	r2, r4, r1
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bf04      	itt	eq
 80040ee:	681a      	ldreq	r2, [r3, #0]
 80040f0:	685b      	ldreq	r3, [r3, #4]
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	bf04      	itt	eq
 80040f6:	1852      	addeq	r2, r2, r1
 80040f8:	6022      	streq	r2, [r4, #0]
 80040fa:	602c      	str	r4, [r5, #0]
 80040fc:	e7ec      	b.n	80040d8 <_free_r+0x28>
 80040fe:	461a      	mov	r2, r3
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b10b      	cbz	r3, 8004108 <_free_r+0x58>
 8004104:	42a3      	cmp	r3, r4
 8004106:	d9fa      	bls.n	80040fe <_free_r+0x4e>
 8004108:	6811      	ldr	r1, [r2, #0]
 800410a:	1855      	adds	r5, r2, r1
 800410c:	42a5      	cmp	r5, r4
 800410e:	d10b      	bne.n	8004128 <_free_r+0x78>
 8004110:	6824      	ldr	r4, [r4, #0]
 8004112:	4421      	add	r1, r4
 8004114:	1854      	adds	r4, r2, r1
 8004116:	42a3      	cmp	r3, r4
 8004118:	6011      	str	r1, [r2, #0]
 800411a:	d1dd      	bne.n	80040d8 <_free_r+0x28>
 800411c:	681c      	ldr	r4, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	6053      	str	r3, [r2, #4]
 8004122:	4421      	add	r1, r4
 8004124:	6011      	str	r1, [r2, #0]
 8004126:	e7d7      	b.n	80040d8 <_free_r+0x28>
 8004128:	d902      	bls.n	8004130 <_free_r+0x80>
 800412a:	230c      	movs	r3, #12
 800412c:	6003      	str	r3, [r0, #0]
 800412e:	e7d3      	b.n	80040d8 <_free_r+0x28>
 8004130:	6825      	ldr	r5, [r4, #0]
 8004132:	1961      	adds	r1, r4, r5
 8004134:	428b      	cmp	r3, r1
 8004136:	bf04      	itt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	bf04      	itt	eq
 8004140:	1949      	addeq	r1, r1, r5
 8004142:	6021      	streq	r1, [r4, #0]
 8004144:	6054      	str	r4, [r2, #4]
 8004146:	e7c7      	b.n	80040d8 <_free_r+0x28>
 8004148:	b003      	add	sp, #12
 800414a:	bd30      	pop	{r4, r5, pc}
 800414c:	20000204 	.word	0x20000204

08004150 <_malloc_r>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	1ccd      	adds	r5, r1, #3
 8004154:	f025 0503 	bic.w	r5, r5, #3
 8004158:	3508      	adds	r5, #8
 800415a:	2d0c      	cmp	r5, #12
 800415c:	bf38      	it	cc
 800415e:	250c      	movcc	r5, #12
 8004160:	2d00      	cmp	r5, #0
 8004162:	4606      	mov	r6, r0
 8004164:	db01      	blt.n	800416a <_malloc_r+0x1a>
 8004166:	42a9      	cmp	r1, r5
 8004168:	d903      	bls.n	8004172 <_malloc_r+0x22>
 800416a:	230c      	movs	r3, #12
 800416c:	6033      	str	r3, [r6, #0]
 800416e:	2000      	movs	r0, #0
 8004170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004172:	f000 fbef 	bl	8004954 <__malloc_lock>
 8004176:	4921      	ldr	r1, [pc, #132]	; (80041fc <_malloc_r+0xac>)
 8004178:	680a      	ldr	r2, [r1, #0]
 800417a:	4614      	mov	r4, r2
 800417c:	b99c      	cbnz	r4, 80041a6 <_malloc_r+0x56>
 800417e:	4f20      	ldr	r7, [pc, #128]	; (8004200 <_malloc_r+0xb0>)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	b923      	cbnz	r3, 800418e <_malloc_r+0x3e>
 8004184:	4621      	mov	r1, r4
 8004186:	4630      	mov	r0, r6
 8004188:	f000 f8ca 	bl	8004320 <_sbrk_r>
 800418c:	6038      	str	r0, [r7, #0]
 800418e:	4629      	mov	r1, r5
 8004190:	4630      	mov	r0, r6
 8004192:	f000 f8c5 	bl	8004320 <_sbrk_r>
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	d123      	bne.n	80041e2 <_malloc_r+0x92>
 800419a:	230c      	movs	r3, #12
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	4630      	mov	r0, r6
 80041a0:	f000 fbde 	bl	8004960 <__malloc_unlock>
 80041a4:	e7e3      	b.n	800416e <_malloc_r+0x1e>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	1b5b      	subs	r3, r3, r5
 80041aa:	d417      	bmi.n	80041dc <_malloc_r+0x8c>
 80041ac:	2b0b      	cmp	r3, #11
 80041ae:	d903      	bls.n	80041b8 <_malloc_r+0x68>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	441c      	add	r4, r3
 80041b4:	6025      	str	r5, [r4, #0]
 80041b6:	e004      	b.n	80041c2 <_malloc_r+0x72>
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	42a2      	cmp	r2, r4
 80041bc:	bf0c      	ite	eq
 80041be:	600b      	streq	r3, [r1, #0]
 80041c0:	6053      	strne	r3, [r2, #4]
 80041c2:	4630      	mov	r0, r6
 80041c4:	f000 fbcc 	bl	8004960 <__malloc_unlock>
 80041c8:	f104 000b 	add.w	r0, r4, #11
 80041cc:	1d23      	adds	r3, r4, #4
 80041ce:	f020 0007 	bic.w	r0, r0, #7
 80041d2:	1ac2      	subs	r2, r0, r3
 80041d4:	d0cc      	beq.n	8004170 <_malloc_r+0x20>
 80041d6:	1a1b      	subs	r3, r3, r0
 80041d8:	50a3      	str	r3, [r4, r2]
 80041da:	e7c9      	b.n	8004170 <_malloc_r+0x20>
 80041dc:	4622      	mov	r2, r4
 80041de:	6864      	ldr	r4, [r4, #4]
 80041e0:	e7cc      	b.n	800417c <_malloc_r+0x2c>
 80041e2:	1cc4      	adds	r4, r0, #3
 80041e4:	f024 0403 	bic.w	r4, r4, #3
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d0e3      	beq.n	80041b4 <_malloc_r+0x64>
 80041ec:	1a21      	subs	r1, r4, r0
 80041ee:	4630      	mov	r0, r6
 80041f0:	f000 f896 	bl	8004320 <_sbrk_r>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d1dd      	bne.n	80041b4 <_malloc_r+0x64>
 80041f8:	e7cf      	b.n	800419a <_malloc_r+0x4a>
 80041fa:	bf00      	nop
 80041fc:	20000204 	.word	0x20000204
 8004200:	20000208 	.word	0x20000208

08004204 <iprintf>:
 8004204:	b40f      	push	{r0, r1, r2, r3}
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <iprintf+0x2c>)
 8004208:	b513      	push	{r0, r1, r4, lr}
 800420a:	681c      	ldr	r4, [r3, #0]
 800420c:	b124      	cbz	r4, 8004218 <iprintf+0x14>
 800420e:	69a3      	ldr	r3, [r4, #24]
 8004210:	b913      	cbnz	r3, 8004218 <iprintf+0x14>
 8004212:	4620      	mov	r0, r4
 8004214:	f7ff fe7e 	bl	8003f14 <__sinit>
 8004218:	ab05      	add	r3, sp, #20
 800421a:	9a04      	ldr	r2, [sp, #16]
 800421c:	68a1      	ldr	r1, [r4, #8]
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fbcd 	bl	80049c0 <_vfiprintf_r>
 8004226:	b002      	add	sp, #8
 8004228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422c:	b004      	add	sp, #16
 800422e:	4770      	bx	lr
 8004230:	20000170 	.word	0x20000170

08004234 <_puts_r>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	460e      	mov	r6, r1
 8004238:	4605      	mov	r5, r0
 800423a:	b118      	cbz	r0, 8004244 <_puts_r+0x10>
 800423c:	6983      	ldr	r3, [r0, #24]
 800423e:	b90b      	cbnz	r3, 8004244 <_puts_r+0x10>
 8004240:	f7ff fe68 	bl	8003f14 <__sinit>
 8004244:	69ab      	ldr	r3, [r5, #24]
 8004246:	68ac      	ldr	r4, [r5, #8]
 8004248:	b913      	cbnz	r3, 8004250 <_puts_r+0x1c>
 800424a:	4628      	mov	r0, r5
 800424c:	f7ff fe62 	bl	8003f14 <__sinit>
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <_puts_r+0xd0>)
 8004252:	429c      	cmp	r4, r3
 8004254:	d120      	bne.n	8004298 <_puts_r+0x64>
 8004256:	686c      	ldr	r4, [r5, #4]
 8004258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800425a:	07db      	lsls	r3, r3, #31
 800425c:	d405      	bmi.n	800426a <_puts_r+0x36>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	0598      	lsls	r0, r3, #22
 8004262:	d402      	bmi.n	800426a <_puts_r+0x36>
 8004264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004266:	f7ff ff18 	bl	800409a <__retarget_lock_acquire_recursive>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	0719      	lsls	r1, r3, #28
 800426e:	d51d      	bpl.n	80042ac <_puts_r+0x78>
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	b1db      	cbz	r3, 80042ac <_puts_r+0x78>
 8004274:	3e01      	subs	r6, #1
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800427c:	3b01      	subs	r3, #1
 800427e:	60a3      	str	r3, [r4, #8]
 8004280:	bb39      	cbnz	r1, 80042d2 <_puts_r+0x9e>
 8004282:	2b00      	cmp	r3, #0
 8004284:	da38      	bge.n	80042f8 <_puts_r+0xc4>
 8004286:	4622      	mov	r2, r4
 8004288:	210a      	movs	r1, #10
 800428a:	4628      	mov	r0, r5
 800428c:	f000 fa02 	bl	8004694 <__swbuf_r>
 8004290:	3001      	adds	r0, #1
 8004292:	d011      	beq.n	80042b8 <_puts_r+0x84>
 8004294:	250a      	movs	r5, #10
 8004296:	e011      	b.n	80042bc <_puts_r+0x88>
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <_puts_r+0xd4>)
 800429a:	429c      	cmp	r4, r3
 800429c:	d101      	bne.n	80042a2 <_puts_r+0x6e>
 800429e:	68ac      	ldr	r4, [r5, #8]
 80042a0:	e7da      	b.n	8004258 <_puts_r+0x24>
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <_puts_r+0xd8>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	bf08      	it	eq
 80042a8:	68ec      	ldreq	r4, [r5, #12]
 80042aa:	e7d5      	b.n	8004258 <_puts_r+0x24>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4628      	mov	r0, r5
 80042b0:	f000 fa54 	bl	800475c <__swsetup_r>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d0dd      	beq.n	8004274 <_puts_r+0x40>
 80042b8:	f04f 35ff 	mov.w	r5, #4294967295
 80042bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042be:	07da      	lsls	r2, r3, #31
 80042c0:	d405      	bmi.n	80042ce <_puts_r+0x9a>
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	d402      	bmi.n	80042ce <_puts_r+0x9a>
 80042c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ca:	f7ff fee7 	bl	800409c <__retarget_lock_release_recursive>
 80042ce:	4628      	mov	r0, r5
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da04      	bge.n	80042e0 <_puts_r+0xac>
 80042d6:	69a2      	ldr	r2, [r4, #24]
 80042d8:	429a      	cmp	r2, r3
 80042da:	dc06      	bgt.n	80042ea <_puts_r+0xb6>
 80042dc:	290a      	cmp	r1, #10
 80042de:	d004      	beq.n	80042ea <_puts_r+0xb6>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	7019      	strb	r1, [r3, #0]
 80042e8:	e7c5      	b.n	8004276 <_puts_r+0x42>
 80042ea:	4622      	mov	r2, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 f9d1 	bl	8004694 <__swbuf_r>
 80042f2:	3001      	adds	r0, #1
 80042f4:	d1bf      	bne.n	8004276 <_puts_r+0x42>
 80042f6:	e7df      	b.n	80042b8 <_puts_r+0x84>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	250a      	movs	r5, #10
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	6022      	str	r2, [r4, #0]
 8004300:	701d      	strb	r5, [r3, #0]
 8004302:	e7db      	b.n	80042bc <_puts_r+0x88>
 8004304:	08005138 	.word	0x08005138
 8004308:	08005158 	.word	0x08005158
 800430c:	08005118 	.word	0x08005118

08004310 <puts>:
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <puts+0xc>)
 8004312:	4601      	mov	r1, r0
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f7ff bf8d 	b.w	8004234 <_puts_r>
 800431a:	bf00      	nop
 800431c:	20000170 	.word	0x20000170

08004320 <_sbrk_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4d06      	ldr	r5, [pc, #24]	; (800433c <_sbrk_r+0x1c>)
 8004324:	2300      	movs	r3, #0
 8004326:	4604      	mov	r4, r0
 8004328:	4608      	mov	r0, r1
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	f7fc fb9e 	bl	8000a6c <_sbrk>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_sbrk_r+0x1a>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_sbrk_r+0x1a>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	200002f8 	.word	0x200002f8

08004340 <setvbuf>:
 8004340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004344:	461d      	mov	r5, r3
 8004346:	4b5d      	ldr	r3, [pc, #372]	; (80044bc <setvbuf+0x17c>)
 8004348:	681f      	ldr	r7, [r3, #0]
 800434a:	4604      	mov	r4, r0
 800434c:	460e      	mov	r6, r1
 800434e:	4690      	mov	r8, r2
 8004350:	b127      	cbz	r7, 800435c <setvbuf+0x1c>
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	b913      	cbnz	r3, 800435c <setvbuf+0x1c>
 8004356:	4638      	mov	r0, r7
 8004358:	f7ff fddc 	bl	8003f14 <__sinit>
 800435c:	4b58      	ldr	r3, [pc, #352]	; (80044c0 <setvbuf+0x180>)
 800435e:	429c      	cmp	r4, r3
 8004360:	d167      	bne.n	8004432 <setvbuf+0xf2>
 8004362:	687c      	ldr	r4, [r7, #4]
 8004364:	f1b8 0f02 	cmp.w	r8, #2
 8004368:	d006      	beq.n	8004378 <setvbuf+0x38>
 800436a:	f1b8 0f01 	cmp.w	r8, #1
 800436e:	f200 809f 	bhi.w	80044b0 <setvbuf+0x170>
 8004372:	2d00      	cmp	r5, #0
 8004374:	f2c0 809c 	blt.w	80044b0 <setvbuf+0x170>
 8004378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800437a:	07db      	lsls	r3, r3, #31
 800437c:	d405      	bmi.n	800438a <setvbuf+0x4a>
 800437e:	89a3      	ldrh	r3, [r4, #12]
 8004380:	0598      	lsls	r0, r3, #22
 8004382:	d402      	bmi.n	800438a <setvbuf+0x4a>
 8004384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004386:	f7ff fe88 	bl	800409a <__retarget_lock_acquire_recursive>
 800438a:	4621      	mov	r1, r4
 800438c:	4638      	mov	r0, r7
 800438e:	f7ff fd1b 	bl	8003dc8 <_fflush_r>
 8004392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004394:	b141      	cbz	r1, 80043a8 <setvbuf+0x68>
 8004396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800439a:	4299      	cmp	r1, r3
 800439c:	d002      	beq.n	80043a4 <setvbuf+0x64>
 800439e:	4638      	mov	r0, r7
 80043a0:	f7ff fe86 	bl	80040b0 <_free_r>
 80043a4:	2300      	movs	r3, #0
 80043a6:	6363      	str	r3, [r4, #52]	; 0x34
 80043a8:	2300      	movs	r3, #0
 80043aa:	61a3      	str	r3, [r4, #24]
 80043ac:	6063      	str	r3, [r4, #4]
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	0619      	lsls	r1, r3, #24
 80043b2:	d503      	bpl.n	80043bc <setvbuf+0x7c>
 80043b4:	6921      	ldr	r1, [r4, #16]
 80043b6:	4638      	mov	r0, r7
 80043b8:	f7ff fe7a 	bl	80040b0 <_free_r>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	f1b8 0f02 	cmp.w	r8, #2
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	d06c      	beq.n	80044a8 <setvbuf+0x168>
 80043ce:	ab01      	add	r3, sp, #4
 80043d0:	466a      	mov	r2, sp
 80043d2:	4621      	mov	r1, r4
 80043d4:	4638      	mov	r0, r7
 80043d6:	f000 fa51 	bl	800487c <__swhatbuf_r>
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	4318      	orrs	r0, r3
 80043de:	81a0      	strh	r0, [r4, #12]
 80043e0:	2d00      	cmp	r5, #0
 80043e2:	d130      	bne.n	8004446 <setvbuf+0x106>
 80043e4:	9d00      	ldr	r5, [sp, #0]
 80043e6:	4628      	mov	r0, r5
 80043e8:	f000 faac 	bl	8004944 <malloc>
 80043ec:	4606      	mov	r6, r0
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d155      	bne.n	800449e <setvbuf+0x15e>
 80043f2:	f8dd 9000 	ldr.w	r9, [sp]
 80043f6:	45a9      	cmp	r9, r5
 80043f8:	d14a      	bne.n	8004490 <setvbuf+0x150>
 80043fa:	f04f 35ff 	mov.w	r5, #4294967295
 80043fe:	2200      	movs	r2, #0
 8004400:	60a2      	str	r2, [r4, #8]
 8004402:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004406:	6022      	str	r2, [r4, #0]
 8004408:	6122      	str	r2, [r4, #16]
 800440a:	2201      	movs	r2, #1
 800440c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004410:	6162      	str	r2, [r4, #20]
 8004412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	07d2      	lsls	r2, r2, #31
 800441a:	81a3      	strh	r3, [r4, #12]
 800441c:	d405      	bmi.n	800442a <setvbuf+0xea>
 800441e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004422:	d102      	bne.n	800442a <setvbuf+0xea>
 8004424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004426:	f7ff fe39 	bl	800409c <__retarget_lock_release_recursive>
 800442a:	4628      	mov	r0, r5
 800442c:	b003      	add	sp, #12
 800442e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004432:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <setvbuf+0x184>)
 8004434:	429c      	cmp	r4, r3
 8004436:	d101      	bne.n	800443c <setvbuf+0xfc>
 8004438:	68bc      	ldr	r4, [r7, #8]
 800443a:	e793      	b.n	8004364 <setvbuf+0x24>
 800443c:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <setvbuf+0x188>)
 800443e:	429c      	cmp	r4, r3
 8004440:	bf08      	it	eq
 8004442:	68fc      	ldreq	r4, [r7, #12]
 8004444:	e78e      	b.n	8004364 <setvbuf+0x24>
 8004446:	2e00      	cmp	r6, #0
 8004448:	d0cd      	beq.n	80043e6 <setvbuf+0xa6>
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	b913      	cbnz	r3, 8004454 <setvbuf+0x114>
 800444e:	4638      	mov	r0, r7
 8004450:	f7ff fd60 	bl	8003f14 <__sinit>
 8004454:	f1b8 0f01 	cmp.w	r8, #1
 8004458:	bf08      	it	eq
 800445a:	89a3      	ldrheq	r3, [r4, #12]
 800445c:	6026      	str	r6, [r4, #0]
 800445e:	bf04      	itt	eq
 8004460:	f043 0301 	orreq.w	r3, r3, #1
 8004464:	81a3      	strheq	r3, [r4, #12]
 8004466:	89a2      	ldrh	r2, [r4, #12]
 8004468:	f012 0308 	ands.w	r3, r2, #8
 800446c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004470:	d01c      	beq.n	80044ac <setvbuf+0x16c>
 8004472:	07d3      	lsls	r3, r2, #31
 8004474:	bf41      	itttt	mi
 8004476:	2300      	movmi	r3, #0
 8004478:	426d      	negmi	r5, r5
 800447a:	60a3      	strmi	r3, [r4, #8]
 800447c:	61a5      	strmi	r5, [r4, #24]
 800447e:	bf58      	it	pl
 8004480:	60a5      	strpl	r5, [r4, #8]
 8004482:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004484:	f015 0501 	ands.w	r5, r5, #1
 8004488:	d115      	bne.n	80044b6 <setvbuf+0x176>
 800448a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800448e:	e7c8      	b.n	8004422 <setvbuf+0xe2>
 8004490:	4648      	mov	r0, r9
 8004492:	f000 fa57 	bl	8004944 <malloc>
 8004496:	4606      	mov	r6, r0
 8004498:	2800      	cmp	r0, #0
 800449a:	d0ae      	beq.n	80043fa <setvbuf+0xba>
 800449c:	464d      	mov	r5, r9
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a4:	81a3      	strh	r3, [r4, #12]
 80044a6:	e7d0      	b.n	800444a <setvbuf+0x10a>
 80044a8:	2500      	movs	r5, #0
 80044aa:	e7a8      	b.n	80043fe <setvbuf+0xbe>
 80044ac:	60a3      	str	r3, [r4, #8]
 80044ae:	e7e8      	b.n	8004482 <setvbuf+0x142>
 80044b0:	f04f 35ff 	mov.w	r5, #4294967295
 80044b4:	e7b9      	b.n	800442a <setvbuf+0xea>
 80044b6:	2500      	movs	r5, #0
 80044b8:	e7b7      	b.n	800442a <setvbuf+0xea>
 80044ba:	bf00      	nop
 80044bc:	20000170 	.word	0x20000170
 80044c0:	08005138 	.word	0x08005138
 80044c4:	08005158 	.word	0x08005158
 80044c8:	08005118 	.word	0x08005118

080044cc <__sread>:
 80044cc:	b510      	push	{r4, lr}
 80044ce:	460c      	mov	r4, r1
 80044d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d4:	f000 fd38 	bl	8004f48 <_read_r>
 80044d8:	2800      	cmp	r0, #0
 80044da:	bfab      	itete	ge
 80044dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044de:	89a3      	ldrhlt	r3, [r4, #12]
 80044e0:	181b      	addge	r3, r3, r0
 80044e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044e6:	bfac      	ite	ge
 80044e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80044ea:	81a3      	strhlt	r3, [r4, #12]
 80044ec:	bd10      	pop	{r4, pc}

080044ee <__swrite>:
 80044ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f2:	461f      	mov	r7, r3
 80044f4:	898b      	ldrh	r3, [r1, #12]
 80044f6:	05db      	lsls	r3, r3, #23
 80044f8:	4605      	mov	r5, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	4616      	mov	r6, r2
 80044fe:	d505      	bpl.n	800450c <__swrite+0x1e>
 8004500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004504:	2302      	movs	r3, #2
 8004506:	2200      	movs	r2, #0
 8004508:	f000 f9a6 	bl	8004858 <_lseek_r>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004516:	81a3      	strh	r3, [r4, #12]
 8004518:	4632      	mov	r2, r6
 800451a:	463b      	mov	r3, r7
 800451c:	4628      	mov	r0, r5
 800451e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004522:	f000 b909 	b.w	8004738 <_write_r>

08004526 <__sseek>:
 8004526:	b510      	push	{r4, lr}
 8004528:	460c      	mov	r4, r1
 800452a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452e:	f000 f993 	bl	8004858 <_lseek_r>
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	bf15      	itete	ne
 8004538:	6560      	strne	r0, [r4, #84]	; 0x54
 800453a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800453e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004542:	81a3      	strheq	r3, [r4, #12]
 8004544:	bf18      	it	ne
 8004546:	81a3      	strhne	r3, [r4, #12]
 8004548:	bd10      	pop	{r4, pc}

0800454a <__sclose>:
 800454a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454e:	f000 b973 	b.w	8004838 <_close_r>

08004552 <strncmp>:
 8004552:	b510      	push	{r4, lr}
 8004554:	b16a      	cbz	r2, 8004572 <strncmp+0x20>
 8004556:	3901      	subs	r1, #1
 8004558:	1884      	adds	r4, r0, r2
 800455a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800455e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004562:	4293      	cmp	r3, r2
 8004564:	d103      	bne.n	800456e <strncmp+0x1c>
 8004566:	42a0      	cmp	r0, r4
 8004568:	d001      	beq.n	800456e <strncmp+0x1c>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f5      	bne.n	800455a <strncmp+0x8>
 800456e:	1a98      	subs	r0, r3, r2
 8004570:	bd10      	pop	{r4, pc}
 8004572:	4610      	mov	r0, r2
 8004574:	e7fc      	b.n	8004570 <strncmp+0x1e>
	...

08004578 <_strtol_l.isra.0>:
 8004578:	2b01      	cmp	r3, #1
 800457a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457e:	d001      	beq.n	8004584 <_strtol_l.isra.0+0xc>
 8004580:	2b24      	cmp	r3, #36	; 0x24
 8004582:	d906      	bls.n	8004592 <_strtol_l.isra.0+0x1a>
 8004584:	f7ff fb94 	bl	8003cb0 <__errno>
 8004588:	2316      	movs	r3, #22
 800458a:	6003      	str	r3, [r0, #0]
 800458c:	2000      	movs	r0, #0
 800458e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004592:	4f3a      	ldr	r7, [pc, #232]	; (800467c <_strtol_l.isra.0+0x104>)
 8004594:	468e      	mov	lr, r1
 8004596:	4676      	mov	r6, lr
 8004598:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800459c:	5de5      	ldrb	r5, [r4, r7]
 800459e:	f015 0508 	ands.w	r5, r5, #8
 80045a2:	d1f8      	bne.n	8004596 <_strtol_l.isra.0+0x1e>
 80045a4:	2c2d      	cmp	r4, #45	; 0x2d
 80045a6:	d134      	bne.n	8004612 <_strtol_l.isra.0+0x9a>
 80045a8:	f89e 4000 	ldrb.w	r4, [lr]
 80045ac:	f04f 0801 	mov.w	r8, #1
 80045b0:	f106 0e02 	add.w	lr, r6, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d05c      	beq.n	8004672 <_strtol_l.isra.0+0xfa>
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d10c      	bne.n	80045d6 <_strtol_l.isra.0+0x5e>
 80045bc:	2c30      	cmp	r4, #48	; 0x30
 80045be:	d10a      	bne.n	80045d6 <_strtol_l.isra.0+0x5e>
 80045c0:	f89e 4000 	ldrb.w	r4, [lr]
 80045c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80045c8:	2c58      	cmp	r4, #88	; 0x58
 80045ca:	d14d      	bne.n	8004668 <_strtol_l.isra.0+0xf0>
 80045cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80045d0:	2310      	movs	r3, #16
 80045d2:	f10e 0e02 	add.w	lr, lr, #2
 80045d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80045da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80045de:	2600      	movs	r6, #0
 80045e0:	fbbc f9f3 	udiv	r9, ip, r3
 80045e4:	4635      	mov	r5, r6
 80045e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80045ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80045ee:	2f09      	cmp	r7, #9
 80045f0:	d818      	bhi.n	8004624 <_strtol_l.isra.0+0xac>
 80045f2:	463c      	mov	r4, r7
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	dd24      	ble.n	8004642 <_strtol_l.isra.0+0xca>
 80045f8:	2e00      	cmp	r6, #0
 80045fa:	db1f      	blt.n	800463c <_strtol_l.isra.0+0xc4>
 80045fc:	45a9      	cmp	r9, r5
 80045fe:	d31d      	bcc.n	800463c <_strtol_l.isra.0+0xc4>
 8004600:	d101      	bne.n	8004606 <_strtol_l.isra.0+0x8e>
 8004602:	45a2      	cmp	sl, r4
 8004604:	db1a      	blt.n	800463c <_strtol_l.isra.0+0xc4>
 8004606:	fb05 4503 	mla	r5, r5, r3, r4
 800460a:	2601      	movs	r6, #1
 800460c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004610:	e7eb      	b.n	80045ea <_strtol_l.isra.0+0x72>
 8004612:	2c2b      	cmp	r4, #43	; 0x2b
 8004614:	bf08      	it	eq
 8004616:	f89e 4000 	ldrbeq.w	r4, [lr]
 800461a:	46a8      	mov	r8, r5
 800461c:	bf08      	it	eq
 800461e:	f106 0e02 	addeq.w	lr, r6, #2
 8004622:	e7c7      	b.n	80045b4 <_strtol_l.isra.0+0x3c>
 8004624:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004628:	2f19      	cmp	r7, #25
 800462a:	d801      	bhi.n	8004630 <_strtol_l.isra.0+0xb8>
 800462c:	3c37      	subs	r4, #55	; 0x37
 800462e:	e7e1      	b.n	80045f4 <_strtol_l.isra.0+0x7c>
 8004630:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004634:	2f19      	cmp	r7, #25
 8004636:	d804      	bhi.n	8004642 <_strtol_l.isra.0+0xca>
 8004638:	3c57      	subs	r4, #87	; 0x57
 800463a:	e7db      	b.n	80045f4 <_strtol_l.isra.0+0x7c>
 800463c:	f04f 36ff 	mov.w	r6, #4294967295
 8004640:	e7e4      	b.n	800460c <_strtol_l.isra.0+0x94>
 8004642:	2e00      	cmp	r6, #0
 8004644:	da05      	bge.n	8004652 <_strtol_l.isra.0+0xda>
 8004646:	2322      	movs	r3, #34	; 0x22
 8004648:	6003      	str	r3, [r0, #0]
 800464a:	4665      	mov	r5, ip
 800464c:	b942      	cbnz	r2, 8004660 <_strtol_l.isra.0+0xe8>
 800464e:	4628      	mov	r0, r5
 8004650:	e79d      	b.n	800458e <_strtol_l.isra.0+0x16>
 8004652:	f1b8 0f00 	cmp.w	r8, #0
 8004656:	d000      	beq.n	800465a <_strtol_l.isra.0+0xe2>
 8004658:	426d      	negs	r5, r5
 800465a:	2a00      	cmp	r2, #0
 800465c:	d0f7      	beq.n	800464e <_strtol_l.isra.0+0xd6>
 800465e:	b10e      	cbz	r6, 8004664 <_strtol_l.isra.0+0xec>
 8004660:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004664:	6011      	str	r1, [r2, #0]
 8004666:	e7f2      	b.n	800464e <_strtol_l.isra.0+0xd6>
 8004668:	2430      	movs	r4, #48	; 0x30
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1b3      	bne.n	80045d6 <_strtol_l.isra.0+0x5e>
 800466e:	2308      	movs	r3, #8
 8004670:	e7b1      	b.n	80045d6 <_strtol_l.isra.0+0x5e>
 8004672:	2c30      	cmp	r4, #48	; 0x30
 8004674:	d0a4      	beq.n	80045c0 <_strtol_l.isra.0+0x48>
 8004676:	230a      	movs	r3, #10
 8004678:	e7ad      	b.n	80045d6 <_strtol_l.isra.0+0x5e>
 800467a:	bf00      	nop
 800467c:	0800517d 	.word	0x0800517d

08004680 <strtol>:
 8004680:	4613      	mov	r3, r2
 8004682:	460a      	mov	r2, r1
 8004684:	4601      	mov	r1, r0
 8004686:	4802      	ldr	r0, [pc, #8]	; (8004690 <strtol+0x10>)
 8004688:	6800      	ldr	r0, [r0, #0]
 800468a:	f7ff bf75 	b.w	8004578 <_strtol_l.isra.0>
 800468e:	bf00      	nop
 8004690:	20000170 	.word	0x20000170

08004694 <__swbuf_r>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	460e      	mov	r6, r1
 8004698:	4614      	mov	r4, r2
 800469a:	4605      	mov	r5, r0
 800469c:	b118      	cbz	r0, 80046a6 <__swbuf_r+0x12>
 800469e:	6983      	ldr	r3, [r0, #24]
 80046a0:	b90b      	cbnz	r3, 80046a6 <__swbuf_r+0x12>
 80046a2:	f7ff fc37 	bl	8003f14 <__sinit>
 80046a6:	4b21      	ldr	r3, [pc, #132]	; (800472c <__swbuf_r+0x98>)
 80046a8:	429c      	cmp	r4, r3
 80046aa:	d12b      	bne.n	8004704 <__swbuf_r+0x70>
 80046ac:	686c      	ldr	r4, [r5, #4]
 80046ae:	69a3      	ldr	r3, [r4, #24]
 80046b0:	60a3      	str	r3, [r4, #8]
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	071a      	lsls	r2, r3, #28
 80046b6:	d52f      	bpl.n	8004718 <__swbuf_r+0x84>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	b36b      	cbz	r3, 8004718 <__swbuf_r+0x84>
 80046bc:	6923      	ldr	r3, [r4, #16]
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	1ac0      	subs	r0, r0, r3
 80046c2:	6963      	ldr	r3, [r4, #20]
 80046c4:	b2f6      	uxtb	r6, r6
 80046c6:	4283      	cmp	r3, r0
 80046c8:	4637      	mov	r7, r6
 80046ca:	dc04      	bgt.n	80046d6 <__swbuf_r+0x42>
 80046cc:	4621      	mov	r1, r4
 80046ce:	4628      	mov	r0, r5
 80046d0:	f7ff fb7a 	bl	8003dc8 <_fflush_r>
 80046d4:	bb30      	cbnz	r0, 8004724 <__swbuf_r+0x90>
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	3b01      	subs	r3, #1
 80046da:	60a3      	str	r3, [r4, #8]
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	701e      	strb	r6, [r3, #0]
 80046e4:	6963      	ldr	r3, [r4, #20]
 80046e6:	3001      	adds	r0, #1
 80046e8:	4283      	cmp	r3, r0
 80046ea:	d004      	beq.n	80046f6 <__swbuf_r+0x62>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	07db      	lsls	r3, r3, #31
 80046f0:	d506      	bpl.n	8004700 <__swbuf_r+0x6c>
 80046f2:	2e0a      	cmp	r6, #10
 80046f4:	d104      	bne.n	8004700 <__swbuf_r+0x6c>
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f7ff fb65 	bl	8003dc8 <_fflush_r>
 80046fe:	b988      	cbnz	r0, 8004724 <__swbuf_r+0x90>
 8004700:	4638      	mov	r0, r7
 8004702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <__swbuf_r+0x9c>)
 8004706:	429c      	cmp	r4, r3
 8004708:	d101      	bne.n	800470e <__swbuf_r+0x7a>
 800470a:	68ac      	ldr	r4, [r5, #8]
 800470c:	e7cf      	b.n	80046ae <__swbuf_r+0x1a>
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <__swbuf_r+0xa0>)
 8004710:	429c      	cmp	r4, r3
 8004712:	bf08      	it	eq
 8004714:	68ec      	ldreq	r4, [r5, #12]
 8004716:	e7ca      	b.n	80046ae <__swbuf_r+0x1a>
 8004718:	4621      	mov	r1, r4
 800471a:	4628      	mov	r0, r5
 800471c:	f000 f81e 	bl	800475c <__swsetup_r>
 8004720:	2800      	cmp	r0, #0
 8004722:	d0cb      	beq.n	80046bc <__swbuf_r+0x28>
 8004724:	f04f 37ff 	mov.w	r7, #4294967295
 8004728:	e7ea      	b.n	8004700 <__swbuf_r+0x6c>
 800472a:	bf00      	nop
 800472c:	08005138 	.word	0x08005138
 8004730:	08005158 	.word	0x08005158
 8004734:	08005118 	.word	0x08005118

08004738 <_write_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4d07      	ldr	r5, [pc, #28]	; (8004758 <_write_r+0x20>)
 800473c:	4604      	mov	r4, r0
 800473e:	4608      	mov	r0, r1
 8004740:	4611      	mov	r1, r2
 8004742:	2200      	movs	r2, #0
 8004744:	602a      	str	r2, [r5, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	f7fb ff04 	bl	8000554 <_write>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_write_r+0x1e>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_write_r+0x1e>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	200002f8 	.word	0x200002f8

0800475c <__swsetup_r>:
 800475c:	4b32      	ldr	r3, [pc, #200]	; (8004828 <__swsetup_r+0xcc>)
 800475e:	b570      	push	{r4, r5, r6, lr}
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	4606      	mov	r6, r0
 8004764:	460c      	mov	r4, r1
 8004766:	b125      	cbz	r5, 8004772 <__swsetup_r+0x16>
 8004768:	69ab      	ldr	r3, [r5, #24]
 800476a:	b913      	cbnz	r3, 8004772 <__swsetup_r+0x16>
 800476c:	4628      	mov	r0, r5
 800476e:	f7ff fbd1 	bl	8003f14 <__sinit>
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <__swsetup_r+0xd0>)
 8004774:	429c      	cmp	r4, r3
 8004776:	d10f      	bne.n	8004798 <__swsetup_r+0x3c>
 8004778:	686c      	ldr	r4, [r5, #4]
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004780:	0719      	lsls	r1, r3, #28
 8004782:	d42c      	bmi.n	80047de <__swsetup_r+0x82>
 8004784:	06dd      	lsls	r5, r3, #27
 8004786:	d411      	bmi.n	80047ac <__swsetup_r+0x50>
 8004788:	2309      	movs	r3, #9
 800478a:	6033      	str	r3, [r6, #0]
 800478c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	e03e      	b.n	8004816 <__swsetup_r+0xba>
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <__swsetup_r+0xd4>)
 800479a:	429c      	cmp	r4, r3
 800479c:	d101      	bne.n	80047a2 <__swsetup_r+0x46>
 800479e:	68ac      	ldr	r4, [r5, #8]
 80047a0:	e7eb      	b.n	800477a <__swsetup_r+0x1e>
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <__swsetup_r+0xd8>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	bf08      	it	eq
 80047a8:	68ec      	ldreq	r4, [r5, #12]
 80047aa:	e7e6      	b.n	800477a <__swsetup_r+0x1e>
 80047ac:	0758      	lsls	r0, r3, #29
 80047ae:	d512      	bpl.n	80047d6 <__swsetup_r+0x7a>
 80047b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b2:	b141      	cbz	r1, 80047c6 <__swsetup_r+0x6a>
 80047b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b8:	4299      	cmp	r1, r3
 80047ba:	d002      	beq.n	80047c2 <__swsetup_r+0x66>
 80047bc:	4630      	mov	r0, r6
 80047be:	f7ff fc77 	bl	80040b0 <_free_r>
 80047c2:	2300      	movs	r3, #0
 80047c4:	6363      	str	r3, [r4, #52]	; 0x34
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	2300      	movs	r3, #0
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f043 0308 	orr.w	r3, r3, #8
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	b94b      	cbnz	r3, 80047f6 <__swsetup_r+0x9a>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ec:	d003      	beq.n	80047f6 <__swsetup_r+0x9a>
 80047ee:	4621      	mov	r1, r4
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 f867 	bl	80048c4 <__smakebuf_r>
 80047f6:	89a0      	ldrh	r0, [r4, #12]
 80047f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047fc:	f010 0301 	ands.w	r3, r0, #1
 8004800:	d00a      	beq.n	8004818 <__swsetup_r+0xbc>
 8004802:	2300      	movs	r3, #0
 8004804:	60a3      	str	r3, [r4, #8]
 8004806:	6963      	ldr	r3, [r4, #20]
 8004808:	425b      	negs	r3, r3
 800480a:	61a3      	str	r3, [r4, #24]
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	b943      	cbnz	r3, 8004822 <__swsetup_r+0xc6>
 8004810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004814:	d1ba      	bne.n	800478c <__swsetup_r+0x30>
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	0781      	lsls	r1, r0, #30
 800481a:	bf58      	it	pl
 800481c:	6963      	ldrpl	r3, [r4, #20]
 800481e:	60a3      	str	r3, [r4, #8]
 8004820:	e7f4      	b.n	800480c <__swsetup_r+0xb0>
 8004822:	2000      	movs	r0, #0
 8004824:	e7f7      	b.n	8004816 <__swsetup_r+0xba>
 8004826:	bf00      	nop
 8004828:	20000170 	.word	0x20000170
 800482c:	08005138 	.word	0x08005138
 8004830:	08005158 	.word	0x08005158
 8004834:	08005118 	.word	0x08005118

08004838 <_close_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4d06      	ldr	r5, [pc, #24]	; (8004854 <_close_r+0x1c>)
 800483c:	2300      	movs	r3, #0
 800483e:	4604      	mov	r4, r0
 8004840:	4608      	mov	r0, r1
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	f7fc f8dd 	bl	8000a02 <_close>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d102      	bne.n	8004852 <_close_r+0x1a>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	b103      	cbz	r3, 8004852 <_close_r+0x1a>
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	200002f8 	.word	0x200002f8

08004858 <_lseek_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4d07      	ldr	r5, [pc, #28]	; (8004878 <_lseek_r+0x20>)
 800485c:	4604      	mov	r4, r0
 800485e:	4608      	mov	r0, r1
 8004860:	4611      	mov	r1, r2
 8004862:	2200      	movs	r2, #0
 8004864:	602a      	str	r2, [r5, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	f7fc f8f2 	bl	8000a50 <_lseek>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d102      	bne.n	8004876 <_lseek_r+0x1e>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	b103      	cbz	r3, 8004876 <_lseek_r+0x1e>
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	bd38      	pop	{r3, r4, r5, pc}
 8004878:	200002f8 	.word	0x200002f8

0800487c <__swhatbuf_r>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	460e      	mov	r6, r1
 8004880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004884:	2900      	cmp	r1, #0
 8004886:	b096      	sub	sp, #88	; 0x58
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	da07      	bge.n	800489e <__swhatbuf_r+0x22>
 800488e:	2300      	movs	r3, #0
 8004890:	602b      	str	r3, [r5, #0]
 8004892:	89b3      	ldrh	r3, [r6, #12]
 8004894:	061a      	lsls	r2, r3, #24
 8004896:	d410      	bmi.n	80048ba <__swhatbuf_r+0x3e>
 8004898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800489c:	e00e      	b.n	80048bc <__swhatbuf_r+0x40>
 800489e:	466a      	mov	r2, sp
 80048a0:	f000 fb64 	bl	8004f6c <_fstat_r>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	dbf2      	blt.n	800488e <__swhatbuf_r+0x12>
 80048a8:	9a01      	ldr	r2, [sp, #4]
 80048aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80048ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80048b2:	425a      	negs	r2, r3
 80048b4:	415a      	adcs	r2, r3
 80048b6:	602a      	str	r2, [r5, #0]
 80048b8:	e7ee      	b.n	8004898 <__swhatbuf_r+0x1c>
 80048ba:	2340      	movs	r3, #64	; 0x40
 80048bc:	2000      	movs	r0, #0
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	b016      	add	sp, #88	; 0x58
 80048c2:	bd70      	pop	{r4, r5, r6, pc}

080048c4 <__smakebuf_r>:
 80048c4:	898b      	ldrh	r3, [r1, #12]
 80048c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048c8:	079d      	lsls	r5, r3, #30
 80048ca:	4606      	mov	r6, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	d507      	bpl.n	80048e0 <__smakebuf_r+0x1c>
 80048d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	6123      	str	r3, [r4, #16]
 80048d8:	2301      	movs	r3, #1
 80048da:	6163      	str	r3, [r4, #20]
 80048dc:	b002      	add	sp, #8
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	ab01      	add	r3, sp, #4
 80048e2:	466a      	mov	r2, sp
 80048e4:	f7ff ffca 	bl	800487c <__swhatbuf_r>
 80048e8:	9900      	ldr	r1, [sp, #0]
 80048ea:	4605      	mov	r5, r0
 80048ec:	4630      	mov	r0, r6
 80048ee:	f7ff fc2f 	bl	8004150 <_malloc_r>
 80048f2:	b948      	cbnz	r0, 8004908 <__smakebuf_r+0x44>
 80048f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f8:	059a      	lsls	r2, r3, #22
 80048fa:	d4ef      	bmi.n	80048dc <__smakebuf_r+0x18>
 80048fc:	f023 0303 	bic.w	r3, r3, #3
 8004900:	f043 0302 	orr.w	r3, r3, #2
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	e7e3      	b.n	80048d0 <__smakebuf_r+0xc>
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <__smakebuf_r+0x7c>)
 800490a:	62b3      	str	r3, [r6, #40]	; 0x28
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	6020      	str	r0, [r4, #0]
 8004910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004914:	81a3      	strh	r3, [r4, #12]
 8004916:	9b00      	ldr	r3, [sp, #0]
 8004918:	6163      	str	r3, [r4, #20]
 800491a:	9b01      	ldr	r3, [sp, #4]
 800491c:	6120      	str	r0, [r4, #16]
 800491e:	b15b      	cbz	r3, 8004938 <__smakebuf_r+0x74>
 8004920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004924:	4630      	mov	r0, r6
 8004926:	f000 fb33 	bl	8004f90 <_isatty_r>
 800492a:	b128      	cbz	r0, 8004938 <__smakebuf_r+0x74>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	89a0      	ldrh	r0, [r4, #12]
 800493a:	4305      	orrs	r5, r0
 800493c:	81a5      	strh	r5, [r4, #12]
 800493e:	e7cd      	b.n	80048dc <__smakebuf_r+0x18>
 8004940:	08003ead 	.word	0x08003ead

08004944 <malloc>:
 8004944:	4b02      	ldr	r3, [pc, #8]	; (8004950 <malloc+0xc>)
 8004946:	4601      	mov	r1, r0
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	f7ff bc01 	b.w	8004150 <_malloc_r>
 800494e:	bf00      	nop
 8004950:	20000170 	.word	0x20000170

08004954 <__malloc_lock>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__malloc_lock+0x8>)
 8004956:	f7ff bba0 	b.w	800409a <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	200002f0 	.word	0x200002f0

08004960 <__malloc_unlock>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__malloc_unlock+0x8>)
 8004962:	f7ff bb9b 	b.w	800409c <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	200002f0 	.word	0x200002f0

0800496c <__sfputc_r>:
 800496c:	6893      	ldr	r3, [r2, #8]
 800496e:	3b01      	subs	r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	b410      	push	{r4}
 8004974:	6093      	str	r3, [r2, #8]
 8004976:	da08      	bge.n	800498a <__sfputc_r+0x1e>
 8004978:	6994      	ldr	r4, [r2, #24]
 800497a:	42a3      	cmp	r3, r4
 800497c:	db01      	blt.n	8004982 <__sfputc_r+0x16>
 800497e:	290a      	cmp	r1, #10
 8004980:	d103      	bne.n	800498a <__sfputc_r+0x1e>
 8004982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004986:	f7ff be85 	b.w	8004694 <__swbuf_r>
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	1c58      	adds	r0, r3, #1
 800498e:	6010      	str	r0, [r2, #0]
 8004990:	7019      	strb	r1, [r3, #0]
 8004992:	4608      	mov	r0, r1
 8004994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004998:	4770      	bx	lr

0800499a <__sfputs_r>:
 800499a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499c:	4606      	mov	r6, r0
 800499e:	460f      	mov	r7, r1
 80049a0:	4614      	mov	r4, r2
 80049a2:	18d5      	adds	r5, r2, r3
 80049a4:	42ac      	cmp	r4, r5
 80049a6:	d101      	bne.n	80049ac <__sfputs_r+0x12>
 80049a8:	2000      	movs	r0, #0
 80049aa:	e007      	b.n	80049bc <__sfputs_r+0x22>
 80049ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b0:	463a      	mov	r2, r7
 80049b2:	4630      	mov	r0, r6
 80049b4:	f7ff ffda 	bl	800496c <__sfputc_r>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d1f3      	bne.n	80049a4 <__sfputs_r+0xa>
 80049bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049c0 <_vfiprintf_r>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	460d      	mov	r5, r1
 80049c6:	b09d      	sub	sp, #116	; 0x74
 80049c8:	4614      	mov	r4, r2
 80049ca:	4698      	mov	r8, r3
 80049cc:	4606      	mov	r6, r0
 80049ce:	b118      	cbz	r0, 80049d8 <_vfiprintf_r+0x18>
 80049d0:	6983      	ldr	r3, [r0, #24]
 80049d2:	b90b      	cbnz	r3, 80049d8 <_vfiprintf_r+0x18>
 80049d4:	f7ff fa9e 	bl	8003f14 <__sinit>
 80049d8:	4b89      	ldr	r3, [pc, #548]	; (8004c00 <_vfiprintf_r+0x240>)
 80049da:	429d      	cmp	r5, r3
 80049dc:	d11b      	bne.n	8004a16 <_vfiprintf_r+0x56>
 80049de:	6875      	ldr	r5, [r6, #4]
 80049e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049e2:	07d9      	lsls	r1, r3, #31
 80049e4:	d405      	bmi.n	80049f2 <_vfiprintf_r+0x32>
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	059a      	lsls	r2, r3, #22
 80049ea:	d402      	bmi.n	80049f2 <_vfiprintf_r+0x32>
 80049ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ee:	f7ff fb54 	bl	800409a <__retarget_lock_acquire_recursive>
 80049f2:	89ab      	ldrh	r3, [r5, #12]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	d501      	bpl.n	80049fc <_vfiprintf_r+0x3c>
 80049f8:	692b      	ldr	r3, [r5, #16]
 80049fa:	b9eb      	cbnz	r3, 8004a38 <_vfiprintf_r+0x78>
 80049fc:	4629      	mov	r1, r5
 80049fe:	4630      	mov	r0, r6
 8004a00:	f7ff feac 	bl	800475c <__swsetup_r>
 8004a04:	b1c0      	cbz	r0, 8004a38 <_vfiprintf_r+0x78>
 8004a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a08:	07dc      	lsls	r4, r3, #31
 8004a0a:	d50e      	bpl.n	8004a2a <_vfiprintf_r+0x6a>
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	b01d      	add	sp, #116	; 0x74
 8004a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a16:	4b7b      	ldr	r3, [pc, #492]	; (8004c04 <_vfiprintf_r+0x244>)
 8004a18:	429d      	cmp	r5, r3
 8004a1a:	d101      	bne.n	8004a20 <_vfiprintf_r+0x60>
 8004a1c:	68b5      	ldr	r5, [r6, #8]
 8004a1e:	e7df      	b.n	80049e0 <_vfiprintf_r+0x20>
 8004a20:	4b79      	ldr	r3, [pc, #484]	; (8004c08 <_vfiprintf_r+0x248>)
 8004a22:	429d      	cmp	r5, r3
 8004a24:	bf08      	it	eq
 8004a26:	68f5      	ldreq	r5, [r6, #12]
 8004a28:	e7da      	b.n	80049e0 <_vfiprintf_r+0x20>
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	0598      	lsls	r0, r3, #22
 8004a2e:	d4ed      	bmi.n	8004a0c <_vfiprintf_r+0x4c>
 8004a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a32:	f7ff fb33 	bl	800409c <__retarget_lock_release_recursive>
 8004a36:	e7e9      	b.n	8004a0c <_vfiprintf_r+0x4c>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a46:	2330      	movs	r3, #48	; 0x30
 8004a48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c0c <_vfiprintf_r+0x24c>
 8004a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a50:	f04f 0901 	mov.w	r9, #1
 8004a54:	4623      	mov	r3, r4
 8004a56:	469a      	mov	sl, r3
 8004a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a5c:	b10a      	cbz	r2, 8004a62 <_vfiprintf_r+0xa2>
 8004a5e:	2a25      	cmp	r2, #37	; 0x25
 8004a60:	d1f9      	bne.n	8004a56 <_vfiprintf_r+0x96>
 8004a62:	ebba 0b04 	subs.w	fp, sl, r4
 8004a66:	d00b      	beq.n	8004a80 <_vfiprintf_r+0xc0>
 8004a68:	465b      	mov	r3, fp
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f7ff ff93 	bl	800499a <__sfputs_r>
 8004a74:	3001      	adds	r0, #1
 8004a76:	f000 80aa 	beq.w	8004bce <_vfiprintf_r+0x20e>
 8004a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a7c:	445a      	add	r2, fp
 8004a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a80:	f89a 3000 	ldrb.w	r3, [sl]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a2 	beq.w	8004bce <_vfiprintf_r+0x20e>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a94:	f10a 0a01 	add.w	sl, sl, #1
 8004a98:	9304      	str	r3, [sp, #16]
 8004a9a:	9307      	str	r3, [sp, #28]
 8004a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8004aa2:	4654      	mov	r4, sl
 8004aa4:	2205      	movs	r2, #5
 8004aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aaa:	4858      	ldr	r0, [pc, #352]	; (8004c0c <_vfiprintf_r+0x24c>)
 8004aac:	f7fb fb98 	bl	80001e0 <memchr>
 8004ab0:	9a04      	ldr	r2, [sp, #16]
 8004ab2:	b9d8      	cbnz	r0, 8004aec <_vfiprintf_r+0x12c>
 8004ab4:	06d1      	lsls	r1, r2, #27
 8004ab6:	bf44      	itt	mi
 8004ab8:	2320      	movmi	r3, #32
 8004aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004abe:	0713      	lsls	r3, r2, #28
 8004ac0:	bf44      	itt	mi
 8004ac2:	232b      	movmi	r3, #43	; 0x2b
 8004ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8004acc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ace:	d015      	beq.n	8004afc <_vfiprintf_r+0x13c>
 8004ad0:	9a07      	ldr	r2, [sp, #28]
 8004ad2:	4654      	mov	r4, sl
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f04f 0c0a 	mov.w	ip, #10
 8004ada:	4621      	mov	r1, r4
 8004adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ae0:	3b30      	subs	r3, #48	; 0x30
 8004ae2:	2b09      	cmp	r3, #9
 8004ae4:	d94e      	bls.n	8004b84 <_vfiprintf_r+0x1c4>
 8004ae6:	b1b0      	cbz	r0, 8004b16 <_vfiprintf_r+0x156>
 8004ae8:	9207      	str	r2, [sp, #28]
 8004aea:	e014      	b.n	8004b16 <_vfiprintf_r+0x156>
 8004aec:	eba0 0308 	sub.w	r3, r0, r8
 8004af0:	fa09 f303 	lsl.w	r3, r9, r3
 8004af4:	4313      	orrs	r3, r2
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	46a2      	mov	sl, r4
 8004afa:	e7d2      	b.n	8004aa2 <_vfiprintf_r+0xe2>
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	1d19      	adds	r1, r3, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	9103      	str	r1, [sp, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bfbb      	ittet	lt
 8004b08:	425b      	neglt	r3, r3
 8004b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8004b0e:	9307      	strge	r3, [sp, #28]
 8004b10:	9307      	strlt	r3, [sp, #28]
 8004b12:	bfb8      	it	lt
 8004b14:	9204      	strlt	r2, [sp, #16]
 8004b16:	7823      	ldrb	r3, [r4, #0]
 8004b18:	2b2e      	cmp	r3, #46	; 0x2e
 8004b1a:	d10c      	bne.n	8004b36 <_vfiprintf_r+0x176>
 8004b1c:	7863      	ldrb	r3, [r4, #1]
 8004b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b20:	d135      	bne.n	8004b8e <_vfiprintf_r+0x1ce>
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	9203      	str	r2, [sp, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bfb8      	it	lt
 8004b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b32:	3402      	adds	r4, #2
 8004b34:	9305      	str	r3, [sp, #20]
 8004b36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c1c <_vfiprintf_r+0x25c>
 8004b3a:	7821      	ldrb	r1, [r4, #0]
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	4650      	mov	r0, sl
 8004b40:	f7fb fb4e 	bl	80001e0 <memchr>
 8004b44:	b140      	cbz	r0, 8004b58 <_vfiprintf_r+0x198>
 8004b46:	2340      	movs	r3, #64	; 0x40
 8004b48:	eba0 000a 	sub.w	r0, r0, sl
 8004b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8004b50:	9b04      	ldr	r3, [sp, #16]
 8004b52:	4303      	orrs	r3, r0
 8004b54:	3401      	adds	r4, #1
 8004b56:	9304      	str	r3, [sp, #16]
 8004b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5c:	482c      	ldr	r0, [pc, #176]	; (8004c10 <_vfiprintf_r+0x250>)
 8004b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b62:	2206      	movs	r2, #6
 8004b64:	f7fb fb3c 	bl	80001e0 <memchr>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d03f      	beq.n	8004bec <_vfiprintf_r+0x22c>
 8004b6c:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <_vfiprintf_r+0x254>)
 8004b6e:	bb1b      	cbnz	r3, 8004bb8 <_vfiprintf_r+0x1f8>
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	3307      	adds	r3, #7
 8004b74:	f023 0307 	bic.w	r3, r3, #7
 8004b78:	3308      	adds	r3, #8
 8004b7a:	9303      	str	r3, [sp, #12]
 8004b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7e:	443b      	add	r3, r7
 8004b80:	9309      	str	r3, [sp, #36]	; 0x24
 8004b82:	e767      	b.n	8004a54 <_vfiprintf_r+0x94>
 8004b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b88:	460c      	mov	r4, r1
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	e7a5      	b.n	8004ada <_vfiprintf_r+0x11a>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	3401      	adds	r4, #1
 8004b92:	9305      	str	r3, [sp, #20]
 8004b94:	4619      	mov	r1, r3
 8004b96:	f04f 0c0a 	mov.w	ip, #10
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ba0:	3a30      	subs	r2, #48	; 0x30
 8004ba2:	2a09      	cmp	r2, #9
 8004ba4:	d903      	bls.n	8004bae <_vfiprintf_r+0x1ee>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0c5      	beq.n	8004b36 <_vfiprintf_r+0x176>
 8004baa:	9105      	str	r1, [sp, #20]
 8004bac:	e7c3      	b.n	8004b36 <_vfiprintf_r+0x176>
 8004bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e7f0      	b.n	8004b9a <_vfiprintf_r+0x1da>
 8004bb8:	ab03      	add	r3, sp, #12
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	462a      	mov	r2, r5
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <_vfiprintf_r+0x258>)
 8004bc0:	a904      	add	r1, sp, #16
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f3af 8000 	nop.w
 8004bc8:	4607      	mov	r7, r0
 8004bca:	1c78      	adds	r0, r7, #1
 8004bcc:	d1d6      	bne.n	8004b7c <_vfiprintf_r+0x1bc>
 8004bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bd0:	07d9      	lsls	r1, r3, #31
 8004bd2:	d405      	bmi.n	8004be0 <_vfiprintf_r+0x220>
 8004bd4:	89ab      	ldrh	r3, [r5, #12]
 8004bd6:	059a      	lsls	r2, r3, #22
 8004bd8:	d402      	bmi.n	8004be0 <_vfiprintf_r+0x220>
 8004bda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bdc:	f7ff fa5e 	bl	800409c <__retarget_lock_release_recursive>
 8004be0:	89ab      	ldrh	r3, [r5, #12]
 8004be2:	065b      	lsls	r3, r3, #25
 8004be4:	f53f af12 	bmi.w	8004a0c <_vfiprintf_r+0x4c>
 8004be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bea:	e711      	b.n	8004a10 <_vfiprintf_r+0x50>
 8004bec:	ab03      	add	r3, sp, #12
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	462a      	mov	r2, r5
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <_vfiprintf_r+0x258>)
 8004bf4:	a904      	add	r1, sp, #16
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 f880 	bl	8004cfc <_printf_i>
 8004bfc:	e7e4      	b.n	8004bc8 <_vfiprintf_r+0x208>
 8004bfe:	bf00      	nop
 8004c00:	08005138 	.word	0x08005138
 8004c04:	08005158 	.word	0x08005158
 8004c08:	08005118 	.word	0x08005118
 8004c0c:	0800527d 	.word	0x0800527d
 8004c10:	08005287 	.word	0x08005287
 8004c14:	00000000 	.word	0x00000000
 8004c18:	0800499b 	.word	0x0800499b
 8004c1c:	08005283 	.word	0x08005283

08004c20 <_printf_common>:
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	4616      	mov	r6, r2
 8004c26:	4699      	mov	r9, r3
 8004c28:	688a      	ldr	r2, [r1, #8]
 8004c2a:	690b      	ldr	r3, [r1, #16]
 8004c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	bfb8      	it	lt
 8004c34:	4613      	movlt	r3, r2
 8004c36:	6033      	str	r3, [r6, #0]
 8004c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	b10a      	cbz	r2, 8004c46 <_printf_common+0x26>
 8004c42:	3301      	adds	r3, #1
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	0699      	lsls	r1, r3, #26
 8004c4a:	bf42      	ittt	mi
 8004c4c:	6833      	ldrmi	r3, [r6, #0]
 8004c4e:	3302      	addmi	r3, #2
 8004c50:	6033      	strmi	r3, [r6, #0]
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	f015 0506 	ands.w	r5, r5, #6
 8004c58:	d106      	bne.n	8004c68 <_printf_common+0x48>
 8004c5a:	f104 0a19 	add.w	sl, r4, #25
 8004c5e:	68e3      	ldr	r3, [r4, #12]
 8004c60:	6832      	ldr	r2, [r6, #0]
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	42ab      	cmp	r3, r5
 8004c66:	dc26      	bgt.n	8004cb6 <_printf_common+0x96>
 8004c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c6c:	1e13      	subs	r3, r2, #0
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	bf18      	it	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	0692      	lsls	r2, r2, #26
 8004c76:	d42b      	bmi.n	8004cd0 <_printf_common+0xb0>
 8004c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d01e      	beq.n	8004cc4 <_printf_common+0xa4>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	68e5      	ldr	r5, [r4, #12]
 8004c8a:	6832      	ldr	r2, [r6, #0]
 8004c8c:	f003 0306 	and.w	r3, r3, #6
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	bf08      	it	eq
 8004c94:	1aad      	subeq	r5, r5, r2
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	bf0c      	ite	eq
 8004c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca0:	2500      	movne	r5, #0
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bfc4      	itt	gt
 8004ca6:	1a9b      	subgt	r3, r3, r2
 8004ca8:	18ed      	addgt	r5, r5, r3
 8004caa:	2600      	movs	r6, #0
 8004cac:	341a      	adds	r4, #26
 8004cae:	42b5      	cmp	r5, r6
 8004cb0:	d11a      	bne.n	8004ce8 <_printf_common+0xc8>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e008      	b.n	8004cc8 <_printf_common+0xa8>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	47c0      	blx	r8
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d103      	bne.n	8004ccc <_printf_common+0xac>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	3501      	adds	r5, #1
 8004cce:	e7c6      	b.n	8004c5e <_printf_common+0x3e>
 8004cd0:	18e1      	adds	r1, r4, r3
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	2030      	movs	r0, #48	; 0x30
 8004cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cda:	4422      	add	r2, r4
 8004cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	e7c7      	b.n	8004c78 <_printf_common+0x58>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4622      	mov	r2, r4
 8004cec:	4649      	mov	r1, r9
 8004cee:	4638      	mov	r0, r7
 8004cf0:	47c0      	blx	r8
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d0e6      	beq.n	8004cc4 <_printf_common+0xa4>
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7d9      	b.n	8004cae <_printf_common+0x8e>
	...

08004cfc <_printf_i>:
 8004cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	460c      	mov	r4, r1
 8004d02:	4691      	mov	r9, r2
 8004d04:	7e27      	ldrb	r7, [r4, #24]
 8004d06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d08:	2f78      	cmp	r7, #120	; 0x78
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	469a      	mov	sl, r3
 8004d0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d12:	d807      	bhi.n	8004d24 <_printf_i+0x28>
 8004d14:	2f62      	cmp	r7, #98	; 0x62
 8004d16:	d80a      	bhi.n	8004d2e <_printf_i+0x32>
 8004d18:	2f00      	cmp	r7, #0
 8004d1a:	f000 80d8 	beq.w	8004ece <_printf_i+0x1d2>
 8004d1e:	2f58      	cmp	r7, #88	; 0x58
 8004d20:	f000 80a3 	beq.w	8004e6a <_printf_i+0x16e>
 8004d24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d2c:	e03a      	b.n	8004da4 <_printf_i+0xa8>
 8004d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d32:	2b15      	cmp	r3, #21
 8004d34:	d8f6      	bhi.n	8004d24 <_printf_i+0x28>
 8004d36:	a001      	add	r0, pc, #4	; (adr r0, 8004d3c <_printf_i+0x40>)
 8004d38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004da9 	.word	0x08004da9
 8004d44:	08004d25 	.word	0x08004d25
 8004d48:	08004d25 	.word	0x08004d25
 8004d4c:	08004d25 	.word	0x08004d25
 8004d50:	08004d25 	.word	0x08004d25
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004d25 	.word	0x08004d25
 8004d5c:	08004d25 	.word	0x08004d25
 8004d60:	08004d25 	.word	0x08004d25
 8004d64:	08004d25 	.word	0x08004d25
 8004d68:	08004eb5 	.word	0x08004eb5
 8004d6c:	08004dd9 	.word	0x08004dd9
 8004d70:	08004e97 	.word	0x08004e97
 8004d74:	08004d25 	.word	0x08004d25
 8004d78:	08004d25 	.word	0x08004d25
 8004d7c:	08004ed7 	.word	0x08004ed7
 8004d80:	08004d25 	.word	0x08004d25
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004d25 	.word	0x08004d25
 8004d8c:	08004d25 	.word	0x08004d25
 8004d90:	08004e9f 	.word	0x08004e9f
 8004d94:	680b      	ldr	r3, [r1, #0]
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	600a      	str	r2, [r1, #0]
 8004d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0a3      	b.n	8004ef0 <_printf_i+0x1f4>
 8004da8:	6825      	ldr	r5, [r4, #0]
 8004daa:	6808      	ldr	r0, [r1, #0]
 8004dac:	062e      	lsls	r6, r5, #24
 8004dae:	f100 0304 	add.w	r3, r0, #4
 8004db2:	d50a      	bpl.n	8004dca <_printf_i+0xce>
 8004db4:	6805      	ldr	r5, [r0, #0]
 8004db6:	600b      	str	r3, [r1, #0]
 8004db8:	2d00      	cmp	r5, #0
 8004dba:	da03      	bge.n	8004dc4 <_printf_i+0xc8>
 8004dbc:	232d      	movs	r3, #45	; 0x2d
 8004dbe:	426d      	negs	r5, r5
 8004dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc4:	485e      	ldr	r0, [pc, #376]	; (8004f40 <_printf_i+0x244>)
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	e019      	b.n	8004dfe <_printf_i+0x102>
 8004dca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004dce:	6805      	ldr	r5, [r0, #0]
 8004dd0:	600b      	str	r3, [r1, #0]
 8004dd2:	bf18      	it	ne
 8004dd4:	b22d      	sxthne	r5, r5
 8004dd6:	e7ef      	b.n	8004db8 <_printf_i+0xbc>
 8004dd8:	680b      	ldr	r3, [r1, #0]
 8004dda:	6825      	ldr	r5, [r4, #0]
 8004ddc:	1d18      	adds	r0, r3, #4
 8004dde:	6008      	str	r0, [r1, #0]
 8004de0:	0628      	lsls	r0, r5, #24
 8004de2:	d501      	bpl.n	8004de8 <_printf_i+0xec>
 8004de4:	681d      	ldr	r5, [r3, #0]
 8004de6:	e002      	b.n	8004dee <_printf_i+0xf2>
 8004de8:	0669      	lsls	r1, r5, #25
 8004dea:	d5fb      	bpl.n	8004de4 <_printf_i+0xe8>
 8004dec:	881d      	ldrh	r5, [r3, #0]
 8004dee:	4854      	ldr	r0, [pc, #336]	; (8004f40 <_printf_i+0x244>)
 8004df0:	2f6f      	cmp	r7, #111	; 0x6f
 8004df2:	bf0c      	ite	eq
 8004df4:	2308      	moveq	r3, #8
 8004df6:	230a      	movne	r3, #10
 8004df8:	2100      	movs	r1, #0
 8004dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dfe:	6866      	ldr	r6, [r4, #4]
 8004e00:	60a6      	str	r6, [r4, #8]
 8004e02:	2e00      	cmp	r6, #0
 8004e04:	bfa2      	ittt	ge
 8004e06:	6821      	ldrge	r1, [r4, #0]
 8004e08:	f021 0104 	bicge.w	r1, r1, #4
 8004e0c:	6021      	strge	r1, [r4, #0]
 8004e0e:	b90d      	cbnz	r5, 8004e14 <_printf_i+0x118>
 8004e10:	2e00      	cmp	r6, #0
 8004e12:	d04d      	beq.n	8004eb0 <_printf_i+0x1b4>
 8004e14:	4616      	mov	r6, r2
 8004e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8004e1e:	5dc7      	ldrb	r7, [r0, r7]
 8004e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e24:	462f      	mov	r7, r5
 8004e26:	42bb      	cmp	r3, r7
 8004e28:	460d      	mov	r5, r1
 8004e2a:	d9f4      	bls.n	8004e16 <_printf_i+0x11a>
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d10b      	bne.n	8004e48 <_printf_i+0x14c>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	07df      	lsls	r7, r3, #31
 8004e34:	d508      	bpl.n	8004e48 <_printf_i+0x14c>
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	6861      	ldr	r1, [r4, #4]
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	bfde      	ittt	le
 8004e3e:	2330      	movle	r3, #48	; 0x30
 8004e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e48:	1b92      	subs	r2, r2, r6
 8004e4a:	6122      	str	r2, [r4, #16]
 8004e4c:	f8cd a000 	str.w	sl, [sp]
 8004e50:	464b      	mov	r3, r9
 8004e52:	aa03      	add	r2, sp, #12
 8004e54:	4621      	mov	r1, r4
 8004e56:	4640      	mov	r0, r8
 8004e58:	f7ff fee2 	bl	8004c20 <_printf_common>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d14c      	bne.n	8004efa <_printf_i+0x1fe>
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	b004      	add	sp, #16
 8004e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6a:	4835      	ldr	r0, [pc, #212]	; (8004f40 <_printf_i+0x244>)
 8004e6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	680e      	ldr	r6, [r1, #0]
 8004e74:	061f      	lsls	r7, r3, #24
 8004e76:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e7a:	600e      	str	r6, [r1, #0]
 8004e7c:	d514      	bpl.n	8004ea8 <_printf_i+0x1ac>
 8004e7e:	07d9      	lsls	r1, r3, #31
 8004e80:	bf44      	itt	mi
 8004e82:	f043 0320 	orrmi.w	r3, r3, #32
 8004e86:	6023      	strmi	r3, [r4, #0]
 8004e88:	b91d      	cbnz	r5, 8004e92 <_printf_i+0x196>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f023 0320 	bic.w	r3, r3, #32
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	2310      	movs	r3, #16
 8004e94:	e7b0      	b.n	8004df8 <_printf_i+0xfc>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	f043 0320 	orr.w	r3, r3, #32
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	2378      	movs	r3, #120	; 0x78
 8004ea0:	4828      	ldr	r0, [pc, #160]	; (8004f44 <_printf_i+0x248>)
 8004ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ea6:	e7e3      	b.n	8004e70 <_printf_i+0x174>
 8004ea8:	065e      	lsls	r6, r3, #25
 8004eaa:	bf48      	it	mi
 8004eac:	b2ad      	uxthmi	r5, r5
 8004eae:	e7e6      	b.n	8004e7e <_printf_i+0x182>
 8004eb0:	4616      	mov	r6, r2
 8004eb2:	e7bb      	b.n	8004e2c <_printf_i+0x130>
 8004eb4:	680b      	ldr	r3, [r1, #0]
 8004eb6:	6826      	ldr	r6, [r4, #0]
 8004eb8:	6960      	ldr	r0, [r4, #20]
 8004eba:	1d1d      	adds	r5, r3, #4
 8004ebc:	600d      	str	r5, [r1, #0]
 8004ebe:	0635      	lsls	r5, r6, #24
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	d501      	bpl.n	8004ec8 <_printf_i+0x1cc>
 8004ec4:	6018      	str	r0, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <_printf_i+0x1d2>
 8004ec8:	0671      	lsls	r1, r6, #25
 8004eca:	d5fb      	bpl.n	8004ec4 <_printf_i+0x1c8>
 8004ecc:	8018      	strh	r0, [r3, #0]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	4616      	mov	r6, r2
 8004ed4:	e7ba      	b.n	8004e4c <_printf_i+0x150>
 8004ed6:	680b      	ldr	r3, [r1, #0]
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	600a      	str	r2, [r1, #0]
 8004edc:	681e      	ldr	r6, [r3, #0]
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7fb f97c 	bl	80001e0 <memchr>
 8004ee8:	b108      	cbz	r0, 8004eee <_printf_i+0x1f2>
 8004eea:	1b80      	subs	r0, r0, r6
 8004eec:	6060      	str	r0, [r4, #4]
 8004eee:	6863      	ldr	r3, [r4, #4]
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef8:	e7a8      	b.n	8004e4c <_printf_i+0x150>
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	4632      	mov	r2, r6
 8004efe:	4649      	mov	r1, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	47d0      	blx	sl
 8004f04:	3001      	adds	r0, #1
 8004f06:	d0ab      	beq.n	8004e60 <_printf_i+0x164>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	079b      	lsls	r3, r3, #30
 8004f0c:	d413      	bmi.n	8004f36 <_printf_i+0x23a>
 8004f0e:	68e0      	ldr	r0, [r4, #12]
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	4298      	cmp	r0, r3
 8004f14:	bfb8      	it	lt
 8004f16:	4618      	movlt	r0, r3
 8004f18:	e7a4      	b.n	8004e64 <_printf_i+0x168>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	47d0      	blx	sl
 8004f24:	3001      	adds	r0, #1
 8004f26:	d09b      	beq.n	8004e60 <_printf_i+0x164>
 8004f28:	3501      	adds	r5, #1
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	9903      	ldr	r1, [sp, #12]
 8004f2e:	1a5b      	subs	r3, r3, r1
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	dcf2      	bgt.n	8004f1a <_printf_i+0x21e>
 8004f34:	e7eb      	b.n	8004f0e <_printf_i+0x212>
 8004f36:	2500      	movs	r5, #0
 8004f38:	f104 0619 	add.w	r6, r4, #25
 8004f3c:	e7f5      	b.n	8004f2a <_printf_i+0x22e>
 8004f3e:	bf00      	nop
 8004f40:	0800528e 	.word	0x0800528e
 8004f44:	0800529f 	.word	0x0800529f

08004f48 <_read_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d07      	ldr	r5, [pc, #28]	; (8004f68 <_read_r+0x20>)
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	4608      	mov	r0, r1
 8004f50:	4611      	mov	r1, r2
 8004f52:	2200      	movs	r2, #0
 8004f54:	602a      	str	r2, [r5, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f7fb fd36 	bl	80009c8 <_read>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_read_r+0x1e>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_read_r+0x1e>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	200002f8 	.word	0x200002f8

08004f6c <_fstat_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d07      	ldr	r5, [pc, #28]	; (8004f8c <_fstat_r+0x20>)
 8004f70:	2300      	movs	r3, #0
 8004f72:	4604      	mov	r4, r0
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	602b      	str	r3, [r5, #0]
 8004f7a:	f7fb fd4e 	bl	8000a1a <_fstat>
 8004f7e:	1c43      	adds	r3, r0, #1
 8004f80:	d102      	bne.n	8004f88 <_fstat_r+0x1c>
 8004f82:	682b      	ldr	r3, [r5, #0]
 8004f84:	b103      	cbz	r3, 8004f88 <_fstat_r+0x1c>
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	bd38      	pop	{r3, r4, r5, pc}
 8004f8a:	bf00      	nop
 8004f8c:	200002f8 	.word	0x200002f8

08004f90 <_isatty_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d06      	ldr	r5, [pc, #24]	; (8004fac <_isatty_r+0x1c>)
 8004f94:	2300      	movs	r3, #0
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f7fb fd4d 	bl	8000a3a <_isatty>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_isatty_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_isatty_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	200002f8 	.word	0x200002f8

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
