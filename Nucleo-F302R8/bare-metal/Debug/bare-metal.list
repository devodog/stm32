
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aecc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  0800b060  0800b060  0001b060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9c4  0800b9c4  00020934  2**0
                  CONTENTS
  4 .ARM          00000000  0800b9c4  0800b9c4  00020934  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b9c4  0800b9c4  00020934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9c4  0800b9c4  0001b9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9c8  0800b9c8  0001b9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000934  20000000  0800b9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000934  0800c300  00020934  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d70  0800c300  00020d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020934  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020964  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185ee  00000000  00000000  000209a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357e  00000000  00000000  00038f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003c518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001016  00000000  00000000  0003d998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0ef  00000000  00000000  0003e9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b291  00000000  00000000  0005da9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1de4  00000000  00000000  00078d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006930  00000000  00000000  0012ab14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00131444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000934 	.word	0x20000934
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b044 	.word	0x0800b044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000938 	.word	0x20000938
 80001cc:	0800b044 	.word	0x0800b044

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};
///////////////////////////////////////////////////
// Define cmd-line Command support functions below.
void LED(char* paramStr, int* paramValues) {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4939      	ldr	r1, [pc, #228]	; (8000cbc <LED+0xf4>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f008 fa74 	bl	80090c4 <strncmp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d111      	bne.n	8000c06 <LED+0x3e>
		printf("\r\nLED ON");
 8000be2:	4837      	ldr	r0, [pc, #220]	; (8000cc0 <LED+0xf8>)
 8000be4:	f008 f852 	bl	8008c8c <iprintf>
		paramValues[0] = 1;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
      led2 = ON;
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <LED+0xfc>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 8000c04:	e055      	b.n	8000cb2 <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 8000c06:	2203      	movs	r2, #3
 8000c08:	492f      	ldr	r1, [pc, #188]	; (8000cc8 <LED+0x100>)
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f008 fa5a 	bl	80090c4 <strncmp>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d111      	bne.n	8000c3a <LED+0x72>
		printf("\r\nLED OFF");
 8000c16:	482d      	ldr	r0, [pc, #180]	; (8000ccc <LED+0x104>)
 8000c18:	f008 f838 	bl	8008c8c <iprintf>
		paramValues[0] = 0;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <LED+0xfc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
}
 8000c38:	e03b      	b.n	8000cb2 <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	4924      	ldr	r1, [pc, #144]	; (8000cd0 <LED+0x108>)
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f008 fa40 	bl	80090c4 <strncmp>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d130      	bne.n	8000cac <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3306      	adds	r3, #6
 8000c4e:	4921      	ldr	r1, [pc, #132]	; (8000cd4 <LED+0x10c>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fabd 	bl	80001d0 <strcmp>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01c      	beq.n	8000c96 <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	1d9a      	adds	r2, r3, #6
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f103 0408 	add.w	r4, r3, #8
 8000c66:	4610      	mov	r0, r2
 8000c68:	f007 f996 	bl	8007f98 <atoi>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3306      	adds	r3, #6
 8000c74:	4618      	mov	r0, r3
 8000c76:	f007 f98f 	bl	8007f98 <atoi>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <LED+0x110>)
 8000c7e:	6013      	str	r3, [r2, #0]
         paramValues[0] = 0;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
         paramValues[1] = 0;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
         led2 = BLINKING;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <LED+0xfc>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e003      	b.n	8000c9e <LED+0xd6>
			paramValues[2] = 0;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3308      	adds	r3, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <LED+0x110>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LED+0x114>)
 8000ca6:	f007 fff1 	bl	8008c8c <iprintf>
}
 8000caa:	e002      	b.n	8000cb2 <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LED+0x118>)
 8000cae:	f007 ffed 	bl	8008c8c <iprintf>
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800b060 	.word	0x0800b060
 8000cc0:	0800b064 	.word	0x0800b064
 8000cc4:	20000c18 	.word	0x20000c18
 8000cc8:	0800b070 	.word	0x0800b070
 8000ccc:	0800b074 	.word	0x0800b074
 8000cd0:	0800b080 	.word	0x0800b080
 8000cd4:	0800b088 	.word	0x0800b088
 8000cd8:	20000954 	.word	0x20000954
 8000cdc:	0800b08c 	.word	0x0800b08c
 8000ce0:	0800b09c 	.word	0x0800b09c

08000ce4 <ADC>:

void ADC(char* paramStr, int* paramValues){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "RO", 2) == 0) {
 8000cee:	2202      	movs	r2, #2
 8000cf0:	491c      	ldr	r1, [pc, #112]	; (8000d64 <ADC+0x80>)
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f008 f9e6 	bl	80090c4 <strncmp>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d11b      	bne.n	8000d36 <ADC+0x52>
      printf("\r\nADC READ ONCE");
 8000cfe:	481a      	ldr	r0, [pc, #104]	; (8000d68 <ADC+0x84>)
 8000d00:	f007 ffc4 	bl	8008c8c <iprintf>
      // Start ADC Conversion
      HAL_ADC_Start(&hadc1);
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <ADC+0x88>)
 8000d06:	f001 fd5d 	bl	80027c4 <HAL_ADC_Start>
      HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4817      	ldr	r0, [pc, #92]	; (8000d6c <ADC+0x88>)
 8000d0e:	f001 fe92 	bl	8002a36 <HAL_ADCEx_Calibration_Start>

      // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	4815      	ldr	r0, [pc, #84]	; (8000d6c <ADC+0x88>)
 8000d16:	f001 fdc3 	bl	80028a0 <HAL_ADC_PollForConversion>
      // Read The ADC Conversion Result - using 3300 + 400 offset to
      // calculate the analog value
      printf("\r\nAA Battery voltage: %ld mV", 3700*HAL_ADC_GetValue(&hadc1)/4096);
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <ADC+0x88>)
 8000d1c:	f001 fe7e 	bl	8002a1c <HAL_ADC_GetValue>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f640 6274 	movw	r2, #3700	; 0xe74
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	0b1b      	lsrs	r3, r3, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <ADC+0x8c>)
 8000d30:	f007 ffac 	bl	8008c8c <iprintf>
            "AVRAGE (not implemented)\r\nPOLL (not implemented)\r\nHELP = this printout.");
   }
   else {
      printf("\r\nUNKNOWN ADC COMMAND");
   }
}
 8000d34:	e011      	b.n	8000d5a <ADC+0x76>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000d36:	2202      	movs	r2, #2
 8000d38:	490e      	ldr	r1, [pc, #56]	; (8000d74 <ADC+0x90>)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f008 f9c2 	bl	80090c4 <strncmp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d106      	bne.n	8000d54 <ADC+0x70>
      printf("\r\nThe ADC command takes the following parameters\r\n");
 8000d46:	480c      	ldr	r0, [pc, #48]	; (8000d78 <ADC+0x94>)
 8000d48:	f008 f806 	bl	8008d58 <puts>
      printf("RO = Read Once\r\n" \
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <ADC+0x98>)
 8000d4e:	f007 ff9d 	bl	8008c8c <iprintf>
}
 8000d52:	e002      	b.n	8000d5a <ADC+0x76>
      printf("\r\nUNKNOWN ADC COMMAND");
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <ADC+0x9c>)
 8000d56:	f007 ff99 	bl	8008c8c <iprintf>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	0800b0b4 	.word	0x0800b0b4
 8000d68:	0800b0b8 	.word	0x0800b0b8
 8000d6c:	20000958 	.word	0x20000958
 8000d70:	0800b0c8 	.word	0x0800b0c8
 8000d74:	0800b0e8 	.word	0x0800b0e8
 8000d78:	0800b0f0 	.word	0x0800b0f0
 8000d7c:	0800b124 	.word	0x0800b124
 8000d80:	0800b17c 	.word	0x0800b17c

08000d84 <TIM>:

void TIM(char* paramStr, int* paramValues) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "OS", 2) == 0) {      
 8000d8e:	2202      	movs	r2, #2
 8000d90:	493b      	ldr	r1, [pc, #236]	; (8000e80 <TIM+0xfc>)
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f008 f996 	bl	80090c4 <strncmp>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11b      	bne.n	8000dd6 <TIM+0x52>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[3]));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3303      	adds	r3, #3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 f8f8 	bl	8007f98 <atoi>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <TIM+0x100>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3303      	adds	r3, #3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 f8ef 	bl	8007f98 <atoi>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <TIM+0x100>)
 8000dc0:	60da      	str	r2, [r3, #12]
      printf("\r\nOne Shot timer with period: %d", (int)htim2.Init.Period);
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <TIM+0x100>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <TIM+0x104>)
 8000dca:	f007 ff5f 	bl	8008c8c <iprintf>
      // The timer2 struct is updated accordingly to the __HAL_TIM_SET_AUTORELOAD() function.
      
      HAL_TIM_Base_Start_IT(&htim2);
 8000dce:	482d      	ldr	r0, [pc, #180]	; (8000e84 <TIM+0x100>)
 8000dd0:	f005 fa9c 	bl	800630c <HAL_TIM_Base_Start_IT>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
   }
   else {
      printf("\r\nUNKNOWN TCD COMMAND");
   }
}
 8000dd4:	e04f      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "PERIOD", 6) == 0) {
 8000dd6:	2206      	movs	r2, #6
 8000dd8:	492c      	ldr	r1, [pc, #176]	; (8000e8c <TIM+0x108>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f008 f972 	bl	80090c4 <strncmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d118      	bne.n	8000e18 <TIM+0x94>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[7]));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3307      	adds	r3, #7
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 f8d4 	bl	8007f98 <atoi>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <TIM+0x100>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3307      	adds	r3, #7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 f8cb 	bl	8007f98 <atoi>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <TIM+0x100>)
 8000e08:	60da      	str	r2, [r3, #12]
      printf("\r\nAuto-reload period: %d", (int)htim2.Init.Period);
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <TIM+0x100>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481f      	ldr	r0, [pc, #124]	; (8000e90 <TIM+0x10c>)
 8000e12:	f007 ff3b 	bl	8008c8c <iprintf>
}
 8000e16:	e02e      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "REPEAT", 6) == 0) {
 8000e18:	2206      	movs	r2, #6
 8000e1a:	491e      	ldr	r1, [pc, #120]	; (8000e94 <TIM+0x110>)
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f008 f951 	bl	80090c4 <strncmp>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d117      	bne.n	8000e58 <TIM+0xd4>
      timRepeat = atoi(&paramStr[7]);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3307      	adds	r3, #7
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f8b3 	bl	8007f98 <atoi>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <TIM+0x114>)
 8000e36:	6013      	str	r3, [r2, #0]
      timRepeatCount = 0;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <TIM+0x118>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim2);
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <TIM+0x100>)
 8000e40:	f005 fa64 	bl	800630c <HAL_TIM_Base_Start_IT>
      timMode = REPEAT;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <TIM+0x11c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
      printf("\r\nAuto-reload repeat % times", timRepeat);
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <TIM+0x114>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <TIM+0x120>)
 8000e52:	f007 ff1b 	bl	8008c8c <iprintf>
}
 8000e56:	e00e      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <TIM+0x124>)
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f008 f931 	bl	80090c4 <strncmp>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d103      	bne.n	8000e70 <TIM+0xec>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
 8000e68:	4810      	ldr	r0, [pc, #64]	; (8000eac <TIM+0x128>)
 8000e6a:	f007 ff0f 	bl	8008c8c <iprintf>
}
 8000e6e:	e002      	b.n	8000e76 <TIM+0xf2>
      printf("\r\nUNKNOWN TCD COMMAND");
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <TIM+0x12c>)
 8000e72:	f007 ff0b 	bl	8008c8c <iprintf>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800b194 	.word	0x0800b194
 8000e84:	20000a54 	.word	0x20000a54
 8000e88:	0800b198 	.word	0x0800b198
 8000e8c:	0800b1bc 	.word	0x0800b1bc
 8000e90:	0800b1c4 	.word	0x0800b1c4
 8000e94:	0800b1e0 	.word	0x0800b1e0
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000950 	.word	0x20000950
 8000ea0:	20000c19 	.word	0x20000c19
 8000ea4:	0800b1e8 	.word	0x0800b1e8
 8000ea8:	0800b0e8 	.word	0x0800b0e8
 8000eac:	0800b208 	.word	0x0800b208
 8000eb0:	0800b24c 	.word	0x0800b24c

08000eb4 <SYS>:

void SYS(char* paramStr, int* paramValues){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "BN", 2) == 0) {
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4915      	ldr	r1, [pc, #84]	; (8000f18 <SYS+0x64>)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f008 f8fe 	bl	80090c4 <strncmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <SYS+0x26>
      printf("\r\nBuild no.:%d", BUILD);
 8000ece:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8000ed2:	4812      	ldr	r0, [pc, #72]	; (8000f1c <SYS+0x68>)
 8000ed4:	f007 feda 	bl	8008c8c <iprintf>
   }
   else if (strncmp(paramStr, "VER", 2) == 0) {
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
   }

}
 8000ed8:	e019      	b.n	8000f0e <SYS+0x5a>
   else if (strncmp(paramStr, "BD", 2) == 0) {
 8000eda:	2202      	movs	r2, #2
 8000edc:	4910      	ldr	r1, [pc, #64]	; (8000f20 <SYS+0x6c>)
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f008 f8f0 	bl	80090c4 <strncmp>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <SYS+0x40>
      printf("\r\nBuild date: %s", BUILD_DATE_AND_TIME);
 8000eea:	490e      	ldr	r1, [pc, #56]	; (8000f24 <SYS+0x70>)
 8000eec:	480e      	ldr	r0, [pc, #56]	; (8000f28 <SYS+0x74>)
 8000eee:	f007 fecd 	bl	8008c8c <iprintf>
}
 8000ef2:	e00c      	b.n	8000f0e <SYS+0x5a>
   else if (strncmp(paramStr, "VER", 2) == 0) {
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <SYS+0x78>)
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f008 f8e3 	bl	80090c4 <strncmp>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <SYS+0x5a>
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <SYS+0x7c>)
 8000f0a:	f007 febf 	bl	8008c8c <iprintf>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	0800b264 	.word	0x0800b264
 8000f1c:	0800b268 	.word	0x0800b268
 8000f20:	0800b278 	.word	0x0800b278
 8000f24:	0800b27c 	.word	0x0800b27c
 8000f28:	0800b298 	.word	0x0800b298
 8000f2c:	0800b2ac 	.word	0x0800b2ac
 8000f30:	0800b2b0 	.word	0x0800b2b0

08000f34 <CO2>:

void CO2(char* paramStr, int* paramValues) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "START", 5) == 0) {
 8000f3e:	2205      	movs	r2, #5
 8000f40:	4945      	ldr	r1, [pc, #276]	; (8001058 <CO2+0x124>)
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f008 f8be 	bl	80090c4 <strncmp>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d103      	bne.n	8000f56 <CO2+0x22>
      ContinuousMeasurement(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 fe58 	bl	8001c04 <ContinuousMeasurement>
   *************/

   else {
      printf("\r\nUNKNOWN TCD COMMAND");
   }
}
 8000f54:	e07c      	b.n	8001050 <CO2+0x11c>
   else if (strncmp(paramStr, "STOP", 4) == 0) {
 8000f56:	2204      	movs	r2, #4
 8000f58:	4940      	ldr	r1, [pc, #256]	; (800105c <CO2+0x128>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f008 f8b2 	bl	80090c4 <strncmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <CO2+0x38>
      StopContinuousMeasurement();
 8000f66:	f000 fe83 	bl	8001c70 <StopContinuousMeasurement>
}
 8000f6a:	e071      	b.n	8001050 <CO2+0x11c>
   else if (strncmp(paramStr, "VERSION", 7) == 0) {
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	493c      	ldr	r1, [pc, #240]	; (8001060 <CO2+0x12c>)
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f008 f8a7 	bl	80090c4 <strncmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <CO2+0x4e>
      ReadFirmwareVersion();
 8000f7c:	f000 fe0a 	bl	8001b94 <ReadFirmwareVersion>
}
 8000f80:	e066      	b.n	8001050 <CO2+0x11c>
   else if (strncmp(paramStr, "INTERVAL", sizeof("INTERVAL")) == 0){
 8000f82:	4938      	ldr	r1, [pc, #224]	; (8001064 <CO2+0x130>)
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff f923 	bl	80001d0 <strcmp>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <CO2+0x64>
      SetMeasurementInterval(2); // will probably only work with 2 sec interval since the crc is pre-calculated for this value.
 8000f90:	2002      	movs	r0, #2
 8000f92:	f000 fe91 	bl	8001cb8 <SetMeasurementInterval>
}
 8000f96:	e05b      	b.n	8001050 <CO2+0x11c>
   else if (strncmp(paramStr, "READ", 4) == 0) {
 8000f98:	2204      	movs	r2, #4
 8000f9a:	4933      	ldr	r1, [pc, #204]	; (8001068 <CO2+0x134>)
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f008 f891 	bl	80090c4 <strncmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d144      	bne.n	8001032 <CO2+0xfe>
      if (1 == ReadMeasurement(data, sizeof(data))) {
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2114      	movs	r1, #20
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 feb8 	bl	8001d24 <ReadMeasurement>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d137      	bne.n	800102a <CO2+0xf6>
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	061a      	lsls	r2, r3, #24
         (((unsigned int)data[1]) << 16) |
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	041b      	lsls	r3, r3, #16
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 8000fc2:	431a      	orrs	r2, r3
         (((unsigned int)data[3]) << 8) |
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	021b      	lsls	r3, r3, #8
         (((unsigned int)data[1]) << 16) |
 8000fc8:	4313      	orrs	r3, r2
         ((unsigned int)data[4]));
 8000fca:	7c3a      	ldrb	r2, [r7, #16]
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
         co2Concentration = *(float*)&tempU32; // co2Concentration
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 8000fd8:	7cbb      	ldrb	r3, [r7, #18]
 8000fda:	061a      	lsls	r2, r3, #24
         (((unsigned int)data[7]) << 16) |
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	041b      	lsls	r3, r3, #16
         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 8000fe0:	431a      	orrs	r2, r3
         (((unsigned int)data[9]) << 8) |
 8000fe2:	7d7b      	ldrb	r3, [r7, #21]
 8000fe4:	021b      	lsls	r3, r3, #8
         (((unsigned int)data[7]) << 16) |
 8000fe6:	4313      	orrs	r3, r2
         ((unsigned int)data[10]));
 8000fe8:	7dba      	ldrb	r2, [r7, #22]
         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 8000fea:	4313      	orrs	r3, r2
 8000fec:	60bb      	str	r3, [r7, #8]
         temperature = *(float*)&tempU32;
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	623b      	str	r3, [r7, #32]
         printf("\r\nco2Concentration = %f", co2Concentration);
 8000ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ff8:	f7ff fab6 	bl	8000568 <__aeabi_f2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <CO2+0x138>)
 8001002:	f007 fe43 	bl	8008c8c <iprintf>
         printf("\r\ntemperature = %f", temperature);
 8001006:	6a38      	ldr	r0, [r7, #32]
 8001008:	f7ff faae 	bl	8000568 <__aeabi_f2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <CO2+0x13c>)
 8001012:	f007 fe3b 	bl	8008c8c <iprintf>
         sprintf((char*) paramValues, "co2 Concentration = %f", co2Concentration);
 8001016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001018:	f7ff faa6 	bl	8000568 <__aeabi_f2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4914      	ldr	r1, [pc, #80]	; (8001074 <CO2+0x140>)
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f007 ff4e 	bl	8008ec4 <siprintf>
}
 8001028:	e012      	b.n	8001050 <CO2+0x11c>
         printf("\r\nReading sensor-data failed!");
 800102a:	4813      	ldr	r0, [pc, #76]	; (8001078 <CO2+0x144>)
 800102c:	f007 fe2e 	bl	8008c8c <iprintf>
}
 8001030:	e00e      	b.n	8001050 <CO2+0x11c>
   else if (strncmp(paramStr, "HELP", 4) == 0){
 8001032:	2204      	movs	r2, #4
 8001034:	4911      	ldr	r1, [pc, #68]	; (800107c <CO2+0x148>)
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f008 f844 	bl	80090c4 <strncmp>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d103      	bne.n	800104a <CO2+0x116>
      printf("\r\nSome help text for the CO2 Measurement command-set here...");
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <CO2+0x14c>)
 8001044:	f007 fe22 	bl	8008c8c <iprintf>
}
 8001048:	e002      	b.n	8001050 <CO2+0x11c>
      printf("\r\nUNKNOWN TCD COMMAND");
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <CO2+0x150>)
 800104c:	f007 fe1e 	bl	8008c8c <iprintf>
}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	0800b2c0 	.word	0x0800b2c0
 800105c:	0800b2c8 	.word	0x0800b2c8
 8001060:	0800b2d0 	.word	0x0800b2d0
 8001064:	0800b2d8 	.word	0x0800b2d8
 8001068:	0800b2e4 	.word	0x0800b2e4
 800106c:	0800b2ec 	.word	0x0800b2ec
 8001070:	0800b304 	.word	0x0800b304
 8001074:	0800b318 	.word	0x0800b318
 8001078:	0800b330 	.word	0x0800b330
 800107c:	0800b0e8 	.word	0x0800b0e8
 8001080:	0800b350 	.word	0x0800b350
 8001084:	0800b24c 	.word	0x0800b24c

08001088 <promt>:
  {"TCD", 4, 7, {"OS", "PERIOD", "REPEAT", "HELP"}, {0, 500, 10, 0}, &TIM},
  {"CO2", 4, 7, {"READ", "VERSION", "INTERVAL", "HELP"}, {0, 1000, 60, 0}, &CO2},
  {"SYS", 3, 4, {"BN", "BD", "VER"}, {0, 0, 0}, &SYS}
};

void promt() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <promt+0x1c>)
 800108e:	f007 fdfd 	bl	8008c8c <iprintf>
   fflush(stdout);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <promt+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4618      	mov	r0, r3
 800109a:	f007 fd21 	bl	8008ae0 <fflush>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800b390 	.word	0x0800b390
 80010a8:	200007c4 	.word	0x200007c4

080010ac <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
   int i = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 80010ba:	2305      	movs	r3, #5
 80010bc:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 80010be:	e03d      	b.n	800113c <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	22ac      	movs	r2, #172	; 0xac
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <executeCmd+0xbc>)
 80010ca:	189c      	adds	r4, r3, r2
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	22ac      	movs	r2, #172	; 0xac
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	4a24      	ldr	r2, [pc, #144]	; (8001168 <executeCmd+0xbc>)
 80010d6:	4413      	add	r3, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f8d9 	bl	8000290 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4620      	mov	r0, r4
 80010e6:	f007 ffed 	bl	80090c4 <strncmp>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d122      	bne.n	8001136 <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 80010f0:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <executeCmd+0xbc>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	21ac      	movs	r1, #172	; 0xac
 80010f6:	fb01 f303 	mul.w	r3, r1, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	33a8      	adds	r3, #168	; 0xa8
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	22ac      	movs	r2, #172	; 0xac
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	4a17      	ldr	r2, [pc, #92]	; (8001168 <executeCmd+0xbc>)
 800110a:	4413      	add	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f8bf 	bl	8000290 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	3301      	adds	r3, #1
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	441a      	add	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	21ac      	movs	r1, #172	; 0xac
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	3380      	adds	r3, #128	; 0x80
 8001124:	4910      	ldr	r1, [pc, #64]	; (8001168 <executeCmd+0xbc>)
 8001126:	440b      	add	r3, r1
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	47a0      	blx	r4
       /*** for test only...
 		 printf("\r\nparamValues[0]: %d, paramValues[1]: %d, paramValues[2]: %d",
               mcuCmds[i].paramValues[0],mcuCmds[i].paramValues[1],mcuCmds[i].paramValues[2]);
               ***/
 		 promt();
 800112e:	f7ff ffab 	bl	8001088 <promt>
     	 return 0;
 8001132:	2300      	movs	r3, #0
 8001134:	e014      	b.n	8001160 <executeCmd+0xb4>
   for (; i < numberOfCommands; i++) {
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3301      	adds	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8bd      	bhi.n	80010c0 <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	429a      	cmp	r2, r3
 800114a:	d808      	bhi.n	800115e <executeCmd+0xb2>
      printf("\r\nThe command: %s[%d], is not recognized", termInput, numberOfCommands);
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4806      	ldr	r0, [pc, #24]	; (800116c <executeCmd+0xc0>)
 8001152:	f007 fd9b 	bl	8008c8c <iprintf>
      promt();
 8001156:	f7ff ff97 	bl	8001088 <promt>
      return -1;
 800115a:	23ff      	movs	r3, #255	; 0xff
 800115c:	e000      	b.n	8001160 <executeCmd+0xb4>
   }
   else {
	  return -2;
 800115e:	23fe      	movs	r3, #254	; 0xfe
   }
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	20000004 	.word	0x20000004
 800116c:	0800b39c 	.word	0x0800b39c

08001170 <load4BitBus>:
   // 00: No pull-up, pull-down
   GPIOB->PUPDR |= 0b0000000000000000;
  return 0;
}

void load4BitBus(uint8_t bits) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
   // B7 B6 B5 B4
   GPIOB->ODR &= ~0xf0; //
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <load4BitBus+0x34>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <load4BitBus+0x34>)
 8001180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001184:	6153      	str	r3, [r2, #20]
   GPIOB->ODR |= bits & 0xf0;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <load4BitBus+0x34>)
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001190:	4904      	ldr	r1, [pc, #16]	; (80011a4 <load4BitBus+0x34>)
 8001192:	4313      	orrs	r3, r2
 8001194:	614b      	str	r3, [r1, #20]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	48000400 	.word	0x48000400

080011a8 <pulseEnable>:

void pulseEnable() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
   GPIOB->ODR &= ~0x2; // Enable 0
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <pulseEnable+0x38>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <pulseEnable+0x38>)
 80011b2:	f023 0302 	bic.w	r3, r3, #2
 80011b6:	6153      	str	r3, [r2, #20]
   GPIOB->ODR |= 0x2; // Enable 1
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <pulseEnable+0x38>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <pulseEnable+0x38>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]
   delay_us(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f000 f969 	bl	800149c <delay_us>
   GPIOB->ODR &= ~0x2; // Enable 0
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <pulseEnable+0x38>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <pulseEnable+0x38>)
 80011d0:	f023 0302 	bic.w	r3, r3, #2
 80011d4:	6153      	str	r3, [r2, #20]
   delay_us(100);
 80011d6:	2064      	movs	r0, #100	; 0x64
 80011d8:	f000 f960 	bl	800149c <delay_us>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	48000400 	.word	0x48000400

080011e4 <lcd4wireHwInit>:
 * HD44780 display controller.
 * It will load the instructions according to the recommended initialization
 * sequence for the HD44780 display controller's.
 *
 */
void lcd4wireHwInit() {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
   HAL_Delay(50); // Wait 50 ms after power is applied - could reduce this time
 80011e8:	2032      	movs	r0, #50	; 0x32
 80011ea:	f001 f941 	bl	8002470 <HAL_Delay>
   // Clear the bits in the GPIO Port B that is used for communication with the
   // LCD, alike Hitachi HD44780 display controller.
   GPIOB->ODR &= ~0xf3; // RS = 0 (PB6) & EN = 0 (PB7) & D4-D7 = 0 (PB0-PB3)
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <lcd4wireHwInit+0x60>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <lcd4wireHwInit+0x60>)
 80011f4:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80011f8:	6153      	str	r3, [r2, #20]

   load4BitBus(0x30); // Set D4-D7 = 0b0011xxxx (PB4-PB7)
 80011fa:	2030      	movs	r0, #48	; 0x30
 80011fc:	f7ff ffb8 	bl	8001170 <load4BitBus>
   pulseEnable();
 8001200:	f7ff ffd2 	bl	80011a8 <pulseEnable>
   delay_us(4500);
 8001204:	f241 1094 	movw	r0, #4500	; 0x1194
 8001208:	f000 f948 	bl	800149c <delay_us>

   load4BitBus(0x30); // Set D4-D7 = 0b0011xxxx (PB4-PB7)
 800120c:	2030      	movs	r0, #48	; 0x30
 800120e:	f7ff ffaf 	bl	8001170 <load4BitBus>
   pulseEnable();
 8001212:	f7ff ffc9 	bl	80011a8 <pulseEnable>
   delay_us(4500);
 8001216:	f241 1094 	movw	r0, #4500	; 0x1194
 800121a:	f000 f93f 	bl	800149c <delay_us>

   load4BitBus(0x30); // Set D4-D7 = 0b0011xxxx (PB4-PB7)
 800121e:	2030      	movs	r0, #48	; 0x30
 8001220:	f7ff ffa6 	bl	8001170 <load4BitBus>
   pulseEnable();
 8001224:	f7ff ffc0 	bl	80011a8 <pulseEnable>
   delay_us(150);
 8001228:	2096      	movs	r0, #150	; 0x96
 800122a:	f000 f937 	bl	800149c <delay_us>

   load4BitBus(0x20); // Set D4-D7 = 0b0010xxxx (PB4-PB7)
 800122e:	2020      	movs	r0, #32
 8001230:	f7ff ff9e 	bl	8001170 <load4BitBus>
   pulseEnable();
 8001234:	f7ff ffb8 	bl	80011a8 <pulseEnable>
   delay_us(150);
 8001238:	2096      	movs	r0, #150	; 0x96
 800123a:	f000 f92f 	bl	800149c <delay_us>
   /****
   load4BitBus(0x20); // Set D4-D7 = 0b0010 (PB4-PB7)
   pulseEnable();
   delay_us(150);
   ***/
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	48000400 	.word	0x48000400

08001248 <loadLcdRegister>:

void loadLcdRegister(uint8_t regValue, uint8_t regType) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
   // Loads a 8-bit value into either a Instruction register or a Data register
   // depending on the regType.
   // regType 0 = Instruction register
   // regType 1 = Data register
   if (regType == 1) {
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d106      	bne.n	800126c <loadLcdRegister+0x24>
      GPIOB->ODR |= 0x1;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <loadLcdRegister+0x54>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <loadLcdRegister+0x54>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	e005      	b.n	8001278 <loadLcdRegister+0x30>
      //printf("\r\nD=0x%x", (unsigned int)GPIOB->ODR);
   }
   else
      GPIOB->ODR &= ~0x1;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <loadLcdRegister+0x54>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <loadLcdRegister+0x54>)
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	6153      	str	r3, [r2, #20]

   load4BitBus(regValue);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff78 	bl	8001170 <load4BitBus>
   pulseEnable();
 8001280:	f7ff ff92 	bl	80011a8 <pulseEnable>
   load4BitBus((regValue << 4) & 0xf0);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff70 	bl	8001170 <load4BitBus>
   pulseEnable();
 8001290:	f7ff ff8a 	bl	80011a8 <pulseEnable>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	48000400 	.word	0x48000400

080012a0 <lcdConfig>:

int lcdConfig() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
   lcd4wireHwInit();
 80012a4:	f7ff ff9e 	bl	80011e4 <lcd4wireHwInit>
   loadLcdRegister(FUNCTION_SET | FUNCTION_4BIT_BUS | FUNCTION_2LINE_DISPLAY, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2028      	movs	r0, #40	; 0x28
 80012ac:	f7ff ffcc 	bl	8001248 <loadLcdRegister>
   //loadLcdRegister(0x28);

   loadLcdRegister(DISPLAY_SETUP | DISPLAY_SETUP_ON, 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	200c      	movs	r0, #12
 80012b4:	f7ff ffc8 	bl	8001248 <loadLcdRegister>
   //loadLcdRegister(0x0c);

   loadLcdRegister(ENTRY_MODE | ENTRY_MODE_INCR, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2006      	movs	r0, #6
 80012bc:	f7ff ffc4 	bl	8001248 <loadLcdRegister>
   //loadLcdRegister(0x06);
   return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <lcdInit>:

void lcdInit() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
   //lcdInterfaceInit(); // the bus-interface is configured in the ioc gui.
   lcdConfig();
 80012ce:	f7ff ffe7 	bl	80012a0 <lcdConfig>

   // Write a character to the display?
   uint8_t txt[] = {'N', 'U', 'C', 'L', 'E', 'O', ' ', 'b', 'a', 'r', 'e', '-'};
 80012d2:	4a24      	ldr	r2, [pc, #144]	; (8001364 <lcdInit+0x9c>)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80012da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   uint8_t txt2[] = {'m', 'e', 't', 'a', 'l', ' ', '2', '0', '2', '4'};
 80012de:	4a22      	ldr	r2, [pc, #136]	; (8001368 <lcdInit+0xa0>)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012e4:	c303      	stmia	r3!, {r0, r1}
 80012e6:	801a      	strh	r2, [r3, #0]
   for (int i = 0; i < sizeof(txt); i++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
 80012ec:	e00e      	b.n	800130c <lcdInit+0x44>
      loadLcdRegister(txt[i], 1);
 80012ee:	f107 0210 	add.w	r2, r7, #16
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffa4 	bl	8001248 <loadLcdRegister>
      HAL_Delay(1);
 8001300:	2001      	movs	r0, #1
 8001302:	f001 f8b5 	bl	8002470 <HAL_Delay>
   for (int i = 0; i < sizeof(txt); i++) {
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	3301      	adds	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	2b0b      	cmp	r3, #11
 8001310:	d9ed      	bls.n	80012ee <lcdInit+0x26>
   // In a 2-line display, the cursor moves to the second line when it passes
   // the 40th digit of the first line. Note that the first and second line
   // displays will shift at the same time.
   // ref. https://cdn-shop.adafruit.com/datasheets/HD44780.pdf
   //
   for (int i = 0; i < (40-sizeof(txt)); i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	e009      	b.n	800132c <lcdInit+0x64>
      loadLcdRegister(0x20, 1);
 8001318:	2101      	movs	r1, #1
 800131a:	2020      	movs	r0, #32
 800131c:	f7ff ff94 	bl	8001248 <loadLcdRegister>
      HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f001 f8a5 	bl	8002470 <HAL_Delay>
   for (int i = 0; i < (40-sizeof(txt)); i++) {
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	3301      	adds	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b1b      	cmp	r3, #27
 8001330:	d9f2      	bls.n	8001318 <lcdInit+0x50>
   }
   // next line...
   for (int i = 0; i < sizeof(txt2); i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	e00d      	b.n	8001354 <lcdInit+0x8c>
      loadLcdRegister(txt2[i], 1);
 8001338:	1d3a      	adds	r2, r7, #4
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff80 	bl	8001248 <loadLcdRegister>
      HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f001 f891 	bl	8002470 <HAL_Delay>
   for (int i = 0; i < sizeof(txt2); i++) {
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b09      	cmp	r3, #9
 8001358:	d9ee      	bls.n	8001338 <lcdInit+0x70>
   }
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0800b3c8 	.word	0x0800b3c8
 8001368:	0800b3d4 	.word	0x0800b3d4

0800136c <_write>:
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	b29a      	uxth	r2, r3
 800137c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <_write+0x28>)
 8001384:	f005 fc30 	bl	8006be8 <HAL_UART_Transmit>
	return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000b38 	.word	0x20000b38

08001398 <HAL_UART_RxCpltCallback>:
uint8_t relHours = 0;
uint8_t relMinutes = 0;
uint8_t relSeconds = 0;
uint8_t relHundreds = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_UART_RxCpltCallback+0x90>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b0d      	cmp	r3, #13
 80013a6:	d126      	bne.n	80013f6 <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_UART_RxCpltCallback+0x94>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd1a      	ble.n	80013e6 <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	481e      	ldr	r0, [pc, #120]	; (8001430 <HAL_UART_RxCpltCallback+0x98>)
 80013b8:	f002 fcf0 	bl	8003d9c <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_UART_RxCpltCallback+0x94>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <HAL_UART_RxCpltCallback+0x9c>)
 80013c4:	f7ff fe72 	bl	80010ac <executeCmd>
			bytesReceived = 0;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_UART_RxCpltCallback+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80013ce:	2250      	movs	r2, #80	; 0x50
 80013d0:	2100      	movs	r1, #0
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <HAL_UART_RxCpltCallback+0x9c>)
 80013d4:	f007 fe6e 	bl	80090b4 <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4814      	ldr	r0, [pc, #80]	; (8001430 <HAL_UART_RxCpltCallback+0x98>)
 80013e0:	f002 fcdc 	bl	8003d9c <HAL_GPIO_WritePin>
 80013e4:	e001      	b.n	80013ea <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 80013e6:	f7ff fe4f 	bl	8001088 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80013ea:	2201      	movs	r2, #1
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <HAL_UART_RxCpltCallback+0x90>)
 80013ee:	4812      	ldr	r0, [pc, #72]	; (8001438 <HAL_UART_RxCpltCallback+0xa0>)
 80013f0:	f005 fc84 	bl	8006cfc <HAL_UART_Receive_IT>
		return;
 80013f4:	e015      	b.n	8001422 <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 80013f6:	2364      	movs	r3, #100	; 0x64
 80013f8:	2201      	movs	r2, #1
 80013fa:	490b      	ldr	r1, [pc, #44]	; (8001428 <HAL_UART_RxCpltCallback+0x90>)
 80013fc:	480e      	ldr	r0, [pc, #56]	; (8001438 <HAL_UART_RxCpltCallback+0xa0>)
 80013fe:	f005 fbf3 	bl	8006be8 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_UART_RxCpltCallback+0x94>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_UART_RxCpltCallback+0x90>)
 8001408:	7811      	ldrb	r1, [r2, #0]
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_UART_RxCpltCallback+0x9c>)
 800140c:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_UART_RxCpltCallback+0x94>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_UART_RxCpltCallback+0x94>)
 8001416:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8001418:	2201      	movs	r2, #1
 800141a:	4903      	ldr	r1, [pc, #12]	; (8001428 <HAL_UART_RxCpltCallback+0x90>)
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <HAL_UART_RxCpltCallback+0xa0>)
 800141e:	f005 fc6d 	bl	8006cfc <HAL_UART_Receive_IT>
}
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000bc0 	.word	0x20000bc0
 800142c:	20000c14 	.word	0x20000c14
 8001430:	48000400 	.word	0x48000400
 8001434:	20000bc4 	.word	0x20000bc4
 8001438:	20000b38 	.word	0x20000b38

0800143c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
   if (timMode == ONE_SHOT) {
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d108      	bne.n	800145e <HAL_TIM_PeriodElapsedCallback+0x22>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800144c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001452:	f002 fcbb 	bl	8003dcc <HAL_GPIO_TogglePin>
      HAL_TIM_Base_Stop_IT(&htim2);
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001458:	f004 ffac 	bl	80063b4 <HAL_TIM_Base_Stop_IT>
         HAL_TIM_Base_Stop_IT(&htim2);
      }
   }
   //printf("\r\nHAL_TIM_PeriodElapsedCallback");
   //promt();
}
 800145c:	e010      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x44>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	480a      	ldr	r0, [pc, #40]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001464:	f002 fcb2 	bl	8003dcc <HAL_GPIO_TogglePin>
      if (timRepeatCount++ > timRepeat) {
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	4909      	ldr	r1, [pc, #36]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001470:	600a      	str	r2, [r1, #0]
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4293      	cmp	r3, r2
 8001478:	dd02      	ble.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x44>
         HAL_TIM_Base_Stop_IT(&htim2);
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800147c:	f004 ff9a 	bl	80063b4 <HAL_TIM_Base_Stop_IT>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000c19 	.word	0x20000c19
 800148c:	48000400 	.word	0x48000400
 8001490:	20000a54 	.word	0x20000a54
 8001494:	20000950 	.word	0x20000950
 8001498:	20000000 	.word	0x20000000

0800149c <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
   htim15.Instance->CNT = 0;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <delay_us+0x30>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
   while (htim15.Instance->CNT < au16_us);
 80014ae:	bf00      	nop
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <delay_us+0x30>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	88fa      	ldrh	r2, [r7, #6]
 80014b8:	b292      	uxth	r2, r2
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d3f8      	bcc.n	80014b0 <delay_us+0x14>
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	20000aec 	.word	0x20000aec

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  //uint8_t values[32];
  setvbuf(stdout, NULL, _IONBF, 0);
 80014d6:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <main+0xf8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6898      	ldr	r0, [r3, #8]
 80014dc:	2300      	movs	r3, #0
 80014de:	2202      	movs	r2, #2
 80014e0:	2100      	movs	r1, #0
 80014e2:	f007 fc41 	bl	8008d68 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f000 ff5d 	bl	80023a4 <HAL_Init>
  /* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ea:	f000 f885 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ee:	f000 fadf 	bl	8001ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f2:	f000 fabf 	bl	8001a74 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014f6:	f000 fa8d 	bl	8001a14 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014fa:	f000 f8d3 	bl	80016a4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014fe:	f000 f9b1 	bl	8001864 <MX_TIM2_Init>
  MX_I2C3_Init();
 8001502:	f000 f96f 	bl	80017e4 <MX_I2C3_Init>
  MX_DAC_Init();
 8001506:	f000 f943 	bl	8001790 <MX_DAC_Init>
  MX_TIM6_Init();
 800150a:	f000 f9fb 	bl	8001904 <MX_TIM6_Init>
  MX_TIM15_Init();
 800150e:	f000 fa2f 	bl	8001970 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8001512:	2201      	movs	r2, #1
 8001514:	492d      	ldr	r1, [pc, #180]	; (80015cc <main+0xfc>)
 8001516:	482e      	ldr	r0, [pc, #184]	; (80015d0 <main+0x100>)
 8001518:	f005 fbf0 	bl	8006cfc <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim15);
 800151c:	482d      	ldr	r0, [pc, #180]	; (80015d4 <main+0x104>)
 800151e:	f004 fea9 	bl	8006274 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim6);
  //HAL_DMA_Start_IT(&hdma_dac_ch1, (uint32_t)sinData, (uint32_t)&DAC1->DHR8R1, 256);
  //htim6.Instance->ARR = 32000;
  //HAL_DAC_Start(&hdac, DAC_CHANNEL_1);

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sinData, 256, DAC_ALIGN_8B_R);
 8001522:	2308      	movs	r3, #8
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152a:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <main+0x108>)
 800152c:	2100      	movs	r1, #0
 800152e:	482b      	ldr	r0, [pc, #172]	; (80015dc <main+0x10c>)
 8001530:	f001 ffc2 	bl	80034b8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8001534:	482a      	ldr	r0, [pc, #168]	; (80015e0 <main+0x110>)
 8001536:	f004 fe9d 	bl	8006274 <HAL_TIM_Base_Start>

  uint8_t ledState = OFF;
 800153a:	2300      	movs	r3, #0
 800153c:	71fb      	strb	r3, [r7, #7]
  printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 800153e:	4829      	ldr	r0, [pc, #164]	; (80015e4 <main+0x114>)
 8001540:	f007 fba4 	bl	8008c8c <iprintf>
  printf("\r\nBuild No. %d", BUILD);
 8001544:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001548:	4827      	ldr	r0, [pc, #156]	; (80015e8 <main+0x118>)
 800154a:	f007 fb9f 	bl	8008c8c <iprintf>
  // Check if a I2C device is connected.
  //ReadFirmwareVersion(); // NOT OBVIOUS THAT THIS IS A I2C SENSOR....

  lcdInit();
 800154e:	f7ff febb 	bl	80012c8 <lcdInit>
  promt();
 8001552:	f7ff fd99 	bl	8001088 <promt>
  HAL_Delay(2000);
 8001556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800155a:	f000 ff89 	bl	8002470 <HAL_Delay>
  //uint32_t DAC_OUT[4] = {0, 64, 128, 250};
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <main+0x11c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	429a      	cmp	r2, r3
 8001566:	d013      	beq.n	8001590 <main+0xc0>
			ledState = led2;
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <main+0x11c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	71fb      	strb	r3, [r7, #7]
			if (led2 == ON) {
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <main+0x11c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d106      	bne.n	8001584 <main+0xb4>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157c:	481c      	ldr	r0, [pc, #112]	; (80015f0 <main+0x120>)
 800157e:	f002 fc0d 	bl	8003d9c <HAL_GPIO_WritePin>
 8001582:	e005      	b.n	8001590 <main+0xc0>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158a:	4819      	ldr	r0, [pc, #100]	; (80015f0 <main+0x120>)
 800158c:	f002 fc06 	bl	8003d9c <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <main+0x11c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d1e2      	bne.n	800155e <main+0x8e>
		   if (msValue > 0) {
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <main+0x124>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd0a      	ble.n	80015b6 <main+0xe6>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a4:	4812      	ldr	r0, [pc, #72]	; (80015f0 <main+0x120>)
 80015a6:	f002 fc11 	bl	8003dcc <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <main+0x124>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 ff5e 	bl	8002470 <HAL_Delay>
 80015b4:	e7d3      	b.n	800155e <main+0x8e>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <main+0x120>)
 80015be:	f002 fbed 	bl	8003d9c <HAL_GPIO_WritePin>
			   ledState = OFF;
 80015c2:	2300      	movs	r3, #0
 80015c4:	71fb      	strb	r3, [r7, #7]
		if (led2 != ledState) {
 80015c6:	e7ca      	b.n	800155e <main+0x8e>
 80015c8:	200007c4 	.word	0x200007c4
 80015cc:	20000bc0 	.word	0x20000bc0
 80015d0:	20000b38 	.word	0x20000b38
 80015d4:	20000aec 	.word	0x20000aec
 80015d8:	20000360 	.word	0x20000360
 80015dc:	200009a8 	.word	0x200009a8
 80015e0:	20000aa0 	.word	0x20000aa0
 80015e4:	0800b408 	.word	0x0800b408
 80015e8:	0800b444 	.word	0x0800b444
 80015ec:	20000c18 	.word	0x20000c18
 80015f0:	48000400 	.word	0x48000400
 80015f4:	20000954 	.word	0x20000954

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b09c      	sub	sp, #112	; 0x70
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001602:	2228      	movs	r2, #40	; 0x28
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f007 fd54 	bl	80090b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2234      	movs	r2, #52	; 0x34
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f007 fd46 	bl	80090b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001628:	2302      	movs	r3, #2
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162c:	2301      	movs	r3, #1
 800162e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001630:	2310      	movs	r3, #16
 8001632:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001634:	2300      	movs	r3, #0
 8001636:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800163c:	4618      	mov	r0, r3
 800163e:	f003 f9bb 	bl	80049b8 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001648:	f000 fa9e 	bl	8001b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001650:	2300      	movs	r3, #0
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f004 f9e4 	bl	8005a34 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001672:	f000 fa89 	bl	8001b88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C3
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <SystemClock_Config+0xa8>)
 8001678:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM15;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fc09 	bl	8005ea0 <HAL_RCCEx_PeriphCLKConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001694:	f000 fa78 	bl	8001b88 <Error_Handler>
  }
}
 8001698:	bf00      	nop
 800169a:	3770      	adds	r7, #112	; 0x70
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	00048001 	.word	0x00048001

080016a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
 80016b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <MX_ADC1_Init+0xe8>)
 80016bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016c2:	4b32      	ldr	r3, [pc, #200]	; (800178c <MX_ADC1_Init+0xe8>)
 80016c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <MX_ADC1_Init+0xe8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <MX_ADC1_Init+0xe8>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <MX_ADC1_Init+0xe8>)
 80016d8:	2201      	movs	r2, #1
 80016da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <MX_ADC1_Init+0xe8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <MX_ADC1_Init+0xe8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <MX_ADC1_Init+0xe8>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <MX_ADC1_Init+0xe8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <MX_ADC1_Init+0xe8>)
 80016f8:	2203      	movs	r2, #3
 80016fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <MX_ADC1_Init+0xe8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <MX_ADC1_Init+0xe8>)
 8001706:	2208      	movs	r2, #8
 8001708:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <MX_ADC1_Init+0xe8>)
 800170c:	2200      	movs	r2, #0
 800170e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <MX_ADC1_Init+0xe8>)
 8001712:	2200      	movs	r2, #0
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001716:	481d      	ldr	r0, [pc, #116]	; (800178c <MX_ADC1_Init+0xe8>)
 8001718:	f000 fece 	bl	80024b8 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8001722:	f000 fa31 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001726:	230f      	movs	r3, #15
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173e:	463b      	mov	r3, r7
 8001740:	4619      	mov	r1, r3
 8001742:	4812      	ldr	r0, [pc, #72]	; (800178c <MX_ADC1_Init+0xe8>)
 8001744:	f001 f9ea 	bl	8002b1c <HAL_ADC_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800174e:	f000 fa1b 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001752:	2302      	movs	r3, #2
 8001754:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001756:	463b      	mov	r3, r7
 8001758:	4619      	mov	r1, r3
 800175a:	480c      	ldr	r0, [pc, #48]	; (800178c <MX_ADC1_Init+0xe8>)
 800175c:	f001 f9de 	bl	8002b1c <HAL_ADC_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001766:	f000 fa0f 	bl	8001b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800176a:	2303      	movs	r3, #3
 800176c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_ADC1_Init+0xe8>)
 8001774:	f001 f9d2 	bl	8002b1c <HAL_ADC_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800177e:	f000 fa03 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000958 	.word	0x20000958

08001790 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_DAC_Init+0x4c>)
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <MX_DAC_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80017a6:	480d      	ldr	r0, [pc, #52]	; (80017dc <MX_DAC_Init+0x4c>)
 80017a8:	f001 fe45 	bl	8003436 <HAL_DAC_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80017b2:	f000 f9e9 	bl	8001b88 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80017b6:	2304      	movs	r3, #4
 80017b8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_DAC_Init+0x4c>)
 80017c6:	f001 fee5 	bl	8003594 <HAL_DAC_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80017d0:	f000 f9da 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200009a8 	.word	0x200009a8
 80017e0:	40007400 	.word	0x40007400

080017e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <MX_I2C3_Init+0x74>)
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <MX_I2C3_Init+0x78>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_I2C3_Init+0x74>)
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <MX_I2C3_Init+0x7c>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_I2C3_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_I2C3_Init+0x74>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_I2C3_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_I2C3_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_I2C3_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_I2C3_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_I2C3_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800181e:	480e      	ldr	r0, [pc, #56]	; (8001858 <MX_I2C3_Init+0x74>)
 8001820:	f002 fb11 	bl	8003e46 <HAL_I2C_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800182a:	f000 f9ad 	bl	8001b88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <MX_I2C3_Init+0x74>)
 8001832:	f003 f809 	bl	8004848 <HAL_I2CEx_ConfigAnalogFilter>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800183c:	f000 f9a4 	bl	8001b88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_I2C3_Init+0x74>)
 8001844:	f003 f84b 	bl	80048de <HAL_I2CEx_ConfigDigitalFilter>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800184e:	f000 f99b 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000a00 	.word	0x20000a00
 800185c:	40007800 	.word	0x40007800
 8001860:	2000090e 	.word	0x2000090e

08001864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <MX_TIM2_Init+0x9c>)
 8001884:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001888:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <MX_TIM2_Init+0x9c>)
 800188c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001890:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <MX_TIM2_Init+0x9c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000;
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <MX_TIM2_Init+0x9c>)
 800189a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800189e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <MX_TIM2_Init+0x9c>)
 80018a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_TIM2_Init+0x9c>)
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ae:	4814      	ldr	r0, [pc, #80]	; (8001900 <MX_TIM2_Init+0x9c>)
 80018b0:	f004 fc88 	bl	80061c4 <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018ba:	f000 f965 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_TIM2_Init+0x9c>)
 80018cc:	f004 fec0 	bl	8006650 <HAL_TIM_ConfigClockSource>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80018d6:	f000 f957 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <MX_TIM2_Init+0x9c>)
 80018e8:	f005 f8ac 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80018f2:	f000 f949 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000a54 	.word	0x20000a54

08001904 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_TIM6_Init+0x64>)
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <MX_TIM6_Init+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_TIM6_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_TIM6_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 624;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_TIM6_Init+0x64>)
 8001928:	f44f 721c 	mov.w	r2, #624	; 0x270
 800192c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_TIM6_Init+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <MX_TIM6_Init+0x64>)
 8001936:	f004 fc45 	bl	80061c4 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001940:	f000 f922 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001944:	2320      	movs	r3, #32
 8001946:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_TIM6_Init+0x64>)
 8001952:	f005 f877 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800195c:	f000 f914 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000aa0 	.word	0x20000aa0
 800196c:	40001000 	.word	0x40001000

08001970 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_TIM15_Init+0x9c>)
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <MX_TIM15_Init+0xa0>)
 8001992:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_TIM15_Init+0x9c>)
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_TIM15_Init+0x9c>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019bc:	f004 fc02 	bl	80061c4 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80019c6:	f000 f8df 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	480d      	ldr	r0, [pc, #52]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019d8:	f004 fe3a 	bl	8006650 <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80019e2:	f000 f8d1 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019f4:	f005 f826 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80019fe:	f000 f8c3 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000aec 	.word	0x20000aec
 8001a10:	40014000 	.word	0x40014000

08001a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a1a:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <MX_USART1_UART_Init+0x5c>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_USART1_UART_Init+0x58>)
 8001a58:	f005 f878 	bl	8006b4c <HAL_UART_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a62:	f000 f891 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000b38 	.word	0x20000b38
 8001a70:	40013800 	.word	0x40013800

08001a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_DMA_Init+0x38>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <MX_DMA_Init+0x38>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6153      	str	r3, [r2, #20]
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_DMA_Init+0x38>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	200d      	movs	r0, #13
 8001a98:	f001 fc97 	bl	80033ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a9c:	200d      	movs	r0, #13
 8001a9e:	f001 fcb0 	bl	8003402 <HAL_NVIC_EnableIRQ>

}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae8:	6153      	str	r3, [r2, #20]
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <MX_GPIO_Init+0xcc>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f242 01f3 	movw	r1, #8435	; 0x20f3
 8001b14:	481a      	ldr	r0, [pc, #104]	; (8001b80 <MX_GPIO_Init+0xd0>)
 8001b16:	f002 f941 	bl	8003d9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 LD2_Pin PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_4
 8001b1a:	f242 03f3 	movw	r3, #8435	; 0x20f3
 8001b1e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	4813      	ldr	r0, [pc, #76]	; (8001b80 <MX_GPIO_Init+0xd0>)
 8001b34:	f001 ffc0 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b3e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_GPIO_Init+0xd4>)
 8001b50:	f001 ffb2 	bl	8003ab8 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001b54:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001b58:	f002 ff0e 	bl	8004978 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001b5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b60:	f002 ff0a 	bl	8004978 <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	2028      	movs	r0, #40	; 0x28
 8001b6a:	f001 fc2e 	bl	80033ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b6e:	2028      	movs	r0, #40	; 0x28
 8001b70:	f001 fc47 	bl	8003402 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8c:	b672      	cpsid	i
}
 8001b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b90:	e7fe      	b.n	8001b90 <Error_Handler+0x8>
	...

08001b94 <ReadFirmwareVersion>:
#define GET_DATA_READY_STATUS 0x0202
#define READ_MEASURMENT 0x0300

extern I2C_HandleTypeDef hi2c3;

void ReadFirmwareVersion() {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af04      	add	r7, sp, #16
   uint8_t firmwareVersion[4] = {0xd1,0,0,0};
 8001b9a:	23d1      	movs	r3, #209	; 0xd1
 8001b9c:	603b      	str	r3, [r7, #0]
   uint16_t firmware = 0xD100;
 8001b9e:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001ba2:	80fb      	strh	r3, [r7, #6]

   // Send a specific command to the Sensiron I2C slave... the command is a two byte register address...
   HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, firmwareVersion, 2, 1000);
 8001ba4:	463a      	mov	r2, r7
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2302      	movs	r3, #2
 8001bae:	21c2      	movs	r1, #194	; 0xc2
 8001bb0:	4811      	ldr	r0, [pc, #68]	; (8001bf8 <ReadFirmwareVersion+0x64>)
 8001bb2:	f002 f9d7 	bl	8003f64 <HAL_I2C_Master_Transmit>

   if (HAL_I2C_Mem_Read(&hi2c3, SENSIRION_ADDRESS, firmware, I2C_MEMADD_SIZE_16BIT, &firmwareVersion[0], 3, 1000) != HAL_OK) {
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	21c2      	movs	r1, #194	; 0xc2
 8001bca:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <ReadFirmwareVersion+0x64>)
 8001bcc:	f002 fabe 	bl	800414c <HAL_I2C_Mem_Read>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <ReadFirmwareVersion+0x4a>
      printf("\r\nHAL_I2C_Mem_Read() FAILED!");
 8001bd6:	4809      	ldr	r0, [pc, #36]	; (8001bfc <ReadFirmwareVersion+0x68>)
 8001bd8:	f007 f858 	bl	8008c8c <iprintf>
   }
   else {
      printf("\r\nSensiron SCD30 Ver.:0x%02x.0x%02x crc=0x%02x", firmwareVersion[0],firmwareVersion[1], firmwareVersion[2]);
   }
}
 8001bdc:	e007      	b.n	8001bee <ReadFirmwareVersion+0x5a>
      printf("\r\nSensiron SCD30 Ver.:0x%02x.0x%02x crc=0x%02x", firmwareVersion[0],firmwareVersion[1], firmwareVersion[2]);
 8001bde:	783b      	ldrb	r3, [r7, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	787b      	ldrb	r3, [r7, #1]
 8001be4:	461a      	mov	r2, r3
 8001be6:	78bb      	ldrb	r3, [r7, #2]
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <ReadFirmwareVersion+0x6c>)
 8001bea:	f007 f84f 	bl	8008c8c <iprintf>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000a00 	.word	0x20000a00
 8001bfc:	0800b454 	.word	0x0800b454
 8001c00:	0800b474 	.word	0x0800b474

08001c04 <ContinuousMeasurement>:

void ContinuousMeasurement(uint16_t AmbientPressureCompensation) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
   uint8_t cm[5] = {0, 0x10, 0, 0, 0x81};
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <ContinuousMeasurement+0x5c>)
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c18:	6018      	str	r0, [r3, #0]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	7019      	strb	r1, [r3, #0]
   cm[2] = (AmbientPressureCompensation>>8) & 0xff;
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	72bb      	strb	r3, [r7, #10]
   cm[3] = AmbientPressureCompensation & 0xff;
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	72fb      	strb	r3, [r7, #11]

   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 5, 1000)!= HAL_OK) {
 8001c2e:	f107 0208 	add.w	r2, r7, #8
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2305      	movs	r3, #5
 8001c3a:	21c2      	movs	r1, #194	; 0xc2
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <ContinuousMeasurement+0x60>)
 8001c3e:	f002 f991 	bl	8003f64 <HAL_I2C_Master_Transmit>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <ContinuousMeasurement+0x4c>
      printf("\r\nStarting Continuous Measurement FAILED!");
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <ContinuousMeasurement+0x64>)
 8001c4a:	f007 f81f 	bl	8008c8c <iprintf>
   }
   else {
      printf("\r\nContinuous Measurement started.");
   }
}
 8001c4e:	e002      	b.n	8001c56 <ContinuousMeasurement+0x52>
      printf("\r\nContinuous Measurement started.");
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <ContinuousMeasurement+0x68>)
 8001c52:	f007 f81b 	bl	8008c8c <iprintf>
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	0800b4f4 	.word	0x0800b4f4
 8001c64:	20000a00 	.word	0x20000a00
 8001c68:	0800b4a4 	.word	0x0800b4a4
 8001c6c:	0800b4d0 	.word	0x0800b4d0

08001c70 <StopContinuousMeasurement>:

void StopContinuousMeasurement() {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af02      	add	r7, sp, #8
   uint8_t cm[2] = {0x01, 0x04};
 8001c76:	f240 4301 	movw	r3, #1025	; 0x401
 8001c7a:	80bb      	strh	r3, [r7, #4]
   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 2, 1000)!= HAL_OK) {
 8001c7c:	1d3a      	adds	r2, r7, #4
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2302      	movs	r3, #2
 8001c86:	21c2      	movs	r1, #194	; 0xc2
 8001c88:	4808      	ldr	r0, [pc, #32]	; (8001cac <StopContinuousMeasurement+0x3c>)
 8001c8a:	f002 f96b 	bl	8003f64 <HAL_I2C_Master_Transmit>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <StopContinuousMeasurement+0x2c>
      printf("\r\nStopping Continuous Measurement FAILED!");
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <StopContinuousMeasurement+0x40>)
 8001c96:	f006 fff9 	bl	8008c8c <iprintf>
   }
   else {
      printf("\r\nContinuous Measurement stopped.");
   }
}
 8001c9a:	e002      	b.n	8001ca2 <StopContinuousMeasurement+0x32>
      printf("\r\nContinuous Measurement stopped.");
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <StopContinuousMeasurement+0x44>)
 8001c9e:	f006 fff5 	bl	8008c8c <iprintf>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000a00 	.word	0x20000a00
 8001cb0:	0800b4fc 	.word	0x0800b4fc
 8001cb4:	0800b528 	.word	0x0800b528

08001cb8 <SetMeasurementInterval>:

void SetMeasurementInterval(uint16_t interval) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
   uint8_t cm[5] = {0x46, 0x00, 0x00, 0x02, 0xE3};
 8001cc2:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <SetMeasurementInterval+0x5c>)
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	7019      	strb	r1, [r3, #0]
   cm[2] = (interval>>8) & 0xff;
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	72bb      	strb	r3, [r7, #10]
   cm[3] = interval & 0xff;
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	72fb      	strb	r3, [r7, #11]

   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 5, 1000)!= HAL_OK) {
 8001ce2:	f107 0208 	add.w	r2, r7, #8
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2305      	movs	r3, #5
 8001cee:	21c2      	movs	r1, #194	; 0xc2
 8001cf0:	4809      	ldr	r0, [pc, #36]	; (8001d18 <SetMeasurementInterval+0x60>)
 8001cf2:	f002 f937 	bl	8003f64 <HAL_I2C_Master_Transmit>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <SetMeasurementInterval+0x4c>
      printf("\r\nSetting Measurement Interval FAILED!");
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <SetMeasurementInterval+0x64>)
 8001cfe:	f006 ffc5 	bl	8008c8c <iprintf>
   }
   else {
      printf("\r\nMeasurement Interval is set.");
   }
}
 8001d02:	e002      	b.n	8001d0a <SetMeasurementInterval+0x52>
      printf("\r\nMeasurement Interval is set.");
 8001d04:	4806      	ldr	r0, [pc, #24]	; (8001d20 <SetMeasurementInterval+0x68>)
 8001d06:	f006 ffc1 	bl	8008c8c <iprintf>
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	0800b594 	.word	0x0800b594
 8001d18:	20000a00 	.word	0x20000a00
 8001d1c:	0800b54c 	.word	0x0800b54c
 8001d20:	0800b574 	.word	0x0800b574

08001d24 <ReadMeasurement>:
      else
         return 0;
   }
}

int ReadMeasurement(uint8_t* data, uint8_t len) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af04      	add	r7, sp, #16
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
   uint8_t cm[2] = {0x03, 0x00};
 8001d30:	2303      	movs	r3, #3
 8001d32:	81bb      	strh	r3, [r7, #12]

   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 2, 1000)!= HAL_OK) {
 8001d34:	f107 020c 	add.w	r2, r7, #12
 8001d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	21c2      	movs	r1, #194	; 0xc2
 8001d42:	4813      	ldr	r0, [pc, #76]	; (8001d90 <ReadMeasurement+0x6c>)
 8001d44:	f002 f90e 	bl	8003f64 <HAL_I2C_Master_Transmit>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <ReadMeasurement+0x36>
      printf("\r\nRead Measurement FAILED!");
 8001d4e:	4811      	ldr	r0, [pc, #68]	; (8001d94 <ReadMeasurement+0x70>)
 8001d50:	f006 ff9c 	bl	8008c8c <iprintf>
      return -1;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	e015      	b.n	8001d86 <ReadMeasurement+0x62>
   }
   else {
      HAL_Delay(5); // Should we use the GetDataReadyStatus() prior to this?
 8001d5a:	2005      	movs	r0, #5
 8001d5c:	f000 fb88 	bl	8002470 <HAL_Delay>
      HAL_I2C_Mem_Read(&hi2c3, SENSIRION_ADDRESS, GET_DATA_READY_STATUS, I2C_MEMADD_SIZE_16BIT, data, len, 1000);
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d68:	9202      	str	r2, [sp, #8]
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2302      	movs	r3, #2
 8001d72:	f240 2202 	movw	r2, #514	; 0x202
 8001d76:	21c2      	movs	r1, #194	; 0xc2
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <ReadMeasurement+0x6c>)
 8001d7a:	f002 f9e7 	bl	800414c <HAL_I2C_Mem_Read>
      printf("\r\nMeasurement read.");
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <ReadMeasurement+0x74>)
 8001d80:	f006 ff84 	bl	8008c8c <iprintf>
      return 1;
 8001d84:	2301      	movs	r3, #1
   }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000a00 	.word	0x20000a00
 8001d94:	0800b5e8 	.word	0x0800b5e8
 8001d98:	0800b604 	.word	0x0800b604

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_MspInit+0x44>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <HAL_MspInit+0x44>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6193      	str	r3, [r2, #24]
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_MspInit+0x44>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_MspInit+0x44>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_MspInit+0x44>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_MspInit+0x44>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e04:	d124      	bne.n	8001e50 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_ADC_MspInit+0x74>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <HAL_ADC_MspInit+0x74>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6153      	str	r3, [r2, #20]
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_ADC_MspInit+0x74>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_ADC_MspInit+0x74>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_ADC_MspInit+0x74>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	6153      	str	r3, [r2, #20]
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_ADC_MspInit+0x74>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4c:	f001 fe34 	bl	8003ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <HAL_DAC_MspInit+0xd4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d153      	bne.n	8001f26 <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_DAC_MspInit+0xd8>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <HAL_DAC_MspInit+0xd8>)
 8001e84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_DAC_MspInit+0xd8>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_DAC_MspInit+0xd8>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <HAL_DAC_MspInit+0xd8>)
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	6153      	str	r3, [r2, #20]
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_DAC_MspInit+0xd8>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec4:	f001 fdf8 	bl	8003ab8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <HAL_DAC_MspInit+0xe0>)
 8001ecc:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee6:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eee:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001efc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001efe:	480e      	ldr	r0, [pc, #56]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001f00:	f001 fbcb 	bl	800369a <HAL_DMA_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8001f0a:	f7ff fe3d 	bl	8001b88 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_DAC_MspInit+0xe4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <HAL_DAC_MspInit+0xe4>)
 8001f14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f18:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <HAL_DAC_MspInit+0xdc>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40007400 	.word	0x40007400
 8001f34:	40021000 	.word	0x40021000
 8001f38:	200009bc 	.word	0x200009bc
 8001f3c:	40020030 	.word	0x40020030
 8001f40:	40010000 	.word	0x40010000

08001f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_I2C_MspInit+0xb8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d146      	bne.n	8001ff4 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4a25      	ldr	r2, [pc, #148]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f70:	6153      	str	r3, [r2, #20]
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	6153      	str	r3, [r2, #20]
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4814      	ldr	r0, [pc, #80]	; (8002004 <HAL_I2C_MspInit+0xc0>)
 8001fb4:	f001 fd80 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fbe:	2312      	movs	r3, #18
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f001 fd6e 	bl	8003ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_I2C_MspInit+0xbc>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40007800 	.word	0x40007800
 8002000:	40021000 	.word	0x40021000
 8002004:	48000800 	.word	0x48000800

08002008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d114      	bne.n	8002044 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	201c      	movs	r0, #28
 8002038:	f001 f9c7 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800203c:	201c      	movs	r0, #28
 800203e:	f001 f9e0 	bl	8003402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002042:	e022      	b.n	800208a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_TIM_Base_MspInit+0x90>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10c      	bne.n	8002068 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
}
 8002066:	e010      	b.n	800208a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0b      	ldr	r2, [pc, #44]	; (800209c <HAL_TIM_Base_MspInit+0x94>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10b      	bne.n	800208a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6193      	str	r3, [r2, #24]
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_TIM_Base_MspInit+0x8c>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	40001000 	.word	0x40001000
 800209c:	40014000 	.word	0x40014000

080020a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <HAL_UART_MspInit+0x8c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12f      	bne.n	8002122 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_UART_MspInit+0x90>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4a1a      	ldr	r2, [pc, #104]	; (8002130 <HAL_UART_MspInit+0x90>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020cc:	6193      	str	r3, [r2, #24]
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_UART_MspInit+0x90>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_UART_MspInit+0x90>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_UART_MspInit+0x90>)
 80020e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020e4:	6153      	str	r3, [r2, #20]
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_UART_MspInit+0x90>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020f2:	2330      	movs	r3, #48	; 0x30
 80020f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002102:	2307      	movs	r3, #7
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4809      	ldr	r0, [pc, #36]	; (8002134 <HAL_UART_MspInit+0x94>)
 800210e:	f001 fcd3 	bl	8003ab8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	2025      	movs	r0, #37	; 0x25
 8002118:	f001 f957 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800211c:	2025      	movs	r0, #37	; 0x25
 800211e:	f001 f970 	bl	8003402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40013800 	.word	0x40013800
 8002130:	40021000 	.word	0x40021000
 8002134:	48000800 	.word	0x48000800

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002184:	f000 f954 	bl	8002430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <DMA1_Channel3_IRQHandler+0x10>)
 8002192:	f001 fb9f 	bl	80038d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200009bc 	.word	0x200009bc

080021a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM2_IRQHandler+0x10>)
 80021a6:	f004 f934 	bl	8006412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000a54 	.word	0x20000a54

080021b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <USART1_IRQHandler+0x10>)
 80021ba:	f004 fde3 	bl	8006d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000b38 	.word	0x20000b38

080021c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021d0:	f001 fe16 	bl	8003e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
	return 1;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_kill>:

int _kill(int pid, int sig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021f2:	f006 ffc3 	bl	800917c <__errno>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2216      	movs	r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
	return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_exit>:

void _exit (int status)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ffe7 	bl	80021e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800221a:	e7fe      	b.n	800221a <_exit+0x12>

0800221c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e00a      	b.n	8002244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800222e:	f3af 8000 	nop.w
 8002232:	4601      	mov	r1, r0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	60ba      	str	r2, [r7, #8]
 800223a:	b2ca      	uxtb	r2, r1
 800223c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf0      	blt.n	800222e <_read+0x12>
	}

return len;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
	return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227e:	605a      	str	r2, [r3, #4]
	return 0;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <_isatty>:

int _isatty(int file)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	return 1;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f006 ff44 	bl	800917c <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20004000 	.word	0x20004000
 8002320:	00000400 	.word	0x00000400
 8002324:	20000c1c 	.word	0x20000c1c
 8002328:	20000d70 	.word	0x20000d70

0800232c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <SystemInit+0x20>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <SystemInit+0x20>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002388 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002354:	f7ff ffea 	bl	800232c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002358:	480c      	ldr	r0, [pc, #48]	; (800238c <LoopForever+0x6>)
  ldr r1, =_edata
 800235a:	490d      	ldr	r1, [pc, #52]	; (8002390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <LoopForever+0xe>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002360:	e002      	b.n	8002368 <LoopCopyDataInit>

08002362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002366:	3304      	adds	r3, #4

08002368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800236c:	d3f9      	bcc.n	8002362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002370:	4c0a      	ldr	r4, [pc, #40]	; (800239c <LoopForever+0x16>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002374:	e001      	b.n	800237a <LoopFillZerobss>

08002376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002378:	3204      	adds	r2, #4

0800237a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800237c:	d3fb      	bcc.n	8002376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800237e:	f006 ff03 	bl	8009188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002382:	f7ff f8a5 	bl	80014d0 <main>

08002386 <LoopForever>:

LoopForever:
    b LoopForever
 8002386:	e7fe      	b.n	8002386 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002388:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002390:	20000934 	.word	0x20000934
  ldr r2, =_sidata
 8002394:	0800b9cc 	.word	0x0800b9cc
  ldr r2, =_sbss
 8002398:	20000934 	.word	0x20000934
  ldr r4, =_ebss
 800239c:	20000d70 	.word	0x20000d70

080023a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC1_IRQHandler>
	...

080023a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_Init+0x28>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_Init+0x28>)
 80023ae:	f043 0310 	orr.w	r3, r3, #16
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f000 fffd 	bl	80033b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ba:	200f      	movs	r0, #15
 80023bc:	f000 f808 	bl	80023d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c0:	f7ff fcec 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40022000 	.word	0x40022000

080023d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_InitTick+0x54>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_InitTick+0x58>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 f815 	bl	800341e <HAL_SYSTICK_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00e      	b.n	800241c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d80a      	bhi.n	800241a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f000 ffdd 	bl	80033ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <HAL_InitTick+0x5c>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000760 	.word	0x20000760
 8002428:	20000768 	.word	0x20000768
 800242c:	20000764 	.word	0x20000764

08002430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x20>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x24>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4413      	add	r3, r2
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_IncTick+0x24>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000768 	.word	0x20000768
 8002454:	20000c20 	.word	0x20000c20

08002458 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;  
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000c20 	.word	0x20000c20

08002470 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff ffee 	bl	8002458 <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_Delay+0x44>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffde 	bl	8002458 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000768 	.word	0x20000768

080024b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b09a      	sub	sp, #104	; 0x68
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e169      	b.n	80027ac <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d176      	bne.n	80025d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d152      	bne.n	8002598 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fc69 	bl	8001de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d13b      	bne.n	8002598 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fe11 	bl	8003148 <ADC_Disable>
 8002526:	4603      	mov	r3, r0
 8002528:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d12f      	bne.n	8002598 <HAL_ADC_Init+0xe0>
 8002538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800253c:	2b00      	cmp	r3, #0
 800253e:	d12b      	bne.n	8002598 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	f043 0202 	orr.w	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002562:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002572:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_ADC_Init+0x2fc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a8f      	ldr	r2, [pc, #572]	; (80027b8 <HAL_ADC_Init+0x300>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0c9a      	lsrs	r2, r3, #18
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800258a:	e002      	b.n	8002592 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3b01      	subs	r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b4:	d110      	bne.n	80025d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f023 0312 	bic.w	r3, r3, #18
 80025be:	f043 0210 	orr.w	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 80d6 	bne.w	8002792 <HAL_ADC_Init+0x2da>
 80025e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 80d1 	bne.w	8002792 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80c9 	bne.w	8002792 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002608:	f043 0202 	orr.w	r2, r3, #2
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_ADC_Init+0x304>)
 8002612:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <HAL_ADC_Init+0x180>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_ADC_Init+0x180>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_ADC_Init+0x182>
 8002638:	2300      	movs	r3, #0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d11c      	bne.n	8002678 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800263e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_ADC_Init+0x1a8>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_ADC_Init+0x1a8>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_ADC_Init+0x1aa>
 8002660:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	431a      	orrs	r2, r3
 8002674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002676:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7e5b      	ldrb	r3, [r3, #25]
 800267c:	035b      	lsls	r3, r3, #13
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002682:	2a01      	cmp	r2, #1
 8002684:	d002      	beq.n	800268c <HAL_ADC_Init+0x1d4>
 8002686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800268a:	e000      	b.n	800268e <HAL_ADC_Init+0x1d6>
 800268c:	2200      	movs	r2, #0
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4313      	orrs	r3, r2
 800269c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800269e:	4313      	orrs	r3, r2
 80026a0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d11b      	bne.n	80026e4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7e5b      	ldrb	r3, [r3, #25]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	3b01      	subs	r3, #1
 80026ba:	045a      	lsls	r2, r3, #17
 80026bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026be:	4313      	orrs	r3, r2
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c4:	663b      	str	r3, [r7, #96]	; 0x60
 80026c6:	e00d      	b.n	80026e4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	f043 0201 	orr.w	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d007      	beq.n	80026fc <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	4313      	orrs	r3, r2
 80026f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026f8:	4313      	orrs	r3, r2
 80026fa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d114      	bne.n	8002734 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002718:	f023 0302 	bic.w	r3, r3, #2
 800271c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7e1b      	ldrb	r3, [r3, #24]
 8002722:	039a      	lsls	r2, r3, #14
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4313      	orrs	r3, r2
 800272e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002730:	4313      	orrs	r3, r2
 8002732:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <HAL_ADC_Init+0x308>)
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002744:	430b      	orrs	r3, r1
 8002746:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10c      	bne.n	800276a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f023 010f 	bic.w	r1, r3, #15
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	1e5a      	subs	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
 8002768:	e007      	b.n	800277a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 020f 	bic.w	r2, r2, #15
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f023 0303 	bic.w	r3, r3, #3
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
 8002790:	e00a      	b.n	80027a8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f023 0312 	bic.w	r3, r3, #18
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80027a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3768      	adds	r7, #104	; 0x68
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000760 	.word	0x20000760
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	50000300 	.word	0x50000300
 80027c0:	fff0c007 	.word	0xfff0c007

080027c4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d158      	bne.n	8002890 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_Start+0x28>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e054      	b.n	8002896 <HAL_ADC_Start+0xd2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fc43 	bl	8003080 <ADC_Enable>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d140      	bne.n	8002886 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800283a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	d106      	bne.n	800285e <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f023 0206 	bic.w	r2, r3, #6
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
 800285c:	e002      	b.n	8002864 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	221c      	movs	r2, #28
 8002872:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0204 	orr.w	r2, r2, #4
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e006      	b.n	8002894 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800288e:	e001      	b.n	8002894 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d102      	bne.n	80028bc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80028b6:	2308      	movs	r3, #8
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e02e      	b.n	800291a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028bc:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <HAL_ADC_PollForConversion+0x178>)
 80028be:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d112      	bne.n	80028f2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d11d      	bne.n	8002916 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e08d      	b.n	8002a0e <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07b      	b.n	8002a0e <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002916:	230c      	movs	r3, #12
 8002918:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002922:	f7ff fd99 	bl	8002458 <HAL_GetTick>
 8002926:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002928:	e021      	b.n	800296e <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d01d      	beq.n	800296e <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_ADC_PollForConversion+0xa8>
 8002938:	f7ff fd8e 	bl	8002458 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d212      	bcs.n	800296e <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0204 	orr.w	r2, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e04f      	b.n	8002a0e <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0d6      	beq.n	800292a <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002992:	2b00      	cmp	r3, #0
 8002994:	d131      	bne.n	80029fa <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12c      	bne.n	80029fa <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d125      	bne.n	80029fa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d112      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d112      	bne.n	80029fa <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
 80029e0:	e00b      	b.n	80029fa <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	50000300 	.word	0x50000300

08002a1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e05f      	b.n	8002b12 <HAL_ADCEx_Calibration_Start+0xdc>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fb74 	bl	8003148 <ADC_Disable>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d14e      	bne.n	8002b08 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002a7e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a94:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002aa6:	f7ff fcd7 	bl	8002458 <HAL_GetTick>
 8002aaa:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002aac:	e01c      	b.n	8002ae8 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002aae:	f7ff fcd3 	bl	8002458 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b0a      	cmp	r3, #10
 8002aba:	d915      	bls.n	8002ae8 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aca:	d10d      	bne.n	8002ae8 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f023 0312 	bic.w	r3, r3, #18
 8002ad4:	f043 0210 	orr.w	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e014      	b.n	8002b12 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002af6:	d0da      	beq.n	8002aae <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f023 0303 	bic.w	r3, r3, #3
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b09b      	sub	sp, #108	; 0x6c
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x22>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e295      	b.n	800306a <HAL_ADC_ConfigChannel+0x54e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f040 8279 	bne.w	8003048 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d81c      	bhi.n	8002b98 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	461a      	mov	r2, r3
 8002b72:	231f      	movs	r3, #31
 8002b74:	4093      	lsls	r3, r2
 8002b76:	43db      	mvns	r3, r3
 8002b78:	4019      	ands	r1, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
 8002b96:	e063      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b09      	cmp	r3, #9
 8002b9e:	d81e      	bhi.n	8002bde <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	3b1e      	subs	r3, #30
 8002bb4:	221f      	movs	r2, #31
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	4019      	ands	r1, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	3b1e      	subs	r3, #30
 8002bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	635a      	str	r2, [r3, #52]	; 0x34
 8002bdc:	e040      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b0e      	cmp	r3, #14
 8002be4:	d81e      	bhi.n	8002c24 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	3b3c      	subs	r3, #60	; 0x3c
 8002bfa:	221f      	movs	r2, #31
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	4019      	ands	r1, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	3b3c      	subs	r3, #60	; 0x3c
 8002c16:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
 8002c22:	e01d      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	3b5a      	subs	r3, #90	; 0x5a
 8002c38:	221f      	movs	r2, #31
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4019      	ands	r1, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	3b5a      	subs	r3, #90	; 0x5a
 8002c54:	fa00 f203 	lsl.w	r2, r0, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 80e5 	bne.w	8002e3a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b09      	cmp	r3, #9
 8002c76:	d91c      	bls.n	8002cb2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6999      	ldr	r1, [r3, #24]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	3b1e      	subs	r3, #30
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	4019      	ands	r1, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	6898      	ldr	r0, [r3, #8]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b1e      	subs	r3, #30
 8002ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	e019      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6959      	ldr	r1, [r3, #20]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	4019      	ands	r1, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6898      	ldr	r0, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	fa00 f203 	lsl.w	r2, r0, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d84f      	bhi.n	8002da8 <HAL_ADC_ConfigChannel+0x28c>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <HAL_ADC_ConfigChannel+0x1f4>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d43 	.word	0x08002d43
 8002d18:	08002d65 	.word	0x08002d65
 8002d1c:	08002d87 	.word	0x08002d87
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d26:	4b97      	ldr	r3, [pc, #604]	; (8002f84 <HAL_ADC_ConfigChannel+0x468>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	0691      	lsls	r1, r2, #26
 8002d30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d32:	430a      	orrs	r2, r1
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d3e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d40:	e07b      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d48:	4b8e      	ldr	r3, [pc, #568]	; (8002f84 <HAL_ADC_ConfigChannel+0x468>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	0691      	lsls	r1, r2, #26
 8002d52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d54:	430a      	orrs	r2, r1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d60:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d62:	e06a      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d6a:	4b86      	ldr	r3, [pc, #536]	; (8002f84 <HAL_ADC_ConfigChannel+0x468>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	0691      	lsls	r1, r2, #26
 8002d74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d76:	430a      	orrs	r2, r1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d82:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d84:	e059      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d8c:	4b7d      	ldr	r3, [pc, #500]	; (8002f84 <HAL_ADC_ConfigChannel+0x468>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	0691      	lsls	r1, r2, #26
 8002d96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002da4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002da6:	e048      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	069b      	lsls	r3, r3, #26
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d107      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	069b      	lsls	r3, r3, #26
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d107      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	069b      	lsls	r3, r3, #26
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	069b      	lsls	r3, r3, #26
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d107      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002e38:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d108      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x33e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x33e>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x340>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 80fe 	bne.w	800305e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d00f      	beq.n	8002e8a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	400a      	ands	r2, r1
 8002e84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e88:	e049      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2201      	movs	r2, #1
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d91c      	bls.n	8002ee6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6999      	ldr	r1, [r3, #24]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b1b      	subs	r3, #27
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4019      	ands	r1, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6898      	ldr	r0, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3b1b      	subs	r3, #27
 8002ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	619a      	str	r2, [r3, #24]
 8002ee4:	e01b      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6959      	ldr	r1, [r3, #20]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	2207      	movs	r2, #7
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	4019      	ands	r1, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6898      	ldr	r0, [r3, #8]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	fa00 f203 	lsl.w	r2, r0, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_ADC_ConfigChannel+0x46c>)
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d105      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d014      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f3a:	2b11      	cmp	r3, #17
 8002f3c:	d105      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f4e:	2b12      	cmp	r3, #18
 8002f50:	f040 8085 	bne.w	800305e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d17e      	bne.n	800305e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10c      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x470>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x470>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e004      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x472>
 8002f84:	83fff000 	.word	0x83fff000
 8002f88:	50000300 	.word	0x50000300
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d150      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f92:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d107      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x498>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x498>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x49a>
 8002fb4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d13c      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d11d      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x4e2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fca:	d118      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd8:	4b27      	ldr	r3, [pc, #156]	; (8003078 <HAL_ADC_ConfigChannel+0x55c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a27      	ldr	r2, [pc, #156]	; (800307c <HAL_ADC_ConfigChannel+0x560>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0c9a      	lsrs	r2, r3, #18
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fee:	e002      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f9      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ffc:	e02e      	b.n	800305c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b11      	cmp	r3, #17
 8003004:	d10b      	bne.n	800301e <HAL_ADC_ConfigChannel+0x502>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800300e:	d106      	bne.n	800301e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800301c:	e01e      	b.n	800305c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b12      	cmp	r3, #18
 8003024:	d11a      	bne.n	800305c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800302e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003030:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003032:	e013      	b.n	800305c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003046:	e00a      	b.n	800305e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800305a:	e000      	b.n	800305e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800305c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003066:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800306a:	4618      	mov	r0, r3
 800306c:	376c      	adds	r7, #108	; 0x6c
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000760 	.word	0x20000760
 800307c:	431bde83 	.word	0x431bde83

08003080 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d108      	bne.n	80030ac <ADC_Enable+0x2c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <ADC_Enable+0x2c>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <ADC_Enable+0x2e>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d143      	bne.n	800313a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <ADC_Enable+0xc4>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0210 	orr.w	r2, r3, #16
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e02f      	b.n	800313c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80030ec:	f7ff f9b4 	bl	8002458 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030f2:	e01b      	b.n	800312c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030f4:	f7ff f9b0 	bl	8002458 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d914      	bls.n	800312c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d00d      	beq.n	800312c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f043 0210 	orr.w	r2, r3, #16
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e007      	b.n	800313c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d1dc      	bne.n	80030f4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	8000003f 	.word	0x8000003f

08003148 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <ADC_Disable+0x2c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <ADC_Disable+0x2c>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <ADC_Disable+0x2e>
 8003174:	2300      	movs	r3, #0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d047      	beq.n	800320a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030d 	and.w	r3, r3, #13
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10f      	bne.n	80031a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0202 	orr.w	r2, r2, #2
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2203      	movs	r2, #3
 800319e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80031a0:	f7ff f95a 	bl	8002458 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031a6:	e029      	b.n	80031fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0210 	orr.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e023      	b.n	800320c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031c4:	f7ff f948 	bl	8002458 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d914      	bls.n	80031fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10d      	bne.n	80031fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e007      	b.n	800320c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d0dc      	beq.n	80031c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003230:	4013      	ands	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800323c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	60d3      	str	r3, [r2, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <__NVIC_GetPriorityGrouping+0x18>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	f003 0307 	and.w	r3, r3, #7
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	2b00      	cmp	r3, #0
 8003288:	db0b      	blt.n	80032a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	4907      	ldr	r1, [pc, #28]	; (80032b0 <__NVIC_EnableIRQ+0x38>)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2001      	movs	r0, #1
 800329a:	fa00 f202 	lsl.w	r2, r0, r2
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000e100 	.word	0xe000e100

080032b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	db0a      	blt.n	80032de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	490c      	ldr	r1, [pc, #48]	; (8003300 <__NVIC_SetPriority+0x4c>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	440b      	add	r3, r1
 80032d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032dc:	e00a      	b.n	80032f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4908      	ldr	r1, [pc, #32]	; (8003304 <__NVIC_SetPriority+0x50>)
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	3b04      	subs	r3, #4
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	440b      	add	r3, r1
 80032f2:	761a      	strb	r2, [r3, #24]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f1c3 0307 	rsb	r3, r3, #7
 8003322:	2b04      	cmp	r3, #4
 8003324:	bf28      	it	cs
 8003326:	2304      	movcs	r3, #4
 8003328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3304      	adds	r3, #4
 800332e:	2b06      	cmp	r3, #6
 8003330:	d902      	bls.n	8003338 <NVIC_EncodePriority+0x30>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3b03      	subs	r3, #3
 8003336:	e000      	b.n	800333a <NVIC_EncodePriority+0x32>
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	f04f 32ff 	mov.w	r2, #4294967295
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	401a      	ands	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003350:	f04f 31ff 	mov.w	r1, #4294967295
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	43d9      	mvns	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	4313      	orrs	r3, r2
         );
}
 8003362:	4618      	mov	r0, r3
 8003364:	3724      	adds	r7, #36	; 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003380:	d301      	bcc.n	8003386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003382:	2301      	movs	r3, #1
 8003384:	e00f      	b.n	80033a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <SysTick_Config+0x40>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338e:	210f      	movs	r1, #15
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f7ff ff8e 	bl	80032b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <SysTick_Config+0x40>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SysTick_Config+0x40>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff29 	bl	8003214 <__NVIC_SetPriorityGrouping>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033dc:	f7ff ff3e 	bl	800325c <__NVIC_GetPriorityGrouping>
 80033e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	6978      	ldr	r0, [r7, #20]
 80033e8:	f7ff ff8e 	bl	8003308 <NVIC_EncodePriority>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff5d 	bl	80032b4 <__NVIC_SetPriority>
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff31 	bl	8003278 <__NVIC_EnableIRQ>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffa2 	bl	8003370 <SysTick_Config>
 800342c:	4603      	mov	r3, r0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e014      	b.n	8003472 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	791b      	ldrb	r3, [r3, #4]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fe fcff 	bl	8001e5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	795b      	ldrb	r3, [r3, #5]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_DAC_Start_DMA+0x1e>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e053      	b.n	800357e <HAL_DAC_Start_DMA+0xc6>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2202      	movs	r2, #2
 80034e0:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4a28      	ldr	r2, [pc, #160]	; (8003588 <HAL_DAC_Start_DMA+0xd0>)
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4a27      	ldr	r2, [pc, #156]	; (800358c <HAL_DAC_Start_DMA+0xd4>)
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	4a26      	ldr	r2, [pc, #152]	; (8003590 <HAL_DAC_Start_DMA+0xd8>)
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003508:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d013      	beq.n	8003538 <HAL_DAC_Start_DMA+0x80>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d815      	bhi.n	8003542 <HAL_DAC_Start_DMA+0x8a>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_DAC_Start_DMA+0x6c>
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	2b04      	cmp	r3, #4
 8003520:	d005      	beq.n	800352e <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 8003522:	e00e      	b.n	8003542 <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	617b      	str	r3, [r7, #20]
      break;
 800352c:	e00a      	b.n	8003544 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	617b      	str	r3, [r7, #20]
      break;
 8003536:	e005      	b.n	8003544 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3310      	adds	r3, #16
 800353e:	617b      	str	r3, [r7, #20]
      break;
 8003540:	e000      	b.n	8003544 <HAL_DAC_Start_DMA+0x8c>
      break;
 8003542:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003552:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6898      	ldr	r0, [r3, #8]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	f000 f8e3 	bl	8003728 <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	409a      	lsls	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	0800362f 	.word	0x0800362f
 800358c:	08003651 	.word	0x08003651
 8003590:	0800366d 	.word	0x0800366d

08003594 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	795b      	ldrb	r3, [r3, #5]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_DAC_ConfigChannel+0x20>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e036      	b.n	8003622 <HAL_DAC_ConfigChannel+0x8e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2202      	movs	r2, #2
 80035be:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80035c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4013      	ands	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	22c0      	movs	r2, #192	; 0xc0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	400a      	ands	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff ff1c 	bl	800347a <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	711a      	strb	r2, [r3, #4]
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff ff15 	bl	800348e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f043 0204 	orr.w	r2, r3, #4
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff ff0b 	bl	80034a2 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	711a      	strb	r2, [r3, #4]
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e037      	b.n	8003720 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80036ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9b8 	bl	8003a78 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}  
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_DMA_Start_IT+0x20>
 8003744:	2302      	movs	r3, #2
 8003746:	e04a      	b.n	80037de <HAL_DMA_Start_IT+0xb6>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003756:	2b01      	cmp	r3, #1
 8003758:	d13a      	bne.n	80037d0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f94b 	bl	8003a1a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 020e 	orr.w	r2, r2, #14
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e00f      	b.n	80037be <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 020a 	orr.w	r2, r2, #10
 80037ac:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0204 	bic.w	r2, r2, #4
 80037bc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e005      	b.n	80037dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
 80037da:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d008      	beq.n	800380a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2204      	movs	r2, #4
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e020      	b.n	800384c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 020e 	bic.w	r2, r2, #14
 8003818:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	2101      	movs	r1, #1
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800386a:	2b02      	cmp	r3, #2
 800386c:	d005      	beq.n	800387a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2204      	movs	r2, #4
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e027      	b.n	80038ca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 020e 	bic.w	r2, r2, #14
 8003888:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
    } 
  }
  return status;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	2204      	movs	r2, #4
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d024      	beq.n	8003946 <HAL_DMA_IRQHandler+0x72>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01f      	beq.n	8003946 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	2104      	movs	r1, #4
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d06a      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003944:	e065      	b.n	8003a12 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2202      	movs	r2, #2
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d02c      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xdc>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d027      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 020a 	bic.w	r2, r2, #10
 800397c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	2102      	movs	r1, #2
 8003990:	fa01 f202 	lsl.w	r2, r1, r2
 8003994:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d035      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80039ae:	e030      	b.n	8003a12 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2208      	movs	r2, #8
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d028      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x13e>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d023      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 020e 	bic.w	r2, r2, #14
 80039d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f202 	lsl.w	r2, r1, r2
 80039e8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
    }
  }
}  
 8003a10:	e7ff      	b.n	8003a12 <HAL_DMA_IRQHandler+0x13e>
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d108      	bne.n	8003a5a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a58:	e007      	b.n	8003a6a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]
}
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <DMA_CalcBaseAndBitshift+0x34>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <DMA_CalcBaseAndBitshift+0x38>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	009a      	lsls	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a06      	ldr	r2, [pc, #24]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x3c>)
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	bffdfff8 	.word	0xbffdfff8
 8003ab0:	cccccccd 	.word	0xcccccccd
 8003ab4:	40020000 	.word	0x40020000

08003ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac6:	e14e      	b.n	8003d66 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2101      	movs	r1, #1
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8140 	beq.w	8003d60 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d005      	beq.n	8003af8 <HAL_GPIO_Init+0x40>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d130      	bne.n	8003b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	2203      	movs	r2, #3
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b2e:	2201      	movs	r2, #1
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	f003 0201 	and.w	r2, r3, #1
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d017      	beq.n	8003b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d123      	bne.n	8003bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	08da      	lsrs	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3208      	adds	r2, #8
 8003baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	220f      	movs	r2, #15
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	08da      	lsrs	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3208      	adds	r2, #8
 8003be4:	6939      	ldr	r1, [r7, #16]
 8003be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0203 	and.w	r2, r3, #3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 809a 	beq.w	8003d60 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2c:	4b55      	ldr	r3, [pc, #340]	; (8003d84 <HAL_GPIO_Init+0x2cc>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	4a54      	ldr	r2, [pc, #336]	; (8003d84 <HAL_GPIO_Init+0x2cc>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6193      	str	r3, [r2, #24]
 8003c38:	4b52      	ldr	r3, [pc, #328]	; (8003d84 <HAL_GPIO_Init+0x2cc>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c44:	4a50      	ldr	r2, [pc, #320]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c6e:	d013      	beq.n	8003c98 <HAL_GPIO_Init+0x1e0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a46      	ldr	r2, [pc, #280]	; (8003d8c <HAL_GPIO_Init+0x2d4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00d      	beq.n	8003c94 <HAL_GPIO_Init+0x1dc>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a45      	ldr	r2, [pc, #276]	; (8003d90 <HAL_GPIO_Init+0x2d8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d007      	beq.n	8003c90 <HAL_GPIO_Init+0x1d8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a44      	ldr	r2, [pc, #272]	; (8003d94 <HAL_GPIO_Init+0x2dc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <HAL_GPIO_Init+0x1d4>
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e006      	b.n	8003c9a <HAL_GPIO_Init+0x1e2>
 8003c8c:	2305      	movs	r3, #5
 8003c8e:	e004      	b.n	8003c9a <HAL_GPIO_Init+0x1e2>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e002      	b.n	8003c9a <HAL_GPIO_Init+0x1e2>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <HAL_GPIO_Init+0x1e2>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	f002 0203 	and.w	r2, r2, #3
 8003ca0:	0092      	lsls	r2, r2, #2
 8003ca2:	4093      	lsls	r3, r2
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003caa:	4937      	ldr	r1, [pc, #220]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cb8:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <HAL_GPIO_Init+0x2e0>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	; (8003d98 <HAL_GPIO_Init+0x2e0>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <HAL_GPIO_Init+0x2e0>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d06:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <HAL_GPIO_Init+0x2e0>)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d0c:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <HAL_GPIO_Init+0x2e0>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d30:	4a19      	ldr	r2, [pc, #100]	; (8003d98 <HAL_GPIO_Init+0x2e0>)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d36:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <HAL_GPIO_Init+0x2e0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d5a:	4a0f      	ldr	r2, [pc, #60]	; (8003d98 <HAL_GPIO_Init+0x2e0>)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3301      	adds	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f47f aea9 	bne.w	8003ac8 <HAL_GPIO_Init+0x10>
  }
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	48000400 	.word	0x48000400
 8003d90:	48000800 	.word	0x48000800
 8003d94:	48000c00 	.word	0x48000c00
 8003d98:	40010400 	.word	0x40010400

08003d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
 8003da8:	4613      	mov	r3, r2
 8003daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dac:	787b      	ldrb	r3, [r7, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003db8:	e002      	b.n	8003dc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dba:	887a      	ldrh	r2, [r7, #2]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4013      	ands	r3, r2
 8003de4:	041a      	lsls	r2, r3, #16
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	43d9      	mvns	r1, r3
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	400b      	ands	r3, r1
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	619a      	str	r2, [r3, #24]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d006      	beq.n	8003e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e16:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f806 	bl	8003e30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e081      	b.n	8003f5c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7fe f869 	bl	8001f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2224      	movs	r2, #36	; 0x24
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	e006      	b.n	8003ece <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d104      	bne.n	8003ee0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ede:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69d9      	ldr	r1, [r3, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1a      	ldr	r2, [r3, #32]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	460b      	mov	r3, r1
 8003f72:	817b      	strh	r3, [r7, #10]
 8003f74:	4613      	mov	r3, r2
 8003f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	f040 80da 	bne.w	800413a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_I2C_Master_Transmit+0x30>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0d3      	b.n	800413c <HAL_I2C_Master_Transmit+0x1d8>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f9c:	f7fe fa5c 	bl	8002458 <HAL_GetTick>
 8003fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2319      	movs	r3, #25
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fa5e 	bl	8004470 <I2C_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0be      	b.n	800413c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2221      	movs	r2, #33	; 0x21
 8003fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2210      	movs	r2, #16
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	893a      	ldrh	r2, [r7, #8]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2bff      	cmp	r3, #255	; 0xff
 8003fee:	d90e      	bls.n	800400e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	22ff      	movs	r2, #255	; 0xff
 8003ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	8979      	ldrh	r1, [r7, #10]
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <HAL_I2C_Master_Transmit+0x1e0>)
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fbec 	bl	80047e4 <I2C_TransferConfig>
 800400c:	e06c      	b.n	80040e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	b2da      	uxtb	r2, r3
 800401e:	8979      	ldrh	r1, [r7, #10]
 8004020:	4b48      	ldr	r3, [pc, #288]	; (8004144 <HAL_I2C_Master_Transmit+0x1e0>)
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fbdb 	bl	80047e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800402e:	e05b      	b.n	80040e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	6a39      	ldr	r1, [r7, #32]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fa6a 	bl	800450e <I2C_WaitOnTXISFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e07b      	b.n	800413c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d034      	beq.n	80040e8 <HAL_I2C_Master_Transmit+0x184>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d130      	bne.n	80040e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f9ed 	bl	8004470 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e04d      	b.n	800413c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2bff      	cmp	r3, #255	; 0xff
 80040a8:	d90e      	bls.n	80040c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	8979      	ldrh	r1, [r7, #10]
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fb8f 	bl	80047e4 <I2C_TransferConfig>
 80040c6:	e00f      	b.n	80040e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	2300      	movs	r3, #0
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fb7e 	bl	80047e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d19e      	bne.n	8004030 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	6a39      	ldr	r1, [r7, #32]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fa50 	bl	800459c <I2C_WaitOnSTOPFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e01a      	b.n	800413c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2220      	movs	r2, #32
 800410c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_I2C_Master_Transmit+0x1e4>)
 800411a:	400b      	ands	r3, r1
 800411c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	80002000 	.word	0x80002000
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	4608      	mov	r0, r1
 8004156:	4611      	mov	r1, r2
 8004158:	461a      	mov	r2, r3
 800415a:	4603      	mov	r3, r0
 800415c:	817b      	strh	r3, [r7, #10]
 800415e:	460b      	mov	r3, r1
 8004160:	813b      	strh	r3, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 80fd 	bne.w	800436e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_I2C_Mem_Read+0x34>
 800417a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0f1      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_I2C_Mem_Read+0x4e>
 8004196:	2302      	movs	r3, #2
 8004198:	e0ea      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041a2:	f7fe f959 	bl	8002458 <HAL_GetTick>
 80041a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2319      	movs	r3, #25
 80041ae:	2201      	movs	r2, #1
 80041b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f95b 	bl	8004470 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0d5      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2222      	movs	r2, #34	; 0x22
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2240      	movs	r2, #64	; 0x40
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ec:	88f8      	ldrh	r0, [r7, #6]
 80041ee:	893a      	ldrh	r2, [r7, #8]
 80041f0:	8979      	ldrh	r1, [r7, #10]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4603      	mov	r3, r0
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f8bf 	bl	8004380 <I2C_RequestMemoryRead>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0ad      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2bff      	cmp	r3, #255	; 0xff
 800421c:	d90e      	bls.n	800423c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	22ff      	movs	r2, #255	; 0xff
 8004222:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	b2da      	uxtb	r2, r3
 800422a:	8979      	ldrh	r1, [r7, #10]
 800422c:	4b52      	ldr	r3, [pc, #328]	; (8004378 <HAL_I2C_Mem_Read+0x22c>)
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fad5 	bl	80047e4 <I2C_TransferConfig>
 800423a:	e00f      	b.n	800425c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	b2da      	uxtb	r2, r3
 800424c:	8979      	ldrh	r1, [r7, #10]
 800424e:	4b4a      	ldr	r3, [pc, #296]	; (8004378 <HAL_I2C_Mem_Read+0x22c>)
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fac4 	bl	80047e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	2200      	movs	r2, #0
 8004264:	2104      	movs	r1, #4
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f902 	bl	8004470 <I2C_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e07c      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d034      	beq.n	800431c <HAL_I2C_Mem_Read+0x1d0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d130      	bne.n	800431c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	2200      	movs	r2, #0
 80042c2:	2180      	movs	r1, #128	; 0x80
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f8d3 	bl	8004470 <I2C_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e04d      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2bff      	cmp	r3, #255	; 0xff
 80042dc:	d90e      	bls.n	80042fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	8979      	ldrh	r1, [r7, #10]
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fa75 	bl	80047e4 <I2C_TransferConfig>
 80042fa:	e00f      	b.n	800431c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	b2da      	uxtb	r2, r3
 800430c:	8979      	ldrh	r1, [r7, #10]
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa64 	bl	80047e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d19a      	bne.n	800425c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f936 	bl	800459c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e01a      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2220      	movs	r2, #32
 8004340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_I2C_Mem_Read+0x230>)
 800434e:	400b      	ands	r3, r1
 8004350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	80002400 	.word	0x80002400
 800437c:	fe00e800 	.word	0xfe00e800

08004380 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	460b      	mov	r3, r1
 8004394:	813b      	strh	r3, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <I2C_RequestMemoryRead+0xa4>)
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa1c 	bl	80047e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f8ac 	bl	800450e <I2C_WaitOnTXISFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e02c      	b.n	800441a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c6:	893b      	ldrh	r3, [r7, #8]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
 80043d0:	e015      	b.n	80043fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043d2:	893b      	ldrh	r3, [r7, #8]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	69b9      	ldr	r1, [r7, #24]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f892 	bl	800450e <I2C_WaitOnTXISFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e012      	b.n	800441a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2200      	movs	r2, #0
 8004406:	2140      	movs	r1, #64	; 0x40
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f831 	bl	8004470 <I2C_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	80002000 	.word	0x80002000

08004428 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d103      	bne.n	8004446 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b01      	cmp	r3, #1
 8004452:	d007      	beq.n	8004464 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	619a      	str	r2, [r3, #24]
  }
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004480:	e031      	b.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d02d      	beq.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448a:	f7fd ffe5 	bl	8002458 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d302      	bcc.n	80044a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d122      	bne.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4013      	ands	r3, r2
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d113      	bne.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00f      	b.n	8004506 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699a      	ldr	r2, [r3, #24]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d0be      	beq.n	8004482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800451a:	e033      	b.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f87f 	bl	8004624 <I2C_IsErrorOccurred>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e031      	b.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d025      	beq.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004538:	f7fd ff8e 	bl	8002458 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d11a      	bne.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d013      	beq.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e007      	b.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d1c4      	bne.n	800451c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a8:	e02f      	b.n	800460a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f838 	bl	8004624 <I2C_IsErrorOccurred>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e02d      	b.n	800461a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fd ff4b 	bl	8002458 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11a      	bne.n	800460a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d013      	beq.n	800460a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e007      	b.n	800461a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b20      	cmp	r3, #32
 8004616:	d1c8      	bne.n	80045aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d068      	beq.n	8004722 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2210      	movs	r2, #16
 8004656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004658:	e049      	b.n	80046ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d045      	beq.n	80046ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fd fef9 	bl	8002458 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <I2C_IsErrorOccurred+0x54>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d13a      	bne.n	80046ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800468a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469a:	d121      	bne.n	80046e0 <I2C_IsErrorOccurred+0xbc>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046a2:	d01d      	beq.n	80046e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d01a      	beq.n	80046e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046ba:	f7fd fecd 	bl	8002458 <HAL_GetTick>
 80046be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c0:	e00e      	b.n	80046e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046c2:	f7fd fec9 	bl	8002458 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b19      	cmp	r3, #25
 80046ce:	d907      	bls.n	80046e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	f043 0320 	orr.w	r3, r3, #32
 80046d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80046de:	e006      	b.n	80046ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d1e9      	bne.n	80046c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d003      	beq.n	8004704 <I2C_IsErrorOccurred+0xe0>
 80046fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0aa      	beq.n	800465a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004708:	2b00      	cmp	r3, #0
 800470a:	d103      	bne.n	8004714 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2220      	movs	r2, #32
 8004712:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	f043 0304 	orr.w	r3, r3, #4
 800471a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	f043 0302 	orr.w	r3, r3, #2
 800477e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01c      	beq.n	80047d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff fe45 	bl	8004428 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <I2C_IsErrorOccurred+0x1bc>)
 80047aa:	400b      	ands	r3, r1
 80047ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3728      	adds	r7, #40	; 0x28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	fe00e800 	.word	0xfe00e800

080047e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	817b      	strh	r3, [r7, #10]
 80047f2:	4613      	mov	r3, r2
 80047f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047fc:	7a7b      	ldrb	r3, [r7, #9]
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	4313      	orrs	r3, r2
 800480e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	0d5b      	lsrs	r3, r3, #21
 800481e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <I2C_TransferConfig+0x60>)
 8004824:	430b      	orrs	r3, r1
 8004826:	43db      	mvns	r3, r3
 8004828:	ea02 0103 	and.w	r1, r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	03ff63ff 	.word	0x03ff63ff

08004848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b20      	cmp	r3, #32
 800485c:	d138      	bne.n	80048d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004868:	2302      	movs	r3, #2
 800486a:	e032      	b.n	80048d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2224      	movs	r2, #36	; 0x24
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800489a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d139      	bne.n	8004968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048fe:	2302      	movs	r3, #2
 8004900:	e033      	b.n	800496a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2224      	movs	r2, #36	; 0x24
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6193      	str	r3, [r2, #24]
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4905      	ldr	r1, [pc, #20]	; (80049b4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40010000 	.word	0x40010000

080049b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80049be:	af00      	add	r7, sp, #0
 80049c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f001 b823 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 817d 	beq.w	8004cee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80049f4:	4bbc      	ldr	r3, [pc, #752]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d00c      	beq.n	8004a1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a00:	4bb9      	ldr	r3, [pc, #740]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d15c      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x10e>
 8004a0c:	4bb6      	ldr	r3, [pc, #728]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a18:	d155      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x10e>
 8004a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d102      	bne.n	8004a4c <HAL_RCC_OscConfig+0x94>
 8004a46:	4ba8      	ldr	r3, [pc, #672]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	e015      	b.n	8004a78 <HAL_RCC_OscConfig+0xc0>
 8004a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a58:	fa93 f3a3 	rbit	r3, r3
 8004a5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a64:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a68:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a74:	4b9c      	ldr	r3, [pc, #624]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a7c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a80:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a84:	fa92 f2a2 	rbit	r2, r2
 8004a88:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a8c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a90:	fab2 f282 	clz	r2, r2
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	f042 0220 	orr.w	r2, r2, #32
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	f002 021f 	and.w	r2, r2, #31
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 811f 	beq.w	8004cec <HAL_RCC_OscConfig+0x334>
 8004aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f040 8116 	bne.w	8004cec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f000 bfaf 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12e>
 8004ad8:	4b83      	ldr	r3, [pc, #524]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a82      	ldr	r2, [pc, #520]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e036      	b.n	8004b54 <HAL_RCC_OscConfig+0x19c>
 8004ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x158>
 8004af6:	4b7c      	ldr	r3, [pc, #496]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a7b      	ldr	r2, [pc, #492]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4b79      	ldr	r3, [pc, #484]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a78      	ldr	r2, [pc, #480]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e021      	b.n	8004b54 <HAL_RCC_OscConfig+0x19c>
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x184>
 8004b22:	4b71      	ldr	r3, [pc, #452]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a70      	ldr	r2, [pc, #448]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b6e      	ldr	r3, [pc, #440]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a6d      	ldr	r2, [pc, #436]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCC_OscConfig+0x19c>
 8004b3c:	4b6a      	ldr	r3, [pc, #424]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a69      	ldr	r2, [pc, #420]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	4b67      	ldr	r3, [pc, #412]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a66      	ldr	r2, [pc, #408]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b52:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b54:	4b64      	ldr	r3, [pc, #400]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	f023 020f 	bic.w	r2, r3, #15
 8004b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	495f      	ldr	r1, [pc, #380]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d059      	beq.n	8004c32 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7e:	f7fd fc6b 	bl	8002458 <HAL_GetTick>
 8004b82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fd fc66 	bl	8002458 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b64      	cmp	r3, #100	; 0x64
 8004b96:	d902      	bls.n	8004b9e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	f000 bf43 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>
 8004b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ba2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004bb2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d102      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x218>
 8004bca:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	e015      	b.n	8004bfc <HAL_RCC_OscConfig+0x244>
 8004bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004bf0:	fa93 f3a3 	rbit	r3, r3
 8004bf4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004bf8:	4b3b      	ldr	r3, [pc, #236]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c00:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c08:	fa92 f2a2 	rbit	r2, r2
 8004c0c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c10:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c14:	fab2 f282 	clz	r2, r2
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	f042 0220 	orr.w	r2, r2, #32
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	f002 021f 	and.w	r2, r2, #31
 8004c24:	2101      	movs	r1, #1
 8004c26:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0ab      	beq.n	8004b88 <HAL_RCC_OscConfig+0x1d0>
 8004c30:	e05d      	b.n	8004cee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fd fc11 	bl	8002458 <HAL_GetTick>
 8004c36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fc0c 	bl	8002458 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b64      	cmp	r3, #100	; 0x64
 8004c4a:	d902      	bls.n	8004c52 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	f000 bee9 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>
 8004c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c56:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c5e:	fa93 f3a3 	rbit	r3, r3
 8004c62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <HAL_RCC_OscConfig+0x2cc>
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	e015      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2f8>
 8004c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c88:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004ca0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004ca4:	fa93 f3a3 	rbit	r3, r3
 8004ca8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <HAL_RCC_OscConfig+0x330>)
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cb4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004cb8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004cbc:	fa92 f2a2 	rbit	r2, r2
 8004cc0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004cc4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004cc8:	fab2 f282 	clz	r2, r2
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	f042 0220 	orr.w	r2, r2, #32
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	f002 021f 	and.w	r2, r2, #31
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f202 	lsl.w	r2, r1, r2
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ab      	bne.n	8004c3c <HAL_RCC_OscConfig+0x284>
 8004ce4:	e003      	b.n	8004cee <HAL_RCC_OscConfig+0x336>
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 817d 	beq.w	8004ffe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d04:	4ba6      	ldr	r3, [pc, #664]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00b      	beq.n	8004d28 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d10:	4ba3      	ldr	r3, [pc, #652]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d172      	bne.n	8004e02 <HAL_RCC_OscConfig+0x44a>
 8004d1c:	4ba0      	ldr	r3, [pc, #640]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d16c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x44a>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d102      	bne.n	8004d58 <HAL_RCC_OscConfig+0x3a0>
 8004d52:	4b93      	ldr	r3, [pc, #588]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	e013      	b.n	8004d80 <HAL_RCC_OscConfig+0x3c8>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d7c:	4b88      	ldr	r3, [pc, #544]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2202      	movs	r2, #2
 8004d82:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d86:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d8a:	fa92 f2a2 	rbit	r2, r2
 8004d8e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d92:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d96:	fab2 f282 	clz	r2, r2
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	f042 0220 	orr.w	r2, r2, #32
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	f002 021f 	and.w	r2, r2, #31
 8004da6:	2101      	movs	r1, #1
 8004da8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x410>
 8004db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d002      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f000 be2e 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b75      	ldr	r3, [pc, #468]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	21f8      	movs	r1, #248	; 0xf8
 8004dde:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004de6:	fa91 f1a1 	rbit	r1, r1
 8004dea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004dee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004df2:	fab1 f181 	clz	r1, r1
 8004df6:	b2c9      	uxtb	r1, r1
 8004df8:	408b      	lsls	r3, r1
 8004dfa:	4969      	ldr	r1, [pc, #420]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e00:	e0fd      	b.n	8004ffe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8088 	beq.w	8004f24 <HAL_RCC_OscConfig+0x56c>
 8004e14:	2301      	movs	r3, #1
 8004e16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e1e:	fa93 f3a3 	rbit	r3, r3
 8004e22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fb0a 	bl	8002458 <HAL_GetTick>
 8004e44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e48:	e00a      	b.n	8004e60 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4a:	f7fd fb05 	bl	8002458 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d902      	bls.n	8004e60 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	f000 bde2 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e6a:	fa93 f3a3 	rbit	r3, r3
 8004e6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d102      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4d8>
 8004e8a:	4b45      	ldr	r3, [pc, #276]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	e013      	b.n	8004eb8 <HAL_RCC_OscConfig+0x500>
 8004e90:	2302      	movs	r3, #2
 8004e92:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e9a:	fa93 f3a3 	rbit	r3, r3
 8004e9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ea8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004eb4:	4b3a      	ldr	r3, [pc, #232]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004ebe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004ec2:	fa92 f2a2 	rbit	r2, r2
 8004ec6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004eca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004ece:	fab2 f282 	clz	r2, r2
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	f042 0220 	orr.w	r2, r2, #32
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	f002 021f 	and.w	r2, r2, #31
 8004ede:	2101      	movs	r1, #1
 8004ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0af      	beq.n	8004e4a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eea:	4b2d      	ldr	r3, [pc, #180]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	21f8      	movs	r1, #248	; 0xf8
 8004f00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f08:	fa91 f1a1 	rbit	r1, r1
 8004f0c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004f10:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004f14:	fab1 f181 	clz	r1, r1
 8004f18:	b2c9      	uxtb	r1, r1
 8004f1a:	408b      	lsls	r3, r1
 8004f1c:	4920      	ldr	r1, [pc, #128]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
 8004f22:	e06c      	b.n	8004ffe <HAL_RCC_OscConfig+0x646>
 8004f24:	2301      	movs	r3, #1
 8004f26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f2e:	fa93 f3a3 	rbit	r3, r3
 8004f32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	fab3 f383 	clz	r3, r3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fd fa82 	bl	8002458 <HAL_GetTick>
 8004f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f58:	e00a      	b.n	8004f70 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f5a:	f7fd fa7d 	bl	8002458 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d902      	bls.n	8004f70 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	f000 bd5a 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>
 8004f70:	2302      	movs	r3, #2
 8004f72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f7a:	fa93 f3a3 	rbit	r3, r3
 8004f7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d104      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x5ec>
 8004f9a:	4b01      	ldr	r3, [pc, #4]	; (8004fa0 <HAL_RCC_OscConfig+0x5e8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	e015      	b.n	8004fcc <HAL_RCC_OscConfig+0x614>
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fc0:	fa93 f3a3 	rbit	r3, r3
 8004fc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fc8:	4bc8      	ldr	r3, [pc, #800]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004fd2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004fd6:	fa92 f2a2 	rbit	r2, r2
 8004fda:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004fde:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004fe2:	fab2 f282 	clz	r2, r2
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	f042 0220 	orr.w	r2, r2, #32
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	f002 021f 	and.w	r2, r2, #31
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1ad      	bne.n	8004f5a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8110 	beq.w	8005234 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d079      	beq.n	8005118 <HAL_RCC_OscConfig+0x760>
 8005024:	2301      	movs	r3, #1
 8005026:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	461a      	mov	r2, r3
 8005042:	4bab      	ldr	r3, [pc, #684]	; (80052f0 <HAL_RCC_OscConfig+0x938>)
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	461a      	mov	r2, r3
 800504a:	2301      	movs	r3, #1
 800504c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504e:	f7fd fa03 	bl	8002458 <HAL_GetTick>
 8005052:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005056:	e00a      	b.n	800506e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005058:	f7fd f9fe 	bl	8002458 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d902      	bls.n	800506e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	f000 bcdb 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>
 800506e:	2302      	movs	r3, #2
 8005070:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005078:	fa93 f3a3 	rbit	r3, r3
 800507c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005084:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005088:	2202      	movs	r2, #2
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005090:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	fa93 f2a3 	rbit	r2, r3
 800509a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ac:	2202      	movs	r2, #2
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	fa93 f2a3 	rbit	r2, r3
 80050be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c8:	4b88      	ldr	r3, [pc, #544]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 80050ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050d4:	2102      	movs	r1, #2
 80050d6:	6019      	str	r1, [r3, #0]
 80050d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	fa93 f1a3 	rbit	r1, r3
 80050e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050ee:	6019      	str	r1, [r3, #0]
  return result;
 80050f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2101      	movs	r1, #1
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0a0      	beq.n	8005058 <HAL_RCC_OscConfig+0x6a0>
 8005116:	e08d      	b.n	8005234 <HAL_RCC_OscConfig+0x87c>
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005128:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	fa93 f2a3 	rbit	r2, r3
 8005132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005136:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800513a:	601a      	str	r2, [r3, #0]
  return result;
 800513c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005140:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005144:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	4b68      	ldr	r3, [pc, #416]	; (80052f0 <HAL_RCC_OscConfig+0x938>)
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	461a      	mov	r2, r3
 8005156:	2300      	movs	r3, #0
 8005158:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fd f97d 	bl	8002458 <HAL_GetTick>
 800515e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005162:	e00a      	b.n	800517a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005164:	f7fd f978 	bl	8002458 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d902      	bls.n	800517a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	f000 bc55 	b.w	8005a24 <HAL_RCC_OscConfig+0x106c>
 800517a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005182:	2202      	movs	r2, #2
 8005184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	fa93 f2a3 	rbit	r2, r3
 8005194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005198:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051a6:	2202      	movs	r2, #2
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	fa93 f2a3 	rbit	r2, r3
 80051b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ca:	2202      	movs	r2, #2
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	fa93 f2a3 	rbit	r2, r3
 80051dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80051e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e6:	4b41      	ldr	r3, [pc, #260]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 80051e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051f2:	2102      	movs	r1, #2
 80051f4:	6019      	str	r1, [r3, #0]
 80051f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	fa93 f1a3 	rbit	r1, r3
 8005204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005208:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800520c:	6019      	str	r1, [r3, #0]
  return result;
 800520e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005212:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	fab3 f383 	clz	r3, r3
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2101      	movs	r1, #1
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	4013      	ands	r3, r2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d197      	bne.n	8005164 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 81a1 	beq.w	800558c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005250:	4b26      	ldr	r3, [pc, #152]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d116      	bne.n	800528a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525c:	4b23      	ldr	r3, [pc, #140]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	4a22      	ldr	r2, [pc, #136]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005266:	61d3      	str	r3, [r2, #28]
 8005268:	4b20      	ldr	r3, [pc, #128]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005274:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005282:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <HAL_RCC_OscConfig+0x93c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11a      	bne.n	80052cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005296:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <HAL_RCC_OscConfig+0x93c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <HAL_RCC_OscConfig+0x93c>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fd f8d9 	bl	8002458 <HAL_GetTick>
 80052a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052aa:	e009      	b.n	80052c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ac:	f7fd f8d4 	bl	8002458 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	; 0x64
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e3b1      	b.n	8005a24 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <HAL_RCC_OscConfig+0x93c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0ef      	beq.n	80052ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10d      	bne.n	80052f8 <HAL_RCC_OscConfig+0x940>
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	4a02      	ldr	r2, [pc, #8]	; (80052ec <HAL_RCC_OscConfig+0x934>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6213      	str	r3, [r2, #32]
 80052e8:	e03c      	b.n	8005364 <HAL_RCC_OscConfig+0x9ac>
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	10908120 	.word	0x10908120
 80052f4:	40007000 	.word	0x40007000
 80052f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10c      	bne.n	8005322 <HAL_RCC_OscConfig+0x96a>
 8005308:	4bc1      	ldr	r3, [pc, #772]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	4ac0      	ldr	r2, [pc, #768]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	6213      	str	r3, [r2, #32]
 8005314:	4bbe      	ldr	r3, [pc, #760]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4abd      	ldr	r2, [pc, #756]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 800531a:	f023 0304 	bic.w	r3, r3, #4
 800531e:	6213      	str	r3, [r2, #32]
 8005320:	e020      	b.n	8005364 <HAL_RCC_OscConfig+0x9ac>
 8005322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b05      	cmp	r3, #5
 8005330:	d10c      	bne.n	800534c <HAL_RCC_OscConfig+0x994>
 8005332:	4bb7      	ldr	r3, [pc, #732]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	4ab6      	ldr	r2, [pc, #728]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	6213      	str	r3, [r2, #32]
 800533e:	4bb4      	ldr	r3, [pc, #720]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	4ab3      	ldr	r2, [pc, #716]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6213      	str	r3, [r2, #32]
 800534a:	e00b      	b.n	8005364 <HAL_RCC_OscConfig+0x9ac>
 800534c:	4bb0      	ldr	r3, [pc, #704]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	4aaf      	ldr	r2, [pc, #700]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	6213      	str	r3, [r2, #32]
 8005358:	4bad      	ldr	r3, [pc, #692]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4aac      	ldr	r2, [pc, #688]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 800535e:	f023 0304 	bic.w	r3, r3, #4
 8005362:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8081 	beq.w	8005478 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005376:	f7fd f86f 	bl	8002458 <HAL_GetTick>
 800537a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005380:	f7fd f86a 	bl	8002458 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	4293      	cmp	r3, r2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e345      	b.n	8005a24 <HAL_RCC_OscConfig+0x106c>
 8005398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053a0:	2202      	movs	r2, #2
 80053a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	fa93 f2a3 	rbit	r2, r3
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80053c4:	2202      	movs	r2, #2
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	fa93 f2a3 	rbit	r2, r3
 80053d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80053de:	601a      	str	r2, [r3, #0]
  return result;
 80053e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80053e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ea:	fab3 f383 	clz	r3, r3
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f043 0302 	orr.w	r3, r3, #2
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d102      	bne.n	8005404 <HAL_RCC_OscConfig+0xa4c>
 80053fe:	4b84      	ldr	r3, [pc, #528]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	e013      	b.n	800542c <HAL_RCC_OscConfig+0xa74>
 8005404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005408:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800540c:	2202      	movs	r2, #2
 800540e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005414:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	fa93 f2a3 	rbit	r2, r3
 800541e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005422:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	4b79      	ldr	r3, [pc, #484]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005430:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005434:	2102      	movs	r1, #2
 8005436:	6011      	str	r1, [r2, #0]
 8005438:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800543c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	fa92 f1a2 	rbit	r1, r2
 8005446:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800544a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800544e:	6011      	str	r1, [r2, #0]
  return result;
 8005450:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005454:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	fab2 f282 	clz	r2, r2
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	f002 021f 	and.w	r2, r2, #31
 800546a:	2101      	movs	r1, #1
 800546c:	fa01 f202 	lsl.w	r2, r1, r2
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d084      	beq.n	8005380 <HAL_RCC_OscConfig+0x9c8>
 8005476:	e07f      	b.n	8005578 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005478:	f7fc ffee 	bl	8002458 <HAL_GetTick>
 800547c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005480:	e00b      	b.n	800549a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fc ffe9 	bl	8002458 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e2c4      	b.n	8005a24 <HAL_RCC_OscConfig+0x106c>
 800549a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80054a2:	2202      	movs	r2, #2
 80054a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	fa93 f2a3 	rbit	r2, r3
 80054b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80054c6:	2202      	movs	r2, #2
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	fa93 f2a3 	rbit	r2, r3
 80054d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80054e0:	601a      	str	r2, [r3, #0]
  return result;
 80054e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80054ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ec:	fab3 f383 	clz	r3, r3
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f043 0302 	orr.w	r3, r3, #2
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d102      	bne.n	8005506 <HAL_RCC_OscConfig+0xb4e>
 8005500:	4b43      	ldr	r3, [pc, #268]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	e013      	b.n	800552e <HAL_RCC_OscConfig+0xb76>
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800550e:	2202      	movs	r2, #2
 8005510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005516:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	fa93 f2a3 	rbit	r2, r3
 8005520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005524:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	4b39      	ldr	r3, [pc, #228]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005532:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005536:	2102      	movs	r1, #2
 8005538:	6011      	str	r1, [r2, #0]
 800553a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800553e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	fa92 f1a2 	rbit	r1, r2
 8005548:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800554c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005550:	6011      	str	r1, [r2, #0]
  return result;
 8005552:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005556:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	fab2 f282 	clz	r2, r2
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	f002 021f 	and.w	r2, r2, #31
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f202 	lsl.w	r2, r1, r2
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d184      	bne.n	8005482 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005578:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800557c:	2b01      	cmp	r3, #1
 800557e:	d105      	bne.n	800558c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005580:	4b23      	ldr	r3, [pc, #140]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 8005586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800558c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8242 	beq.w	8005a22 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800559e:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <HAL_RCC_OscConfig+0xc58>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	f000 8213 	beq.w	80059d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	f040 8162 	bne.w	8005882 <HAL_RCC_OscConfig+0xeca>
 80055be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80055c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	fa93 f2a3 	rbit	r2, r3
 80055da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80055e2:	601a      	str	r2, [r3, #0]
  return result;
 80055e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80055ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ee:	fab3 f383 	clz	r3, r3
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	461a      	mov	r2, r3
 8005600:	2300      	movs	r3, #0
 8005602:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005604:	f7fc ff28 	bl	8002458 <HAL_GetTick>
 8005608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800560c:	e00c      	b.n	8005628 <HAL_RCC_OscConfig+0xc70>
 800560e:	bf00      	nop
 8005610:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005614:	f7fc ff20 	bl	8002458 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e1fd      	b.n	8005a24 <HAL_RCC_OscConfig+0x106c>
 8005628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	fa93 f2a3 	rbit	r2, r3
 8005644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005648:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800564c:	601a      	str	r2, [r3, #0]
  return result;
 800564e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005652:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005656:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005658:	fab3 f383 	clz	r3, r3
 800565c:	b2db      	uxtb	r3, r3
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d102      	bne.n	8005672 <HAL_RCC_OscConfig+0xcba>
 800566c:	4bb0      	ldr	r3, [pc, #704]	; (8005930 <HAL_RCC_OscConfig+0xf78>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	e027      	b.n	80056c2 <HAL_RCC_OscConfig+0xd0a>
 8005672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005676:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800567a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800567e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005684:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	fa93 f2a3 	rbit	r2, r3
 800568e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005692:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80056a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	fa93 f2a3 	rbit	r2, r3
 80056b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	4b9c      	ldr	r3, [pc, #624]	; (8005930 <HAL_RCC_OscConfig+0xf78>)
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80056ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056ce:	6011      	str	r1, [r2, #0]
 80056d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	fa92 f1a2 	rbit	r1, r2
 80056de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80056e6:	6011      	str	r1, [r2, #0]
  return result;
 80056e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	fab2 f282 	clz	r2, r2
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	f042 0220 	orr.w	r2, r2, #32
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	f002 021f 	and.w	r2, r2, #31
 8005702:	2101      	movs	r1, #1
 8005704:	fa01 f202 	lsl.w	r2, r1, r2
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d182      	bne.n	8005614 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800570e:	4b88      	ldr	r3, [pc, #544]	; (8005930 <HAL_RCC_OscConfig+0xf78>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	430b      	orrs	r3, r1
 8005730:	497f      	ldr	r1, [pc, #508]	; (8005930 <HAL_RCC_OscConfig+0xf78>)
 8005732:	4313      	orrs	r3, r2
 8005734:	604b      	str	r3, [r1, #4]
 8005736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800573e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005748:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	fa93 f2a3 	rbit	r2, r3
 8005752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005756:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800575a:	601a      	str	r2, [r3, #0]
  return result;
 800575c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005760:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005764:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005766:	fab3 f383 	clz	r3, r3
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005770:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	461a      	mov	r2, r3
 8005778:	2301      	movs	r3, #1
 800577a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fc fe6c 	bl	8002458 <HAL_GetTick>
 8005780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005784:	e009      	b.n	800579a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005786:	f7fc fe67 	bl	8002458 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e144      	b.n	8005a24 <HAL_RCC_OscConfig+0x106c>
 800579a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80057a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	fa93 f2a3 	rbit	r2, r3
 80057b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80057be:	601a      	str	r2, [r3, #0]
  return result;
 80057c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80057c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057ca:	fab3 f383 	clz	r3, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d102      	bne.n	80057e4 <HAL_RCC_OscConfig+0xe2c>
 80057de:	4b54      	ldr	r3, [pc, #336]	; (8005930 <HAL_RCC_OscConfig+0xf78>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	e027      	b.n	8005834 <HAL_RCC_OscConfig+0xe7c>
 80057e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	fa93 f2a3 	rbit	r2, r3
 8005800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005804:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	fa93 f2a3 	rbit	r2, r3
 8005826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <HAL_RCC_OscConfig+0xf78>)
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005838:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800583c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005846:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	fa92 f1a2 	rbit	r1, r2
 8005850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005854:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005858:	6011      	str	r1, [r2, #0]
  return result;
 800585a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800585e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	fab2 f282 	clz	r2, r2
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	f042 0220 	orr.w	r2, r2, #32
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	f002 021f 	and.w	r2, r2, #31
 8005874:	2101      	movs	r1, #1
 8005876:	fa01 f202 	lsl.w	r2, r1, r2
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d082      	beq.n	8005786 <HAL_RCC_OscConfig+0xdce>
 8005880:	e0cf      	b.n	8005a22 <HAL_RCC_OscConfig+0x106a>
 8005882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005886:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800588a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800588e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005894:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	fa93 f2a3 	rbit	r2, r3
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80058a6:	601a      	str	r2, [r3, #0]
  return result;
 80058a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80058b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b2:	fab3 f383 	clz	r3, r3
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	461a      	mov	r2, r3
 80058c4:	2300      	movs	r3, #0
 80058c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fc fdc6 	bl	8002458 <HAL_GetTick>
 80058cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058d0:	e009      	b.n	80058e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fc fdc1 	bl	8002458 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e09e      	b.n	8005a24 <HAL_RCC_OscConfig+0x106c>
 80058e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	fa93 f2a3 	rbit	r2, r3
 8005902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005906:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800590a:	601a      	str	r2, [r3, #0]
  return result;
 800590c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005910:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005914:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005916:	fab3 f383 	clz	r3, r3
 800591a:	b2db      	uxtb	r3, r3
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b01      	cmp	r3, #1
 8005928:	d104      	bne.n	8005934 <HAL_RCC_OscConfig+0xf7c>
 800592a:	4b01      	ldr	r3, [pc, #4]	; (8005930 <HAL_RCC_OscConfig+0xf78>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	e029      	b.n	8005984 <HAL_RCC_OscConfig+0xfcc>
 8005930:	40021000 	.word	0x40021000
 8005934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005938:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800593c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005946:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	fa93 f2a3 	rbit	r2, r3
 8005950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005954:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	fa93 f2a3 	rbit	r2, r3
 8005976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	4b2b      	ldr	r3, [pc, #172]	; (8005a30 <HAL_RCC_OscConfig+0x1078>)
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005988:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800598c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005990:	6011      	str	r1, [r2, #0]
 8005992:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005996:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	fa92 f1a2 	rbit	r1, r2
 80059a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80059a8:	6011      	str	r1, [r2, #0]
  return result;
 80059aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	fab2 f282 	clz	r2, r2
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	f042 0220 	orr.w	r2, r2, #32
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	f002 021f 	and.w	r2, r2, #31
 80059c4:	2101      	movs	r1, #1
 80059c6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d180      	bne.n	80058d2 <HAL_RCC_OscConfig+0xf1a>
 80059d0:	e027      	b.n	8005a22 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e01e      	b.n	8005a24 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <HAL_RCC_OscConfig+0x1078>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80059f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d10b      	bne.n	8005a1e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005a06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40021000 	.word	0x40021000

08005a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b09e      	sub	sp, #120	; 0x78
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e162      	b.n	8005d12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b90      	ldr	r3, [pc, #576]	; (8005c90 <HAL_RCC_ClockConfig+0x25c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d910      	bls.n	8005a7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b8d      	ldr	r3, [pc, #564]	; (8005c90 <HAL_RCC_ClockConfig+0x25c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 0207 	bic.w	r2, r3, #7
 8005a62:	498b      	ldr	r1, [pc, #556]	; (8005c90 <HAL_RCC_ClockConfig+0x25c>)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b89      	ldr	r3, [pc, #548]	; (8005c90 <HAL_RCC_ClockConfig+0x25c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e14a      	b.n	8005d12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a88:	4b82      	ldr	r3, [pc, #520]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	497f      	ldr	r1, [pc, #508]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80dc 	beq.w	8005c60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d13c      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xf6>
 8005ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ab4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ab8:	fa93 f3a3 	rbit	r3, r3
 8005abc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac0:	fab3 f383 	clz	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <HAL_RCC_ClockConfig+0xa6>
 8005ad4:	4b6f      	ldr	r3, [pc, #444]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	e00f      	b.n	8005afa <HAL_RCC_ClockConfig+0xc6>
 8005ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ade:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ae2:	fa93 f3a3 	rbit	r3, r3
 8005ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8005ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aec:	663b      	str	r3, [r7, #96]	; 0x60
 8005aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005af0:	fa93 f3a3 	rbit	r3, r3
 8005af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af6:	4b67      	ldr	r3, [pc, #412]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005afe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b02:	fa92 f2a2 	rbit	r2, r2
 8005b06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005b08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b0a:	fab2 f282 	clz	r2, r2
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	f042 0220 	orr.w	r2, r2, #32
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	f002 021f 	and.w	r2, r2, #31
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d17b      	bne.n	8005c1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e0f3      	b.n	8005d12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d13c      	bne.n	8005bac <HAL_RCC_ClockConfig+0x178>
 8005b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b3a:	fa93 f3a3 	rbit	r3, r3
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b42:	fab3 f383 	clz	r3, r3
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x128>
 8005b56:	4b4f      	ldr	r3, [pc, #316]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	e00f      	b.n	8005b7c <HAL_RCC_ClockConfig+0x148>
 8005b5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b64:	fa93 f3a3 	rbit	r3, r3
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b72:	fa93 f3a3 	rbit	r3, r3
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b78:	4b46      	ldr	r3, [pc, #280]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b80:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b84:	fa92 f2a2 	rbit	r2, r2
 8005b88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8c:	fab2 f282 	clz	r2, r2
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	f042 0220 	orr.w	r2, r2, #32
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	f002 021f 	and.w	r2, r2, #31
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d13a      	bne.n	8005c1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0b2      	b.n	8005d12 <HAL_RCC_ClockConfig+0x2de>
 8005bac:	2302      	movs	r3, #2
 8005bae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	fa93 f3a3 	rbit	r3, r3
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bba:	fab3 f383 	clz	r3, r3
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x1a0>
 8005bce:	4b31      	ldr	r3, [pc, #196]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	e00d      	b.n	8005bf0 <HAL_RCC_ClockConfig+0x1bc>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	2302      	movs	r3, #2
 8005be2:	623b      	str	r3, [r7, #32]
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	fa93 f3a3 	rbit	r3, r3
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	4b29      	ldr	r3, [pc, #164]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	61ba      	str	r2, [r7, #24]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	fa92 f2a2 	rbit	r2, r2
 8005bfa:	617a      	str	r2, [r7, #20]
  return result;
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	fab2 f282 	clz	r2, r2
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	f042 0220 	orr.w	r2, r2, #32
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	f002 021f 	and.w	r2, r2, #31
 8005c0e:	2101      	movs	r1, #1
 8005c10:	fa01 f202 	lsl.w	r2, r1, r2
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e079      	b.n	8005d12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f023 0203 	bic.w	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	491a      	ldr	r1, [pc, #104]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c30:	f7fc fc12 	bl	8002458 <HAL_GetTick>
 8005c34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	e00a      	b.n	8005c4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c38:	f7fc fc0e 	bl	8002458 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e061      	b.n	8005d12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <HAL_RCC_ClockConfig+0x260>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 020c 	and.w	r2, r3, #12
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d1eb      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_RCC_ClockConfig+0x25c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d214      	bcs.n	8005c98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <HAL_RCC_ClockConfig+0x25c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 0207 	bic.w	r2, r3, #7
 8005c76:	4906      	ldr	r1, [pc, #24]	; (8005c90 <HAL_RCC_ClockConfig+0x25c>)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <HAL_RCC_ClockConfig+0x25c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e040      	b.n	8005d12 <HAL_RCC_ClockConfig+0x2de>
 8005c90:	40022000 	.word	0x40022000
 8005c94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <HAL_RCC_ClockConfig+0x2e8>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	491a      	ldr	r1, [pc, #104]	; (8005d1c <HAL_RCC_ClockConfig+0x2e8>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cc2:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <HAL_RCC_ClockConfig+0x2e8>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4912      	ldr	r1, [pc, #72]	; (8005d1c <HAL_RCC_ClockConfig+0x2e8>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005cd6:	f000 f829 	bl	8005d2c <HAL_RCC_GetSysClockFreq>
 8005cda:	4601      	mov	r1, r0
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <HAL_RCC_ClockConfig+0x2e8>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce4:	22f0      	movs	r2, #240	; 0xf0
 8005ce6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	fa92 f2a2 	rbit	r2, r2
 8005cee:	60fa      	str	r2, [r7, #12]
  return result;
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	fab2 f282 	clz	r2, r2
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	40d3      	lsrs	r3, r2
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <HAL_RCC_ClockConfig+0x2ec>)
 8005cfc:	5cd3      	ldrb	r3, [r2, r3]
 8005cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8005d02:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <HAL_RCC_ClockConfig+0x2f0>)
 8005d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <HAL_RCC_ClockConfig+0x2f4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fc fb60 	bl	80023d0 <HAL_InitTick>
  
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3778      	adds	r7, #120	; 0x78
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	0800b618 	.word	0x0800b618
 8005d24:	20000760 	.word	0x20000760
 8005d28:	20000764 	.word	0x20000764

08005d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b08b      	sub	sp, #44	; 0x2c
 8005d30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005d46:	4b29      	ldr	r3, [pc, #164]	; (8005dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 030c 	and.w	r3, r3, #12
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d002      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0x30>
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d003      	beq.n	8005d62 <HAL_RCC_GetSysClockFreq+0x36>
 8005d5a:	e03c      	b.n	8005dd6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d5c:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d5e:	623b      	str	r3, [r7, #32]
      break;
 8005d60:	e03c      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005d68:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005d6c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	fa92 f2a2 	rbit	r2, r2
 8005d74:	607a      	str	r2, [r7, #4]
  return result;
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	fab2 f282 	clz	r2, r2
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	40d3      	lsrs	r3, r2
 8005d80:	4a1c      	ldr	r2, [pc, #112]	; (8005df4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005d82:	5cd3      	ldrb	r3, [r2, r3]
 8005d84:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005d86:	4b19      	ldr	r3, [pc, #100]	; (8005dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	220f      	movs	r2, #15
 8005d90:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	fa92 f2a2 	rbit	r2, r2
 8005d98:	60fa      	str	r2, [r7, #12]
  return result;
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	fab2 f282 	clz	r2, r2
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	40d3      	lsrs	r3, r2
 8005da4:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005da6:	5cd3      	ldrb	r3, [r2, r3]
 8005da8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005db4:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc4:	e004      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4a0c      	ldr	r2, [pc, #48]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	623b      	str	r3, [r7, #32]
      break;
 8005dd4:	e002      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dd8:	623b      	str	r3, [r7, #32]
      break;
 8005dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	372c      	adds	r7, #44	; 0x2c
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000
 8005df0:	007a1200 	.word	0x007a1200
 8005df4:	0800b630 	.word	0x0800b630
 8005df8:	0800b640 	.word	0x0800b640
 8005dfc:	003d0900 	.word	0x003d0900

08005e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000760 	.word	0x20000760

08005e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005e1e:	f7ff ffef 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e22:	4601      	mov	r1, r0
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	fa92 f2a2 	rbit	r2, r2
 8005e38:	603a      	str	r2, [r7, #0]
  return result;
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	fab2 f282 	clz	r2, r2
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	40d3      	lsrs	r3, r2
 8005e44:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005e46:	5cd3      	ldrb	r3, [r2, r3]
 8005e48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40021000 	.word	0x40021000
 8005e58:	0800b628 	.word	0x0800b628

08005e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005e62:	f7ff ffcd 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e66:	4601      	mov	r1, r0
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005e70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005e74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	fa92 f2a2 	rbit	r2, r2
 8005e7c:	603a      	str	r2, [r7, #0]
  return result;
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	fab2 f282 	clz	r2, r2
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	40d3      	lsrs	r3, r2
 8005e88:	4a04      	ldr	r2, [pc, #16]	; (8005e9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005e8a:	5cd3      	ldrb	r3, [r2, r3]
 8005e8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800b628 	.word	0x0800b628

08005ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b092      	sub	sp, #72	; 0x48
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80d4 	beq.w	800606c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ec4:	4b4e      	ldr	r3, [pc, #312]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10e      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ed0:	4b4b      	ldr	r3, [pc, #300]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	4a4a      	ldr	r2, [pc, #296]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eda:	61d3      	str	r3, [r2, #28]
 8005edc:	4b48      	ldr	r3, [pc, #288]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eee:	4b45      	ldr	r3, [pc, #276]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d118      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005efa:	4b42      	ldr	r3, [pc, #264]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a41      	ldr	r2, [pc, #260]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f06:	f7fc faa7 	bl	8002458 <HAL_GetTick>
 8005f0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0c:	e008      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0e:	f7fc faa3 	bl	8002458 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b64      	cmp	r3, #100	; 0x64
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e14b      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f20:	4b38      	ldr	r3, [pc, #224]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f2c:	4b34      	ldr	r3, [pc, #208]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8084 	beq.w	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d07c      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f4c:	4b2c      	ldr	r3, [pc, #176]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	fa93 f3a3 	rbit	r3, r3
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f66:	fab3 f383 	clz	r3, r3
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b26      	ldr	r3, [pc, #152]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	461a      	mov	r2, r3
 8005f76:	2301      	movs	r3, #1
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	fa93 f3a3 	rbit	r3, r3
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f8a:	fab3 f383 	clz	r3, r3
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f9e:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d04b      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fae:	f7fc fa53 	bl	8002458 <HAL_GetTick>
 8005fb2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb4:	e00a      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb6:	f7fc fa4f 	bl	8002458 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e0f5      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	fa93 f3a3 	rbit	r3, r3
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd8:	2302      	movs	r3, #2
 8005fda:	623b      	str	r3, [r7, #32]
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	fa93 f3a3 	rbit	r3, r3
 8005fe2:	61fb      	str	r3, [r7, #28]
  return result;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe6:	fab3 f383 	clz	r3, r3
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f043 0302 	orr.w	r3, r3, #2
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d108      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005ffa:	4b01      	ldr	r3, [pc, #4]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	e00d      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006000:	40021000 	.word	0x40021000
 8006004:	40007000 	.word	0x40007000
 8006008:	10908100 	.word	0x10908100
 800600c:	2302      	movs	r3, #2
 800600e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	fa93 f3a3 	rbit	r3, r3
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	4b69      	ldr	r3, [pc, #420]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	2202      	movs	r2, #2
 800601e:	613a      	str	r2, [r7, #16]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	fa92 f2a2 	rbit	r2, r2
 8006026:	60fa      	str	r2, [r7, #12]
  return result;
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	fab2 f282 	clz	r2, r2
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	f002 021f 	and.w	r2, r2, #31
 800603a:	2101      	movs	r1, #1
 800603c:	fa01 f202 	lsl.w	r2, r1, r2
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0b7      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006046:	4b5e      	ldr	r3, [pc, #376]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	495b      	ldr	r1, [pc, #364]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006054:	4313      	orrs	r3, r2
 8006056:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006058:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800605c:	2b01      	cmp	r3, #1
 800605e:	d105      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006060:	4b57      	ldr	r3, [pc, #348]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	4a56      	ldr	r2, [pc, #344]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800606a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006078:	4b51      	ldr	r3, [pc, #324]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	f023 0203 	bic.w	r2, r3, #3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	494e      	ldr	r1, [pc, #312]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006086:	4313      	orrs	r3, r2
 8006088:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006096:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	f023 0210 	bic.w	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	4947      	ldr	r1, [pc, #284]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80060b4:	4b42      	ldr	r3, [pc, #264]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	493f      	ldr	r1, [pc, #252]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060d2:	4b3b      	ldr	r3, [pc, #236]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	f023 0220 	bic.w	r2, r3, #32
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	4938      	ldr	r1, [pc, #224]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060f0:	4b33      	ldr	r3, [pc, #204]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	4930      	ldr	r1, [pc, #192]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800610e:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	4929      	ldr	r1, [pc, #164]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800611c:	4313      	orrs	r3, r2
 800611e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800612c:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	4921      	ldr	r1, [pc, #132]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800613a:	4313      	orrs	r3, r2
 800613c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800614a:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	491a      	ldr	r1, [pc, #104]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006158:	4313      	orrs	r3, r2
 800615a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d008      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	4912      	ldr	r1, [pc, #72]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006176:	4313      	orrs	r3, r2
 8006178:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	490b      	ldr	r1, [pc, #44]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006194:	4313      	orrs	r3, r2
 8006196:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80061a4:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	4903      	ldr	r1, [pc, #12]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3748      	adds	r7, #72	; 0x48
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40021000 	.word	0x40021000

080061c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e049      	b.n	800626a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fb ff0c 	bl	8002008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f000 fb16 	bl	8006834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d001      	beq.n	800628c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e033      	b.n	80062f4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a19      	ldr	r2, [pc, #100]	; (8006300 <HAL_TIM_Base_Start+0x8c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_TIM_Base_Start+0x3e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d004      	beq.n	80062b2 <HAL_TIM_Base_Start+0x3e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a15      	ldr	r2, [pc, #84]	; (8006304 <HAL_TIM_Base_Start+0x90>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d115      	bne.n	80062de <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <HAL_TIM_Base_Start+0x94>)
 80062ba:	4013      	ands	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b06      	cmp	r3, #6
 80062c2:	d015      	beq.n	80062f0 <HAL_TIM_Base_Start+0x7c>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ca:	d011      	beq.n	80062f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062dc:	e008      	b.n	80062f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0201 	orr.w	r2, r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e000      	b.n	80062f2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40014000 	.word	0x40014000
 8006308:	00010007 	.word	0x00010007

0800630c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d001      	beq.n	8006324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e03b      	b.n	800639c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_TIM_Base_Start_IT+0x4e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634e:	d004      	beq.n	800635a <HAL_TIM_Base_Start_IT+0x4e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a15      	ldr	r2, [pc, #84]	; (80063ac <HAL_TIM_Base_Start_IT+0xa0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d115      	bne.n	8006386 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <HAL_TIM_Base_Start_IT+0xa4>)
 8006362:	4013      	ands	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b06      	cmp	r3, #6
 800636a:	d015      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x8c>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d011      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006384:	e008      	b.n	8006398 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0201 	orr.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e000      	b.n	800639a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006398:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40014000 	.word	0x40014000
 80063b0:	00010007 	.word	0x00010007

080063b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0201 	bic.w	r2, r2, #1
 80063ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10f      	bne.n	80063fc <HAL_TIM_Base_Stop_IT+0x48>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	f240 4344 	movw	r3, #1092	; 0x444
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_Base_Stop_IT+0x48>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0201 	bic.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d122      	bne.n	800646e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d11b      	bne.n	800646e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f06f 0202 	mvn.w	r2, #2
 800643e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9ce 	bl	80067f6 <HAL_TIM_IC_CaptureCallback>
 800645a:	e005      	b.n	8006468 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9c0 	bl	80067e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9d1 	bl	800680a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b04      	cmp	r3, #4
 800647a:	d122      	bne.n	80064c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d11b      	bne.n	80064c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f06f 0204 	mvn.w	r2, #4
 8006492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f9a4 	bl	80067f6 <HAL_TIM_IC_CaptureCallback>
 80064ae:	e005      	b.n	80064bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f996 	bl	80067e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f9a7 	bl	800680a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d122      	bne.n	8006516 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d11b      	bne.n	8006516 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f06f 0208 	mvn.w	r2, #8
 80064e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2204      	movs	r2, #4
 80064ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f97a 	bl	80067f6 <HAL_TIM_IC_CaptureCallback>
 8006502:	e005      	b.n	8006510 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f96c 	bl	80067e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f97d 	bl	800680a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b10      	cmp	r3, #16
 8006522:	d122      	bne.n	800656a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b10      	cmp	r3, #16
 8006530:	d11b      	bne.n	800656a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f06f 0210 	mvn.w	r2, #16
 800653a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2208      	movs	r2, #8
 8006540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f950 	bl	80067f6 <HAL_TIM_IC_CaptureCallback>
 8006556:	e005      	b.n	8006564 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f942 	bl	80067e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f953 	bl	800680a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d10e      	bne.n	8006596 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f06f 0201 	mvn.w	r2, #1
 800658e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fa ff53 	bl	800143c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b80      	cmp	r3, #128	; 0x80
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ae:	2b80      	cmp	r3, #128	; 0x80
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fab1 	bl	8006b24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d0:	d10e      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065dc:	2b80      	cmp	r3, #128	; 0x80
 80065de:	d107      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 faa4 	bl	8006b38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d10e      	bne.n	800661c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	d107      	bne.n	800661c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f901 	bl	800681e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b20      	cmp	r3, #32
 8006628:	d10e      	bne.n	8006648 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b20      	cmp	r3, #32
 8006636:	d107      	bne.n	8006648 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0220 	mvn.w	r2, #32
 8006640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fa64 	bl	8006b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006648:	bf00      	nop
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_TIM_ConfigClockSource+0x1c>
 8006668:	2302      	movs	r3, #2
 800666a:	e0b6      	b.n	80067da <HAL_TIM_ConfigClockSource+0x18a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800668a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800668e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006696:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a8:	d03e      	beq.n	8006728 <HAL_TIM_ConfigClockSource+0xd8>
 80066aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ae:	f200 8087 	bhi.w	80067c0 <HAL_TIM_ConfigClockSource+0x170>
 80066b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b6:	f000 8086 	beq.w	80067c6 <HAL_TIM_ConfigClockSource+0x176>
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066be:	d87f      	bhi.n	80067c0 <HAL_TIM_ConfigClockSource+0x170>
 80066c0:	2b70      	cmp	r3, #112	; 0x70
 80066c2:	d01a      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0xaa>
 80066c4:	2b70      	cmp	r3, #112	; 0x70
 80066c6:	d87b      	bhi.n	80067c0 <HAL_TIM_ConfigClockSource+0x170>
 80066c8:	2b60      	cmp	r3, #96	; 0x60
 80066ca:	d050      	beq.n	800676e <HAL_TIM_ConfigClockSource+0x11e>
 80066cc:	2b60      	cmp	r3, #96	; 0x60
 80066ce:	d877      	bhi.n	80067c0 <HAL_TIM_ConfigClockSource+0x170>
 80066d0:	2b50      	cmp	r3, #80	; 0x50
 80066d2:	d03c      	beq.n	800674e <HAL_TIM_ConfigClockSource+0xfe>
 80066d4:	2b50      	cmp	r3, #80	; 0x50
 80066d6:	d873      	bhi.n	80067c0 <HAL_TIM_ConfigClockSource+0x170>
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	d058      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x13e>
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	d86f      	bhi.n	80067c0 <HAL_TIM_ConfigClockSource+0x170>
 80066e0:	2b30      	cmp	r3, #48	; 0x30
 80066e2:	d064      	beq.n	80067ae <HAL_TIM_ConfigClockSource+0x15e>
 80066e4:	2b30      	cmp	r3, #48	; 0x30
 80066e6:	d86b      	bhi.n	80067c0 <HAL_TIM_ConfigClockSource+0x170>
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d060      	beq.n	80067ae <HAL_TIM_ConfigClockSource+0x15e>
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d867      	bhi.n	80067c0 <HAL_TIM_ConfigClockSource+0x170>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d05c      	beq.n	80067ae <HAL_TIM_ConfigClockSource+0x15e>
 80066f4:	2b10      	cmp	r3, #16
 80066f6:	d05a      	beq.n	80067ae <HAL_TIM_ConfigClockSource+0x15e>
 80066f8:	e062      	b.n	80067c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800670a:	f000 f97b 	bl	8006a04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800671c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	609a      	str	r2, [r3, #8]
      break;
 8006726:	e04f      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006738:	f000 f964 	bl	8006a04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800674a:	609a      	str	r2, [r3, #8]
      break;
 800674c:	e03c      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	461a      	mov	r2, r3
 800675c:	f000 f8d8 	bl	8006910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2150      	movs	r1, #80	; 0x50
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f931 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 800676c:	e02c      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800677a:	461a      	mov	r2, r3
 800677c:	f000 f8f7 	bl	800696e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2160      	movs	r1, #96	; 0x60
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f921 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 800678c:	e01c      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800679a:	461a      	mov	r2, r3
 800679c:	f000 f8b8 	bl	8006910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2140      	movs	r1, #64	; 0x40
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 f911 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 80067ac:	e00c      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f000 f908 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 80067be:	e003      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	73fb      	strb	r3, [r7, #15]
      break;
 80067c4:	e000      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80067c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a2e      	ldr	r2, [pc, #184]	; (8006900 <TIM_Base_SetConfig+0xcc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_Base_SetConfig+0x20>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006852:	d108      	bne.n	8006866 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a25      	ldr	r2, [pc, #148]	; (8006900 <TIM_Base_SetConfig+0xcc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00f      	beq.n	800688e <TIM_Base_SetConfig+0x5a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006874:	d00b      	beq.n	800688e <TIM_Base_SetConfig+0x5a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a22      	ldr	r2, [pc, #136]	; (8006904 <TIM_Base_SetConfig+0xd0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d007      	beq.n	800688e <TIM_Base_SetConfig+0x5a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a21      	ldr	r2, [pc, #132]	; (8006908 <TIM_Base_SetConfig+0xd4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d003      	beq.n	800688e <TIM_Base_SetConfig+0x5a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a20      	ldr	r2, [pc, #128]	; (800690c <TIM_Base_SetConfig+0xd8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d108      	bne.n	80068a0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <TIM_Base_SetConfig+0xcc>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00b      	beq.n	80068e4 <TIM_Base_SetConfig+0xb0>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0d      	ldr	r2, [pc, #52]	; (8006904 <TIM_Base_SetConfig+0xd0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d007      	beq.n	80068e4 <TIM_Base_SetConfig+0xb0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <TIM_Base_SetConfig+0xd4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_Base_SetConfig+0xb0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a0b      	ldr	r2, [pc, #44]	; (800690c <TIM_Base_SetConfig+0xd8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d103      	bne.n	80068ec <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	615a      	str	r2, [r3, #20]
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 030a 	bic.w	r3, r3, #10
 800694c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0210 	bic.w	r2, r3, #16
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	031b      	lsls	r3, r3, #12
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f043 0307 	orr.w	r3, r3, #7
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e04f      	b.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a21      	ldr	r2, [pc, #132]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d108      	bne.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a14      	ldr	r2, [pc, #80]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d004      	beq.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a10      	ldr	r2, [pc, #64]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d10c      	bne.n	8006aea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	40012c00 	.word	0x40012c00
 8006b0c:	40014000 	.word	0x40014000

08006b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e040      	b.n	8006be0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fb fa96 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2224      	movs	r2, #36	; 0x24
 8006b78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fc00 	bl	8007390 <UART_SetConfig>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e022      	b.n	8006be0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fd2a 	bl	80075fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fdb1 	bl	8007740 <UART_CheckIdleState>
 8006bde:	4603      	mov	r3, r0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d178      	bne.n	8006cf2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_UART_Transmit+0x24>
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e071      	b.n	8006cf4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2221      	movs	r2, #33	; 0x21
 8006c1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c1e:	f7fb fc1b 	bl	8002458 <HAL_GetTick>
 8006c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	88fa      	ldrh	r2, [r7, #6]
 8006c28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3c:	d108      	bne.n	8006c50 <HAL_UART_Transmit+0x68>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	e003      	b.n	8006c58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c58:	e030      	b.n	8006cbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2180      	movs	r1, #128	; 0x80
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fe13 	bl	8007890 <UART_WaitOnFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e03c      	b.n	8006cf4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c8c:	b292      	uxth	r2, r2
 8006c8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	3302      	adds	r3, #2
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e008      	b.n	8006caa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	781a      	ldrb	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	b292      	uxth	r2, r2
 8006ca2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1c8      	bne.n	8006c5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2140      	movs	r1, #64	; 0x40
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 fddc 	bl	8007890 <UART_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e005      	b.n	8006cf4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e000      	b.n	8006cf4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006cf2:	2302      	movs	r3, #2
  }
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	; 0x28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d132      	bne.n	8006d7a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <HAL_UART_Receive_IT+0x24>
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e02b      	b.n	8006d7c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d018      	beq.n	8006d6a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	613b      	str	r3, [r7, #16]
   return(result);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	623b      	str	r3, [r7, #32]
 8006d58:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	69f9      	ldr	r1, [r7, #28]
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e6      	bne.n	8006d38 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fdf5 	bl	8007960 <UART_Start_Receive_IT>
 8006d76:	4603      	mov	r3, r0
 8006d78:	e000      	b.n	8006d7c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
  }
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b0ba      	sub	sp, #232	; 0xe8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006daa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006dae:	f640 030f 	movw	r3, #2063	; 0x80f
 8006db2:	4013      	ands	r3, r2
 8006db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d115      	bne.n	8006dec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00f      	beq.n	8006dec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d009      	beq.n	8006dec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 82ab 	beq.w	8007338 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
      }
      return;
 8006dea:	e2a5      	b.n	8007338 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8117 	beq.w	8007024 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e06:	4b85      	ldr	r3, [pc, #532]	; (800701c <HAL_UART_IRQHandler+0x298>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 810a 	beq.w	8007024 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d011      	beq.n	8006e40 <HAL_UART_IRQHandler+0xbc>
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e36:	f043 0201 	orr.w	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d011      	beq.n	8006e70 <HAL_UART_IRQHandler+0xec>
 8006e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e66:	f043 0204 	orr.w	r2, r3, #4
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x11c>
 8006e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e96:	f043 0202 	orr.w	r2, r3, #2
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d017      	beq.n	8006edc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d105      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ebc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2208      	movs	r2, #8
 8006eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed2:	f043 0208 	orr.w	r2, r3, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d012      	beq.n	8006f0e <HAL_UART_IRQHandler+0x18a>
 8006ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00c      	beq.n	8006f0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f04:	f043 0220 	orr.w	r2, r3, #32
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8211 	beq.w	800733c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00d      	beq.n	8006f42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d005      	beq.n	8006f66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d04f      	beq.n	8007006 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fdc0 	bl	8007aec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d141      	bne.n	8006ffe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1d9      	bne.n	8006f7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d013      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd2:	4a13      	ldr	r2, [pc, #76]	; (8007020 <HAL_UART_IRQHandler+0x29c>)
 8006fd4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fc fc3c 	bl	8003858 <HAL_DMA_Abort_IT>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d017      	beq.n	8007016 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff4:	e00f      	b.n	8007016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9b4 	bl	8007364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffc:	e00b      	b.n	8007016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9b0 	bl	8007364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007004:	e007      	b.n	8007016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f9ac 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007014:	e192      	b.n	800733c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007016:	bf00      	nop
    return;
 8007018:	e190      	b.n	800733c <HAL_UART_IRQHandler+0x5b8>
 800701a:	bf00      	nop
 800701c:	04000120 	.word	0x04000120
 8007020:	08007bb5 	.word	0x08007bb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007028:	2b01      	cmp	r3, #1
 800702a:	f040 814b 	bne.w	80072c4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007032:	f003 0310 	and.w	r3, r3, #16
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 8144 	beq.w	80072c4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800703c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 813d 	beq.w	80072c4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2210      	movs	r2, #16
 8007050:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	f040 80b5 	bne.w	80071cc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800706e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 8164 	beq.w	8007340 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800707e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007082:	429a      	cmp	r2, r3
 8007084:	f080 815c 	bcs.w	8007340 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800708e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	2b20      	cmp	r3, #32
 800709a:	f000 8086 	beq.w	80071aa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1da      	bne.n	800709e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3308      	adds	r3, #8
 80070ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070fa:	f023 0301 	bic.w	r3, r3, #1
 80070fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800710c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007110:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007114:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800711e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e1      	bne.n	80070e8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3308      	adds	r3, #8
 800712a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800713a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3308      	adds	r3, #8
 8007144:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007148:	66fa      	str	r2, [r7, #108]	; 0x6c
 800714a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800714e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e3      	bne.n	8007124 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800717a:	f023 0310 	bic.w	r3, r3, #16
 800717e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800718c:	65bb      	str	r3, [r7, #88]	; 0x58
 800718e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007192:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800719a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e4      	bne.n	800716a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fc fb1e 	bl	80037e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f8d7 	bl	8007378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071ca:	e0b9      	b.n	8007340 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80ab 	beq.w	8007344 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80071ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 80a6 	beq.w	8007344 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800720c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800721a:	647b      	str	r3, [r7, #68]	; 0x44
 800721c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e4      	bne.n	80071f8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	623b      	str	r3, [r7, #32]
   return(result);
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007252:	633a      	str	r2, [r7, #48]	; 0x30
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e3      	bne.n	800722e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	60fb      	str	r3, [r7, #12]
   return(result);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0310 	bic.w	r3, r3, #16
 800728e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	69b9      	ldr	r1, [r7, #24]
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	617b      	str	r3, [r7, #20]
   return(result);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e4      	bne.n	800727a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f85b 	bl	8007378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072c2:	e03f      	b.n	8007344 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00e      	beq.n	80072ee <HAL_UART_IRQHandler+0x56a>
 80072d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fe4c 	bl	8007f84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072ec:	e02d      	b.n	800734a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00e      	beq.n	8007318 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	2b00      	cmp	r3, #0
 8007304:	d008      	beq.n	8007318 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01c      	beq.n	8007348 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
    }
    return;
 8007316:	e017      	b.n	8007348 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d012      	beq.n	800734a <HAL_UART_IRQHandler+0x5c6>
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00c      	beq.n	800734a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc55 	bl	8007be0 <UART_EndTransmit_IT>
    return;
 8007336:	e008      	b.n	800734a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007338:	bf00      	nop
 800733a:	e006      	b.n	800734a <HAL_UART_IRQHandler+0x5c6>
    return;
 800733c:	bf00      	nop
 800733e:	e004      	b.n	800734a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007340:	bf00      	nop
 8007342:	e002      	b.n	800734a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007344:	bf00      	nop
 8007346:	e000      	b.n	800734a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007348:	bf00      	nop
  }

}
 800734a:	37e8      	adds	r7, #232	; 0xe8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4b8a      	ldr	r3, [pc, #552]	; (80075e4 <UART_SetConfig+0x254>)
 80073bc:	4013      	ands	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	6979      	ldr	r1, [r7, #20]
 80073c4:	430b      	orrs	r3, r1
 80073c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	430a      	orrs	r2, r1
 8007400:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a78      	ldr	r2, [pc, #480]	; (80075e8 <UART_SetConfig+0x258>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d120      	bne.n	800744e <UART_SetConfig+0xbe>
 800740c:	4b77      	ldr	r3, [pc, #476]	; (80075ec <UART_SetConfig+0x25c>)
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	2b03      	cmp	r3, #3
 8007416:	d817      	bhi.n	8007448 <UART_SetConfig+0xb8>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <UART_SetConfig+0x90>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007431 	.word	0x08007431
 8007424:	0800743d 	.word	0x0800743d
 8007428:	08007443 	.word	0x08007443
 800742c:	08007437 	.word	0x08007437
 8007430:	2300      	movs	r3, #0
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e01d      	b.n	8007472 <UART_SetConfig+0xe2>
 8007436:	2302      	movs	r3, #2
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e01a      	b.n	8007472 <UART_SetConfig+0xe2>
 800743c:	2304      	movs	r3, #4
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e017      	b.n	8007472 <UART_SetConfig+0xe2>
 8007442:	2308      	movs	r3, #8
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e014      	b.n	8007472 <UART_SetConfig+0xe2>
 8007448:	2310      	movs	r3, #16
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e011      	b.n	8007472 <UART_SetConfig+0xe2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a67      	ldr	r2, [pc, #412]	; (80075f0 <UART_SetConfig+0x260>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d102      	bne.n	800745e <UART_SetConfig+0xce>
 8007458:	2300      	movs	r3, #0
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e009      	b.n	8007472 <UART_SetConfig+0xe2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a64      	ldr	r2, [pc, #400]	; (80075f4 <UART_SetConfig+0x264>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d102      	bne.n	800746e <UART_SetConfig+0xde>
 8007468:	2300      	movs	r3, #0
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e001      	b.n	8007472 <UART_SetConfig+0xe2>
 800746e:	2310      	movs	r3, #16
 8007470:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747a:	d15a      	bne.n	8007532 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800747c:	7ffb      	ldrb	r3, [r7, #31]
 800747e:	2b08      	cmp	r3, #8
 8007480:	d827      	bhi.n	80074d2 <UART_SetConfig+0x142>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <UART_SetConfig+0xf8>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	080074d3 	.word	0x080074d3
 8007498:	080074c3 	.word	0x080074c3
 800749c:	080074d3 	.word	0x080074d3
 80074a0:	080074d3 	.word	0x080074d3
 80074a4:	080074d3 	.word	0x080074d3
 80074a8:	080074cb 	.word	0x080074cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ac:	f7fe fcb4 	bl	8005e18 <HAL_RCC_GetPCLK1Freq>
 80074b0:	61b8      	str	r0, [r7, #24]
        break;
 80074b2:	e013      	b.n	80074dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b4:	f7fe fcd2 	bl	8005e5c <HAL_RCC_GetPCLK2Freq>
 80074b8:	61b8      	str	r0, [r7, #24]
        break;
 80074ba:	e00f      	b.n	80074dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074bc:	4b4e      	ldr	r3, [pc, #312]	; (80075f8 <UART_SetConfig+0x268>)
 80074be:	61bb      	str	r3, [r7, #24]
        break;
 80074c0:	e00c      	b.n	80074dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c2:	f7fe fc33 	bl	8005d2c <HAL_RCC_GetSysClockFreq>
 80074c6:	61b8      	str	r0, [r7, #24]
        break;
 80074c8:	e008      	b.n	80074dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ce:	61bb      	str	r3, [r7, #24]
        break;
 80074d0:	e004      	b.n	80074dc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	77bb      	strb	r3, [r7, #30]
        break;
 80074da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d074      	beq.n	80075cc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	005a      	lsls	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	441a      	add	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2b0f      	cmp	r3, #15
 80074fc:	d916      	bls.n	800752c <UART_SetConfig+0x19c>
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007504:	d212      	bcs.n	800752c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f023 030f 	bic.w	r3, r3, #15
 800750e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	b29b      	uxth	r3, r3
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	b29a      	uxth	r2, r3
 800751c:	89fb      	ldrh	r3, [r7, #14]
 800751e:	4313      	orrs	r3, r2
 8007520:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	89fa      	ldrh	r2, [r7, #14]
 8007528:	60da      	str	r2, [r3, #12]
 800752a:	e04f      	b.n	80075cc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	77bb      	strb	r3, [r7, #30]
 8007530:	e04c      	b.n	80075cc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007532:	7ffb      	ldrb	r3, [r7, #31]
 8007534:	2b08      	cmp	r3, #8
 8007536:	d828      	bhi.n	800758a <UART_SetConfig+0x1fa>
 8007538:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <UART_SetConfig+0x1b0>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007565 	.word	0x08007565
 8007544:	0800756d 	.word	0x0800756d
 8007548:	08007575 	.word	0x08007575
 800754c:	0800758b 	.word	0x0800758b
 8007550:	0800757b 	.word	0x0800757b
 8007554:	0800758b 	.word	0x0800758b
 8007558:	0800758b 	.word	0x0800758b
 800755c:	0800758b 	.word	0x0800758b
 8007560:	08007583 	.word	0x08007583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007564:	f7fe fc58 	bl	8005e18 <HAL_RCC_GetPCLK1Freq>
 8007568:	61b8      	str	r0, [r7, #24]
        break;
 800756a:	e013      	b.n	8007594 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800756c:	f7fe fc76 	bl	8005e5c <HAL_RCC_GetPCLK2Freq>
 8007570:	61b8      	str	r0, [r7, #24]
        break;
 8007572:	e00f      	b.n	8007594 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007574:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <UART_SetConfig+0x268>)
 8007576:	61bb      	str	r3, [r7, #24]
        break;
 8007578:	e00c      	b.n	8007594 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757a:	f7fe fbd7 	bl	8005d2c <HAL_RCC_GetSysClockFreq>
 800757e:	61b8      	str	r0, [r7, #24]
        break;
 8007580:	e008      	b.n	8007594 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007586:	61bb      	str	r3, [r7, #24]
        break;
 8007588:	e004      	b.n	8007594 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	77bb      	strb	r3, [r7, #30]
        break;
 8007592:	bf00      	nop
    }

    if (pclk != 0U)
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d018      	beq.n	80075cc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	085a      	lsrs	r2, r3, #1
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	441a      	add	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b0f      	cmp	r3, #15
 80075b2:	d909      	bls.n	80075c8 <UART_SetConfig+0x238>
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ba:	d205      	bcs.n	80075c8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	b29a      	uxth	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60da      	str	r2, [r3, #12]
 80075c6:	e001      	b.n	80075cc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80075d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	efff69f3 	.word	0xefff69f3
 80075e8:	40013800 	.word	0x40013800
 80075ec:	40021000 	.word	0x40021000
 80075f0:	40004400 	.word	0x40004400
 80075f4:	40004800 	.word	0x40004800
 80075f8:	007a1200 	.word	0x007a1200

080075fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01a      	beq.n	8007712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076fa:	d10a      	bne.n	8007712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	605a      	str	r2, [r3, #4]
  }
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b098      	sub	sp, #96	; 0x60
 8007744:	af02      	add	r7, sp, #8
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007750:	f7fa fe82 	bl	8002458 <HAL_GetTick>
 8007754:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b08      	cmp	r3, #8
 8007762:	d12e      	bne.n	80077c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800776c:	2200      	movs	r2, #0
 800776e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f88c 	bl	8007890 <UART_WaitOnFlagUntilTimeout>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d021      	beq.n	80077c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007792:	653b      	str	r3, [r7, #80]	; 0x50
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779c:	647b      	str	r3, [r7, #68]	; 0x44
 800779e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e6      	bne.n	800777e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e062      	b.n	8007888 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d149      	bne.n	8007864 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d8:	2200      	movs	r2, #0
 80077da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f856 	bl	8007890 <UART_WaitOnFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d03c      	beq.n	8007864 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	623b      	str	r3, [r7, #32]
   return(result);
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007808:	633b      	str	r3, [r7, #48]	; 0x30
 800780a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800780e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e6      	bne.n	80077ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3308      	adds	r3, #8
 8007822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	60fb      	str	r3, [r7, #12]
   return(result);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0301 	bic.w	r3, r3, #1
 8007832:	64bb      	str	r3, [r7, #72]	; 0x48
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800783c:	61fa      	str	r2, [r7, #28]
 800783e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	69b9      	ldr	r1, [r7, #24]
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	617b      	str	r3, [r7, #20]
   return(result);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e5      	bne.n	800781c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e011      	b.n	8007888 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2220      	movs	r2, #32
 800786e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3758      	adds	r7, #88	; 0x58
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a0:	e049      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d045      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078aa:	f7fa fdd5 	bl	8002458 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d302      	bcc.n	80078c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e048      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d031      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d110      	bne.n	8007902 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2208      	movs	r2, #8
 80078e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f8ff 	bl	8007aec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2208      	movs	r2, #8
 80078f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e029      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800790c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007910:	d111      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800791a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f8e5 	bl	8007aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e00f      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4013      	ands	r3, r2
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	bf0c      	ite	eq
 8007946:	2301      	moveq	r3, #1
 8007948:	2300      	movne	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	429a      	cmp	r2, r3
 8007952:	d0a6      	beq.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007960:	b480      	push	{r7}
 8007962:	b097      	sub	sp, #92	; 0x5c
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	88fa      	ldrh	r2, [r7, #6]
 8007978:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007992:	d10e      	bne.n	80079b2 <UART_Start_Receive_IT+0x52>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <UART_Start_Receive_IT+0x48>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079a6:	e02d      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	22ff      	movs	r2, #255	; 0xff
 80079ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079b0:	e028      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <UART_Start_Receive_IT+0x76>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <UART_Start_Receive_IT+0x6c>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079ca:	e01b      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	227f      	movs	r2, #127	; 0x7f
 80079d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079d4:	e016      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079de:	d10d      	bne.n	80079fc <UART_Start_Receive_IT+0x9c>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <UART_Start_Receive_IT+0x92>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	227f      	movs	r2, #127	; 0x7f
 80079ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079f0:	e008      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	223f      	movs	r2, #63	; 0x3f
 80079f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079fa:	e003      	b.n	8007a04 <UART_Start_Receive_IT+0xa4>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2222      	movs	r2, #34	; 0x22
 8007a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a34:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e5      	bne.n	8007a14 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a50:	d107      	bne.n	8007a62 <UART_Start_Receive_IT+0x102>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d103      	bne.n	8007a62 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4a21      	ldr	r2, [pc, #132]	; (8007ae4 <UART_Start_Receive_IT+0x184>)
 8007a5e:	669a      	str	r2, [r3, #104]	; 0x68
 8007a60:	e002      	b.n	8007a68 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4a20      	ldr	r2, [pc, #128]	; (8007ae8 <UART_Start_Receive_IT+0x188>)
 8007a66:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d019      	beq.n	8007aa4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e6      	bne.n	8007a70 <UART_Start_Receive_IT+0x110>
 8007aa2:	e018      	b.n	8007ad6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac2:	623b      	str	r3, [r7, #32]
 8007ac4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	69f9      	ldr	r1, [r7, #28]
 8007ac8:	6a3a      	ldr	r2, [r7, #32]
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e6      	bne.n	8007aa4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	375c      	adds	r7, #92	; 0x5c
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	08007ddd 	.word	0x08007ddd
 8007ae8:	08007c35 	.word	0x08007c35

08007aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b095      	sub	sp, #84	; 0x54
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b12:	643b      	str	r3, [r7, #64]	; 0x40
 8007b14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e6      	bne.n	8007af4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e5      	bne.n	8007b26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d118      	bne.n	8007b94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f023 0310 	bic.w	r3, r3, #16
 8007b76:	647b      	str	r3, [r7, #68]	; 0x44
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6979      	ldr	r1, [r7, #20]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e6      	bne.n	8007b62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ba8:	bf00      	nop
 8007baa:	3754      	adds	r7, #84	; 0x54
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff fbc6 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bd8:	bf00      	nop
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfc:	61fb      	str	r3, [r7, #28]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	613b      	str	r3, [r7, #16]
   return(result);
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e6      	bne.n	8007be8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fb92 	bl	8007350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2c:	bf00      	nop
 8007c2e:	3720      	adds	r7, #32
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b09c      	sub	sp, #112	; 0x70
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c4c:	2b22      	cmp	r3, #34	; 0x22
 8007c4e:	f040 80b9 	bne.w	8007dc4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c60:	b2d9      	uxtb	r1, r3
 8007c62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	400a      	ands	r2, r1
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f040 809c 	bne.w	8007dd4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cba:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e6      	bne.n	8007c9c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cee:	647a      	str	r2, [r7, #68]	; 0x44
 8007cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e5      	bne.n	8007cce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d018      	beq.n	8007d56 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	623b      	str	r3, [r7, #32]
   return(result);
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d38:	663b      	str	r3, [r7, #96]	; 0x60
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d42:	633b      	str	r3, [r7, #48]	; 0x30
 8007d44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d12e      	bne.n	8007dbc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f023 0310 	bic.w	r3, r3, #16
 8007d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d82:	61fb      	str	r3, [r7, #28]
 8007d84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	69b9      	ldr	r1, [r7, #24]
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f003 0310 	and.w	r3, r3, #16
 8007da0:	2b10      	cmp	r3, #16
 8007da2:	d103      	bne.n	8007dac <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2210      	movs	r2, #16
 8007daa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fadf 	bl	8007378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dba:	e00b      	b.n	8007dd4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7f9 faeb 	bl	8001398 <HAL_UART_RxCpltCallback>
}
 8007dc2:	e007      	b.n	8007dd4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699a      	ldr	r2, [r3, #24]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0208 	orr.w	r2, r2, #8
 8007dd2:	619a      	str	r2, [r3, #24]
}
 8007dd4:	bf00      	nop
 8007dd6:	3770      	adds	r7, #112	; 0x70
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b09c      	sub	sp, #112	; 0x70
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007dea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007df4:	2b22      	cmp	r3, #34	; 0x22
 8007df6:	f040 80b9 	bne.w	8007f6c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007e0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007e12:	4013      	ands	r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1e:	1c9a      	adds	r2, r3, #2
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 809c 	bne.w	8007f7c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e58:	667b      	str	r3, [r7, #100]	; 0x64
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e62:	657b      	str	r3, [r7, #84]	; 0x54
 8007e64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e6      	bne.n	8007e44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e96:	643a      	str	r2, [r7, #64]	; 0x40
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e5      	bne.n	8007e76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d018      	beq.n	8007efe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e6      	bne.n	8007ecc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d12e      	bne.n	8007f64 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f023 0310 	bic.w	r3, r3, #16
 8007f20:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f2a:	61bb      	str	r3, [r7, #24]
 8007f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6979      	ldr	r1, [r7, #20]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	613b      	str	r3, [r7, #16]
   return(result);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e6      	bne.n	8007f0c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d103      	bne.n	8007f54 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2210      	movs	r2, #16
 8007f52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff fa0b 	bl	8007378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f62:	e00b      	b.n	8007f7c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7f9 fa17 	bl	8001398 <HAL_UART_RxCpltCallback>
}
 8007f6a:	e007      	b.n	8007f7c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699a      	ldr	r2, [r3, #24]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0208 	orr.w	r2, r2, #8
 8007f7a:	619a      	str	r2, [r3, #24]
}
 8007f7c:	bf00      	nop
 8007f7e:	3770      	adds	r7, #112	; 0x70
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <atoi>:
 8007f98:	220a      	movs	r2, #10
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	f000 b882 	b.w	80080a4 <strtol>

08007fa0 <_strtol_l.constprop.0>:
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa6:	d001      	beq.n	8007fac <_strtol_l.constprop.0+0xc>
 8007fa8:	2b24      	cmp	r3, #36	; 0x24
 8007faa:	d906      	bls.n	8007fba <_strtol_l.constprop.0+0x1a>
 8007fac:	f001 f8e6 	bl	800917c <__errno>
 8007fb0:	2316      	movs	r3, #22
 8007fb2:	6003      	str	r3, [r0, #0]
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80080a0 <_strtol_l.constprop.0+0x100>
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	462e      	mov	r6, r5
 8007fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fc6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007fca:	f017 0708 	ands.w	r7, r7, #8
 8007fce:	d1f7      	bne.n	8007fc0 <_strtol_l.constprop.0+0x20>
 8007fd0:	2c2d      	cmp	r4, #45	; 0x2d
 8007fd2:	d132      	bne.n	800803a <_strtol_l.constprop.0+0x9a>
 8007fd4:	782c      	ldrb	r4, [r5, #0]
 8007fd6:	2701      	movs	r7, #1
 8007fd8:	1cb5      	adds	r5, r6, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d05b      	beq.n	8008096 <_strtol_l.constprop.0+0xf6>
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d109      	bne.n	8007ff6 <_strtol_l.constprop.0+0x56>
 8007fe2:	2c30      	cmp	r4, #48	; 0x30
 8007fe4:	d107      	bne.n	8007ff6 <_strtol_l.constprop.0+0x56>
 8007fe6:	782c      	ldrb	r4, [r5, #0]
 8007fe8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007fec:	2c58      	cmp	r4, #88	; 0x58
 8007fee:	d14d      	bne.n	800808c <_strtol_l.constprop.0+0xec>
 8007ff0:	786c      	ldrb	r4, [r5, #1]
 8007ff2:	2310      	movs	r3, #16
 8007ff4:	3502      	adds	r5, #2
 8007ff6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007ffa:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ffe:	f04f 0e00 	mov.w	lr, #0
 8008002:	fbb8 f9f3 	udiv	r9, r8, r3
 8008006:	4676      	mov	r6, lr
 8008008:	fb03 8a19 	mls	sl, r3, r9, r8
 800800c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008010:	f1bc 0f09 	cmp.w	ip, #9
 8008014:	d816      	bhi.n	8008044 <_strtol_l.constprop.0+0xa4>
 8008016:	4664      	mov	r4, ip
 8008018:	42a3      	cmp	r3, r4
 800801a:	dd24      	ble.n	8008066 <_strtol_l.constprop.0+0xc6>
 800801c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008020:	d008      	beq.n	8008034 <_strtol_l.constprop.0+0x94>
 8008022:	45b1      	cmp	r9, r6
 8008024:	d31c      	bcc.n	8008060 <_strtol_l.constprop.0+0xc0>
 8008026:	d101      	bne.n	800802c <_strtol_l.constprop.0+0x8c>
 8008028:	45a2      	cmp	sl, r4
 800802a:	db19      	blt.n	8008060 <_strtol_l.constprop.0+0xc0>
 800802c:	fb06 4603 	mla	r6, r6, r3, r4
 8008030:	f04f 0e01 	mov.w	lr, #1
 8008034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008038:	e7e8      	b.n	800800c <_strtol_l.constprop.0+0x6c>
 800803a:	2c2b      	cmp	r4, #43	; 0x2b
 800803c:	bf04      	itt	eq
 800803e:	782c      	ldrbeq	r4, [r5, #0]
 8008040:	1cb5      	addeq	r5, r6, #2
 8008042:	e7ca      	b.n	8007fda <_strtol_l.constprop.0+0x3a>
 8008044:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008048:	f1bc 0f19 	cmp.w	ip, #25
 800804c:	d801      	bhi.n	8008052 <_strtol_l.constprop.0+0xb2>
 800804e:	3c37      	subs	r4, #55	; 0x37
 8008050:	e7e2      	b.n	8008018 <_strtol_l.constprop.0+0x78>
 8008052:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008056:	f1bc 0f19 	cmp.w	ip, #25
 800805a:	d804      	bhi.n	8008066 <_strtol_l.constprop.0+0xc6>
 800805c:	3c57      	subs	r4, #87	; 0x57
 800805e:	e7db      	b.n	8008018 <_strtol_l.constprop.0+0x78>
 8008060:	f04f 3eff 	mov.w	lr, #4294967295
 8008064:	e7e6      	b.n	8008034 <_strtol_l.constprop.0+0x94>
 8008066:	f1be 3fff 	cmp.w	lr, #4294967295
 800806a:	d105      	bne.n	8008078 <_strtol_l.constprop.0+0xd8>
 800806c:	2322      	movs	r3, #34	; 0x22
 800806e:	6003      	str	r3, [r0, #0]
 8008070:	4646      	mov	r6, r8
 8008072:	b942      	cbnz	r2, 8008086 <_strtol_l.constprop.0+0xe6>
 8008074:	4630      	mov	r0, r6
 8008076:	e79e      	b.n	8007fb6 <_strtol_l.constprop.0+0x16>
 8008078:	b107      	cbz	r7, 800807c <_strtol_l.constprop.0+0xdc>
 800807a:	4276      	negs	r6, r6
 800807c:	2a00      	cmp	r2, #0
 800807e:	d0f9      	beq.n	8008074 <_strtol_l.constprop.0+0xd4>
 8008080:	f1be 0f00 	cmp.w	lr, #0
 8008084:	d000      	beq.n	8008088 <_strtol_l.constprop.0+0xe8>
 8008086:	1e69      	subs	r1, r5, #1
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	e7f3      	b.n	8008074 <_strtol_l.constprop.0+0xd4>
 800808c:	2430      	movs	r4, #48	; 0x30
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1b1      	bne.n	8007ff6 <_strtol_l.constprop.0+0x56>
 8008092:	2308      	movs	r3, #8
 8008094:	e7af      	b.n	8007ff6 <_strtol_l.constprop.0+0x56>
 8008096:	2c30      	cmp	r4, #48	; 0x30
 8008098:	d0a5      	beq.n	8007fe6 <_strtol_l.constprop.0+0x46>
 800809a:	230a      	movs	r3, #10
 800809c:	e7ab      	b.n	8007ff6 <_strtol_l.constprop.0+0x56>
 800809e:	bf00      	nop
 80080a0:	0800b651 	.word	0x0800b651

080080a4 <strtol>:
 80080a4:	4613      	mov	r3, r2
 80080a6:	460a      	mov	r2, r1
 80080a8:	4601      	mov	r1, r0
 80080aa:	4802      	ldr	r0, [pc, #8]	; (80080b4 <strtol+0x10>)
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f7ff bf77 	b.w	8007fa0 <_strtol_l.constprop.0>
 80080b2:	bf00      	nop
 80080b4:	200007c4 	.word	0x200007c4

080080b8 <__cvt>:
 80080b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080bc:	ec55 4b10 	vmov	r4, r5, d0
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	460e      	mov	r6, r1
 80080c4:	4619      	mov	r1, r3
 80080c6:	462b      	mov	r3, r5
 80080c8:	bfbb      	ittet	lt
 80080ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080ce:	461d      	movlt	r5, r3
 80080d0:	2300      	movge	r3, #0
 80080d2:	232d      	movlt	r3, #45	; 0x2d
 80080d4:	700b      	strb	r3, [r1, #0]
 80080d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080dc:	4691      	mov	r9, r2
 80080de:	f023 0820 	bic.w	r8, r3, #32
 80080e2:	bfbc      	itt	lt
 80080e4:	4622      	movlt	r2, r4
 80080e6:	4614      	movlt	r4, r2
 80080e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080ec:	d005      	beq.n	80080fa <__cvt+0x42>
 80080ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080f2:	d100      	bne.n	80080f6 <__cvt+0x3e>
 80080f4:	3601      	adds	r6, #1
 80080f6:	2102      	movs	r1, #2
 80080f8:	e000      	b.n	80080fc <__cvt+0x44>
 80080fa:	2103      	movs	r1, #3
 80080fc:	ab03      	add	r3, sp, #12
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	ab02      	add	r3, sp, #8
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	ec45 4b10 	vmov	d0, r4, r5
 8008108:	4653      	mov	r3, sl
 800810a:	4632      	mov	r2, r6
 800810c:	f001 f8ec 	bl	80092e8 <_dtoa_r>
 8008110:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008114:	4607      	mov	r7, r0
 8008116:	d102      	bne.n	800811e <__cvt+0x66>
 8008118:	f019 0f01 	tst.w	r9, #1
 800811c:	d022      	beq.n	8008164 <__cvt+0xac>
 800811e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008122:	eb07 0906 	add.w	r9, r7, r6
 8008126:	d110      	bne.n	800814a <__cvt+0x92>
 8008128:	783b      	ldrb	r3, [r7, #0]
 800812a:	2b30      	cmp	r3, #48	; 0x30
 800812c:	d10a      	bne.n	8008144 <__cvt+0x8c>
 800812e:	2200      	movs	r2, #0
 8008130:	2300      	movs	r3, #0
 8008132:	4620      	mov	r0, r4
 8008134:	4629      	mov	r1, r5
 8008136:	f7f8 fcd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800813a:	b918      	cbnz	r0, 8008144 <__cvt+0x8c>
 800813c:	f1c6 0601 	rsb	r6, r6, #1
 8008140:	f8ca 6000 	str.w	r6, [sl]
 8008144:	f8da 3000 	ldr.w	r3, [sl]
 8008148:	4499      	add	r9, r3
 800814a:	2200      	movs	r2, #0
 800814c:	2300      	movs	r3, #0
 800814e:	4620      	mov	r0, r4
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 fcc9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008156:	b108      	cbz	r0, 800815c <__cvt+0xa4>
 8008158:	f8cd 900c 	str.w	r9, [sp, #12]
 800815c:	2230      	movs	r2, #48	; 0x30
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	454b      	cmp	r3, r9
 8008162:	d307      	bcc.n	8008174 <__cvt+0xbc>
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008168:	1bdb      	subs	r3, r3, r7
 800816a:	4638      	mov	r0, r7
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	b004      	add	sp, #16
 8008170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008174:	1c59      	adds	r1, r3, #1
 8008176:	9103      	str	r1, [sp, #12]
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	e7f0      	b.n	800815e <__cvt+0xa6>

0800817c <__exponent>:
 800817c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800817e:	4603      	mov	r3, r0
 8008180:	2900      	cmp	r1, #0
 8008182:	bfb8      	it	lt
 8008184:	4249      	neglt	r1, r1
 8008186:	f803 2b02 	strb.w	r2, [r3], #2
 800818a:	bfb4      	ite	lt
 800818c:	222d      	movlt	r2, #45	; 0x2d
 800818e:	222b      	movge	r2, #43	; 0x2b
 8008190:	2909      	cmp	r1, #9
 8008192:	7042      	strb	r2, [r0, #1]
 8008194:	dd2a      	ble.n	80081ec <__exponent+0x70>
 8008196:	f10d 0207 	add.w	r2, sp, #7
 800819a:	4617      	mov	r7, r2
 800819c:	260a      	movs	r6, #10
 800819e:	4694      	mov	ip, r2
 80081a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80081a4:	fb06 1415 	mls	r4, r6, r5, r1
 80081a8:	3430      	adds	r4, #48	; 0x30
 80081aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80081ae:	460c      	mov	r4, r1
 80081b0:	2c63      	cmp	r4, #99	; 0x63
 80081b2:	f102 32ff 	add.w	r2, r2, #4294967295
 80081b6:	4629      	mov	r1, r5
 80081b8:	dcf1      	bgt.n	800819e <__exponent+0x22>
 80081ba:	3130      	adds	r1, #48	; 0x30
 80081bc:	f1ac 0402 	sub.w	r4, ip, #2
 80081c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80081c4:	1c41      	adds	r1, r0, #1
 80081c6:	4622      	mov	r2, r4
 80081c8:	42ba      	cmp	r2, r7
 80081ca:	d30a      	bcc.n	80081e2 <__exponent+0x66>
 80081cc:	f10d 0209 	add.w	r2, sp, #9
 80081d0:	eba2 020c 	sub.w	r2, r2, ip
 80081d4:	42bc      	cmp	r4, r7
 80081d6:	bf88      	it	hi
 80081d8:	2200      	movhi	r2, #0
 80081da:	4413      	add	r3, r2
 80081dc:	1a18      	subs	r0, r3, r0
 80081de:	b003      	add	sp, #12
 80081e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80081e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80081ea:	e7ed      	b.n	80081c8 <__exponent+0x4c>
 80081ec:	2330      	movs	r3, #48	; 0x30
 80081ee:	3130      	adds	r1, #48	; 0x30
 80081f0:	7083      	strb	r3, [r0, #2]
 80081f2:	70c1      	strb	r1, [r0, #3]
 80081f4:	1d03      	adds	r3, r0, #4
 80081f6:	e7f1      	b.n	80081dc <__exponent+0x60>

080081f8 <_printf_float>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	ed2d 8b02 	vpush	{d8}
 8008200:	b08d      	sub	sp, #52	; 0x34
 8008202:	460c      	mov	r4, r1
 8008204:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008208:	4616      	mov	r6, r2
 800820a:	461f      	mov	r7, r3
 800820c:	4605      	mov	r5, r0
 800820e:	f000 ff6b 	bl	80090e8 <_localeconv_r>
 8008212:	f8d0 a000 	ldr.w	sl, [r0]
 8008216:	4650      	mov	r0, sl
 8008218:	f7f8 f83a 	bl	8000290 <strlen>
 800821c:	2300      	movs	r3, #0
 800821e:	930a      	str	r3, [sp, #40]	; 0x28
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	9305      	str	r3, [sp, #20]
 8008224:	f8d8 3000 	ldr.w	r3, [r8]
 8008228:	f894 b018 	ldrb.w	fp, [r4, #24]
 800822c:	3307      	adds	r3, #7
 800822e:	f023 0307 	bic.w	r3, r3, #7
 8008232:	f103 0208 	add.w	r2, r3, #8
 8008236:	f8c8 2000 	str.w	r2, [r8]
 800823a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800823e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008242:	9307      	str	r3, [sp, #28]
 8008244:	f8cd 8018 	str.w	r8, [sp, #24]
 8008248:	ee08 0a10 	vmov	s16, r0
 800824c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008254:	4b9e      	ldr	r3, [pc, #632]	; (80084d0 <_printf_float+0x2d8>)
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	f7f8 fc77 	bl	8000b4c <__aeabi_dcmpun>
 800825e:	bb88      	cbnz	r0, 80082c4 <_printf_float+0xcc>
 8008260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008264:	4b9a      	ldr	r3, [pc, #616]	; (80084d0 <_printf_float+0x2d8>)
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	f7f8 fc51 	bl	8000b10 <__aeabi_dcmple>
 800826e:	bb48      	cbnz	r0, 80082c4 <_printf_float+0xcc>
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f8 fc40 	bl	8000afc <__aeabi_dcmplt>
 800827c:	b110      	cbz	r0, 8008284 <_printf_float+0x8c>
 800827e:	232d      	movs	r3, #45	; 0x2d
 8008280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008284:	4a93      	ldr	r2, [pc, #588]	; (80084d4 <_printf_float+0x2dc>)
 8008286:	4b94      	ldr	r3, [pc, #592]	; (80084d8 <_printf_float+0x2e0>)
 8008288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800828c:	bf94      	ite	ls
 800828e:	4690      	movls	r8, r2
 8008290:	4698      	movhi	r8, r3
 8008292:	2303      	movs	r3, #3
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	9b05      	ldr	r3, [sp, #20]
 8008298:	f023 0304 	bic.w	r3, r3, #4
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	f04f 0900 	mov.w	r9, #0
 80082a2:	9700      	str	r7, [sp, #0]
 80082a4:	4633      	mov	r3, r6
 80082a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f9da 	bl	8008664 <_printf_common>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f040 8090 	bne.w	80083d6 <_printf_float+0x1de>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b00d      	add	sp, #52	; 0x34
 80082bc:	ecbd 8b02 	vpop	{d8}
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f8 fc3e 	bl	8000b4c <__aeabi_dcmpun>
 80082d0:	b140      	cbz	r0, 80082e4 <_printf_float+0xec>
 80082d2:	464b      	mov	r3, r9
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bfbc      	itt	lt
 80082d8:	232d      	movlt	r3, #45	; 0x2d
 80082da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082de:	4a7f      	ldr	r2, [pc, #508]	; (80084dc <_printf_float+0x2e4>)
 80082e0:	4b7f      	ldr	r3, [pc, #508]	; (80084e0 <_printf_float+0x2e8>)
 80082e2:	e7d1      	b.n	8008288 <_printf_float+0x90>
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082ea:	9206      	str	r2, [sp, #24]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	d13f      	bne.n	8008370 <_printf_float+0x178>
 80082f0:	2306      	movs	r3, #6
 80082f2:	6063      	str	r3, [r4, #4]
 80082f4:	9b05      	ldr	r3, [sp, #20]
 80082f6:	6861      	ldr	r1, [r4, #4]
 80082f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082fc:	2300      	movs	r3, #0
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	ab0a      	add	r3, sp, #40	; 0x28
 8008302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008306:	ab09      	add	r3, sp, #36	; 0x24
 8008308:	ec49 8b10 	vmov	d0, r8, r9
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	6022      	str	r2, [r4, #0]
 8008310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008314:	4628      	mov	r0, r5
 8008316:	f7ff fecf 	bl	80080b8 <__cvt>
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800831e:	2b47      	cmp	r3, #71	; 0x47
 8008320:	4680      	mov	r8, r0
 8008322:	d108      	bne.n	8008336 <_printf_float+0x13e>
 8008324:	1cc8      	adds	r0, r1, #3
 8008326:	db02      	blt.n	800832e <_printf_float+0x136>
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	4299      	cmp	r1, r3
 800832c:	dd41      	ble.n	80083b2 <_printf_float+0x1ba>
 800832e:	f1ab 0302 	sub.w	r3, fp, #2
 8008332:	fa5f fb83 	uxtb.w	fp, r3
 8008336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800833a:	d820      	bhi.n	800837e <_printf_float+0x186>
 800833c:	3901      	subs	r1, #1
 800833e:	465a      	mov	r2, fp
 8008340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008344:	9109      	str	r1, [sp, #36]	; 0x24
 8008346:	f7ff ff19 	bl	800817c <__exponent>
 800834a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800834c:	1813      	adds	r3, r2, r0
 800834e:	2a01      	cmp	r2, #1
 8008350:	4681      	mov	r9, r0
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	dc02      	bgt.n	800835c <_printf_float+0x164>
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	07d2      	lsls	r2, r2, #31
 800835a:	d501      	bpl.n	8008360 <_printf_float+0x168>
 800835c:	3301      	adds	r3, #1
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008364:	2b00      	cmp	r3, #0
 8008366:	d09c      	beq.n	80082a2 <_printf_float+0xaa>
 8008368:	232d      	movs	r3, #45	; 0x2d
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836e:	e798      	b.n	80082a2 <_printf_float+0xaa>
 8008370:	9a06      	ldr	r2, [sp, #24]
 8008372:	2a47      	cmp	r2, #71	; 0x47
 8008374:	d1be      	bne.n	80082f4 <_printf_float+0xfc>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1bc      	bne.n	80082f4 <_printf_float+0xfc>
 800837a:	2301      	movs	r3, #1
 800837c:	e7b9      	b.n	80082f2 <_printf_float+0xfa>
 800837e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008382:	d118      	bne.n	80083b6 <_printf_float+0x1be>
 8008384:	2900      	cmp	r1, #0
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	dd0b      	ble.n	80083a2 <_printf_float+0x1aa>
 800838a:	6121      	str	r1, [r4, #16]
 800838c:	b913      	cbnz	r3, 8008394 <_printf_float+0x19c>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	07d0      	lsls	r0, r2, #31
 8008392:	d502      	bpl.n	800839a <_printf_float+0x1a2>
 8008394:	3301      	adds	r3, #1
 8008396:	440b      	add	r3, r1
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	65a1      	str	r1, [r4, #88]	; 0x58
 800839c:	f04f 0900 	mov.w	r9, #0
 80083a0:	e7de      	b.n	8008360 <_printf_float+0x168>
 80083a2:	b913      	cbnz	r3, 80083aa <_printf_float+0x1b2>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	07d2      	lsls	r2, r2, #31
 80083a8:	d501      	bpl.n	80083ae <_printf_float+0x1b6>
 80083aa:	3302      	adds	r3, #2
 80083ac:	e7f4      	b.n	8008398 <_printf_float+0x1a0>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7f2      	b.n	8008398 <_printf_float+0x1a0>
 80083b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b8:	4299      	cmp	r1, r3
 80083ba:	db05      	blt.n	80083c8 <_printf_float+0x1d0>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	6121      	str	r1, [r4, #16]
 80083c0:	07d8      	lsls	r0, r3, #31
 80083c2:	d5ea      	bpl.n	800839a <_printf_float+0x1a2>
 80083c4:	1c4b      	adds	r3, r1, #1
 80083c6:	e7e7      	b.n	8008398 <_printf_float+0x1a0>
 80083c8:	2900      	cmp	r1, #0
 80083ca:	bfd4      	ite	le
 80083cc:	f1c1 0202 	rsble	r2, r1, #2
 80083d0:	2201      	movgt	r2, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	e7e0      	b.n	8008398 <_printf_float+0x1a0>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	055a      	lsls	r2, r3, #21
 80083da:	d407      	bmi.n	80083ec <_printf_float+0x1f4>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	4642      	mov	r2, r8
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d12c      	bne.n	8008444 <_printf_float+0x24c>
 80083ea:	e764      	b.n	80082b6 <_printf_float+0xbe>
 80083ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083f0:	f240 80e0 	bls.w	80085b4 <_printf_float+0x3bc>
 80083f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f8:	2200      	movs	r2, #0
 80083fa:	2300      	movs	r3, #0
 80083fc:	f7f8 fb74 	bl	8000ae8 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d034      	beq.n	800846e <_printf_float+0x276>
 8008404:	4a37      	ldr	r2, [pc, #220]	; (80084e4 <_printf_float+0x2ec>)
 8008406:	2301      	movs	r3, #1
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af51 	beq.w	80082b6 <_printf_float+0xbe>
 8008414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008418:	429a      	cmp	r2, r3
 800841a:	db02      	blt.n	8008422 <_printf_float+0x22a>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07d8      	lsls	r0, r3, #31
 8008420:	d510      	bpl.n	8008444 <_printf_float+0x24c>
 8008422:	ee18 3a10 	vmov	r3, s16
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f af41 	beq.w	80082b6 <_printf_float+0xbe>
 8008434:	f04f 0800 	mov.w	r8, #0
 8008438:	f104 091a 	add.w	r9, r4, #26
 800843c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843e:	3b01      	subs	r3, #1
 8008440:	4543      	cmp	r3, r8
 8008442:	dc09      	bgt.n	8008458 <_printf_float+0x260>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	079b      	lsls	r3, r3, #30
 8008448:	f100 8107 	bmi.w	800865a <_printf_float+0x462>
 800844c:	68e0      	ldr	r0, [r4, #12]
 800844e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008450:	4298      	cmp	r0, r3
 8008452:	bfb8      	it	lt
 8008454:	4618      	movlt	r0, r3
 8008456:	e730      	b.n	80082ba <_printf_float+0xc2>
 8008458:	2301      	movs	r3, #1
 800845a:	464a      	mov	r2, r9
 800845c:	4631      	mov	r1, r6
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	f43f af27 	beq.w	80082b6 <_printf_float+0xbe>
 8008468:	f108 0801 	add.w	r8, r8, #1
 800846c:	e7e6      	b.n	800843c <_printf_float+0x244>
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	dc39      	bgt.n	80084e8 <_printf_float+0x2f0>
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <_printf_float+0x2ec>)
 8008476:	2301      	movs	r3, #1
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af19 	beq.w	80082b6 <_printf_float+0xbe>
 8008484:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008488:	4313      	orrs	r3, r2
 800848a:	d102      	bne.n	8008492 <_printf_float+0x29a>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07d9      	lsls	r1, r3, #31
 8008490:	d5d8      	bpl.n	8008444 <_printf_float+0x24c>
 8008492:	ee18 3a10 	vmov	r3, s16
 8008496:	4652      	mov	r2, sl
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f af09 	beq.w	80082b6 <_printf_float+0xbe>
 80084a4:	f04f 0900 	mov.w	r9, #0
 80084a8:	f104 0a1a 	add.w	sl, r4, #26
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	425b      	negs	r3, r3
 80084b0:	454b      	cmp	r3, r9
 80084b2:	dc01      	bgt.n	80084b8 <_printf_float+0x2c0>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	e792      	b.n	80083de <_printf_float+0x1e6>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4652      	mov	r2, sl
 80084bc:	4631      	mov	r1, r6
 80084be:	4628      	mov	r0, r5
 80084c0:	47b8      	blx	r7
 80084c2:	3001      	adds	r0, #1
 80084c4:	f43f aef7 	beq.w	80082b6 <_printf_float+0xbe>
 80084c8:	f109 0901 	add.w	r9, r9, #1
 80084cc:	e7ee      	b.n	80084ac <_printf_float+0x2b4>
 80084ce:	bf00      	nop
 80084d0:	7fefffff 	.word	0x7fefffff
 80084d4:	0800b751 	.word	0x0800b751
 80084d8:	0800b755 	.word	0x0800b755
 80084dc:	0800b759 	.word	0x0800b759
 80084e0:	0800b75d 	.word	0x0800b75d
 80084e4:	0800b761 	.word	0x0800b761
 80084e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084ec:	429a      	cmp	r2, r3
 80084ee:	bfa8      	it	ge
 80084f0:	461a      	movge	r2, r3
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	4691      	mov	r9, r2
 80084f6:	dc37      	bgt.n	8008568 <_printf_float+0x370>
 80084f8:	f04f 0b00 	mov.w	fp, #0
 80084fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008500:	f104 021a 	add.w	r2, r4, #26
 8008504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008506:	9305      	str	r3, [sp, #20]
 8008508:	eba3 0309 	sub.w	r3, r3, r9
 800850c:	455b      	cmp	r3, fp
 800850e:	dc33      	bgt.n	8008578 <_printf_float+0x380>
 8008510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008514:	429a      	cmp	r2, r3
 8008516:	db3b      	blt.n	8008590 <_printf_float+0x398>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d438      	bmi.n	8008590 <_printf_float+0x398>
 800851e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008522:	eba2 0903 	sub.w	r9, r2, r3
 8008526:	9b05      	ldr	r3, [sp, #20]
 8008528:	1ad2      	subs	r2, r2, r3
 800852a:	4591      	cmp	r9, r2
 800852c:	bfa8      	it	ge
 800852e:	4691      	movge	r9, r2
 8008530:	f1b9 0f00 	cmp.w	r9, #0
 8008534:	dc35      	bgt.n	80085a2 <_printf_float+0x3aa>
 8008536:	f04f 0800 	mov.w	r8, #0
 800853a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853e:	f104 0a1a 	add.w	sl, r4, #26
 8008542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	eba3 0309 	sub.w	r3, r3, r9
 800854c:	4543      	cmp	r3, r8
 800854e:	f77f af79 	ble.w	8008444 <_printf_float+0x24c>
 8008552:	2301      	movs	r3, #1
 8008554:	4652      	mov	r2, sl
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	47b8      	blx	r7
 800855c:	3001      	adds	r0, #1
 800855e:	f43f aeaa 	beq.w	80082b6 <_printf_float+0xbe>
 8008562:	f108 0801 	add.w	r8, r8, #1
 8008566:	e7ec      	b.n	8008542 <_printf_float+0x34a>
 8008568:	4613      	mov	r3, r2
 800856a:	4631      	mov	r1, r6
 800856c:	4642      	mov	r2, r8
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	d1c0      	bne.n	80084f8 <_printf_float+0x300>
 8008576:	e69e      	b.n	80082b6 <_printf_float+0xbe>
 8008578:	2301      	movs	r3, #1
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	9205      	str	r2, [sp, #20]
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f ae97 	beq.w	80082b6 <_printf_float+0xbe>
 8008588:	9a05      	ldr	r2, [sp, #20]
 800858a:	f10b 0b01 	add.w	fp, fp, #1
 800858e:	e7b9      	b.n	8008504 <_printf_float+0x30c>
 8008590:	ee18 3a10 	vmov	r3, s16
 8008594:	4652      	mov	r2, sl
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	d1be      	bne.n	800851e <_printf_float+0x326>
 80085a0:	e689      	b.n	80082b6 <_printf_float+0xbe>
 80085a2:	9a05      	ldr	r2, [sp, #20]
 80085a4:	464b      	mov	r3, r9
 80085a6:	4442      	add	r2, r8
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b8      	blx	r7
 80085ae:	3001      	adds	r0, #1
 80085b0:	d1c1      	bne.n	8008536 <_printf_float+0x33e>
 80085b2:	e680      	b.n	80082b6 <_printf_float+0xbe>
 80085b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b6:	2a01      	cmp	r2, #1
 80085b8:	dc01      	bgt.n	80085be <_printf_float+0x3c6>
 80085ba:	07db      	lsls	r3, r3, #31
 80085bc:	d53a      	bpl.n	8008634 <_printf_float+0x43c>
 80085be:	2301      	movs	r3, #1
 80085c0:	4642      	mov	r2, r8
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae74 	beq.w	80082b6 <_printf_float+0xbe>
 80085ce:	ee18 3a10 	vmov	r3, s16
 80085d2:	4652      	mov	r2, sl
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f ae6b 	beq.w	80082b6 <_printf_float+0xbe>
 80085e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085e4:	2200      	movs	r2, #0
 80085e6:	2300      	movs	r3, #0
 80085e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80085ec:	f7f8 fa7c 	bl	8000ae8 <__aeabi_dcmpeq>
 80085f0:	b9d8      	cbnz	r0, 800862a <_printf_float+0x432>
 80085f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085f6:	f108 0201 	add.w	r2, r8, #1
 80085fa:	4631      	mov	r1, r6
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b8      	blx	r7
 8008600:	3001      	adds	r0, #1
 8008602:	d10e      	bne.n	8008622 <_printf_float+0x42a>
 8008604:	e657      	b.n	80082b6 <_printf_float+0xbe>
 8008606:	2301      	movs	r3, #1
 8008608:	4652      	mov	r2, sl
 800860a:	4631      	mov	r1, r6
 800860c:	4628      	mov	r0, r5
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	f43f ae50 	beq.w	80082b6 <_printf_float+0xbe>
 8008616:	f108 0801 	add.w	r8, r8, #1
 800861a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861c:	3b01      	subs	r3, #1
 800861e:	4543      	cmp	r3, r8
 8008620:	dcf1      	bgt.n	8008606 <_printf_float+0x40e>
 8008622:	464b      	mov	r3, r9
 8008624:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008628:	e6da      	b.n	80083e0 <_printf_float+0x1e8>
 800862a:	f04f 0800 	mov.w	r8, #0
 800862e:	f104 0a1a 	add.w	sl, r4, #26
 8008632:	e7f2      	b.n	800861a <_printf_float+0x422>
 8008634:	2301      	movs	r3, #1
 8008636:	4642      	mov	r2, r8
 8008638:	e7df      	b.n	80085fa <_printf_float+0x402>
 800863a:	2301      	movs	r3, #1
 800863c:	464a      	mov	r2, r9
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	f43f ae36 	beq.w	80082b6 <_printf_float+0xbe>
 800864a:	f108 0801 	add.w	r8, r8, #1
 800864e:	68e3      	ldr	r3, [r4, #12]
 8008650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008652:	1a5b      	subs	r3, r3, r1
 8008654:	4543      	cmp	r3, r8
 8008656:	dcf0      	bgt.n	800863a <_printf_float+0x442>
 8008658:	e6f8      	b.n	800844c <_printf_float+0x254>
 800865a:	f04f 0800 	mov.w	r8, #0
 800865e:	f104 0919 	add.w	r9, r4, #25
 8008662:	e7f4      	b.n	800864e <_printf_float+0x456>

08008664 <_printf_common>:
 8008664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008668:	4616      	mov	r6, r2
 800866a:	4699      	mov	r9, r3
 800866c:	688a      	ldr	r2, [r1, #8]
 800866e:	690b      	ldr	r3, [r1, #16]
 8008670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008674:	4293      	cmp	r3, r2
 8008676:	bfb8      	it	lt
 8008678:	4613      	movlt	r3, r2
 800867a:	6033      	str	r3, [r6, #0]
 800867c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008680:	4607      	mov	r7, r0
 8008682:	460c      	mov	r4, r1
 8008684:	b10a      	cbz	r2, 800868a <_printf_common+0x26>
 8008686:	3301      	adds	r3, #1
 8008688:	6033      	str	r3, [r6, #0]
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	0699      	lsls	r1, r3, #26
 800868e:	bf42      	ittt	mi
 8008690:	6833      	ldrmi	r3, [r6, #0]
 8008692:	3302      	addmi	r3, #2
 8008694:	6033      	strmi	r3, [r6, #0]
 8008696:	6825      	ldr	r5, [r4, #0]
 8008698:	f015 0506 	ands.w	r5, r5, #6
 800869c:	d106      	bne.n	80086ac <_printf_common+0x48>
 800869e:	f104 0a19 	add.w	sl, r4, #25
 80086a2:	68e3      	ldr	r3, [r4, #12]
 80086a4:	6832      	ldr	r2, [r6, #0]
 80086a6:	1a9b      	subs	r3, r3, r2
 80086a8:	42ab      	cmp	r3, r5
 80086aa:	dc26      	bgt.n	80086fa <_printf_common+0x96>
 80086ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b0:	1e13      	subs	r3, r2, #0
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	bf18      	it	ne
 80086b6:	2301      	movne	r3, #1
 80086b8:	0692      	lsls	r2, r2, #26
 80086ba:	d42b      	bmi.n	8008714 <_printf_common+0xb0>
 80086bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c0:	4649      	mov	r1, r9
 80086c2:	4638      	mov	r0, r7
 80086c4:	47c0      	blx	r8
 80086c6:	3001      	adds	r0, #1
 80086c8:	d01e      	beq.n	8008708 <_printf_common+0xa4>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	6922      	ldr	r2, [r4, #16]
 80086ce:	f003 0306 	and.w	r3, r3, #6
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	bf02      	ittt	eq
 80086d6:	68e5      	ldreq	r5, [r4, #12]
 80086d8:	6833      	ldreq	r3, [r6, #0]
 80086da:	1aed      	subeq	r5, r5, r3
 80086dc:	68a3      	ldr	r3, [r4, #8]
 80086de:	bf0c      	ite	eq
 80086e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e4:	2500      	movne	r5, #0
 80086e6:	4293      	cmp	r3, r2
 80086e8:	bfc4      	itt	gt
 80086ea:	1a9b      	subgt	r3, r3, r2
 80086ec:	18ed      	addgt	r5, r5, r3
 80086ee:	2600      	movs	r6, #0
 80086f0:	341a      	adds	r4, #26
 80086f2:	42b5      	cmp	r5, r6
 80086f4:	d11a      	bne.n	800872c <_printf_common+0xc8>
 80086f6:	2000      	movs	r0, #0
 80086f8:	e008      	b.n	800870c <_printf_common+0xa8>
 80086fa:	2301      	movs	r3, #1
 80086fc:	4652      	mov	r2, sl
 80086fe:	4649      	mov	r1, r9
 8008700:	4638      	mov	r0, r7
 8008702:	47c0      	blx	r8
 8008704:	3001      	adds	r0, #1
 8008706:	d103      	bne.n	8008710 <_printf_common+0xac>
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008710:	3501      	adds	r5, #1
 8008712:	e7c6      	b.n	80086a2 <_printf_common+0x3e>
 8008714:	18e1      	adds	r1, r4, r3
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	2030      	movs	r0, #48	; 0x30
 800871a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800871e:	4422      	add	r2, r4
 8008720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008728:	3302      	adds	r3, #2
 800872a:	e7c7      	b.n	80086bc <_printf_common+0x58>
 800872c:	2301      	movs	r3, #1
 800872e:	4622      	mov	r2, r4
 8008730:	4649      	mov	r1, r9
 8008732:	4638      	mov	r0, r7
 8008734:	47c0      	blx	r8
 8008736:	3001      	adds	r0, #1
 8008738:	d0e6      	beq.n	8008708 <_printf_common+0xa4>
 800873a:	3601      	adds	r6, #1
 800873c:	e7d9      	b.n	80086f2 <_printf_common+0x8e>
	...

08008740 <_printf_i>:
 8008740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	7e0f      	ldrb	r7, [r1, #24]
 8008746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008748:	2f78      	cmp	r7, #120	; 0x78
 800874a:	4691      	mov	r9, r2
 800874c:	4680      	mov	r8, r0
 800874e:	460c      	mov	r4, r1
 8008750:	469a      	mov	sl, r3
 8008752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008756:	d807      	bhi.n	8008768 <_printf_i+0x28>
 8008758:	2f62      	cmp	r7, #98	; 0x62
 800875a:	d80a      	bhi.n	8008772 <_printf_i+0x32>
 800875c:	2f00      	cmp	r7, #0
 800875e:	f000 80d4 	beq.w	800890a <_printf_i+0x1ca>
 8008762:	2f58      	cmp	r7, #88	; 0x58
 8008764:	f000 80c0 	beq.w	80088e8 <_printf_i+0x1a8>
 8008768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800876c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008770:	e03a      	b.n	80087e8 <_printf_i+0xa8>
 8008772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008776:	2b15      	cmp	r3, #21
 8008778:	d8f6      	bhi.n	8008768 <_printf_i+0x28>
 800877a:	a101      	add	r1, pc, #4	; (adr r1, 8008780 <_printf_i+0x40>)
 800877c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008780:	080087d9 	.word	0x080087d9
 8008784:	080087ed 	.word	0x080087ed
 8008788:	08008769 	.word	0x08008769
 800878c:	08008769 	.word	0x08008769
 8008790:	08008769 	.word	0x08008769
 8008794:	08008769 	.word	0x08008769
 8008798:	080087ed 	.word	0x080087ed
 800879c:	08008769 	.word	0x08008769
 80087a0:	08008769 	.word	0x08008769
 80087a4:	08008769 	.word	0x08008769
 80087a8:	08008769 	.word	0x08008769
 80087ac:	080088f1 	.word	0x080088f1
 80087b0:	08008819 	.word	0x08008819
 80087b4:	080088ab 	.word	0x080088ab
 80087b8:	08008769 	.word	0x08008769
 80087bc:	08008769 	.word	0x08008769
 80087c0:	08008913 	.word	0x08008913
 80087c4:	08008769 	.word	0x08008769
 80087c8:	08008819 	.word	0x08008819
 80087cc:	08008769 	.word	0x08008769
 80087d0:	08008769 	.word	0x08008769
 80087d4:	080088b3 	.word	0x080088b3
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	1d1a      	adds	r2, r3, #4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	602a      	str	r2, [r5, #0]
 80087e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e8:	2301      	movs	r3, #1
 80087ea:	e09f      	b.n	800892c <_printf_i+0x1ec>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	682b      	ldr	r3, [r5, #0]
 80087f0:	0607      	lsls	r7, r0, #24
 80087f2:	f103 0104 	add.w	r1, r3, #4
 80087f6:	6029      	str	r1, [r5, #0]
 80087f8:	d501      	bpl.n	80087fe <_printf_i+0xbe>
 80087fa:	681e      	ldr	r6, [r3, #0]
 80087fc:	e003      	b.n	8008806 <_printf_i+0xc6>
 80087fe:	0646      	lsls	r6, r0, #25
 8008800:	d5fb      	bpl.n	80087fa <_printf_i+0xba>
 8008802:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008806:	2e00      	cmp	r6, #0
 8008808:	da03      	bge.n	8008812 <_printf_i+0xd2>
 800880a:	232d      	movs	r3, #45	; 0x2d
 800880c:	4276      	negs	r6, r6
 800880e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008812:	485a      	ldr	r0, [pc, #360]	; (800897c <_printf_i+0x23c>)
 8008814:	230a      	movs	r3, #10
 8008816:	e012      	b.n	800883e <_printf_i+0xfe>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	1d19      	adds	r1, r3, #4
 800881e:	6029      	str	r1, [r5, #0]
 8008820:	0605      	lsls	r5, r0, #24
 8008822:	d501      	bpl.n	8008828 <_printf_i+0xe8>
 8008824:	681e      	ldr	r6, [r3, #0]
 8008826:	e002      	b.n	800882e <_printf_i+0xee>
 8008828:	0641      	lsls	r1, r0, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0xe4>
 800882c:	881e      	ldrh	r6, [r3, #0]
 800882e:	4853      	ldr	r0, [pc, #332]	; (800897c <_printf_i+0x23c>)
 8008830:	2f6f      	cmp	r7, #111	; 0x6f
 8008832:	bf0c      	ite	eq
 8008834:	2308      	moveq	r3, #8
 8008836:	230a      	movne	r3, #10
 8008838:	2100      	movs	r1, #0
 800883a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883e:	6865      	ldr	r5, [r4, #4]
 8008840:	60a5      	str	r5, [r4, #8]
 8008842:	2d00      	cmp	r5, #0
 8008844:	bfa2      	ittt	ge
 8008846:	6821      	ldrge	r1, [r4, #0]
 8008848:	f021 0104 	bicge.w	r1, r1, #4
 800884c:	6021      	strge	r1, [r4, #0]
 800884e:	b90e      	cbnz	r6, 8008854 <_printf_i+0x114>
 8008850:	2d00      	cmp	r5, #0
 8008852:	d04b      	beq.n	80088ec <_printf_i+0x1ac>
 8008854:	4615      	mov	r5, r2
 8008856:	fbb6 f1f3 	udiv	r1, r6, r3
 800885a:	fb03 6711 	mls	r7, r3, r1, r6
 800885e:	5dc7      	ldrb	r7, [r0, r7]
 8008860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008864:	4637      	mov	r7, r6
 8008866:	42bb      	cmp	r3, r7
 8008868:	460e      	mov	r6, r1
 800886a:	d9f4      	bls.n	8008856 <_printf_i+0x116>
 800886c:	2b08      	cmp	r3, #8
 800886e:	d10b      	bne.n	8008888 <_printf_i+0x148>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	07de      	lsls	r6, r3, #31
 8008874:	d508      	bpl.n	8008888 <_printf_i+0x148>
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6861      	ldr	r1, [r4, #4]
 800887a:	4299      	cmp	r1, r3
 800887c:	bfde      	ittt	le
 800887e:	2330      	movle	r3, #48	; 0x30
 8008880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008888:	1b52      	subs	r2, r2, r5
 800888a:	6122      	str	r2, [r4, #16]
 800888c:	f8cd a000 	str.w	sl, [sp]
 8008890:	464b      	mov	r3, r9
 8008892:	aa03      	add	r2, sp, #12
 8008894:	4621      	mov	r1, r4
 8008896:	4640      	mov	r0, r8
 8008898:	f7ff fee4 	bl	8008664 <_printf_common>
 800889c:	3001      	adds	r0, #1
 800889e:	d14a      	bne.n	8008936 <_printf_i+0x1f6>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	b004      	add	sp, #16
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	f043 0320 	orr.w	r3, r3, #32
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	4833      	ldr	r0, [pc, #204]	; (8008980 <_printf_i+0x240>)
 80088b4:	2778      	movs	r7, #120	; 0x78
 80088b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	6829      	ldr	r1, [r5, #0]
 80088be:	061f      	lsls	r7, r3, #24
 80088c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80088c4:	d402      	bmi.n	80088cc <_printf_i+0x18c>
 80088c6:	065f      	lsls	r7, r3, #25
 80088c8:	bf48      	it	mi
 80088ca:	b2b6      	uxthmi	r6, r6
 80088cc:	07df      	lsls	r7, r3, #31
 80088ce:	bf48      	it	mi
 80088d0:	f043 0320 	orrmi.w	r3, r3, #32
 80088d4:	6029      	str	r1, [r5, #0]
 80088d6:	bf48      	it	mi
 80088d8:	6023      	strmi	r3, [r4, #0]
 80088da:	b91e      	cbnz	r6, 80088e4 <_printf_i+0x1a4>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	f023 0320 	bic.w	r3, r3, #32
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	2310      	movs	r3, #16
 80088e6:	e7a7      	b.n	8008838 <_printf_i+0xf8>
 80088e8:	4824      	ldr	r0, [pc, #144]	; (800897c <_printf_i+0x23c>)
 80088ea:	e7e4      	b.n	80088b6 <_printf_i+0x176>
 80088ec:	4615      	mov	r5, r2
 80088ee:	e7bd      	b.n	800886c <_printf_i+0x12c>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	6826      	ldr	r6, [r4, #0]
 80088f4:	6961      	ldr	r1, [r4, #20]
 80088f6:	1d18      	adds	r0, r3, #4
 80088f8:	6028      	str	r0, [r5, #0]
 80088fa:	0635      	lsls	r5, r6, #24
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	d501      	bpl.n	8008904 <_printf_i+0x1c4>
 8008900:	6019      	str	r1, [r3, #0]
 8008902:	e002      	b.n	800890a <_printf_i+0x1ca>
 8008904:	0670      	lsls	r0, r6, #25
 8008906:	d5fb      	bpl.n	8008900 <_printf_i+0x1c0>
 8008908:	8019      	strh	r1, [r3, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	6123      	str	r3, [r4, #16]
 800890e:	4615      	mov	r5, r2
 8008910:	e7bc      	b.n	800888c <_printf_i+0x14c>
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	1d1a      	adds	r2, r3, #4
 8008916:	602a      	str	r2, [r5, #0]
 8008918:	681d      	ldr	r5, [r3, #0]
 800891a:	6862      	ldr	r2, [r4, #4]
 800891c:	2100      	movs	r1, #0
 800891e:	4628      	mov	r0, r5
 8008920:	f7f7 fc66 	bl	80001f0 <memchr>
 8008924:	b108      	cbz	r0, 800892a <_printf_i+0x1ea>
 8008926:	1b40      	subs	r0, r0, r5
 8008928:	6060      	str	r0, [r4, #4]
 800892a:	6863      	ldr	r3, [r4, #4]
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	2300      	movs	r3, #0
 8008930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008934:	e7aa      	b.n	800888c <_printf_i+0x14c>
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	462a      	mov	r2, r5
 800893a:	4649      	mov	r1, r9
 800893c:	4640      	mov	r0, r8
 800893e:	47d0      	blx	sl
 8008940:	3001      	adds	r0, #1
 8008942:	d0ad      	beq.n	80088a0 <_printf_i+0x160>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	079b      	lsls	r3, r3, #30
 8008948:	d413      	bmi.n	8008972 <_printf_i+0x232>
 800894a:	68e0      	ldr	r0, [r4, #12]
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	4298      	cmp	r0, r3
 8008950:	bfb8      	it	lt
 8008952:	4618      	movlt	r0, r3
 8008954:	e7a6      	b.n	80088a4 <_printf_i+0x164>
 8008956:	2301      	movs	r3, #1
 8008958:	4632      	mov	r2, r6
 800895a:	4649      	mov	r1, r9
 800895c:	4640      	mov	r0, r8
 800895e:	47d0      	blx	sl
 8008960:	3001      	adds	r0, #1
 8008962:	d09d      	beq.n	80088a0 <_printf_i+0x160>
 8008964:	3501      	adds	r5, #1
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	9903      	ldr	r1, [sp, #12]
 800896a:	1a5b      	subs	r3, r3, r1
 800896c:	42ab      	cmp	r3, r5
 800896e:	dcf2      	bgt.n	8008956 <_printf_i+0x216>
 8008970:	e7eb      	b.n	800894a <_printf_i+0x20a>
 8008972:	2500      	movs	r5, #0
 8008974:	f104 0619 	add.w	r6, r4, #25
 8008978:	e7f5      	b.n	8008966 <_printf_i+0x226>
 800897a:	bf00      	nop
 800897c:	0800b763 	.word	0x0800b763
 8008980:	0800b774 	.word	0x0800b774

08008984 <__sflush_r>:
 8008984:	898a      	ldrh	r2, [r1, #12]
 8008986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898a:	4605      	mov	r5, r0
 800898c:	0710      	lsls	r0, r2, #28
 800898e:	460c      	mov	r4, r1
 8008990:	d458      	bmi.n	8008a44 <__sflush_r+0xc0>
 8008992:	684b      	ldr	r3, [r1, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dc05      	bgt.n	80089a4 <__sflush_r+0x20>
 8008998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	dc02      	bgt.n	80089a4 <__sflush_r+0x20>
 800899e:	2000      	movs	r0, #0
 80089a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089a6:	2e00      	cmp	r6, #0
 80089a8:	d0f9      	beq.n	800899e <__sflush_r+0x1a>
 80089aa:	2300      	movs	r3, #0
 80089ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089b0:	682f      	ldr	r7, [r5, #0]
 80089b2:	6a21      	ldr	r1, [r4, #32]
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	d032      	beq.n	8008a1e <__sflush_r+0x9a>
 80089b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	075a      	lsls	r2, r3, #29
 80089be:	d505      	bpl.n	80089cc <__sflush_r+0x48>
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	1ac0      	subs	r0, r0, r3
 80089c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089c6:	b10b      	cbz	r3, 80089cc <__sflush_r+0x48>
 80089c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089ca:	1ac0      	subs	r0, r0, r3
 80089cc:	2300      	movs	r3, #0
 80089ce:	4602      	mov	r2, r0
 80089d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089d2:	6a21      	ldr	r1, [r4, #32]
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b0      	blx	r6
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	d106      	bne.n	80089ec <__sflush_r+0x68>
 80089de:	6829      	ldr	r1, [r5, #0]
 80089e0:	291d      	cmp	r1, #29
 80089e2:	d82b      	bhi.n	8008a3c <__sflush_r+0xb8>
 80089e4:	4a29      	ldr	r2, [pc, #164]	; (8008a8c <__sflush_r+0x108>)
 80089e6:	410a      	asrs	r2, r1
 80089e8:	07d6      	lsls	r6, r2, #31
 80089ea:	d427      	bmi.n	8008a3c <__sflush_r+0xb8>
 80089ec:	2200      	movs	r2, #0
 80089ee:	6062      	str	r2, [r4, #4]
 80089f0:	04d9      	lsls	r1, r3, #19
 80089f2:	6922      	ldr	r2, [r4, #16]
 80089f4:	6022      	str	r2, [r4, #0]
 80089f6:	d504      	bpl.n	8008a02 <__sflush_r+0x7e>
 80089f8:	1c42      	adds	r2, r0, #1
 80089fa:	d101      	bne.n	8008a00 <__sflush_r+0x7c>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b903      	cbnz	r3, 8008a02 <__sflush_r+0x7e>
 8008a00:	6560      	str	r0, [r4, #84]	; 0x54
 8008a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a04:	602f      	str	r7, [r5, #0]
 8008a06:	2900      	cmp	r1, #0
 8008a08:	d0c9      	beq.n	800899e <__sflush_r+0x1a>
 8008a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	d002      	beq.n	8008a18 <__sflush_r+0x94>
 8008a12:	4628      	mov	r0, r5
 8008a14:	f001 fa5a 	bl	8009ecc <_free_r>
 8008a18:	2000      	movs	r0, #0
 8008a1a:	6360      	str	r0, [r4, #52]	; 0x34
 8008a1c:	e7c0      	b.n	80089a0 <__sflush_r+0x1c>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4628      	mov	r0, r5
 8008a22:	47b0      	blx	r6
 8008a24:	1c41      	adds	r1, r0, #1
 8008a26:	d1c8      	bne.n	80089ba <__sflush_r+0x36>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0c5      	beq.n	80089ba <__sflush_r+0x36>
 8008a2e:	2b1d      	cmp	r3, #29
 8008a30:	d001      	beq.n	8008a36 <__sflush_r+0xb2>
 8008a32:	2b16      	cmp	r3, #22
 8008a34:	d101      	bne.n	8008a3a <__sflush_r+0xb6>
 8008a36:	602f      	str	r7, [r5, #0]
 8008a38:	e7b1      	b.n	800899e <__sflush_r+0x1a>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a40:	81a3      	strh	r3, [r4, #12]
 8008a42:	e7ad      	b.n	80089a0 <__sflush_r+0x1c>
 8008a44:	690f      	ldr	r7, [r1, #16]
 8008a46:	2f00      	cmp	r7, #0
 8008a48:	d0a9      	beq.n	800899e <__sflush_r+0x1a>
 8008a4a:	0793      	lsls	r3, r2, #30
 8008a4c:	680e      	ldr	r6, [r1, #0]
 8008a4e:	bf08      	it	eq
 8008a50:	694b      	ldreq	r3, [r1, #20]
 8008a52:	600f      	str	r7, [r1, #0]
 8008a54:	bf18      	it	ne
 8008a56:	2300      	movne	r3, #0
 8008a58:	eba6 0807 	sub.w	r8, r6, r7
 8008a5c:	608b      	str	r3, [r1, #8]
 8008a5e:	f1b8 0f00 	cmp.w	r8, #0
 8008a62:	dd9c      	ble.n	800899e <__sflush_r+0x1a>
 8008a64:	6a21      	ldr	r1, [r4, #32]
 8008a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a68:	4643      	mov	r3, r8
 8008a6a:	463a      	mov	r2, r7
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b0      	blx	r6
 8008a70:	2800      	cmp	r0, #0
 8008a72:	dc06      	bgt.n	8008a82 <__sflush_r+0xfe>
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	e78e      	b.n	80089a0 <__sflush_r+0x1c>
 8008a82:	4407      	add	r7, r0
 8008a84:	eba8 0800 	sub.w	r8, r8, r0
 8008a88:	e7e9      	b.n	8008a5e <__sflush_r+0xda>
 8008a8a:	bf00      	nop
 8008a8c:	dfbffffe 	.word	0xdfbffffe

08008a90 <_fflush_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	690b      	ldr	r3, [r1, #16]
 8008a94:	4605      	mov	r5, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	b913      	cbnz	r3, 8008aa0 <_fflush_r+0x10>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	b118      	cbz	r0, 8008aaa <_fflush_r+0x1a>
 8008aa2:	6a03      	ldr	r3, [r0, #32]
 8008aa4:	b90b      	cbnz	r3, 8008aaa <_fflush_r+0x1a>
 8008aa6:	f000 f8bb 	bl	8008c20 <__sinit>
 8008aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f3      	beq.n	8008a9a <_fflush_r+0xa>
 8008ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ab4:	07d0      	lsls	r0, r2, #31
 8008ab6:	d404      	bmi.n	8008ac2 <_fflush_r+0x32>
 8008ab8:	0599      	lsls	r1, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_fflush_r+0x32>
 8008abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008abe:	f000 fb88 	bl	80091d2 <__retarget_lock_acquire_recursive>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f7ff ff5d 	bl	8008984 <__sflush_r>
 8008aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008acc:	07da      	lsls	r2, r3, #31
 8008ace:	4605      	mov	r5, r0
 8008ad0:	d4e4      	bmi.n	8008a9c <_fflush_r+0xc>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	059b      	lsls	r3, r3, #22
 8008ad6:	d4e1      	bmi.n	8008a9c <_fflush_r+0xc>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ada:	f000 fb7b 	bl	80091d4 <__retarget_lock_release_recursive>
 8008ade:	e7dd      	b.n	8008a9c <_fflush_r+0xc>

08008ae0 <fflush>:
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	b920      	cbnz	r0, 8008aee <fflush+0xe>
 8008ae4:	4a04      	ldr	r2, [pc, #16]	; (8008af8 <fflush+0x18>)
 8008ae6:	4905      	ldr	r1, [pc, #20]	; (8008afc <fflush+0x1c>)
 8008ae8:	4805      	ldr	r0, [pc, #20]	; (8008b00 <fflush+0x20>)
 8008aea:	f000 b8b1 	b.w	8008c50 <_fwalk_sglue>
 8008aee:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <fflush+0x24>)
 8008af0:	6818      	ldr	r0, [r3, #0]
 8008af2:	f7ff bfcd 	b.w	8008a90 <_fflush_r>
 8008af6:	bf00      	nop
 8008af8:	2000076c 	.word	0x2000076c
 8008afc:	08008a91 	.word	0x08008a91
 8008b00:	20000778 	.word	0x20000778
 8008b04:	200007c4 	.word	0x200007c4

08008b08 <std>:
 8008b08:	2300      	movs	r3, #0
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b16:	6083      	str	r3, [r0, #8]
 8008b18:	8181      	strh	r1, [r0, #12]
 8008b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b1c:	81c2      	strh	r2, [r0, #14]
 8008b1e:	6183      	str	r3, [r0, #24]
 8008b20:	4619      	mov	r1, r3
 8008b22:	2208      	movs	r2, #8
 8008b24:	305c      	adds	r0, #92	; 0x5c
 8008b26:	f000 fac5 	bl	80090b4 <memset>
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <std+0x58>)
 8008b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8008b2e:	4b0d      	ldr	r3, [pc, #52]	; (8008b64 <std+0x5c>)
 8008b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b32:	4b0d      	ldr	r3, [pc, #52]	; (8008b68 <std+0x60>)
 8008b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b36:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <std+0x64>)
 8008b38:	6323      	str	r3, [r4, #48]	; 0x30
 8008b3a:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <std+0x68>)
 8008b3c:	6224      	str	r4, [r4, #32]
 8008b3e:	429c      	cmp	r4, r3
 8008b40:	d006      	beq.n	8008b50 <std+0x48>
 8008b42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b46:	4294      	cmp	r4, r2
 8008b48:	d002      	beq.n	8008b50 <std+0x48>
 8008b4a:	33d0      	adds	r3, #208	; 0xd0
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d105      	bne.n	8008b5c <std+0x54>
 8008b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b58:	f000 bb3a 	b.w	80091d0 <__retarget_lock_init_recursive>
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	bf00      	nop
 8008b60:	08008f05 	.word	0x08008f05
 8008b64:	08008f27 	.word	0x08008f27
 8008b68:	08008f5f 	.word	0x08008f5f
 8008b6c:	08008f83 	.word	0x08008f83
 8008b70:	20000c24 	.word	0x20000c24

08008b74 <stdio_exit_handler>:
 8008b74:	4a02      	ldr	r2, [pc, #8]	; (8008b80 <stdio_exit_handler+0xc>)
 8008b76:	4903      	ldr	r1, [pc, #12]	; (8008b84 <stdio_exit_handler+0x10>)
 8008b78:	4803      	ldr	r0, [pc, #12]	; (8008b88 <stdio_exit_handler+0x14>)
 8008b7a:	f000 b869 	b.w	8008c50 <_fwalk_sglue>
 8008b7e:	bf00      	nop
 8008b80:	2000076c 	.word	0x2000076c
 8008b84:	08008a91 	.word	0x08008a91
 8008b88:	20000778 	.word	0x20000778

08008b8c <cleanup_stdio>:
 8008b8c:	6841      	ldr	r1, [r0, #4]
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <cleanup_stdio+0x34>)
 8008b90:	4299      	cmp	r1, r3
 8008b92:	b510      	push	{r4, lr}
 8008b94:	4604      	mov	r4, r0
 8008b96:	d001      	beq.n	8008b9c <cleanup_stdio+0x10>
 8008b98:	f7ff ff7a 	bl	8008a90 <_fflush_r>
 8008b9c:	68a1      	ldr	r1, [r4, #8]
 8008b9e:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <cleanup_stdio+0x38>)
 8008ba0:	4299      	cmp	r1, r3
 8008ba2:	d002      	beq.n	8008baa <cleanup_stdio+0x1e>
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f7ff ff73 	bl	8008a90 <_fflush_r>
 8008baa:	68e1      	ldr	r1, [r4, #12]
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <cleanup_stdio+0x3c>)
 8008bae:	4299      	cmp	r1, r3
 8008bb0:	d004      	beq.n	8008bbc <cleanup_stdio+0x30>
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb8:	f7ff bf6a 	b.w	8008a90 <_fflush_r>
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000c24 	.word	0x20000c24
 8008bc4:	20000c8c 	.word	0x20000c8c
 8008bc8:	20000cf4 	.word	0x20000cf4

08008bcc <global_stdio_init.part.0>:
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <global_stdio_init.part.0+0x30>)
 8008bd0:	4c0b      	ldr	r4, [pc, #44]	; (8008c00 <global_stdio_init.part.0+0x34>)
 8008bd2:	4a0c      	ldr	r2, [pc, #48]	; (8008c04 <global_stdio_init.part.0+0x38>)
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2104      	movs	r1, #4
 8008bdc:	f7ff ff94 	bl	8008b08 <std>
 8008be0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008be4:	2201      	movs	r2, #1
 8008be6:	2109      	movs	r1, #9
 8008be8:	f7ff ff8e 	bl	8008b08 <std>
 8008bec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf6:	2112      	movs	r1, #18
 8008bf8:	f7ff bf86 	b.w	8008b08 <std>
 8008bfc:	20000d5c 	.word	0x20000d5c
 8008c00:	20000c24 	.word	0x20000c24
 8008c04:	08008b75 	.word	0x08008b75

08008c08 <__sfp_lock_acquire>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__sfp_lock_acquire+0x8>)
 8008c0a:	f000 bae2 	b.w	80091d2 <__retarget_lock_acquire_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20000d65 	.word	0x20000d65

08008c14 <__sfp_lock_release>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__sfp_lock_release+0x8>)
 8008c16:	f000 badd 	b.w	80091d4 <__retarget_lock_release_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	20000d65 	.word	0x20000d65

08008c20 <__sinit>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	4604      	mov	r4, r0
 8008c24:	f7ff fff0 	bl	8008c08 <__sfp_lock_acquire>
 8008c28:	6a23      	ldr	r3, [r4, #32]
 8008c2a:	b11b      	cbz	r3, 8008c34 <__sinit+0x14>
 8008c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c30:	f7ff bff0 	b.w	8008c14 <__sfp_lock_release>
 8008c34:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <__sinit+0x28>)
 8008c36:	6223      	str	r3, [r4, #32]
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <__sinit+0x2c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f5      	bne.n	8008c2c <__sinit+0xc>
 8008c40:	f7ff ffc4 	bl	8008bcc <global_stdio_init.part.0>
 8008c44:	e7f2      	b.n	8008c2c <__sinit+0xc>
 8008c46:	bf00      	nop
 8008c48:	08008b8d 	.word	0x08008b8d
 8008c4c:	20000d5c 	.word	0x20000d5c

08008c50 <_fwalk_sglue>:
 8008c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c54:	4607      	mov	r7, r0
 8008c56:	4688      	mov	r8, r1
 8008c58:	4614      	mov	r4, r2
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c60:	f1b9 0901 	subs.w	r9, r9, #1
 8008c64:	d505      	bpl.n	8008c72 <_fwalk_sglue+0x22>
 8008c66:	6824      	ldr	r4, [r4, #0]
 8008c68:	2c00      	cmp	r4, #0
 8008c6a:	d1f7      	bne.n	8008c5c <_fwalk_sglue+0xc>
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d907      	bls.n	8008c88 <_fwalk_sglue+0x38>
 8008c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	d003      	beq.n	8008c88 <_fwalk_sglue+0x38>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4638      	mov	r0, r7
 8008c84:	47c0      	blx	r8
 8008c86:	4306      	orrs	r6, r0
 8008c88:	3568      	adds	r5, #104	; 0x68
 8008c8a:	e7e9      	b.n	8008c60 <_fwalk_sglue+0x10>

08008c8c <iprintf>:
 8008c8c:	b40f      	push	{r0, r1, r2, r3}
 8008c8e:	b507      	push	{r0, r1, r2, lr}
 8008c90:	4906      	ldr	r1, [pc, #24]	; (8008cac <iprintf+0x20>)
 8008c92:	ab04      	add	r3, sp, #16
 8008c94:	6808      	ldr	r0, [r1, #0]
 8008c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c9a:	6881      	ldr	r1, [r0, #8]
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	f001 ff13 	bl	800aac8 <_vfiprintf_r>
 8008ca2:	b003      	add	sp, #12
 8008ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca8:	b004      	add	sp, #16
 8008caa:	4770      	bx	lr
 8008cac:	200007c4 	.word	0x200007c4

08008cb0 <_puts_r>:
 8008cb0:	6a03      	ldr	r3, [r0, #32]
 8008cb2:	b570      	push	{r4, r5, r6, lr}
 8008cb4:	6884      	ldr	r4, [r0, #8]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	460e      	mov	r6, r1
 8008cba:	b90b      	cbnz	r3, 8008cc0 <_puts_r+0x10>
 8008cbc:	f7ff ffb0 	bl	8008c20 <__sinit>
 8008cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cc2:	07db      	lsls	r3, r3, #31
 8008cc4:	d405      	bmi.n	8008cd2 <_puts_r+0x22>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	0598      	lsls	r0, r3, #22
 8008cca:	d402      	bmi.n	8008cd2 <_puts_r+0x22>
 8008ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cce:	f000 fa80 	bl	80091d2 <__retarget_lock_acquire_recursive>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	0719      	lsls	r1, r3, #28
 8008cd6:	d513      	bpl.n	8008d00 <_puts_r+0x50>
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	b18b      	cbz	r3, 8008d00 <_puts_r+0x50>
 8008cdc:	3e01      	subs	r6, #1
 8008cde:	68a3      	ldr	r3, [r4, #8]
 8008ce0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	60a3      	str	r3, [r4, #8]
 8008ce8:	b9e9      	cbnz	r1, 8008d26 <_puts_r+0x76>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	da2e      	bge.n	8008d4c <_puts_r+0x9c>
 8008cee:	4622      	mov	r2, r4
 8008cf0:	210a      	movs	r1, #10
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f000 f949 	bl	8008f8a <__swbuf_r>
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d007      	beq.n	8008d0c <_puts_r+0x5c>
 8008cfc:	250a      	movs	r5, #10
 8008cfe:	e007      	b.n	8008d10 <_puts_r+0x60>
 8008d00:	4621      	mov	r1, r4
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 f97e 	bl	8009004 <__swsetup_r>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d0e7      	beq.n	8008cdc <_puts_r+0x2c>
 8008d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8008d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d12:	07da      	lsls	r2, r3, #31
 8008d14:	d405      	bmi.n	8008d22 <_puts_r+0x72>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	059b      	lsls	r3, r3, #22
 8008d1a:	d402      	bmi.n	8008d22 <_puts_r+0x72>
 8008d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1e:	f000 fa59 	bl	80091d4 <__retarget_lock_release_recursive>
 8008d22:	4628      	mov	r0, r5
 8008d24:	bd70      	pop	{r4, r5, r6, pc}
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	da04      	bge.n	8008d34 <_puts_r+0x84>
 8008d2a:	69a2      	ldr	r2, [r4, #24]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	dc06      	bgt.n	8008d3e <_puts_r+0x8e>
 8008d30:	290a      	cmp	r1, #10
 8008d32:	d004      	beq.n	8008d3e <_puts_r+0x8e>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	6022      	str	r2, [r4, #0]
 8008d3a:	7019      	strb	r1, [r3, #0]
 8008d3c:	e7cf      	b.n	8008cde <_puts_r+0x2e>
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4628      	mov	r0, r5
 8008d42:	f000 f922 	bl	8008f8a <__swbuf_r>
 8008d46:	3001      	adds	r0, #1
 8008d48:	d1c9      	bne.n	8008cde <_puts_r+0x2e>
 8008d4a:	e7df      	b.n	8008d0c <_puts_r+0x5c>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	250a      	movs	r5, #10
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	6022      	str	r2, [r4, #0]
 8008d54:	701d      	strb	r5, [r3, #0]
 8008d56:	e7db      	b.n	8008d10 <_puts_r+0x60>

08008d58 <puts>:
 8008d58:	4b02      	ldr	r3, [pc, #8]	; (8008d64 <puts+0xc>)
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	f7ff bfa7 	b.w	8008cb0 <_puts_r>
 8008d62:	bf00      	nop
 8008d64:	200007c4 	.word	0x200007c4

08008d68 <setvbuf>:
 8008d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d6c:	461d      	mov	r5, r3
 8008d6e:	4b54      	ldr	r3, [pc, #336]	; (8008ec0 <setvbuf+0x158>)
 8008d70:	681f      	ldr	r7, [r3, #0]
 8008d72:	4604      	mov	r4, r0
 8008d74:	460e      	mov	r6, r1
 8008d76:	4690      	mov	r8, r2
 8008d78:	b127      	cbz	r7, 8008d84 <setvbuf+0x1c>
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	b913      	cbnz	r3, 8008d84 <setvbuf+0x1c>
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f7ff ff4e 	bl	8008c20 <__sinit>
 8008d84:	f1b8 0f02 	cmp.w	r8, #2
 8008d88:	d006      	beq.n	8008d98 <setvbuf+0x30>
 8008d8a:	f1b8 0f01 	cmp.w	r8, #1
 8008d8e:	f200 8094 	bhi.w	8008eba <setvbuf+0x152>
 8008d92:	2d00      	cmp	r5, #0
 8008d94:	f2c0 8091 	blt.w	8008eba <setvbuf+0x152>
 8008d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d9a:	07da      	lsls	r2, r3, #31
 8008d9c:	d405      	bmi.n	8008daa <setvbuf+0x42>
 8008d9e:	89a3      	ldrh	r3, [r4, #12]
 8008da0:	059b      	lsls	r3, r3, #22
 8008da2:	d402      	bmi.n	8008daa <setvbuf+0x42>
 8008da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da6:	f000 fa14 	bl	80091d2 <__retarget_lock_acquire_recursive>
 8008daa:	4621      	mov	r1, r4
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff fe6f 	bl	8008a90 <_fflush_r>
 8008db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008db4:	b141      	cbz	r1, 8008dc8 <setvbuf+0x60>
 8008db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dba:	4299      	cmp	r1, r3
 8008dbc:	d002      	beq.n	8008dc4 <setvbuf+0x5c>
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	f001 f884 	bl	8009ecc <_free_r>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	6363      	str	r3, [r4, #52]	; 0x34
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61a3      	str	r3, [r4, #24]
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	0618      	lsls	r0, r3, #24
 8008dd2:	d503      	bpl.n	8008ddc <setvbuf+0x74>
 8008dd4:	6921      	ldr	r1, [r4, #16]
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	f001 f878 	bl	8009ecc <_free_r>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	f1b8 0f02 	cmp.w	r8, #2
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	d05f      	beq.n	8008eae <setvbuf+0x146>
 8008dee:	ab01      	add	r3, sp, #4
 8008df0:	466a      	mov	r2, sp
 8008df2:	4621      	mov	r1, r4
 8008df4:	4638      	mov	r0, r7
 8008df6:	f001 ff81 	bl	800acfc <__swhatbuf_r>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	4318      	orrs	r0, r3
 8008dfe:	81a0      	strh	r0, [r4, #12]
 8008e00:	bb2d      	cbnz	r5, 8008e4e <setvbuf+0xe6>
 8008e02:	9d00      	ldr	r5, [sp, #0]
 8008e04:	4628      	mov	r0, r5
 8008e06:	f001 f8ad 	bl	8009f64 <malloc>
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d150      	bne.n	8008eb2 <setvbuf+0x14a>
 8008e10:	f8dd 9000 	ldr.w	r9, [sp]
 8008e14:	45a9      	cmp	r9, r5
 8008e16:	d13e      	bne.n	8008e96 <setvbuf+0x12e>
 8008e18:	f04f 35ff 	mov.w	r5, #4294967295
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	60a2      	str	r2, [r4, #8]
 8008e20:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008e24:	6022      	str	r2, [r4, #0]
 8008e26:	6122      	str	r2, [r4, #16]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2e:	6162      	str	r2, [r4, #20]
 8008e30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e32:	f043 0302 	orr.w	r3, r3, #2
 8008e36:	07d1      	lsls	r1, r2, #31
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	d404      	bmi.n	8008e46 <setvbuf+0xde>
 8008e3c:	059b      	lsls	r3, r3, #22
 8008e3e:	d402      	bmi.n	8008e46 <setvbuf+0xde>
 8008e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e42:	f000 f9c7 	bl	80091d4 <__retarget_lock_release_recursive>
 8008e46:	4628      	mov	r0, r5
 8008e48:	b003      	add	sp, #12
 8008e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e4e:	2e00      	cmp	r6, #0
 8008e50:	d0d8      	beq.n	8008e04 <setvbuf+0x9c>
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	b913      	cbnz	r3, 8008e5c <setvbuf+0xf4>
 8008e56:	4638      	mov	r0, r7
 8008e58:	f7ff fee2 	bl	8008c20 <__sinit>
 8008e5c:	f1b8 0f01 	cmp.w	r8, #1
 8008e60:	bf08      	it	eq
 8008e62:	89a3      	ldrheq	r3, [r4, #12]
 8008e64:	6026      	str	r6, [r4, #0]
 8008e66:	bf04      	itt	eq
 8008e68:	f043 0301 	orreq.w	r3, r3, #1
 8008e6c:	81a3      	strheq	r3, [r4, #12]
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f013 0208 	ands.w	r2, r3, #8
 8008e74:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008e78:	d01d      	beq.n	8008eb6 <setvbuf+0x14e>
 8008e7a:	07da      	lsls	r2, r3, #31
 8008e7c:	bf41      	itttt	mi
 8008e7e:	2200      	movmi	r2, #0
 8008e80:	426d      	negmi	r5, r5
 8008e82:	60a2      	strmi	r2, [r4, #8]
 8008e84:	61a5      	strmi	r5, [r4, #24]
 8008e86:	bf58      	it	pl
 8008e88:	60a5      	strpl	r5, [r4, #8]
 8008e8a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008e8c:	f015 0501 	ands.w	r5, r5, #1
 8008e90:	d0d4      	beq.n	8008e3c <setvbuf+0xd4>
 8008e92:	2500      	movs	r5, #0
 8008e94:	e7d7      	b.n	8008e46 <setvbuf+0xde>
 8008e96:	4648      	mov	r0, r9
 8008e98:	f001 f864 	bl	8009f64 <malloc>
 8008e9c:	4606      	mov	r6, r0
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d0ba      	beq.n	8008e18 <setvbuf+0xb0>
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	464d      	mov	r5, r9
 8008eac:	e7d1      	b.n	8008e52 <setvbuf+0xea>
 8008eae:	2500      	movs	r5, #0
 8008eb0:	e7b4      	b.n	8008e1c <setvbuf+0xb4>
 8008eb2:	46a9      	mov	r9, r5
 8008eb4:	e7f5      	b.n	8008ea2 <setvbuf+0x13a>
 8008eb6:	60a2      	str	r2, [r4, #8]
 8008eb8:	e7e7      	b.n	8008e8a <setvbuf+0x122>
 8008eba:	f04f 35ff 	mov.w	r5, #4294967295
 8008ebe:	e7c2      	b.n	8008e46 <setvbuf+0xde>
 8008ec0:	200007c4 	.word	0x200007c4

08008ec4 <siprintf>:
 8008ec4:	b40e      	push	{r1, r2, r3}
 8008ec6:	b500      	push	{lr}
 8008ec8:	b09c      	sub	sp, #112	; 0x70
 8008eca:	ab1d      	add	r3, sp, #116	; 0x74
 8008ecc:	9002      	str	r0, [sp, #8]
 8008ece:	9006      	str	r0, [sp, #24]
 8008ed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ed4:	4809      	ldr	r0, [pc, #36]	; (8008efc <siprintf+0x38>)
 8008ed6:	9107      	str	r1, [sp, #28]
 8008ed8:	9104      	str	r1, [sp, #16]
 8008eda:	4909      	ldr	r1, [pc, #36]	; (8008f00 <siprintf+0x3c>)
 8008edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee0:	9105      	str	r1, [sp, #20]
 8008ee2:	6800      	ldr	r0, [r0, #0]
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	a902      	add	r1, sp, #8
 8008ee8:	f001 fcc6 	bl	800a878 <_svfiprintf_r>
 8008eec:	9b02      	ldr	r3, [sp, #8]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	b01c      	add	sp, #112	; 0x70
 8008ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef8:	b003      	add	sp, #12
 8008efa:	4770      	bx	lr
 8008efc:	200007c4 	.word	0x200007c4
 8008f00:	ffff0208 	.word	0xffff0208

08008f04 <__sread>:
 8008f04:	b510      	push	{r4, lr}
 8008f06:	460c      	mov	r4, r1
 8008f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0c:	f000 f912 	bl	8009134 <_read_r>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	bfab      	itete	ge
 8008f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f16:	89a3      	ldrhlt	r3, [r4, #12]
 8008f18:	181b      	addge	r3, r3, r0
 8008f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f1e:	bfac      	ite	ge
 8008f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f22:	81a3      	strhlt	r3, [r4, #12]
 8008f24:	bd10      	pop	{r4, pc}

08008f26 <__swrite>:
 8008f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2a:	461f      	mov	r7, r3
 8008f2c:	898b      	ldrh	r3, [r1, #12]
 8008f2e:	05db      	lsls	r3, r3, #23
 8008f30:	4605      	mov	r5, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	4616      	mov	r6, r2
 8008f36:	d505      	bpl.n	8008f44 <__swrite+0x1e>
 8008f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f000 f8e6 	bl	8009110 <_lseek_r>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	4632      	mov	r2, r6
 8008f52:	463b      	mov	r3, r7
 8008f54:	4628      	mov	r0, r5
 8008f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5a:	f000 b8fd 	b.w	8009158 <_write_r>

08008f5e <__sseek>:
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	460c      	mov	r4, r1
 8008f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f66:	f000 f8d3 	bl	8009110 <_lseek_r>
 8008f6a:	1c43      	adds	r3, r0, #1
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	bf15      	itete	ne
 8008f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f7a:	81a3      	strheq	r3, [r4, #12]
 8008f7c:	bf18      	it	ne
 8008f7e:	81a3      	strhne	r3, [r4, #12]
 8008f80:	bd10      	pop	{r4, pc}

08008f82 <__sclose>:
 8008f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f86:	f000 b8b3 	b.w	80090f0 <_close_r>

08008f8a <__swbuf_r>:
 8008f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8c:	460e      	mov	r6, r1
 8008f8e:	4614      	mov	r4, r2
 8008f90:	4605      	mov	r5, r0
 8008f92:	b118      	cbz	r0, 8008f9c <__swbuf_r+0x12>
 8008f94:	6a03      	ldr	r3, [r0, #32]
 8008f96:	b90b      	cbnz	r3, 8008f9c <__swbuf_r+0x12>
 8008f98:	f7ff fe42 	bl	8008c20 <__sinit>
 8008f9c:	69a3      	ldr	r3, [r4, #24]
 8008f9e:	60a3      	str	r3, [r4, #8]
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	071a      	lsls	r2, r3, #28
 8008fa4:	d525      	bpl.n	8008ff2 <__swbuf_r+0x68>
 8008fa6:	6923      	ldr	r3, [r4, #16]
 8008fa8:	b31b      	cbz	r3, 8008ff2 <__swbuf_r+0x68>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	1a98      	subs	r0, r3, r2
 8008fb0:	6963      	ldr	r3, [r4, #20]
 8008fb2:	b2f6      	uxtb	r6, r6
 8008fb4:	4283      	cmp	r3, r0
 8008fb6:	4637      	mov	r7, r6
 8008fb8:	dc04      	bgt.n	8008fc4 <__swbuf_r+0x3a>
 8008fba:	4621      	mov	r1, r4
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f7ff fd67 	bl	8008a90 <_fflush_r>
 8008fc2:	b9e0      	cbnz	r0, 8008ffe <__swbuf_r+0x74>
 8008fc4:	68a3      	ldr	r3, [r4, #8]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	60a3      	str	r3, [r4, #8]
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	6022      	str	r2, [r4, #0]
 8008fd0:	701e      	strb	r6, [r3, #0]
 8008fd2:	6962      	ldr	r2, [r4, #20]
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d004      	beq.n	8008fe4 <__swbuf_r+0x5a>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	07db      	lsls	r3, r3, #31
 8008fde:	d506      	bpl.n	8008fee <__swbuf_r+0x64>
 8008fe0:	2e0a      	cmp	r6, #10
 8008fe2:	d104      	bne.n	8008fee <__swbuf_r+0x64>
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f7ff fd52 	bl	8008a90 <_fflush_r>
 8008fec:	b938      	cbnz	r0, 8008ffe <__swbuf_r+0x74>
 8008fee:	4638      	mov	r0, r7
 8008ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	f000 f805 	bl	8009004 <__swsetup_r>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d0d5      	beq.n	8008faa <__swbuf_r+0x20>
 8008ffe:	f04f 37ff 	mov.w	r7, #4294967295
 8009002:	e7f4      	b.n	8008fee <__swbuf_r+0x64>

08009004 <__swsetup_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4b2a      	ldr	r3, [pc, #168]	; (80090b0 <__swsetup_r+0xac>)
 8009008:	4605      	mov	r5, r0
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	460c      	mov	r4, r1
 800900e:	b118      	cbz	r0, 8009018 <__swsetup_r+0x14>
 8009010:	6a03      	ldr	r3, [r0, #32]
 8009012:	b90b      	cbnz	r3, 8009018 <__swsetup_r+0x14>
 8009014:	f7ff fe04 	bl	8008c20 <__sinit>
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800901e:	0718      	lsls	r0, r3, #28
 8009020:	d422      	bmi.n	8009068 <__swsetup_r+0x64>
 8009022:	06d9      	lsls	r1, r3, #27
 8009024:	d407      	bmi.n	8009036 <__swsetup_r+0x32>
 8009026:	2309      	movs	r3, #9
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	e034      	b.n	80090a0 <__swsetup_r+0x9c>
 8009036:	0758      	lsls	r0, r3, #29
 8009038:	d512      	bpl.n	8009060 <__swsetup_r+0x5c>
 800903a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800903c:	b141      	cbz	r1, 8009050 <__swsetup_r+0x4c>
 800903e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009042:	4299      	cmp	r1, r3
 8009044:	d002      	beq.n	800904c <__swsetup_r+0x48>
 8009046:	4628      	mov	r0, r5
 8009048:	f000 ff40 	bl	8009ecc <_free_r>
 800904c:	2300      	movs	r3, #0
 800904e:	6363      	str	r3, [r4, #52]	; 0x34
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	2300      	movs	r3, #0
 800905a:	6063      	str	r3, [r4, #4]
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	6023      	str	r3, [r4, #0]
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	f043 0308 	orr.w	r3, r3, #8
 8009066:	81a3      	strh	r3, [r4, #12]
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	b94b      	cbnz	r3, 8009080 <__swsetup_r+0x7c>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009076:	d003      	beq.n	8009080 <__swsetup_r+0x7c>
 8009078:	4621      	mov	r1, r4
 800907a:	4628      	mov	r0, r5
 800907c:	f001 fe64 	bl	800ad48 <__smakebuf_r>
 8009080:	89a0      	ldrh	r0, [r4, #12]
 8009082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009086:	f010 0301 	ands.w	r3, r0, #1
 800908a:	d00a      	beq.n	80090a2 <__swsetup_r+0x9e>
 800908c:	2300      	movs	r3, #0
 800908e:	60a3      	str	r3, [r4, #8]
 8009090:	6963      	ldr	r3, [r4, #20]
 8009092:	425b      	negs	r3, r3
 8009094:	61a3      	str	r3, [r4, #24]
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	b943      	cbnz	r3, 80090ac <__swsetup_r+0xa8>
 800909a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800909e:	d1c4      	bne.n	800902a <__swsetup_r+0x26>
 80090a0:	bd38      	pop	{r3, r4, r5, pc}
 80090a2:	0781      	lsls	r1, r0, #30
 80090a4:	bf58      	it	pl
 80090a6:	6963      	ldrpl	r3, [r4, #20]
 80090a8:	60a3      	str	r3, [r4, #8]
 80090aa:	e7f4      	b.n	8009096 <__swsetup_r+0x92>
 80090ac:	2000      	movs	r0, #0
 80090ae:	e7f7      	b.n	80090a0 <__swsetup_r+0x9c>
 80090b0:	200007c4 	.word	0x200007c4

080090b4 <memset>:
 80090b4:	4402      	add	r2, r0
 80090b6:	4603      	mov	r3, r0
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d100      	bne.n	80090be <memset+0xa>
 80090bc:	4770      	bx	lr
 80090be:	f803 1b01 	strb.w	r1, [r3], #1
 80090c2:	e7f9      	b.n	80090b8 <memset+0x4>

080090c4 <strncmp>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	b16a      	cbz	r2, 80090e4 <strncmp+0x20>
 80090c8:	3901      	subs	r1, #1
 80090ca:	1884      	adds	r4, r0, r2
 80090cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d103      	bne.n	80090e0 <strncmp+0x1c>
 80090d8:	42a0      	cmp	r0, r4
 80090da:	d001      	beq.n	80090e0 <strncmp+0x1c>
 80090dc:	2a00      	cmp	r2, #0
 80090de:	d1f5      	bne.n	80090cc <strncmp+0x8>
 80090e0:	1ad0      	subs	r0, r2, r3
 80090e2:	bd10      	pop	{r4, pc}
 80090e4:	4610      	mov	r0, r2
 80090e6:	e7fc      	b.n	80090e2 <strncmp+0x1e>

080090e8 <_localeconv_r>:
 80090e8:	4800      	ldr	r0, [pc, #0]	; (80090ec <_localeconv_r+0x4>)
 80090ea:	4770      	bx	lr
 80090ec:	200008b8 	.word	0x200008b8

080090f0 <_close_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d06      	ldr	r5, [pc, #24]	; (800910c <_close_r+0x1c>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	602b      	str	r3, [r5, #0]
 80090fc:	f7f9 f8ab 	bl	8002256 <_close>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_close_r+0x1a>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_close_r+0x1a>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20000d60 	.word	0x20000d60

08009110 <_lseek_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d07      	ldr	r5, [pc, #28]	; (8009130 <_lseek_r+0x20>)
 8009114:	4604      	mov	r4, r0
 8009116:	4608      	mov	r0, r1
 8009118:	4611      	mov	r1, r2
 800911a:	2200      	movs	r2, #0
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7f9 f8c0 	bl	80022a4 <_lseek>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_lseek_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_lseek_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000d60 	.word	0x20000d60

08009134 <_read_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	; (8009154 <_read_r+0x20>)
 8009138:	4604      	mov	r4, r0
 800913a:	4608      	mov	r0, r1
 800913c:	4611      	mov	r1, r2
 800913e:	2200      	movs	r2, #0
 8009140:	602a      	str	r2, [r5, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f7f9 f86a 	bl	800221c <_read>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_read_r+0x1e>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_read_r+0x1e>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20000d60 	.word	0x20000d60

08009158 <_write_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d07      	ldr	r5, [pc, #28]	; (8009178 <_write_r+0x20>)
 800915c:	4604      	mov	r4, r0
 800915e:	4608      	mov	r0, r1
 8009160:	4611      	mov	r1, r2
 8009162:	2200      	movs	r2, #0
 8009164:	602a      	str	r2, [r5, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f7f8 f900 	bl	800136c <_write>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_write_r+0x1e>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_write_r+0x1e>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20000d60 	.word	0x20000d60

0800917c <__errno>:
 800917c:	4b01      	ldr	r3, [pc, #4]	; (8009184 <__errno+0x8>)
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	200007c4 	.word	0x200007c4

08009188 <__libc_init_array>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	4d0d      	ldr	r5, [pc, #52]	; (80091c0 <__libc_init_array+0x38>)
 800918c:	4c0d      	ldr	r4, [pc, #52]	; (80091c4 <__libc_init_array+0x3c>)
 800918e:	1b64      	subs	r4, r4, r5
 8009190:	10a4      	asrs	r4, r4, #2
 8009192:	2600      	movs	r6, #0
 8009194:	42a6      	cmp	r6, r4
 8009196:	d109      	bne.n	80091ac <__libc_init_array+0x24>
 8009198:	4d0b      	ldr	r5, [pc, #44]	; (80091c8 <__libc_init_array+0x40>)
 800919a:	4c0c      	ldr	r4, [pc, #48]	; (80091cc <__libc_init_array+0x44>)
 800919c:	f001 ff52 	bl	800b044 <_init>
 80091a0:	1b64      	subs	r4, r4, r5
 80091a2:	10a4      	asrs	r4, r4, #2
 80091a4:	2600      	movs	r6, #0
 80091a6:	42a6      	cmp	r6, r4
 80091a8:	d105      	bne.n	80091b6 <__libc_init_array+0x2e>
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b0:	4798      	blx	r3
 80091b2:	3601      	adds	r6, #1
 80091b4:	e7ee      	b.n	8009194 <__libc_init_array+0xc>
 80091b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ba:	4798      	blx	r3
 80091bc:	3601      	adds	r6, #1
 80091be:	e7f2      	b.n	80091a6 <__libc_init_array+0x1e>
 80091c0:	0800b9c4 	.word	0x0800b9c4
 80091c4:	0800b9c4 	.word	0x0800b9c4
 80091c8:	0800b9c4 	.word	0x0800b9c4
 80091cc:	0800b9c8 	.word	0x0800b9c8

080091d0 <__retarget_lock_init_recursive>:
 80091d0:	4770      	bx	lr

080091d2 <__retarget_lock_acquire_recursive>:
 80091d2:	4770      	bx	lr

080091d4 <__retarget_lock_release_recursive>:
 80091d4:	4770      	bx	lr

080091d6 <quorem>:
 80091d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091da:	6903      	ldr	r3, [r0, #16]
 80091dc:	690c      	ldr	r4, [r1, #16]
 80091de:	42a3      	cmp	r3, r4
 80091e0:	4607      	mov	r7, r0
 80091e2:	db7e      	blt.n	80092e2 <quorem+0x10c>
 80091e4:	3c01      	subs	r4, #1
 80091e6:	f101 0814 	add.w	r8, r1, #20
 80091ea:	f100 0514 	add.w	r5, r0, #20
 80091ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091f2:	9301      	str	r3, [sp, #4]
 80091f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091fc:	3301      	adds	r3, #1
 80091fe:	429a      	cmp	r2, r3
 8009200:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009204:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009208:	fbb2 f6f3 	udiv	r6, r2, r3
 800920c:	d331      	bcc.n	8009272 <quorem+0x9c>
 800920e:	f04f 0e00 	mov.w	lr, #0
 8009212:	4640      	mov	r0, r8
 8009214:	46ac      	mov	ip, r5
 8009216:	46f2      	mov	sl, lr
 8009218:	f850 2b04 	ldr.w	r2, [r0], #4
 800921c:	b293      	uxth	r3, r2
 800921e:	fb06 e303 	mla	r3, r6, r3, lr
 8009222:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009226:	0c1a      	lsrs	r2, r3, #16
 8009228:	b29b      	uxth	r3, r3
 800922a:	ebaa 0303 	sub.w	r3, sl, r3
 800922e:	f8dc a000 	ldr.w	sl, [ip]
 8009232:	fa13 f38a 	uxtah	r3, r3, sl
 8009236:	fb06 220e 	mla	r2, r6, lr, r2
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	9b00      	ldr	r3, [sp, #0]
 800923e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009242:	b292      	uxth	r2, r2
 8009244:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800924c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009250:	4581      	cmp	r9, r0
 8009252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009256:	f84c 3b04 	str.w	r3, [ip], #4
 800925a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800925e:	d2db      	bcs.n	8009218 <quorem+0x42>
 8009260:	f855 300b 	ldr.w	r3, [r5, fp]
 8009264:	b92b      	cbnz	r3, 8009272 <quorem+0x9c>
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	3b04      	subs	r3, #4
 800926a:	429d      	cmp	r5, r3
 800926c:	461a      	mov	r2, r3
 800926e:	d32c      	bcc.n	80092ca <quorem+0xf4>
 8009270:	613c      	str	r4, [r7, #16]
 8009272:	4638      	mov	r0, r7
 8009274:	f001 f9a6 	bl	800a5c4 <__mcmp>
 8009278:	2800      	cmp	r0, #0
 800927a:	db22      	blt.n	80092c2 <quorem+0xec>
 800927c:	3601      	adds	r6, #1
 800927e:	4629      	mov	r1, r5
 8009280:	2000      	movs	r0, #0
 8009282:	f858 2b04 	ldr.w	r2, [r8], #4
 8009286:	f8d1 c000 	ldr.w	ip, [r1]
 800928a:	b293      	uxth	r3, r2
 800928c:	1ac3      	subs	r3, r0, r3
 800928e:	0c12      	lsrs	r2, r2, #16
 8009290:	fa13 f38c 	uxtah	r3, r3, ip
 8009294:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800929c:	b29b      	uxth	r3, r3
 800929e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a2:	45c1      	cmp	r9, r8
 80092a4:	f841 3b04 	str.w	r3, [r1], #4
 80092a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092ac:	d2e9      	bcs.n	8009282 <quorem+0xac>
 80092ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092b6:	b922      	cbnz	r2, 80092c2 <quorem+0xec>
 80092b8:	3b04      	subs	r3, #4
 80092ba:	429d      	cmp	r5, r3
 80092bc:	461a      	mov	r2, r3
 80092be:	d30a      	bcc.n	80092d6 <quorem+0x100>
 80092c0:	613c      	str	r4, [r7, #16]
 80092c2:	4630      	mov	r0, r6
 80092c4:	b003      	add	sp, #12
 80092c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ca:	6812      	ldr	r2, [r2, #0]
 80092cc:	3b04      	subs	r3, #4
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	d1ce      	bne.n	8009270 <quorem+0x9a>
 80092d2:	3c01      	subs	r4, #1
 80092d4:	e7c9      	b.n	800926a <quorem+0x94>
 80092d6:	6812      	ldr	r2, [r2, #0]
 80092d8:	3b04      	subs	r3, #4
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d1f0      	bne.n	80092c0 <quorem+0xea>
 80092de:	3c01      	subs	r4, #1
 80092e0:	e7eb      	b.n	80092ba <quorem+0xe4>
 80092e2:	2000      	movs	r0, #0
 80092e4:	e7ee      	b.n	80092c4 <quorem+0xee>
	...

080092e8 <_dtoa_r>:
 80092e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	ed2d 8b04 	vpush	{d8-d9}
 80092f0:	69c5      	ldr	r5, [r0, #28]
 80092f2:	b093      	sub	sp, #76	; 0x4c
 80092f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80092f8:	ec57 6b10 	vmov	r6, r7, d0
 80092fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009300:	9107      	str	r1, [sp, #28]
 8009302:	4604      	mov	r4, r0
 8009304:	920a      	str	r2, [sp, #40]	; 0x28
 8009306:	930d      	str	r3, [sp, #52]	; 0x34
 8009308:	b975      	cbnz	r5, 8009328 <_dtoa_r+0x40>
 800930a:	2010      	movs	r0, #16
 800930c:	f000 fe2a 	bl	8009f64 <malloc>
 8009310:	4602      	mov	r2, r0
 8009312:	61e0      	str	r0, [r4, #28]
 8009314:	b920      	cbnz	r0, 8009320 <_dtoa_r+0x38>
 8009316:	4bae      	ldr	r3, [pc, #696]	; (80095d0 <_dtoa_r+0x2e8>)
 8009318:	21ef      	movs	r1, #239	; 0xef
 800931a:	48ae      	ldr	r0, [pc, #696]	; (80095d4 <_dtoa_r+0x2ec>)
 800931c:	f001 fdaa 	bl	800ae74 <__assert_func>
 8009320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009324:	6005      	str	r5, [r0, #0]
 8009326:	60c5      	str	r5, [r0, #12]
 8009328:	69e3      	ldr	r3, [r4, #28]
 800932a:	6819      	ldr	r1, [r3, #0]
 800932c:	b151      	cbz	r1, 8009344 <_dtoa_r+0x5c>
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	604a      	str	r2, [r1, #4]
 8009332:	2301      	movs	r3, #1
 8009334:	4093      	lsls	r3, r2
 8009336:	608b      	str	r3, [r1, #8]
 8009338:	4620      	mov	r0, r4
 800933a:	f000 ff07 	bl	800a14c <_Bfree>
 800933e:	69e3      	ldr	r3, [r4, #28]
 8009340:	2200      	movs	r2, #0
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	1e3b      	subs	r3, r7, #0
 8009346:	bfbb      	ittet	lt
 8009348:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800934c:	9303      	strlt	r3, [sp, #12]
 800934e:	2300      	movge	r3, #0
 8009350:	2201      	movlt	r2, #1
 8009352:	bfac      	ite	ge
 8009354:	f8c8 3000 	strge.w	r3, [r8]
 8009358:	f8c8 2000 	strlt.w	r2, [r8]
 800935c:	4b9e      	ldr	r3, [pc, #632]	; (80095d8 <_dtoa_r+0x2f0>)
 800935e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009362:	ea33 0308 	bics.w	r3, r3, r8
 8009366:	d11b      	bne.n	80093a0 <_dtoa_r+0xb8>
 8009368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800936a:	f242 730f 	movw	r3, #9999	; 0x270f
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009374:	4333      	orrs	r3, r6
 8009376:	f000 8593 	beq.w	8009ea0 <_dtoa_r+0xbb8>
 800937a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800937c:	b963      	cbnz	r3, 8009398 <_dtoa_r+0xb0>
 800937e:	4b97      	ldr	r3, [pc, #604]	; (80095dc <_dtoa_r+0x2f4>)
 8009380:	e027      	b.n	80093d2 <_dtoa_r+0xea>
 8009382:	4b97      	ldr	r3, [pc, #604]	; (80095e0 <_dtoa_r+0x2f8>)
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	3308      	adds	r3, #8
 8009388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	9800      	ldr	r0, [sp, #0]
 800938e:	b013      	add	sp, #76	; 0x4c
 8009390:	ecbd 8b04 	vpop	{d8-d9}
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	4b90      	ldr	r3, [pc, #576]	; (80095dc <_dtoa_r+0x2f4>)
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	3303      	adds	r3, #3
 800939e:	e7f3      	b.n	8009388 <_dtoa_r+0xa0>
 80093a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093a4:	2200      	movs	r2, #0
 80093a6:	ec51 0b17 	vmov	r0, r1, d7
 80093aa:	eeb0 8a47 	vmov.f32	s16, s14
 80093ae:	eef0 8a67 	vmov.f32	s17, s15
 80093b2:	2300      	movs	r3, #0
 80093b4:	f7f7 fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 80093b8:	4681      	mov	r9, r0
 80093ba:	b160      	cbz	r0, 80093d6 <_dtoa_r+0xee>
 80093bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093be:	2301      	movs	r3, #1
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8568 	beq.w	8009e9a <_dtoa_r+0xbb2>
 80093ca:	4b86      	ldr	r3, [pc, #536]	; (80095e4 <_dtoa_r+0x2fc>)
 80093cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	e7da      	b.n	800938c <_dtoa_r+0xa4>
 80093d6:	aa10      	add	r2, sp, #64	; 0x40
 80093d8:	a911      	add	r1, sp, #68	; 0x44
 80093da:	4620      	mov	r0, r4
 80093dc:	eeb0 0a48 	vmov.f32	s0, s16
 80093e0:	eef0 0a68 	vmov.f32	s1, s17
 80093e4:	f001 f994 	bl	800a710 <__d2b>
 80093e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80093ec:	4682      	mov	sl, r0
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	d07f      	beq.n	80094f2 <_dtoa_r+0x20a>
 80093f2:	ee18 3a90 	vmov	r3, s17
 80093f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80093fe:	ec51 0b18 	vmov	r0, r1, d8
 8009402:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800940a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800940e:	4619      	mov	r1, r3
 8009410:	2200      	movs	r2, #0
 8009412:	4b75      	ldr	r3, [pc, #468]	; (80095e8 <_dtoa_r+0x300>)
 8009414:	f7f6 ff48 	bl	80002a8 <__aeabi_dsub>
 8009418:	a367      	add	r3, pc, #412	; (adr r3, 80095b8 <_dtoa_r+0x2d0>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f7 f8fb 	bl	8000618 <__aeabi_dmul>
 8009422:	a367      	add	r3, pc, #412	; (adr r3, 80095c0 <_dtoa_r+0x2d8>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f6 ff40 	bl	80002ac <__adddf3>
 800942c:	4606      	mov	r6, r0
 800942e:	4628      	mov	r0, r5
 8009430:	460f      	mov	r7, r1
 8009432:	f7f7 f887 	bl	8000544 <__aeabi_i2d>
 8009436:	a364      	add	r3, pc, #400	; (adr r3, 80095c8 <_dtoa_r+0x2e0>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f7f7 f8ec 	bl	8000618 <__aeabi_dmul>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4630      	mov	r0, r6
 8009446:	4639      	mov	r1, r7
 8009448:	f7f6 ff30 	bl	80002ac <__adddf3>
 800944c:	4606      	mov	r6, r0
 800944e:	460f      	mov	r7, r1
 8009450:	f7f7 fb92 	bl	8000b78 <__aeabi_d2iz>
 8009454:	2200      	movs	r2, #0
 8009456:	4683      	mov	fp, r0
 8009458:	2300      	movs	r3, #0
 800945a:	4630      	mov	r0, r6
 800945c:	4639      	mov	r1, r7
 800945e:	f7f7 fb4d 	bl	8000afc <__aeabi_dcmplt>
 8009462:	b148      	cbz	r0, 8009478 <_dtoa_r+0x190>
 8009464:	4658      	mov	r0, fp
 8009466:	f7f7 f86d 	bl	8000544 <__aeabi_i2d>
 800946a:	4632      	mov	r2, r6
 800946c:	463b      	mov	r3, r7
 800946e:	f7f7 fb3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009472:	b908      	cbnz	r0, 8009478 <_dtoa_r+0x190>
 8009474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009478:	f1bb 0f16 	cmp.w	fp, #22
 800947c:	d857      	bhi.n	800952e <_dtoa_r+0x246>
 800947e:	4b5b      	ldr	r3, [pc, #364]	; (80095ec <_dtoa_r+0x304>)
 8009480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	ec51 0b18 	vmov	r0, r1, d8
 800948c:	f7f7 fb36 	bl	8000afc <__aeabi_dcmplt>
 8009490:	2800      	cmp	r0, #0
 8009492:	d04e      	beq.n	8009532 <_dtoa_r+0x24a>
 8009494:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009498:	2300      	movs	r3, #0
 800949a:	930c      	str	r3, [sp, #48]	; 0x30
 800949c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800949e:	1b5b      	subs	r3, r3, r5
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	bf45      	ittet	mi
 80094a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80094a8:	9305      	strmi	r3, [sp, #20]
 80094aa:	2300      	movpl	r3, #0
 80094ac:	2300      	movmi	r3, #0
 80094ae:	9206      	str	r2, [sp, #24]
 80094b0:	bf54      	ite	pl
 80094b2:	9305      	strpl	r3, [sp, #20]
 80094b4:	9306      	strmi	r3, [sp, #24]
 80094b6:	f1bb 0f00 	cmp.w	fp, #0
 80094ba:	db3c      	blt.n	8009536 <_dtoa_r+0x24e>
 80094bc:	9b06      	ldr	r3, [sp, #24]
 80094be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80094c2:	445b      	add	r3, fp
 80094c4:	9306      	str	r3, [sp, #24]
 80094c6:	2300      	movs	r3, #0
 80094c8:	9308      	str	r3, [sp, #32]
 80094ca:	9b07      	ldr	r3, [sp, #28]
 80094cc:	2b09      	cmp	r3, #9
 80094ce:	d868      	bhi.n	80095a2 <_dtoa_r+0x2ba>
 80094d0:	2b05      	cmp	r3, #5
 80094d2:	bfc4      	itt	gt
 80094d4:	3b04      	subgt	r3, #4
 80094d6:	9307      	strgt	r3, [sp, #28]
 80094d8:	9b07      	ldr	r3, [sp, #28]
 80094da:	f1a3 0302 	sub.w	r3, r3, #2
 80094de:	bfcc      	ite	gt
 80094e0:	2500      	movgt	r5, #0
 80094e2:	2501      	movle	r5, #1
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	f200 8085 	bhi.w	80095f4 <_dtoa_r+0x30c>
 80094ea:	e8df f003 	tbb	[pc, r3]
 80094ee:	3b2e      	.short	0x3b2e
 80094f0:	5839      	.short	0x5839
 80094f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80094f6:	441d      	add	r5, r3
 80094f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80094fc:	2b20      	cmp	r3, #32
 80094fe:	bfc1      	itttt	gt
 8009500:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009504:	fa08 f803 	lslgt.w	r8, r8, r3
 8009508:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800950c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009510:	bfd6      	itet	le
 8009512:	f1c3 0320 	rsble	r3, r3, #32
 8009516:	ea48 0003 	orrgt.w	r0, r8, r3
 800951a:	fa06 f003 	lslle.w	r0, r6, r3
 800951e:	f7f7 f801 	bl	8000524 <__aeabi_ui2d>
 8009522:	2201      	movs	r2, #1
 8009524:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009528:	3d01      	subs	r5, #1
 800952a:	920e      	str	r2, [sp, #56]	; 0x38
 800952c:	e76f      	b.n	800940e <_dtoa_r+0x126>
 800952e:	2301      	movs	r3, #1
 8009530:	e7b3      	b.n	800949a <_dtoa_r+0x1b2>
 8009532:	900c      	str	r0, [sp, #48]	; 0x30
 8009534:	e7b2      	b.n	800949c <_dtoa_r+0x1b4>
 8009536:	9b05      	ldr	r3, [sp, #20]
 8009538:	eba3 030b 	sub.w	r3, r3, fp
 800953c:	9305      	str	r3, [sp, #20]
 800953e:	f1cb 0300 	rsb	r3, fp, #0
 8009542:	9308      	str	r3, [sp, #32]
 8009544:	2300      	movs	r3, #0
 8009546:	930b      	str	r3, [sp, #44]	; 0x2c
 8009548:	e7bf      	b.n	80094ca <_dtoa_r+0x1e2>
 800954a:	2300      	movs	r3, #0
 800954c:	9309      	str	r3, [sp, #36]	; 0x24
 800954e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009550:	2b00      	cmp	r3, #0
 8009552:	dc52      	bgt.n	80095fa <_dtoa_r+0x312>
 8009554:	2301      	movs	r3, #1
 8009556:	9301      	str	r3, [sp, #4]
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	461a      	mov	r2, r3
 800955c:	920a      	str	r2, [sp, #40]	; 0x28
 800955e:	e00b      	b.n	8009578 <_dtoa_r+0x290>
 8009560:	2301      	movs	r3, #1
 8009562:	e7f3      	b.n	800954c <_dtoa_r+0x264>
 8009564:	2300      	movs	r3, #0
 8009566:	9309      	str	r3, [sp, #36]	; 0x24
 8009568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956a:	445b      	add	r3, fp
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	3301      	adds	r3, #1
 8009570:	2b01      	cmp	r3, #1
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	bfb8      	it	lt
 8009576:	2301      	movlt	r3, #1
 8009578:	69e0      	ldr	r0, [r4, #28]
 800957a:	2100      	movs	r1, #0
 800957c:	2204      	movs	r2, #4
 800957e:	f102 0614 	add.w	r6, r2, #20
 8009582:	429e      	cmp	r6, r3
 8009584:	d93d      	bls.n	8009602 <_dtoa_r+0x31a>
 8009586:	6041      	str	r1, [r0, #4]
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fd9f 	bl	800a0cc <_Balloc>
 800958e:	9000      	str	r0, [sp, #0]
 8009590:	2800      	cmp	r0, #0
 8009592:	d139      	bne.n	8009608 <_dtoa_r+0x320>
 8009594:	4b16      	ldr	r3, [pc, #88]	; (80095f0 <_dtoa_r+0x308>)
 8009596:	4602      	mov	r2, r0
 8009598:	f240 11af 	movw	r1, #431	; 0x1af
 800959c:	e6bd      	b.n	800931a <_dtoa_r+0x32>
 800959e:	2301      	movs	r3, #1
 80095a0:	e7e1      	b.n	8009566 <_dtoa_r+0x27e>
 80095a2:	2501      	movs	r5, #1
 80095a4:	2300      	movs	r3, #0
 80095a6:	9307      	str	r3, [sp, #28]
 80095a8:	9509      	str	r5, [sp, #36]	; 0x24
 80095aa:	f04f 33ff 	mov.w	r3, #4294967295
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	2200      	movs	r2, #0
 80095b4:	2312      	movs	r3, #18
 80095b6:	e7d1      	b.n	800955c <_dtoa_r+0x274>
 80095b8:	636f4361 	.word	0x636f4361
 80095bc:	3fd287a7 	.word	0x3fd287a7
 80095c0:	8b60c8b3 	.word	0x8b60c8b3
 80095c4:	3fc68a28 	.word	0x3fc68a28
 80095c8:	509f79fb 	.word	0x509f79fb
 80095cc:	3fd34413 	.word	0x3fd34413
 80095d0:	0800b792 	.word	0x0800b792
 80095d4:	0800b7a9 	.word	0x0800b7a9
 80095d8:	7ff00000 	.word	0x7ff00000
 80095dc:	0800b78e 	.word	0x0800b78e
 80095e0:	0800b785 	.word	0x0800b785
 80095e4:	0800b762 	.word	0x0800b762
 80095e8:	3ff80000 	.word	0x3ff80000
 80095ec:	0800b898 	.word	0x0800b898
 80095f0:	0800b801 	.word	0x0800b801
 80095f4:	2301      	movs	r3, #1
 80095f6:	9309      	str	r3, [sp, #36]	; 0x24
 80095f8:	e7d7      	b.n	80095aa <_dtoa_r+0x2c2>
 80095fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	9304      	str	r3, [sp, #16]
 8009600:	e7ba      	b.n	8009578 <_dtoa_r+0x290>
 8009602:	3101      	adds	r1, #1
 8009604:	0052      	lsls	r2, r2, #1
 8009606:	e7ba      	b.n	800957e <_dtoa_r+0x296>
 8009608:	69e3      	ldr	r3, [r4, #28]
 800960a:	9a00      	ldr	r2, [sp, #0]
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	2b0e      	cmp	r3, #14
 8009612:	f200 80a8 	bhi.w	8009766 <_dtoa_r+0x47e>
 8009616:	2d00      	cmp	r5, #0
 8009618:	f000 80a5 	beq.w	8009766 <_dtoa_r+0x47e>
 800961c:	f1bb 0f00 	cmp.w	fp, #0
 8009620:	dd38      	ble.n	8009694 <_dtoa_r+0x3ac>
 8009622:	4bc0      	ldr	r3, [pc, #768]	; (8009924 <_dtoa_r+0x63c>)
 8009624:	f00b 020f 	and.w	r2, fp, #15
 8009628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800962c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009630:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009634:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009638:	d019      	beq.n	800966e <_dtoa_r+0x386>
 800963a:	4bbb      	ldr	r3, [pc, #748]	; (8009928 <_dtoa_r+0x640>)
 800963c:	ec51 0b18 	vmov	r0, r1, d8
 8009640:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009644:	f7f7 f912 	bl	800086c <__aeabi_ddiv>
 8009648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800964c:	f008 080f 	and.w	r8, r8, #15
 8009650:	2503      	movs	r5, #3
 8009652:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009928 <_dtoa_r+0x640>
 8009656:	f1b8 0f00 	cmp.w	r8, #0
 800965a:	d10a      	bne.n	8009672 <_dtoa_r+0x38a>
 800965c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009660:	4632      	mov	r2, r6
 8009662:	463b      	mov	r3, r7
 8009664:	f7f7 f902 	bl	800086c <__aeabi_ddiv>
 8009668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800966c:	e02b      	b.n	80096c6 <_dtoa_r+0x3de>
 800966e:	2502      	movs	r5, #2
 8009670:	e7ef      	b.n	8009652 <_dtoa_r+0x36a>
 8009672:	f018 0f01 	tst.w	r8, #1
 8009676:	d008      	beq.n	800968a <_dtoa_r+0x3a2>
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009680:	f7f6 ffca 	bl	8000618 <__aeabi_dmul>
 8009684:	3501      	adds	r5, #1
 8009686:	4606      	mov	r6, r0
 8009688:	460f      	mov	r7, r1
 800968a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800968e:	f109 0908 	add.w	r9, r9, #8
 8009692:	e7e0      	b.n	8009656 <_dtoa_r+0x36e>
 8009694:	f000 809f 	beq.w	80097d6 <_dtoa_r+0x4ee>
 8009698:	f1cb 0600 	rsb	r6, fp, #0
 800969c:	4ba1      	ldr	r3, [pc, #644]	; (8009924 <_dtoa_r+0x63c>)
 800969e:	4fa2      	ldr	r7, [pc, #648]	; (8009928 <_dtoa_r+0x640>)
 80096a0:	f006 020f 	and.w	r2, r6, #15
 80096a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	ec51 0b18 	vmov	r0, r1, d8
 80096b0:	f7f6 ffb2 	bl	8000618 <__aeabi_dmul>
 80096b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096b8:	1136      	asrs	r6, r6, #4
 80096ba:	2300      	movs	r3, #0
 80096bc:	2502      	movs	r5, #2
 80096be:	2e00      	cmp	r6, #0
 80096c0:	d17e      	bne.n	80097c0 <_dtoa_r+0x4d8>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1d0      	bne.n	8009668 <_dtoa_r+0x380>
 80096c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 8084 	beq.w	80097da <_dtoa_r+0x4f2>
 80096d2:	4b96      	ldr	r3, [pc, #600]	; (800992c <_dtoa_r+0x644>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f7 fa0f 	bl	8000afc <__aeabi_dcmplt>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d07b      	beq.n	80097da <_dtoa_r+0x4f2>
 80096e2:	9b04      	ldr	r3, [sp, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d078      	beq.n	80097da <_dtoa_r+0x4f2>
 80096e8:	9b01      	ldr	r3, [sp, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dd39      	ble.n	8009762 <_dtoa_r+0x47a>
 80096ee:	4b90      	ldr	r3, [pc, #576]	; (8009930 <_dtoa_r+0x648>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	f7f6 ff8f 	bl	8000618 <__aeabi_dmul>
 80096fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096fe:	9e01      	ldr	r6, [sp, #4]
 8009700:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009704:	3501      	adds	r5, #1
 8009706:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800970a:	4628      	mov	r0, r5
 800970c:	f7f6 ff1a 	bl	8000544 <__aeabi_i2d>
 8009710:	4642      	mov	r2, r8
 8009712:	464b      	mov	r3, r9
 8009714:	f7f6 ff80 	bl	8000618 <__aeabi_dmul>
 8009718:	4b86      	ldr	r3, [pc, #536]	; (8009934 <_dtoa_r+0x64c>)
 800971a:	2200      	movs	r2, #0
 800971c:	f7f6 fdc6 	bl	80002ac <__adddf3>
 8009720:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	2e00      	cmp	r6, #0
 800972c:	d158      	bne.n	80097e0 <_dtoa_r+0x4f8>
 800972e:	4b82      	ldr	r3, [pc, #520]	; (8009938 <_dtoa_r+0x650>)
 8009730:	2200      	movs	r2, #0
 8009732:	4640      	mov	r0, r8
 8009734:	4649      	mov	r1, r9
 8009736:	f7f6 fdb7 	bl	80002a8 <__aeabi_dsub>
 800973a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800973e:	4680      	mov	r8, r0
 8009740:	4689      	mov	r9, r1
 8009742:	f7f7 f9f9 	bl	8000b38 <__aeabi_dcmpgt>
 8009746:	2800      	cmp	r0, #0
 8009748:	f040 8296 	bne.w	8009c78 <_dtoa_r+0x990>
 800974c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009750:	4640      	mov	r0, r8
 8009752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009756:	4649      	mov	r1, r9
 8009758:	f7f7 f9d0 	bl	8000afc <__aeabi_dcmplt>
 800975c:	2800      	cmp	r0, #0
 800975e:	f040 8289 	bne.w	8009c74 <_dtoa_r+0x98c>
 8009762:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009768:	2b00      	cmp	r3, #0
 800976a:	f2c0 814e 	blt.w	8009a0a <_dtoa_r+0x722>
 800976e:	f1bb 0f0e 	cmp.w	fp, #14
 8009772:	f300 814a 	bgt.w	8009a0a <_dtoa_r+0x722>
 8009776:	4b6b      	ldr	r3, [pc, #428]	; (8009924 <_dtoa_r+0x63c>)
 8009778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800977c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009782:	2b00      	cmp	r3, #0
 8009784:	f280 80dc 	bge.w	8009940 <_dtoa_r+0x658>
 8009788:	9b04      	ldr	r3, [sp, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	f300 80d8 	bgt.w	8009940 <_dtoa_r+0x658>
 8009790:	f040 826f 	bne.w	8009c72 <_dtoa_r+0x98a>
 8009794:	4b68      	ldr	r3, [pc, #416]	; (8009938 <_dtoa_r+0x650>)
 8009796:	2200      	movs	r2, #0
 8009798:	4640      	mov	r0, r8
 800979a:	4649      	mov	r1, r9
 800979c:	f7f6 ff3c 	bl	8000618 <__aeabi_dmul>
 80097a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097a4:	f7f7 f9be 	bl	8000b24 <__aeabi_dcmpge>
 80097a8:	9e04      	ldr	r6, [sp, #16]
 80097aa:	4637      	mov	r7, r6
 80097ac:	2800      	cmp	r0, #0
 80097ae:	f040 8245 	bne.w	8009c3c <_dtoa_r+0x954>
 80097b2:	9d00      	ldr	r5, [sp, #0]
 80097b4:	2331      	movs	r3, #49	; 0x31
 80097b6:	f805 3b01 	strb.w	r3, [r5], #1
 80097ba:	f10b 0b01 	add.w	fp, fp, #1
 80097be:	e241      	b.n	8009c44 <_dtoa_r+0x95c>
 80097c0:	07f2      	lsls	r2, r6, #31
 80097c2:	d505      	bpl.n	80097d0 <_dtoa_r+0x4e8>
 80097c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c8:	f7f6 ff26 	bl	8000618 <__aeabi_dmul>
 80097cc:	3501      	adds	r5, #1
 80097ce:	2301      	movs	r3, #1
 80097d0:	1076      	asrs	r6, r6, #1
 80097d2:	3708      	adds	r7, #8
 80097d4:	e773      	b.n	80096be <_dtoa_r+0x3d6>
 80097d6:	2502      	movs	r5, #2
 80097d8:	e775      	b.n	80096c6 <_dtoa_r+0x3de>
 80097da:	9e04      	ldr	r6, [sp, #16]
 80097dc:	465f      	mov	r7, fp
 80097de:	e792      	b.n	8009706 <_dtoa_r+0x41e>
 80097e0:	9900      	ldr	r1, [sp, #0]
 80097e2:	4b50      	ldr	r3, [pc, #320]	; (8009924 <_dtoa_r+0x63c>)
 80097e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097e8:	4431      	add	r1, r6
 80097ea:	9102      	str	r1, [sp, #8]
 80097ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097ee:	eeb0 9a47 	vmov.f32	s18, s14
 80097f2:	eef0 9a67 	vmov.f32	s19, s15
 80097f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097fe:	2900      	cmp	r1, #0
 8009800:	d044      	beq.n	800988c <_dtoa_r+0x5a4>
 8009802:	494e      	ldr	r1, [pc, #312]	; (800993c <_dtoa_r+0x654>)
 8009804:	2000      	movs	r0, #0
 8009806:	f7f7 f831 	bl	800086c <__aeabi_ddiv>
 800980a:	ec53 2b19 	vmov	r2, r3, d9
 800980e:	f7f6 fd4b 	bl	80002a8 <__aeabi_dsub>
 8009812:	9d00      	ldr	r5, [sp, #0]
 8009814:	ec41 0b19 	vmov	d9, r0, r1
 8009818:	4649      	mov	r1, r9
 800981a:	4640      	mov	r0, r8
 800981c:	f7f7 f9ac 	bl	8000b78 <__aeabi_d2iz>
 8009820:	4606      	mov	r6, r0
 8009822:	f7f6 fe8f 	bl	8000544 <__aeabi_i2d>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f6 fd3b 	bl	80002a8 <__aeabi_dsub>
 8009832:	3630      	adds	r6, #48	; 0x30
 8009834:	f805 6b01 	strb.w	r6, [r5], #1
 8009838:	ec53 2b19 	vmov	r2, r3, d9
 800983c:	4680      	mov	r8, r0
 800983e:	4689      	mov	r9, r1
 8009840:	f7f7 f95c 	bl	8000afc <__aeabi_dcmplt>
 8009844:	2800      	cmp	r0, #0
 8009846:	d164      	bne.n	8009912 <_dtoa_r+0x62a>
 8009848:	4642      	mov	r2, r8
 800984a:	464b      	mov	r3, r9
 800984c:	4937      	ldr	r1, [pc, #220]	; (800992c <_dtoa_r+0x644>)
 800984e:	2000      	movs	r0, #0
 8009850:	f7f6 fd2a 	bl	80002a8 <__aeabi_dsub>
 8009854:	ec53 2b19 	vmov	r2, r3, d9
 8009858:	f7f7 f950 	bl	8000afc <__aeabi_dcmplt>
 800985c:	2800      	cmp	r0, #0
 800985e:	f040 80b6 	bne.w	80099ce <_dtoa_r+0x6e6>
 8009862:	9b02      	ldr	r3, [sp, #8]
 8009864:	429d      	cmp	r5, r3
 8009866:	f43f af7c 	beq.w	8009762 <_dtoa_r+0x47a>
 800986a:	4b31      	ldr	r3, [pc, #196]	; (8009930 <_dtoa_r+0x648>)
 800986c:	ec51 0b19 	vmov	r0, r1, d9
 8009870:	2200      	movs	r2, #0
 8009872:	f7f6 fed1 	bl	8000618 <__aeabi_dmul>
 8009876:	4b2e      	ldr	r3, [pc, #184]	; (8009930 <_dtoa_r+0x648>)
 8009878:	ec41 0b19 	vmov	d9, r0, r1
 800987c:	2200      	movs	r2, #0
 800987e:	4640      	mov	r0, r8
 8009880:	4649      	mov	r1, r9
 8009882:	f7f6 fec9 	bl	8000618 <__aeabi_dmul>
 8009886:	4680      	mov	r8, r0
 8009888:	4689      	mov	r9, r1
 800988a:	e7c5      	b.n	8009818 <_dtoa_r+0x530>
 800988c:	ec51 0b17 	vmov	r0, r1, d7
 8009890:	f7f6 fec2 	bl	8000618 <__aeabi_dmul>
 8009894:	9b02      	ldr	r3, [sp, #8]
 8009896:	9d00      	ldr	r5, [sp, #0]
 8009898:	930f      	str	r3, [sp, #60]	; 0x3c
 800989a:	ec41 0b19 	vmov	d9, r0, r1
 800989e:	4649      	mov	r1, r9
 80098a0:	4640      	mov	r0, r8
 80098a2:	f7f7 f969 	bl	8000b78 <__aeabi_d2iz>
 80098a6:	4606      	mov	r6, r0
 80098a8:	f7f6 fe4c 	bl	8000544 <__aeabi_i2d>
 80098ac:	3630      	adds	r6, #48	; 0x30
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f7f6 fcf7 	bl	80002a8 <__aeabi_dsub>
 80098ba:	f805 6b01 	strb.w	r6, [r5], #1
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	429d      	cmp	r5, r3
 80098c2:	4680      	mov	r8, r0
 80098c4:	4689      	mov	r9, r1
 80098c6:	f04f 0200 	mov.w	r2, #0
 80098ca:	d124      	bne.n	8009916 <_dtoa_r+0x62e>
 80098cc:	4b1b      	ldr	r3, [pc, #108]	; (800993c <_dtoa_r+0x654>)
 80098ce:	ec51 0b19 	vmov	r0, r1, d9
 80098d2:	f7f6 fceb 	bl	80002ac <__adddf3>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	4640      	mov	r0, r8
 80098dc:	4649      	mov	r1, r9
 80098de:	f7f7 f92b 	bl	8000b38 <__aeabi_dcmpgt>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d173      	bne.n	80099ce <_dtoa_r+0x6e6>
 80098e6:	ec53 2b19 	vmov	r2, r3, d9
 80098ea:	4914      	ldr	r1, [pc, #80]	; (800993c <_dtoa_r+0x654>)
 80098ec:	2000      	movs	r0, #0
 80098ee:	f7f6 fcdb 	bl	80002a8 <__aeabi_dsub>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4640      	mov	r0, r8
 80098f8:	4649      	mov	r1, r9
 80098fa:	f7f7 f8ff 	bl	8000afc <__aeabi_dcmplt>
 80098fe:	2800      	cmp	r0, #0
 8009900:	f43f af2f 	beq.w	8009762 <_dtoa_r+0x47a>
 8009904:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009906:	1e6b      	subs	r3, r5, #1
 8009908:	930f      	str	r3, [sp, #60]	; 0x3c
 800990a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800990e:	2b30      	cmp	r3, #48	; 0x30
 8009910:	d0f8      	beq.n	8009904 <_dtoa_r+0x61c>
 8009912:	46bb      	mov	fp, r7
 8009914:	e04a      	b.n	80099ac <_dtoa_r+0x6c4>
 8009916:	4b06      	ldr	r3, [pc, #24]	; (8009930 <_dtoa_r+0x648>)
 8009918:	f7f6 fe7e 	bl	8000618 <__aeabi_dmul>
 800991c:	4680      	mov	r8, r0
 800991e:	4689      	mov	r9, r1
 8009920:	e7bd      	b.n	800989e <_dtoa_r+0x5b6>
 8009922:	bf00      	nop
 8009924:	0800b898 	.word	0x0800b898
 8009928:	0800b870 	.word	0x0800b870
 800992c:	3ff00000 	.word	0x3ff00000
 8009930:	40240000 	.word	0x40240000
 8009934:	401c0000 	.word	0x401c0000
 8009938:	40140000 	.word	0x40140000
 800993c:	3fe00000 	.word	0x3fe00000
 8009940:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009944:	9d00      	ldr	r5, [sp, #0]
 8009946:	4642      	mov	r2, r8
 8009948:	464b      	mov	r3, r9
 800994a:	4630      	mov	r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	f7f6 ff8d 	bl	800086c <__aeabi_ddiv>
 8009952:	f7f7 f911 	bl	8000b78 <__aeabi_d2iz>
 8009956:	9001      	str	r0, [sp, #4]
 8009958:	f7f6 fdf4 	bl	8000544 <__aeabi_i2d>
 800995c:	4642      	mov	r2, r8
 800995e:	464b      	mov	r3, r9
 8009960:	f7f6 fe5a 	bl	8000618 <__aeabi_dmul>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f6 fc9c 	bl	80002a8 <__aeabi_dsub>
 8009970:	9e01      	ldr	r6, [sp, #4]
 8009972:	9f04      	ldr	r7, [sp, #16]
 8009974:	3630      	adds	r6, #48	; 0x30
 8009976:	f805 6b01 	strb.w	r6, [r5], #1
 800997a:	9e00      	ldr	r6, [sp, #0]
 800997c:	1bae      	subs	r6, r5, r6
 800997e:	42b7      	cmp	r7, r6
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	d134      	bne.n	80099f0 <_dtoa_r+0x708>
 8009986:	f7f6 fc91 	bl	80002ac <__adddf3>
 800998a:	4642      	mov	r2, r8
 800998c:	464b      	mov	r3, r9
 800998e:	4606      	mov	r6, r0
 8009990:	460f      	mov	r7, r1
 8009992:	f7f7 f8d1 	bl	8000b38 <__aeabi_dcmpgt>
 8009996:	b9c8      	cbnz	r0, 80099cc <_dtoa_r+0x6e4>
 8009998:	4642      	mov	r2, r8
 800999a:	464b      	mov	r3, r9
 800999c:	4630      	mov	r0, r6
 800999e:	4639      	mov	r1, r7
 80099a0:	f7f7 f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80099a4:	b110      	cbz	r0, 80099ac <_dtoa_r+0x6c4>
 80099a6:	9b01      	ldr	r3, [sp, #4]
 80099a8:	07db      	lsls	r3, r3, #31
 80099aa:	d40f      	bmi.n	80099cc <_dtoa_r+0x6e4>
 80099ac:	4651      	mov	r1, sl
 80099ae:	4620      	mov	r0, r4
 80099b0:	f000 fbcc 	bl	800a14c <_Bfree>
 80099b4:	2300      	movs	r3, #0
 80099b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099b8:	702b      	strb	r3, [r5, #0]
 80099ba:	f10b 0301 	add.w	r3, fp, #1
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f43f ace2 	beq.w	800938c <_dtoa_r+0xa4>
 80099c8:	601d      	str	r5, [r3, #0]
 80099ca:	e4df      	b.n	800938c <_dtoa_r+0xa4>
 80099cc:	465f      	mov	r7, fp
 80099ce:	462b      	mov	r3, r5
 80099d0:	461d      	mov	r5, r3
 80099d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099d6:	2a39      	cmp	r2, #57	; 0x39
 80099d8:	d106      	bne.n	80099e8 <_dtoa_r+0x700>
 80099da:	9a00      	ldr	r2, [sp, #0]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d1f7      	bne.n	80099d0 <_dtoa_r+0x6e8>
 80099e0:	9900      	ldr	r1, [sp, #0]
 80099e2:	2230      	movs	r2, #48	; 0x30
 80099e4:	3701      	adds	r7, #1
 80099e6:	700a      	strb	r2, [r1, #0]
 80099e8:	781a      	ldrb	r2, [r3, #0]
 80099ea:	3201      	adds	r2, #1
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	e790      	b.n	8009912 <_dtoa_r+0x62a>
 80099f0:	4ba3      	ldr	r3, [pc, #652]	; (8009c80 <_dtoa_r+0x998>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	f7f6 fe10 	bl	8000618 <__aeabi_dmul>
 80099f8:	2200      	movs	r2, #0
 80099fa:	2300      	movs	r3, #0
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	f7f7 f872 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d09e      	beq.n	8009946 <_dtoa_r+0x65e>
 8009a08:	e7d0      	b.n	80099ac <_dtoa_r+0x6c4>
 8009a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a0c:	2a00      	cmp	r2, #0
 8009a0e:	f000 80ca 	beq.w	8009ba6 <_dtoa_r+0x8be>
 8009a12:	9a07      	ldr	r2, [sp, #28]
 8009a14:	2a01      	cmp	r2, #1
 8009a16:	f300 80ad 	bgt.w	8009b74 <_dtoa_r+0x88c>
 8009a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a1c:	2a00      	cmp	r2, #0
 8009a1e:	f000 80a5 	beq.w	8009b6c <_dtoa_r+0x884>
 8009a22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a26:	9e08      	ldr	r6, [sp, #32]
 8009a28:	9d05      	ldr	r5, [sp, #20]
 8009a2a:	9a05      	ldr	r2, [sp, #20]
 8009a2c:	441a      	add	r2, r3
 8009a2e:	9205      	str	r2, [sp, #20]
 8009a30:	9a06      	ldr	r2, [sp, #24]
 8009a32:	2101      	movs	r1, #1
 8009a34:	441a      	add	r2, r3
 8009a36:	4620      	mov	r0, r4
 8009a38:	9206      	str	r2, [sp, #24]
 8009a3a:	f000 fc3d 	bl	800a2b8 <__i2b>
 8009a3e:	4607      	mov	r7, r0
 8009a40:	b165      	cbz	r5, 8009a5c <_dtoa_r+0x774>
 8009a42:	9b06      	ldr	r3, [sp, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	dd09      	ble.n	8009a5c <_dtoa_r+0x774>
 8009a48:	42ab      	cmp	r3, r5
 8009a4a:	9a05      	ldr	r2, [sp, #20]
 8009a4c:	bfa8      	it	ge
 8009a4e:	462b      	movge	r3, r5
 8009a50:	1ad2      	subs	r2, r2, r3
 8009a52:	9205      	str	r2, [sp, #20]
 8009a54:	9a06      	ldr	r2, [sp, #24]
 8009a56:	1aed      	subs	r5, r5, r3
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	9306      	str	r3, [sp, #24]
 8009a5c:	9b08      	ldr	r3, [sp, #32]
 8009a5e:	b1f3      	cbz	r3, 8009a9e <_dtoa_r+0x7b6>
 8009a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 80a3 	beq.w	8009bae <_dtoa_r+0x8c6>
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	dd10      	ble.n	8009a8e <_dtoa_r+0x7a6>
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	4632      	mov	r2, r6
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fce1 	bl	800a438 <__pow5mult>
 8009a76:	4652      	mov	r2, sl
 8009a78:	4601      	mov	r1, r0
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 fc31 	bl	800a2e4 <__multiply>
 8009a82:	4651      	mov	r1, sl
 8009a84:	4680      	mov	r8, r0
 8009a86:	4620      	mov	r0, r4
 8009a88:	f000 fb60 	bl	800a14c <_Bfree>
 8009a8c:	46c2      	mov	sl, r8
 8009a8e:	9b08      	ldr	r3, [sp, #32]
 8009a90:	1b9a      	subs	r2, r3, r6
 8009a92:	d004      	beq.n	8009a9e <_dtoa_r+0x7b6>
 8009a94:	4651      	mov	r1, sl
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 fcce 	bl	800a438 <__pow5mult>
 8009a9c:	4682      	mov	sl, r0
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 fc09 	bl	800a2b8 <__i2b>
 8009aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	4606      	mov	r6, r0
 8009aac:	f340 8081 	ble.w	8009bb2 <_dtoa_r+0x8ca>
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 fcbf 	bl	800a438 <__pow5mult>
 8009aba:	9b07      	ldr	r3, [sp, #28]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	4606      	mov	r6, r0
 8009ac0:	dd7a      	ble.n	8009bb8 <_dtoa_r+0x8d0>
 8009ac2:	f04f 0800 	mov.w	r8, #0
 8009ac6:	6933      	ldr	r3, [r6, #16]
 8009ac8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009acc:	6918      	ldr	r0, [r3, #16]
 8009ace:	f000 fba5 	bl	800a21c <__hi0bits>
 8009ad2:	f1c0 0020 	rsb	r0, r0, #32
 8009ad6:	9b06      	ldr	r3, [sp, #24]
 8009ad8:	4418      	add	r0, r3
 8009ada:	f010 001f 	ands.w	r0, r0, #31
 8009ade:	f000 8094 	beq.w	8009c0a <_dtoa_r+0x922>
 8009ae2:	f1c0 0320 	rsb	r3, r0, #32
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	f340 8085 	ble.w	8009bf6 <_dtoa_r+0x90e>
 8009aec:	9b05      	ldr	r3, [sp, #20]
 8009aee:	f1c0 001c 	rsb	r0, r0, #28
 8009af2:	4403      	add	r3, r0
 8009af4:	9305      	str	r3, [sp, #20]
 8009af6:	9b06      	ldr	r3, [sp, #24]
 8009af8:	4403      	add	r3, r0
 8009afa:	4405      	add	r5, r0
 8009afc:	9306      	str	r3, [sp, #24]
 8009afe:	9b05      	ldr	r3, [sp, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dd05      	ble.n	8009b10 <_dtoa_r+0x828>
 8009b04:	4651      	mov	r1, sl
 8009b06:	461a      	mov	r2, r3
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fcef 	bl	800a4ec <__lshift>
 8009b0e:	4682      	mov	sl, r0
 8009b10:	9b06      	ldr	r3, [sp, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dd05      	ble.n	8009b22 <_dtoa_r+0x83a>
 8009b16:	4631      	mov	r1, r6
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 fce6 	bl	800a4ec <__lshift>
 8009b20:	4606      	mov	r6, r0
 8009b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d072      	beq.n	8009c0e <_dtoa_r+0x926>
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	f000 fd4a 	bl	800a5c4 <__mcmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	da6c      	bge.n	8009c0e <_dtoa_r+0x926>
 8009b34:	2300      	movs	r3, #0
 8009b36:	4651      	mov	r1, sl
 8009b38:	220a      	movs	r2, #10
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 fb28 	bl	800a190 <__multadd>
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b46:	4682      	mov	sl, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 81b0 	beq.w	8009eae <_dtoa_r+0xbc6>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	4639      	mov	r1, r7
 8009b52:	220a      	movs	r2, #10
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 fb1b 	bl	800a190 <__multadd>
 8009b5a:	9b01      	ldr	r3, [sp, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	4607      	mov	r7, r0
 8009b60:	f300 8096 	bgt.w	8009c90 <_dtoa_r+0x9a8>
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	dc59      	bgt.n	8009c1e <_dtoa_r+0x936>
 8009b6a:	e091      	b.n	8009c90 <_dtoa_r+0x9a8>
 8009b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b72:	e758      	b.n	8009a26 <_dtoa_r+0x73e>
 8009b74:	9b04      	ldr	r3, [sp, #16]
 8009b76:	1e5e      	subs	r6, r3, #1
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	42b3      	cmp	r3, r6
 8009b7c:	bfbf      	itttt	lt
 8009b7e:	9b08      	ldrlt	r3, [sp, #32]
 8009b80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009b82:	9608      	strlt	r6, [sp, #32]
 8009b84:	1af3      	sublt	r3, r6, r3
 8009b86:	bfb4      	ite	lt
 8009b88:	18d2      	addlt	r2, r2, r3
 8009b8a:	1b9e      	subge	r6, r3, r6
 8009b8c:	9b04      	ldr	r3, [sp, #16]
 8009b8e:	bfbc      	itt	lt
 8009b90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009b92:	2600      	movlt	r6, #0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bfb7      	itett	lt
 8009b98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009b9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009ba0:	1a9d      	sublt	r5, r3, r2
 8009ba2:	2300      	movlt	r3, #0
 8009ba4:	e741      	b.n	8009a2a <_dtoa_r+0x742>
 8009ba6:	9e08      	ldr	r6, [sp, #32]
 8009ba8:	9d05      	ldr	r5, [sp, #20]
 8009baa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009bac:	e748      	b.n	8009a40 <_dtoa_r+0x758>
 8009bae:	9a08      	ldr	r2, [sp, #32]
 8009bb0:	e770      	b.n	8009a94 <_dtoa_r+0x7ac>
 8009bb2:	9b07      	ldr	r3, [sp, #28]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	dc19      	bgt.n	8009bec <_dtoa_r+0x904>
 8009bb8:	9b02      	ldr	r3, [sp, #8]
 8009bba:	b9bb      	cbnz	r3, 8009bec <_dtoa_r+0x904>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bc2:	b99b      	cbnz	r3, 8009bec <_dtoa_r+0x904>
 8009bc4:	9b03      	ldr	r3, [sp, #12]
 8009bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bca:	0d1b      	lsrs	r3, r3, #20
 8009bcc:	051b      	lsls	r3, r3, #20
 8009bce:	b183      	cbz	r3, 8009bf2 <_dtoa_r+0x90a>
 8009bd0:	9b05      	ldr	r3, [sp, #20]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	9306      	str	r3, [sp, #24]
 8009bdc:	f04f 0801 	mov.w	r8, #1
 8009be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f47f af6f 	bne.w	8009ac6 <_dtoa_r+0x7de>
 8009be8:	2001      	movs	r0, #1
 8009bea:	e774      	b.n	8009ad6 <_dtoa_r+0x7ee>
 8009bec:	f04f 0800 	mov.w	r8, #0
 8009bf0:	e7f6      	b.n	8009be0 <_dtoa_r+0x8f8>
 8009bf2:	4698      	mov	r8, r3
 8009bf4:	e7f4      	b.n	8009be0 <_dtoa_r+0x8f8>
 8009bf6:	d082      	beq.n	8009afe <_dtoa_r+0x816>
 8009bf8:	9a05      	ldr	r2, [sp, #20]
 8009bfa:	331c      	adds	r3, #28
 8009bfc:	441a      	add	r2, r3
 8009bfe:	9205      	str	r2, [sp, #20]
 8009c00:	9a06      	ldr	r2, [sp, #24]
 8009c02:	441a      	add	r2, r3
 8009c04:	441d      	add	r5, r3
 8009c06:	9206      	str	r2, [sp, #24]
 8009c08:	e779      	b.n	8009afe <_dtoa_r+0x816>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	e7f4      	b.n	8009bf8 <_dtoa_r+0x910>
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	dc37      	bgt.n	8009c84 <_dtoa_r+0x99c>
 8009c14:	9b07      	ldr	r3, [sp, #28]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	dd34      	ble.n	8009c84 <_dtoa_r+0x99c>
 8009c1a:	9b04      	ldr	r3, [sp, #16]
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	b963      	cbnz	r3, 8009c3c <_dtoa_r+0x954>
 8009c22:	4631      	mov	r1, r6
 8009c24:	2205      	movs	r2, #5
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fab2 	bl	800a190 <__multadd>
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	4606      	mov	r6, r0
 8009c30:	4650      	mov	r0, sl
 8009c32:	f000 fcc7 	bl	800a5c4 <__mcmp>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f73f adbb 	bgt.w	80097b2 <_dtoa_r+0x4ca>
 8009c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c3e:	9d00      	ldr	r5, [sp, #0]
 8009c40:	ea6f 0b03 	mvn.w	fp, r3
 8009c44:	f04f 0800 	mov.w	r8, #0
 8009c48:	4631      	mov	r1, r6
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 fa7e 	bl	800a14c <_Bfree>
 8009c50:	2f00      	cmp	r7, #0
 8009c52:	f43f aeab 	beq.w	80099ac <_dtoa_r+0x6c4>
 8009c56:	f1b8 0f00 	cmp.w	r8, #0
 8009c5a:	d005      	beq.n	8009c68 <_dtoa_r+0x980>
 8009c5c:	45b8      	cmp	r8, r7
 8009c5e:	d003      	beq.n	8009c68 <_dtoa_r+0x980>
 8009c60:	4641      	mov	r1, r8
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fa72 	bl	800a14c <_Bfree>
 8009c68:	4639      	mov	r1, r7
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 fa6e 	bl	800a14c <_Bfree>
 8009c70:	e69c      	b.n	80099ac <_dtoa_r+0x6c4>
 8009c72:	2600      	movs	r6, #0
 8009c74:	4637      	mov	r7, r6
 8009c76:	e7e1      	b.n	8009c3c <_dtoa_r+0x954>
 8009c78:	46bb      	mov	fp, r7
 8009c7a:	4637      	mov	r7, r6
 8009c7c:	e599      	b.n	80097b2 <_dtoa_r+0x4ca>
 8009c7e:	bf00      	nop
 8009c80:	40240000 	.word	0x40240000
 8009c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 80c8 	beq.w	8009e1c <_dtoa_r+0xb34>
 8009c8c:	9b04      	ldr	r3, [sp, #16]
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	dd05      	ble.n	8009ca0 <_dtoa_r+0x9b8>
 8009c94:	4639      	mov	r1, r7
 8009c96:	462a      	mov	r2, r5
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fc27 	bl	800a4ec <__lshift>
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	f1b8 0f00 	cmp.w	r8, #0
 8009ca4:	d05b      	beq.n	8009d5e <_dtoa_r+0xa76>
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fa0f 	bl	800a0cc <_Balloc>
 8009cae:	4605      	mov	r5, r0
 8009cb0:	b928      	cbnz	r0, 8009cbe <_dtoa_r+0x9d6>
 8009cb2:	4b83      	ldr	r3, [pc, #524]	; (8009ec0 <_dtoa_r+0xbd8>)
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009cba:	f7ff bb2e 	b.w	800931a <_dtoa_r+0x32>
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	3202      	adds	r2, #2
 8009cc2:	0092      	lsls	r2, r2, #2
 8009cc4:	f107 010c 	add.w	r1, r7, #12
 8009cc8:	300c      	adds	r0, #12
 8009cca:	f001 f8c5 	bl	800ae58 <memcpy>
 8009cce:	2201      	movs	r2, #1
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 fc0a 	bl	800a4ec <__lshift>
 8009cd8:	9b00      	ldr	r3, [sp, #0]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	9308      	str	r3, [sp, #32]
 8009ce6:	9b02      	ldr	r3, [sp, #8]
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	46b8      	mov	r8, r7
 8009cee:	9306      	str	r3, [sp, #24]
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	9b04      	ldr	r3, [sp, #16]
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	4650      	mov	r0, sl
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	f7ff fa6b 	bl	80091d6 <quorem>
 8009d00:	4641      	mov	r1, r8
 8009d02:	9002      	str	r0, [sp, #8]
 8009d04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009d08:	4650      	mov	r0, sl
 8009d0a:	f000 fc5b 	bl	800a5c4 <__mcmp>
 8009d0e:	463a      	mov	r2, r7
 8009d10:	9005      	str	r0, [sp, #20]
 8009d12:	4631      	mov	r1, r6
 8009d14:	4620      	mov	r0, r4
 8009d16:	f000 fc71 	bl	800a5fc <__mdiff>
 8009d1a:	68c2      	ldr	r2, [r0, #12]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	bb02      	cbnz	r2, 8009d62 <_dtoa_r+0xa7a>
 8009d20:	4601      	mov	r1, r0
 8009d22:	4650      	mov	r0, sl
 8009d24:	f000 fc4e 	bl	800a5c4 <__mcmp>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d30:	f000 fa0c 	bl	800a14c <_Bfree>
 8009d34:	9b07      	ldr	r3, [sp, #28]
 8009d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d38:	9d04      	ldr	r5, [sp, #16]
 8009d3a:	ea43 0102 	orr.w	r1, r3, r2
 8009d3e:	9b06      	ldr	r3, [sp, #24]
 8009d40:	4319      	orrs	r1, r3
 8009d42:	d110      	bne.n	8009d66 <_dtoa_r+0xa7e>
 8009d44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d48:	d029      	beq.n	8009d9e <_dtoa_r+0xab6>
 8009d4a:	9b05      	ldr	r3, [sp, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dd02      	ble.n	8009d56 <_dtoa_r+0xa6e>
 8009d50:	9b02      	ldr	r3, [sp, #8]
 8009d52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	f883 9000 	strb.w	r9, [r3]
 8009d5c:	e774      	b.n	8009c48 <_dtoa_r+0x960>
 8009d5e:	4638      	mov	r0, r7
 8009d60:	e7ba      	b.n	8009cd8 <_dtoa_r+0x9f0>
 8009d62:	2201      	movs	r2, #1
 8009d64:	e7e1      	b.n	8009d2a <_dtoa_r+0xa42>
 8009d66:	9b05      	ldr	r3, [sp, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	db04      	blt.n	8009d76 <_dtoa_r+0xa8e>
 8009d6c:	9907      	ldr	r1, [sp, #28]
 8009d6e:	430b      	orrs	r3, r1
 8009d70:	9906      	ldr	r1, [sp, #24]
 8009d72:	430b      	orrs	r3, r1
 8009d74:	d120      	bne.n	8009db8 <_dtoa_r+0xad0>
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	dded      	ble.n	8009d56 <_dtoa_r+0xa6e>
 8009d7a:	4651      	mov	r1, sl
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 fbb4 	bl	800a4ec <__lshift>
 8009d84:	4631      	mov	r1, r6
 8009d86:	4682      	mov	sl, r0
 8009d88:	f000 fc1c 	bl	800a5c4 <__mcmp>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	dc03      	bgt.n	8009d98 <_dtoa_r+0xab0>
 8009d90:	d1e1      	bne.n	8009d56 <_dtoa_r+0xa6e>
 8009d92:	f019 0f01 	tst.w	r9, #1
 8009d96:	d0de      	beq.n	8009d56 <_dtoa_r+0xa6e>
 8009d98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d9c:	d1d8      	bne.n	8009d50 <_dtoa_r+0xa68>
 8009d9e:	9a01      	ldr	r2, [sp, #4]
 8009da0:	2339      	movs	r3, #57	; 0x39
 8009da2:	7013      	strb	r3, [r2, #0]
 8009da4:	462b      	mov	r3, r5
 8009da6:	461d      	mov	r5, r3
 8009da8:	3b01      	subs	r3, #1
 8009daa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009dae:	2a39      	cmp	r2, #57	; 0x39
 8009db0:	d06c      	beq.n	8009e8c <_dtoa_r+0xba4>
 8009db2:	3201      	adds	r2, #1
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	e747      	b.n	8009c48 <_dtoa_r+0x960>
 8009db8:	2a00      	cmp	r2, #0
 8009dba:	dd07      	ble.n	8009dcc <_dtoa_r+0xae4>
 8009dbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009dc0:	d0ed      	beq.n	8009d9e <_dtoa_r+0xab6>
 8009dc2:	9a01      	ldr	r2, [sp, #4]
 8009dc4:	f109 0301 	add.w	r3, r9, #1
 8009dc8:	7013      	strb	r3, [r2, #0]
 8009dca:	e73d      	b.n	8009c48 <_dtoa_r+0x960>
 8009dcc:	9b04      	ldr	r3, [sp, #16]
 8009dce:	9a08      	ldr	r2, [sp, #32]
 8009dd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d043      	beq.n	8009e60 <_dtoa_r+0xb78>
 8009dd8:	4651      	mov	r1, sl
 8009dda:	2300      	movs	r3, #0
 8009ddc:	220a      	movs	r2, #10
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 f9d6 	bl	800a190 <__multadd>
 8009de4:	45b8      	cmp	r8, r7
 8009de6:	4682      	mov	sl, r0
 8009de8:	f04f 0300 	mov.w	r3, #0
 8009dec:	f04f 020a 	mov.w	r2, #10
 8009df0:	4641      	mov	r1, r8
 8009df2:	4620      	mov	r0, r4
 8009df4:	d107      	bne.n	8009e06 <_dtoa_r+0xb1e>
 8009df6:	f000 f9cb 	bl	800a190 <__multadd>
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	9b04      	ldr	r3, [sp, #16]
 8009e00:	3301      	adds	r3, #1
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	e775      	b.n	8009cf2 <_dtoa_r+0xa0a>
 8009e06:	f000 f9c3 	bl	800a190 <__multadd>
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	2300      	movs	r3, #0
 8009e10:	220a      	movs	r2, #10
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 f9bc 	bl	800a190 <__multadd>
 8009e18:	4607      	mov	r7, r0
 8009e1a:	e7f0      	b.n	8009dfe <_dtoa_r+0xb16>
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	9d00      	ldr	r5, [sp, #0]
 8009e22:	4631      	mov	r1, r6
 8009e24:	4650      	mov	r0, sl
 8009e26:	f7ff f9d6 	bl	80091d6 <quorem>
 8009e2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e2e:	9b00      	ldr	r3, [sp, #0]
 8009e30:	f805 9b01 	strb.w	r9, [r5], #1
 8009e34:	1aea      	subs	r2, r5, r3
 8009e36:	9b01      	ldr	r3, [sp, #4]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	dd07      	ble.n	8009e4c <_dtoa_r+0xb64>
 8009e3c:	4651      	mov	r1, sl
 8009e3e:	2300      	movs	r3, #0
 8009e40:	220a      	movs	r2, #10
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 f9a4 	bl	800a190 <__multadd>
 8009e48:	4682      	mov	sl, r0
 8009e4a:	e7ea      	b.n	8009e22 <_dtoa_r+0xb3a>
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	bfc8      	it	gt
 8009e52:	461d      	movgt	r5, r3
 8009e54:	9b00      	ldr	r3, [sp, #0]
 8009e56:	bfd8      	it	le
 8009e58:	2501      	movle	r5, #1
 8009e5a:	441d      	add	r5, r3
 8009e5c:	f04f 0800 	mov.w	r8, #0
 8009e60:	4651      	mov	r1, sl
 8009e62:	2201      	movs	r2, #1
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 fb41 	bl	800a4ec <__lshift>
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4682      	mov	sl, r0
 8009e6e:	f000 fba9 	bl	800a5c4 <__mcmp>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	dc96      	bgt.n	8009da4 <_dtoa_r+0xabc>
 8009e76:	d102      	bne.n	8009e7e <_dtoa_r+0xb96>
 8009e78:	f019 0f01 	tst.w	r9, #1
 8009e7c:	d192      	bne.n	8009da4 <_dtoa_r+0xabc>
 8009e7e:	462b      	mov	r3, r5
 8009e80:	461d      	mov	r5, r3
 8009e82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e86:	2a30      	cmp	r2, #48	; 0x30
 8009e88:	d0fa      	beq.n	8009e80 <_dtoa_r+0xb98>
 8009e8a:	e6dd      	b.n	8009c48 <_dtoa_r+0x960>
 8009e8c:	9a00      	ldr	r2, [sp, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d189      	bne.n	8009da6 <_dtoa_r+0xabe>
 8009e92:	f10b 0b01 	add.w	fp, fp, #1
 8009e96:	2331      	movs	r3, #49	; 0x31
 8009e98:	e796      	b.n	8009dc8 <_dtoa_r+0xae0>
 8009e9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <_dtoa_r+0xbdc>)
 8009e9c:	f7ff ba99 	b.w	80093d2 <_dtoa_r+0xea>
 8009ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f47f aa6d 	bne.w	8009382 <_dtoa_r+0x9a>
 8009ea8:	4b07      	ldr	r3, [pc, #28]	; (8009ec8 <_dtoa_r+0xbe0>)
 8009eaa:	f7ff ba92 	b.w	80093d2 <_dtoa_r+0xea>
 8009eae:	9b01      	ldr	r3, [sp, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dcb5      	bgt.n	8009e20 <_dtoa_r+0xb38>
 8009eb4:	9b07      	ldr	r3, [sp, #28]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	f73f aeb1 	bgt.w	8009c1e <_dtoa_r+0x936>
 8009ebc:	e7b0      	b.n	8009e20 <_dtoa_r+0xb38>
 8009ebe:	bf00      	nop
 8009ec0:	0800b801 	.word	0x0800b801
 8009ec4:	0800b761 	.word	0x0800b761
 8009ec8:	0800b785 	.word	0x0800b785

08009ecc <_free_r>:
 8009ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ece:	2900      	cmp	r1, #0
 8009ed0:	d044      	beq.n	8009f5c <_free_r+0x90>
 8009ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ed6:	9001      	str	r0, [sp, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f1a1 0404 	sub.w	r4, r1, #4
 8009ede:	bfb8      	it	lt
 8009ee0:	18e4      	addlt	r4, r4, r3
 8009ee2:	f000 f8e7 	bl	800a0b4 <__malloc_lock>
 8009ee6:	4a1e      	ldr	r2, [pc, #120]	; (8009f60 <_free_r+0x94>)
 8009ee8:	9801      	ldr	r0, [sp, #4]
 8009eea:	6813      	ldr	r3, [r2, #0]
 8009eec:	b933      	cbnz	r3, 8009efc <_free_r+0x30>
 8009eee:	6063      	str	r3, [r4, #4]
 8009ef0:	6014      	str	r4, [r2, #0]
 8009ef2:	b003      	add	sp, #12
 8009ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ef8:	f000 b8e2 	b.w	800a0c0 <__malloc_unlock>
 8009efc:	42a3      	cmp	r3, r4
 8009efe:	d908      	bls.n	8009f12 <_free_r+0x46>
 8009f00:	6825      	ldr	r5, [r4, #0]
 8009f02:	1961      	adds	r1, r4, r5
 8009f04:	428b      	cmp	r3, r1
 8009f06:	bf01      	itttt	eq
 8009f08:	6819      	ldreq	r1, [r3, #0]
 8009f0a:	685b      	ldreq	r3, [r3, #4]
 8009f0c:	1949      	addeq	r1, r1, r5
 8009f0e:	6021      	streq	r1, [r4, #0]
 8009f10:	e7ed      	b.n	8009eee <_free_r+0x22>
 8009f12:	461a      	mov	r2, r3
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	b10b      	cbz	r3, 8009f1c <_free_r+0x50>
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	d9fa      	bls.n	8009f12 <_free_r+0x46>
 8009f1c:	6811      	ldr	r1, [r2, #0]
 8009f1e:	1855      	adds	r5, r2, r1
 8009f20:	42a5      	cmp	r5, r4
 8009f22:	d10b      	bne.n	8009f3c <_free_r+0x70>
 8009f24:	6824      	ldr	r4, [r4, #0]
 8009f26:	4421      	add	r1, r4
 8009f28:	1854      	adds	r4, r2, r1
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	6011      	str	r1, [r2, #0]
 8009f2e:	d1e0      	bne.n	8009ef2 <_free_r+0x26>
 8009f30:	681c      	ldr	r4, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	6053      	str	r3, [r2, #4]
 8009f36:	440c      	add	r4, r1
 8009f38:	6014      	str	r4, [r2, #0]
 8009f3a:	e7da      	b.n	8009ef2 <_free_r+0x26>
 8009f3c:	d902      	bls.n	8009f44 <_free_r+0x78>
 8009f3e:	230c      	movs	r3, #12
 8009f40:	6003      	str	r3, [r0, #0]
 8009f42:	e7d6      	b.n	8009ef2 <_free_r+0x26>
 8009f44:	6825      	ldr	r5, [r4, #0]
 8009f46:	1961      	adds	r1, r4, r5
 8009f48:	428b      	cmp	r3, r1
 8009f4a:	bf04      	itt	eq
 8009f4c:	6819      	ldreq	r1, [r3, #0]
 8009f4e:	685b      	ldreq	r3, [r3, #4]
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	bf04      	itt	eq
 8009f54:	1949      	addeq	r1, r1, r5
 8009f56:	6021      	streq	r1, [r4, #0]
 8009f58:	6054      	str	r4, [r2, #4]
 8009f5a:	e7ca      	b.n	8009ef2 <_free_r+0x26>
 8009f5c:	b003      	add	sp, #12
 8009f5e:	bd30      	pop	{r4, r5, pc}
 8009f60:	20000d68 	.word	0x20000d68

08009f64 <malloc>:
 8009f64:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <malloc+0xc>)
 8009f66:	4601      	mov	r1, r0
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	f000 b823 	b.w	8009fb4 <_malloc_r>
 8009f6e:	bf00      	nop
 8009f70:	200007c4 	.word	0x200007c4

08009f74 <sbrk_aligned>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4e0e      	ldr	r6, [pc, #56]	; (8009fb0 <sbrk_aligned+0x3c>)
 8009f78:	460c      	mov	r4, r1
 8009f7a:	6831      	ldr	r1, [r6, #0]
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	b911      	cbnz	r1, 8009f86 <sbrk_aligned+0x12>
 8009f80:	f000 ff5a 	bl	800ae38 <_sbrk_r>
 8009f84:	6030      	str	r0, [r6, #0]
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 ff55 	bl	800ae38 <_sbrk_r>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	d00a      	beq.n	8009fa8 <sbrk_aligned+0x34>
 8009f92:	1cc4      	adds	r4, r0, #3
 8009f94:	f024 0403 	bic.w	r4, r4, #3
 8009f98:	42a0      	cmp	r0, r4
 8009f9a:	d007      	beq.n	8009fac <sbrk_aligned+0x38>
 8009f9c:	1a21      	subs	r1, r4, r0
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 ff4a 	bl	800ae38 <_sbrk_r>
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d101      	bne.n	8009fac <sbrk_aligned+0x38>
 8009fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8009fac:	4620      	mov	r0, r4
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	20000d6c 	.word	0x20000d6c

08009fb4 <_malloc_r>:
 8009fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	1ccd      	adds	r5, r1, #3
 8009fba:	f025 0503 	bic.w	r5, r5, #3
 8009fbe:	3508      	adds	r5, #8
 8009fc0:	2d0c      	cmp	r5, #12
 8009fc2:	bf38      	it	cc
 8009fc4:	250c      	movcc	r5, #12
 8009fc6:	2d00      	cmp	r5, #0
 8009fc8:	4607      	mov	r7, r0
 8009fca:	db01      	blt.n	8009fd0 <_malloc_r+0x1c>
 8009fcc:	42a9      	cmp	r1, r5
 8009fce:	d905      	bls.n	8009fdc <_malloc_r+0x28>
 8009fd0:	230c      	movs	r3, #12
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a0b0 <_malloc_r+0xfc>
 8009fe0:	f000 f868 	bl	800a0b4 <__malloc_lock>
 8009fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe8:	461c      	mov	r4, r3
 8009fea:	bb5c      	cbnz	r4, 800a044 <_malloc_r+0x90>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f7ff ffc0 	bl	8009f74 <sbrk_aligned>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	d155      	bne.n	800a0a6 <_malloc_r+0xf2>
 8009ffa:	f8d8 4000 	ldr.w	r4, [r8]
 8009ffe:	4626      	mov	r6, r4
 800a000:	2e00      	cmp	r6, #0
 800a002:	d145      	bne.n	800a090 <_malloc_r+0xdc>
 800a004:	2c00      	cmp	r4, #0
 800a006:	d048      	beq.n	800a09a <_malloc_r+0xe6>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	4631      	mov	r1, r6
 800a00c:	4638      	mov	r0, r7
 800a00e:	eb04 0903 	add.w	r9, r4, r3
 800a012:	f000 ff11 	bl	800ae38 <_sbrk_r>
 800a016:	4581      	cmp	r9, r0
 800a018:	d13f      	bne.n	800a09a <_malloc_r+0xe6>
 800a01a:	6821      	ldr	r1, [r4, #0]
 800a01c:	1a6d      	subs	r5, r5, r1
 800a01e:	4629      	mov	r1, r5
 800a020:	4638      	mov	r0, r7
 800a022:	f7ff ffa7 	bl	8009f74 <sbrk_aligned>
 800a026:	3001      	adds	r0, #1
 800a028:	d037      	beq.n	800a09a <_malloc_r+0xe6>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	442b      	add	r3, r5
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	f8d8 3000 	ldr.w	r3, [r8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d038      	beq.n	800a0aa <_malloc_r+0xf6>
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	42a2      	cmp	r2, r4
 800a03c:	d12b      	bne.n	800a096 <_malloc_r+0xe2>
 800a03e:	2200      	movs	r2, #0
 800a040:	605a      	str	r2, [r3, #4]
 800a042:	e00f      	b.n	800a064 <_malloc_r+0xb0>
 800a044:	6822      	ldr	r2, [r4, #0]
 800a046:	1b52      	subs	r2, r2, r5
 800a048:	d41f      	bmi.n	800a08a <_malloc_r+0xd6>
 800a04a:	2a0b      	cmp	r2, #11
 800a04c:	d917      	bls.n	800a07e <_malloc_r+0xca>
 800a04e:	1961      	adds	r1, r4, r5
 800a050:	42a3      	cmp	r3, r4
 800a052:	6025      	str	r5, [r4, #0]
 800a054:	bf18      	it	ne
 800a056:	6059      	strne	r1, [r3, #4]
 800a058:	6863      	ldr	r3, [r4, #4]
 800a05a:	bf08      	it	eq
 800a05c:	f8c8 1000 	streq.w	r1, [r8]
 800a060:	5162      	str	r2, [r4, r5]
 800a062:	604b      	str	r3, [r1, #4]
 800a064:	4638      	mov	r0, r7
 800a066:	f104 060b 	add.w	r6, r4, #11
 800a06a:	f000 f829 	bl	800a0c0 <__malloc_unlock>
 800a06e:	f026 0607 	bic.w	r6, r6, #7
 800a072:	1d23      	adds	r3, r4, #4
 800a074:	1af2      	subs	r2, r6, r3
 800a076:	d0ae      	beq.n	8009fd6 <_malloc_r+0x22>
 800a078:	1b9b      	subs	r3, r3, r6
 800a07a:	50a3      	str	r3, [r4, r2]
 800a07c:	e7ab      	b.n	8009fd6 <_malloc_r+0x22>
 800a07e:	42a3      	cmp	r3, r4
 800a080:	6862      	ldr	r2, [r4, #4]
 800a082:	d1dd      	bne.n	800a040 <_malloc_r+0x8c>
 800a084:	f8c8 2000 	str.w	r2, [r8]
 800a088:	e7ec      	b.n	800a064 <_malloc_r+0xb0>
 800a08a:	4623      	mov	r3, r4
 800a08c:	6864      	ldr	r4, [r4, #4]
 800a08e:	e7ac      	b.n	8009fea <_malloc_r+0x36>
 800a090:	4634      	mov	r4, r6
 800a092:	6876      	ldr	r6, [r6, #4]
 800a094:	e7b4      	b.n	800a000 <_malloc_r+0x4c>
 800a096:	4613      	mov	r3, r2
 800a098:	e7cc      	b.n	800a034 <_malloc_r+0x80>
 800a09a:	230c      	movs	r3, #12
 800a09c:	603b      	str	r3, [r7, #0]
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f000 f80e 	bl	800a0c0 <__malloc_unlock>
 800a0a4:	e797      	b.n	8009fd6 <_malloc_r+0x22>
 800a0a6:	6025      	str	r5, [r4, #0]
 800a0a8:	e7dc      	b.n	800a064 <_malloc_r+0xb0>
 800a0aa:	605b      	str	r3, [r3, #4]
 800a0ac:	deff      	udf	#255	; 0xff
 800a0ae:	bf00      	nop
 800a0b0:	20000d68 	.word	0x20000d68

0800a0b4 <__malloc_lock>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__malloc_lock+0x8>)
 800a0b6:	f7ff b88c 	b.w	80091d2 <__retarget_lock_acquire_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	20000d64 	.word	0x20000d64

0800a0c0 <__malloc_unlock>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__malloc_unlock+0x8>)
 800a0c2:	f7ff b887 	b.w	80091d4 <__retarget_lock_release_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	20000d64 	.word	0x20000d64

0800a0cc <_Balloc>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	69c6      	ldr	r6, [r0, #28]
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	460d      	mov	r5, r1
 800a0d4:	b976      	cbnz	r6, 800a0f4 <_Balloc+0x28>
 800a0d6:	2010      	movs	r0, #16
 800a0d8:	f7ff ff44 	bl	8009f64 <malloc>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	61e0      	str	r0, [r4, #28]
 800a0e0:	b920      	cbnz	r0, 800a0ec <_Balloc+0x20>
 800a0e2:	4b18      	ldr	r3, [pc, #96]	; (800a144 <_Balloc+0x78>)
 800a0e4:	4818      	ldr	r0, [pc, #96]	; (800a148 <_Balloc+0x7c>)
 800a0e6:	216b      	movs	r1, #107	; 0x6b
 800a0e8:	f000 fec4 	bl	800ae74 <__assert_func>
 800a0ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0f0:	6006      	str	r6, [r0, #0]
 800a0f2:	60c6      	str	r6, [r0, #12]
 800a0f4:	69e6      	ldr	r6, [r4, #28]
 800a0f6:	68f3      	ldr	r3, [r6, #12]
 800a0f8:	b183      	cbz	r3, 800a11c <_Balloc+0x50>
 800a0fa:	69e3      	ldr	r3, [r4, #28]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a102:	b9b8      	cbnz	r0, 800a134 <_Balloc+0x68>
 800a104:	2101      	movs	r1, #1
 800a106:	fa01 f605 	lsl.w	r6, r1, r5
 800a10a:	1d72      	adds	r2, r6, #5
 800a10c:	0092      	lsls	r2, r2, #2
 800a10e:	4620      	mov	r0, r4
 800a110:	f000 fece 	bl	800aeb0 <_calloc_r>
 800a114:	b160      	cbz	r0, 800a130 <_Balloc+0x64>
 800a116:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a11a:	e00e      	b.n	800a13a <_Balloc+0x6e>
 800a11c:	2221      	movs	r2, #33	; 0x21
 800a11e:	2104      	movs	r1, #4
 800a120:	4620      	mov	r0, r4
 800a122:	f000 fec5 	bl	800aeb0 <_calloc_r>
 800a126:	69e3      	ldr	r3, [r4, #28]
 800a128:	60f0      	str	r0, [r6, #12]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e4      	bne.n	800a0fa <_Balloc+0x2e>
 800a130:	2000      	movs	r0, #0
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	6802      	ldr	r2, [r0, #0]
 800a136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a13a:	2300      	movs	r3, #0
 800a13c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a140:	e7f7      	b.n	800a132 <_Balloc+0x66>
 800a142:	bf00      	nop
 800a144:	0800b792 	.word	0x0800b792
 800a148:	0800b812 	.word	0x0800b812

0800a14c <_Bfree>:
 800a14c:	b570      	push	{r4, r5, r6, lr}
 800a14e:	69c6      	ldr	r6, [r0, #28]
 800a150:	4605      	mov	r5, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b976      	cbnz	r6, 800a174 <_Bfree+0x28>
 800a156:	2010      	movs	r0, #16
 800a158:	f7ff ff04 	bl	8009f64 <malloc>
 800a15c:	4602      	mov	r2, r0
 800a15e:	61e8      	str	r0, [r5, #28]
 800a160:	b920      	cbnz	r0, 800a16c <_Bfree+0x20>
 800a162:	4b09      	ldr	r3, [pc, #36]	; (800a188 <_Bfree+0x3c>)
 800a164:	4809      	ldr	r0, [pc, #36]	; (800a18c <_Bfree+0x40>)
 800a166:	218f      	movs	r1, #143	; 0x8f
 800a168:	f000 fe84 	bl	800ae74 <__assert_func>
 800a16c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a170:	6006      	str	r6, [r0, #0]
 800a172:	60c6      	str	r6, [r0, #12]
 800a174:	b13c      	cbz	r4, 800a186 <_Bfree+0x3a>
 800a176:	69eb      	ldr	r3, [r5, #28]
 800a178:	6862      	ldr	r2, [r4, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a180:	6021      	str	r1, [r4, #0]
 800a182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a186:	bd70      	pop	{r4, r5, r6, pc}
 800a188:	0800b792 	.word	0x0800b792
 800a18c:	0800b812 	.word	0x0800b812

0800a190 <__multadd>:
 800a190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a194:	690d      	ldr	r5, [r1, #16]
 800a196:	4607      	mov	r7, r0
 800a198:	460c      	mov	r4, r1
 800a19a:	461e      	mov	r6, r3
 800a19c:	f101 0c14 	add.w	ip, r1, #20
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a1a6:	b299      	uxth	r1, r3
 800a1a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a1ac:	0c1e      	lsrs	r6, r3, #16
 800a1ae:	0c0b      	lsrs	r3, r1, #16
 800a1b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a1b4:	b289      	uxth	r1, r1
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1bc:	4285      	cmp	r5, r0
 800a1be:	f84c 1b04 	str.w	r1, [ip], #4
 800a1c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1c6:	dcec      	bgt.n	800a1a2 <__multadd+0x12>
 800a1c8:	b30e      	cbz	r6, 800a20e <__multadd+0x7e>
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	dc19      	bgt.n	800a204 <__multadd+0x74>
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	3101      	adds	r1, #1
 800a1d6:	f7ff ff79 	bl	800a0cc <_Balloc>
 800a1da:	4680      	mov	r8, r0
 800a1dc:	b928      	cbnz	r0, 800a1ea <__multadd+0x5a>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	4b0c      	ldr	r3, [pc, #48]	; (800a214 <__multadd+0x84>)
 800a1e2:	480d      	ldr	r0, [pc, #52]	; (800a218 <__multadd+0x88>)
 800a1e4:	21ba      	movs	r1, #186	; 0xba
 800a1e6:	f000 fe45 	bl	800ae74 <__assert_func>
 800a1ea:	6922      	ldr	r2, [r4, #16]
 800a1ec:	3202      	adds	r2, #2
 800a1ee:	f104 010c 	add.w	r1, r4, #12
 800a1f2:	0092      	lsls	r2, r2, #2
 800a1f4:	300c      	adds	r0, #12
 800a1f6:	f000 fe2f 	bl	800ae58 <memcpy>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	f7ff ffa5 	bl	800a14c <_Bfree>
 800a202:	4644      	mov	r4, r8
 800a204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a208:	3501      	adds	r5, #1
 800a20a:	615e      	str	r6, [r3, #20]
 800a20c:	6125      	str	r5, [r4, #16]
 800a20e:	4620      	mov	r0, r4
 800a210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a214:	0800b801 	.word	0x0800b801
 800a218:	0800b812 	.word	0x0800b812

0800a21c <__hi0bits>:
 800a21c:	0c03      	lsrs	r3, r0, #16
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	b9d3      	cbnz	r3, 800a258 <__hi0bits+0x3c>
 800a222:	0400      	lsls	r0, r0, #16
 800a224:	2310      	movs	r3, #16
 800a226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a22a:	bf04      	itt	eq
 800a22c:	0200      	lsleq	r0, r0, #8
 800a22e:	3308      	addeq	r3, #8
 800a230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a234:	bf04      	itt	eq
 800a236:	0100      	lsleq	r0, r0, #4
 800a238:	3304      	addeq	r3, #4
 800a23a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a23e:	bf04      	itt	eq
 800a240:	0080      	lsleq	r0, r0, #2
 800a242:	3302      	addeq	r3, #2
 800a244:	2800      	cmp	r0, #0
 800a246:	db05      	blt.n	800a254 <__hi0bits+0x38>
 800a248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a24c:	f103 0301 	add.w	r3, r3, #1
 800a250:	bf08      	it	eq
 800a252:	2320      	moveq	r3, #32
 800a254:	4618      	mov	r0, r3
 800a256:	4770      	bx	lr
 800a258:	2300      	movs	r3, #0
 800a25a:	e7e4      	b.n	800a226 <__hi0bits+0xa>

0800a25c <__lo0bits>:
 800a25c:	6803      	ldr	r3, [r0, #0]
 800a25e:	f013 0207 	ands.w	r2, r3, #7
 800a262:	d00c      	beq.n	800a27e <__lo0bits+0x22>
 800a264:	07d9      	lsls	r1, r3, #31
 800a266:	d422      	bmi.n	800a2ae <__lo0bits+0x52>
 800a268:	079a      	lsls	r2, r3, #30
 800a26a:	bf49      	itett	mi
 800a26c:	085b      	lsrmi	r3, r3, #1
 800a26e:	089b      	lsrpl	r3, r3, #2
 800a270:	6003      	strmi	r3, [r0, #0]
 800a272:	2201      	movmi	r2, #1
 800a274:	bf5c      	itt	pl
 800a276:	6003      	strpl	r3, [r0, #0]
 800a278:	2202      	movpl	r2, #2
 800a27a:	4610      	mov	r0, r2
 800a27c:	4770      	bx	lr
 800a27e:	b299      	uxth	r1, r3
 800a280:	b909      	cbnz	r1, 800a286 <__lo0bits+0x2a>
 800a282:	0c1b      	lsrs	r3, r3, #16
 800a284:	2210      	movs	r2, #16
 800a286:	b2d9      	uxtb	r1, r3
 800a288:	b909      	cbnz	r1, 800a28e <__lo0bits+0x32>
 800a28a:	3208      	adds	r2, #8
 800a28c:	0a1b      	lsrs	r3, r3, #8
 800a28e:	0719      	lsls	r1, r3, #28
 800a290:	bf04      	itt	eq
 800a292:	091b      	lsreq	r3, r3, #4
 800a294:	3204      	addeq	r2, #4
 800a296:	0799      	lsls	r1, r3, #30
 800a298:	bf04      	itt	eq
 800a29a:	089b      	lsreq	r3, r3, #2
 800a29c:	3202      	addeq	r2, #2
 800a29e:	07d9      	lsls	r1, r3, #31
 800a2a0:	d403      	bmi.n	800a2aa <__lo0bits+0x4e>
 800a2a2:	085b      	lsrs	r3, r3, #1
 800a2a4:	f102 0201 	add.w	r2, r2, #1
 800a2a8:	d003      	beq.n	800a2b2 <__lo0bits+0x56>
 800a2aa:	6003      	str	r3, [r0, #0]
 800a2ac:	e7e5      	b.n	800a27a <__lo0bits+0x1e>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	e7e3      	b.n	800a27a <__lo0bits+0x1e>
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	e7e1      	b.n	800a27a <__lo0bits+0x1e>
	...

0800a2b8 <__i2b>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	2101      	movs	r1, #1
 800a2be:	f7ff ff05 	bl	800a0cc <_Balloc>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__i2b+0x1a>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <__i2b+0x24>)
 800a2c8:	4805      	ldr	r0, [pc, #20]	; (800a2e0 <__i2b+0x28>)
 800a2ca:	f240 1145 	movw	r1, #325	; 0x145
 800a2ce:	f000 fdd1 	bl	800ae74 <__assert_func>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	6144      	str	r4, [r0, #20]
 800a2d6:	6103      	str	r3, [r0, #16]
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	bf00      	nop
 800a2dc:	0800b801 	.word	0x0800b801
 800a2e0:	0800b812 	.word	0x0800b812

0800a2e4 <__multiply>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4691      	mov	r9, r2
 800a2ea:	690a      	ldr	r2, [r1, #16]
 800a2ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	bfb8      	it	lt
 800a2f4:	460b      	movlt	r3, r1
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	bfbc      	itt	lt
 800a2fa:	464c      	movlt	r4, r9
 800a2fc:	4699      	movlt	r9, r3
 800a2fe:	6927      	ldr	r7, [r4, #16]
 800a300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a304:	68a3      	ldr	r3, [r4, #8]
 800a306:	6861      	ldr	r1, [r4, #4]
 800a308:	eb07 060a 	add.w	r6, r7, sl
 800a30c:	42b3      	cmp	r3, r6
 800a30e:	b085      	sub	sp, #20
 800a310:	bfb8      	it	lt
 800a312:	3101      	addlt	r1, #1
 800a314:	f7ff feda 	bl	800a0cc <_Balloc>
 800a318:	b930      	cbnz	r0, 800a328 <__multiply+0x44>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b44      	ldr	r3, [pc, #272]	; (800a430 <__multiply+0x14c>)
 800a31e:	4845      	ldr	r0, [pc, #276]	; (800a434 <__multiply+0x150>)
 800a320:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a324:	f000 fda6 	bl	800ae74 <__assert_func>
 800a328:	f100 0514 	add.w	r5, r0, #20
 800a32c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a330:	462b      	mov	r3, r5
 800a332:	2200      	movs	r2, #0
 800a334:	4543      	cmp	r3, r8
 800a336:	d321      	bcc.n	800a37c <__multiply+0x98>
 800a338:	f104 0314 	add.w	r3, r4, #20
 800a33c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a340:	f109 0314 	add.w	r3, r9, #20
 800a344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a348:	9202      	str	r2, [sp, #8]
 800a34a:	1b3a      	subs	r2, r7, r4
 800a34c:	3a15      	subs	r2, #21
 800a34e:	f022 0203 	bic.w	r2, r2, #3
 800a352:	3204      	adds	r2, #4
 800a354:	f104 0115 	add.w	r1, r4, #21
 800a358:	428f      	cmp	r7, r1
 800a35a:	bf38      	it	cc
 800a35c:	2204      	movcc	r2, #4
 800a35e:	9201      	str	r2, [sp, #4]
 800a360:	9a02      	ldr	r2, [sp, #8]
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d80c      	bhi.n	800a382 <__multiply+0x9e>
 800a368:	2e00      	cmp	r6, #0
 800a36a:	dd03      	ble.n	800a374 <__multiply+0x90>
 800a36c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05b      	beq.n	800a42c <__multiply+0x148>
 800a374:	6106      	str	r6, [r0, #16]
 800a376:	b005      	add	sp, #20
 800a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37c:	f843 2b04 	str.w	r2, [r3], #4
 800a380:	e7d8      	b.n	800a334 <__multiply+0x50>
 800a382:	f8b3 a000 	ldrh.w	sl, [r3]
 800a386:	f1ba 0f00 	cmp.w	sl, #0
 800a38a:	d024      	beq.n	800a3d6 <__multiply+0xf2>
 800a38c:	f104 0e14 	add.w	lr, r4, #20
 800a390:	46a9      	mov	r9, r5
 800a392:	f04f 0c00 	mov.w	ip, #0
 800a396:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a39a:	f8d9 1000 	ldr.w	r1, [r9]
 800a39e:	fa1f fb82 	uxth.w	fp, r2
 800a3a2:	b289      	uxth	r1, r1
 800a3a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a3b0:	4461      	add	r1, ip
 800a3b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3be:	b289      	uxth	r1, r1
 800a3c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3c4:	4577      	cmp	r7, lr
 800a3c6:	f849 1b04 	str.w	r1, [r9], #4
 800a3ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ce:	d8e2      	bhi.n	800a396 <__multiply+0xb2>
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	f845 c002 	str.w	ip, [r5, r2]
 800a3d6:	9a03      	ldr	r2, [sp, #12]
 800a3d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	f1b9 0f00 	cmp.w	r9, #0
 800a3e2:	d021      	beq.n	800a428 <__multiply+0x144>
 800a3e4:	6829      	ldr	r1, [r5, #0]
 800a3e6:	f104 0c14 	add.w	ip, r4, #20
 800a3ea:	46ae      	mov	lr, r5
 800a3ec:	f04f 0a00 	mov.w	sl, #0
 800a3f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a3f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3f8:	fb09 220b 	mla	r2, r9, fp, r2
 800a3fc:	4452      	add	r2, sl
 800a3fe:	b289      	uxth	r1, r1
 800a400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a404:	f84e 1b04 	str.w	r1, [lr], #4
 800a408:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a40c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a410:	f8be 1000 	ldrh.w	r1, [lr]
 800a414:	fb09 110a 	mla	r1, r9, sl, r1
 800a418:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a41c:	4567      	cmp	r7, ip
 800a41e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a422:	d8e5      	bhi.n	800a3f0 <__multiply+0x10c>
 800a424:	9a01      	ldr	r2, [sp, #4]
 800a426:	50a9      	str	r1, [r5, r2]
 800a428:	3504      	adds	r5, #4
 800a42a:	e799      	b.n	800a360 <__multiply+0x7c>
 800a42c:	3e01      	subs	r6, #1
 800a42e:	e79b      	b.n	800a368 <__multiply+0x84>
 800a430:	0800b801 	.word	0x0800b801
 800a434:	0800b812 	.word	0x0800b812

0800a438 <__pow5mult>:
 800a438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a43c:	4615      	mov	r5, r2
 800a43e:	f012 0203 	ands.w	r2, r2, #3
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	d007      	beq.n	800a458 <__pow5mult+0x20>
 800a448:	4c25      	ldr	r4, [pc, #148]	; (800a4e0 <__pow5mult+0xa8>)
 800a44a:	3a01      	subs	r2, #1
 800a44c:	2300      	movs	r3, #0
 800a44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a452:	f7ff fe9d 	bl	800a190 <__multadd>
 800a456:	4607      	mov	r7, r0
 800a458:	10ad      	asrs	r5, r5, #2
 800a45a:	d03d      	beq.n	800a4d8 <__pow5mult+0xa0>
 800a45c:	69f4      	ldr	r4, [r6, #28]
 800a45e:	b97c      	cbnz	r4, 800a480 <__pow5mult+0x48>
 800a460:	2010      	movs	r0, #16
 800a462:	f7ff fd7f 	bl	8009f64 <malloc>
 800a466:	4602      	mov	r2, r0
 800a468:	61f0      	str	r0, [r6, #28]
 800a46a:	b928      	cbnz	r0, 800a478 <__pow5mult+0x40>
 800a46c:	4b1d      	ldr	r3, [pc, #116]	; (800a4e4 <__pow5mult+0xac>)
 800a46e:	481e      	ldr	r0, [pc, #120]	; (800a4e8 <__pow5mult+0xb0>)
 800a470:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a474:	f000 fcfe 	bl	800ae74 <__assert_func>
 800a478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a47c:	6004      	str	r4, [r0, #0]
 800a47e:	60c4      	str	r4, [r0, #12]
 800a480:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a488:	b94c      	cbnz	r4, 800a49e <__pow5mult+0x66>
 800a48a:	f240 2171 	movw	r1, #625	; 0x271
 800a48e:	4630      	mov	r0, r6
 800a490:	f7ff ff12 	bl	800a2b8 <__i2b>
 800a494:	2300      	movs	r3, #0
 800a496:	f8c8 0008 	str.w	r0, [r8, #8]
 800a49a:	4604      	mov	r4, r0
 800a49c:	6003      	str	r3, [r0, #0]
 800a49e:	f04f 0900 	mov.w	r9, #0
 800a4a2:	07eb      	lsls	r3, r5, #31
 800a4a4:	d50a      	bpl.n	800a4bc <__pow5mult+0x84>
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ff1a 	bl	800a2e4 <__multiply>
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7ff fe49 	bl	800a14c <_Bfree>
 800a4ba:	4647      	mov	r7, r8
 800a4bc:	106d      	asrs	r5, r5, #1
 800a4be:	d00b      	beq.n	800a4d8 <__pow5mult+0xa0>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	b938      	cbnz	r0, 800a4d4 <__pow5mult+0x9c>
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f7ff ff0b 	bl	800a2e4 <__multiply>
 800a4ce:	6020      	str	r0, [r4, #0]
 800a4d0:	f8c0 9000 	str.w	r9, [r0]
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	e7e4      	b.n	800a4a2 <__pow5mult+0x6a>
 800a4d8:	4638      	mov	r0, r7
 800a4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800b960 	.word	0x0800b960
 800a4e4:	0800b792 	.word	0x0800b792
 800a4e8:	0800b812 	.word	0x0800b812

0800a4ec <__lshift>:
 800a4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	6849      	ldr	r1, [r1, #4]
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	4691      	mov	r9, r2
 800a500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a504:	f108 0601 	add.w	r6, r8, #1
 800a508:	42b3      	cmp	r3, r6
 800a50a:	db0b      	blt.n	800a524 <__lshift+0x38>
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff fddd 	bl	800a0cc <_Balloc>
 800a512:	4605      	mov	r5, r0
 800a514:	b948      	cbnz	r0, 800a52a <__lshift+0x3e>
 800a516:	4602      	mov	r2, r0
 800a518:	4b28      	ldr	r3, [pc, #160]	; (800a5bc <__lshift+0xd0>)
 800a51a:	4829      	ldr	r0, [pc, #164]	; (800a5c0 <__lshift+0xd4>)
 800a51c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a520:	f000 fca8 	bl	800ae74 <__assert_func>
 800a524:	3101      	adds	r1, #1
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	e7ee      	b.n	800a508 <__lshift+0x1c>
 800a52a:	2300      	movs	r3, #0
 800a52c:	f100 0114 	add.w	r1, r0, #20
 800a530:	f100 0210 	add.w	r2, r0, #16
 800a534:	4618      	mov	r0, r3
 800a536:	4553      	cmp	r3, sl
 800a538:	db33      	blt.n	800a5a2 <__lshift+0xb6>
 800a53a:	6920      	ldr	r0, [r4, #16]
 800a53c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a540:	f104 0314 	add.w	r3, r4, #20
 800a544:	f019 091f 	ands.w	r9, r9, #31
 800a548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a54c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a550:	d02b      	beq.n	800a5aa <__lshift+0xbe>
 800a552:	f1c9 0e20 	rsb	lr, r9, #32
 800a556:	468a      	mov	sl, r1
 800a558:	2200      	movs	r2, #0
 800a55a:	6818      	ldr	r0, [r3, #0]
 800a55c:	fa00 f009 	lsl.w	r0, r0, r9
 800a560:	4310      	orrs	r0, r2
 800a562:	f84a 0b04 	str.w	r0, [sl], #4
 800a566:	f853 2b04 	ldr.w	r2, [r3], #4
 800a56a:	459c      	cmp	ip, r3
 800a56c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a570:	d8f3      	bhi.n	800a55a <__lshift+0x6e>
 800a572:	ebac 0304 	sub.w	r3, ip, r4
 800a576:	3b15      	subs	r3, #21
 800a578:	f023 0303 	bic.w	r3, r3, #3
 800a57c:	3304      	adds	r3, #4
 800a57e:	f104 0015 	add.w	r0, r4, #21
 800a582:	4584      	cmp	ip, r0
 800a584:	bf38      	it	cc
 800a586:	2304      	movcc	r3, #4
 800a588:	50ca      	str	r2, [r1, r3]
 800a58a:	b10a      	cbz	r2, 800a590 <__lshift+0xa4>
 800a58c:	f108 0602 	add.w	r6, r8, #2
 800a590:	3e01      	subs	r6, #1
 800a592:	4638      	mov	r0, r7
 800a594:	612e      	str	r6, [r5, #16]
 800a596:	4621      	mov	r1, r4
 800a598:	f7ff fdd8 	bl	800a14c <_Bfree>
 800a59c:	4628      	mov	r0, r5
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	e7c5      	b.n	800a536 <__lshift+0x4a>
 800a5aa:	3904      	subs	r1, #4
 800a5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5b4:	459c      	cmp	ip, r3
 800a5b6:	d8f9      	bhi.n	800a5ac <__lshift+0xc0>
 800a5b8:	e7ea      	b.n	800a590 <__lshift+0xa4>
 800a5ba:	bf00      	nop
 800a5bc:	0800b801 	.word	0x0800b801
 800a5c0:	0800b812 	.word	0x0800b812

0800a5c4 <__mcmp>:
 800a5c4:	b530      	push	{r4, r5, lr}
 800a5c6:	6902      	ldr	r2, [r0, #16]
 800a5c8:	690c      	ldr	r4, [r1, #16]
 800a5ca:	1b12      	subs	r2, r2, r4
 800a5cc:	d10e      	bne.n	800a5ec <__mcmp+0x28>
 800a5ce:	f100 0314 	add.w	r3, r0, #20
 800a5d2:	3114      	adds	r1, #20
 800a5d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5e4:	42a5      	cmp	r5, r4
 800a5e6:	d003      	beq.n	800a5f0 <__mcmp+0x2c>
 800a5e8:	d305      	bcc.n	800a5f6 <__mcmp+0x32>
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	bd30      	pop	{r4, r5, pc}
 800a5f0:	4283      	cmp	r3, r0
 800a5f2:	d3f3      	bcc.n	800a5dc <__mcmp+0x18>
 800a5f4:	e7fa      	b.n	800a5ec <__mcmp+0x28>
 800a5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5fa:	e7f7      	b.n	800a5ec <__mcmp+0x28>

0800a5fc <__mdiff>:
 800a5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	460c      	mov	r4, r1
 800a602:	4606      	mov	r6, r0
 800a604:	4611      	mov	r1, r2
 800a606:	4620      	mov	r0, r4
 800a608:	4690      	mov	r8, r2
 800a60a:	f7ff ffdb 	bl	800a5c4 <__mcmp>
 800a60e:	1e05      	subs	r5, r0, #0
 800a610:	d110      	bne.n	800a634 <__mdiff+0x38>
 800a612:	4629      	mov	r1, r5
 800a614:	4630      	mov	r0, r6
 800a616:	f7ff fd59 	bl	800a0cc <_Balloc>
 800a61a:	b930      	cbnz	r0, 800a62a <__mdiff+0x2e>
 800a61c:	4b3a      	ldr	r3, [pc, #232]	; (800a708 <__mdiff+0x10c>)
 800a61e:	4602      	mov	r2, r0
 800a620:	f240 2137 	movw	r1, #567	; 0x237
 800a624:	4839      	ldr	r0, [pc, #228]	; (800a70c <__mdiff+0x110>)
 800a626:	f000 fc25 	bl	800ae74 <__assert_func>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a634:	bfa4      	itt	ge
 800a636:	4643      	movge	r3, r8
 800a638:	46a0      	movge	r8, r4
 800a63a:	4630      	mov	r0, r6
 800a63c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a640:	bfa6      	itte	ge
 800a642:	461c      	movge	r4, r3
 800a644:	2500      	movge	r5, #0
 800a646:	2501      	movlt	r5, #1
 800a648:	f7ff fd40 	bl	800a0cc <_Balloc>
 800a64c:	b920      	cbnz	r0, 800a658 <__mdiff+0x5c>
 800a64e:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <__mdiff+0x10c>)
 800a650:	4602      	mov	r2, r0
 800a652:	f240 2145 	movw	r1, #581	; 0x245
 800a656:	e7e5      	b.n	800a624 <__mdiff+0x28>
 800a658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a65c:	6926      	ldr	r6, [r4, #16]
 800a65e:	60c5      	str	r5, [r0, #12]
 800a660:	f104 0914 	add.w	r9, r4, #20
 800a664:	f108 0514 	add.w	r5, r8, #20
 800a668:	f100 0e14 	add.w	lr, r0, #20
 800a66c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a674:	f108 0210 	add.w	r2, r8, #16
 800a678:	46f2      	mov	sl, lr
 800a67a:	2100      	movs	r1, #0
 800a67c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a684:	fa11 f88b 	uxtah	r8, r1, fp
 800a688:	b299      	uxth	r1, r3
 800a68a:	0c1b      	lsrs	r3, r3, #16
 800a68c:	eba8 0801 	sub.w	r8, r8, r1
 800a690:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a694:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a698:	fa1f f888 	uxth.w	r8, r8
 800a69c:	1419      	asrs	r1, r3, #16
 800a69e:	454e      	cmp	r6, r9
 800a6a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a6a8:	d8e8      	bhi.n	800a67c <__mdiff+0x80>
 800a6aa:	1b33      	subs	r3, r6, r4
 800a6ac:	3b15      	subs	r3, #21
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	3415      	adds	r4, #21
 800a6b6:	42a6      	cmp	r6, r4
 800a6b8:	bf38      	it	cc
 800a6ba:	2304      	movcc	r3, #4
 800a6bc:	441d      	add	r5, r3
 800a6be:	4473      	add	r3, lr
 800a6c0:	469e      	mov	lr, r3
 800a6c2:	462e      	mov	r6, r5
 800a6c4:	4566      	cmp	r6, ip
 800a6c6:	d30e      	bcc.n	800a6e6 <__mdiff+0xea>
 800a6c8:	f10c 0203 	add.w	r2, ip, #3
 800a6cc:	1b52      	subs	r2, r2, r5
 800a6ce:	f022 0203 	bic.w	r2, r2, #3
 800a6d2:	3d03      	subs	r5, #3
 800a6d4:	45ac      	cmp	ip, r5
 800a6d6:	bf38      	it	cc
 800a6d8:	2200      	movcc	r2, #0
 800a6da:	4413      	add	r3, r2
 800a6dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a6e0:	b17a      	cbz	r2, 800a702 <__mdiff+0x106>
 800a6e2:	6107      	str	r7, [r0, #16]
 800a6e4:	e7a4      	b.n	800a630 <__mdiff+0x34>
 800a6e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6ea:	fa11 f288 	uxtah	r2, r1, r8
 800a6ee:	1414      	asrs	r4, r2, #16
 800a6f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6f4:	b292      	uxth	r2, r2
 800a6f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a6fe:	1421      	asrs	r1, r4, #16
 800a700:	e7e0      	b.n	800a6c4 <__mdiff+0xc8>
 800a702:	3f01      	subs	r7, #1
 800a704:	e7ea      	b.n	800a6dc <__mdiff+0xe0>
 800a706:	bf00      	nop
 800a708:	0800b801 	.word	0x0800b801
 800a70c:	0800b812 	.word	0x0800b812

0800a710 <__d2b>:
 800a710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a714:	460f      	mov	r7, r1
 800a716:	2101      	movs	r1, #1
 800a718:	ec59 8b10 	vmov	r8, r9, d0
 800a71c:	4616      	mov	r6, r2
 800a71e:	f7ff fcd5 	bl	800a0cc <_Balloc>
 800a722:	4604      	mov	r4, r0
 800a724:	b930      	cbnz	r0, 800a734 <__d2b+0x24>
 800a726:	4602      	mov	r2, r0
 800a728:	4b24      	ldr	r3, [pc, #144]	; (800a7bc <__d2b+0xac>)
 800a72a:	4825      	ldr	r0, [pc, #148]	; (800a7c0 <__d2b+0xb0>)
 800a72c:	f240 310f 	movw	r1, #783	; 0x30f
 800a730:	f000 fba0 	bl	800ae74 <__assert_func>
 800a734:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a73c:	bb2d      	cbnz	r5, 800a78a <__d2b+0x7a>
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	f1b8 0300 	subs.w	r3, r8, #0
 800a744:	d026      	beq.n	800a794 <__d2b+0x84>
 800a746:	4668      	mov	r0, sp
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	f7ff fd87 	bl	800a25c <__lo0bits>
 800a74e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a752:	b1e8      	cbz	r0, 800a790 <__d2b+0x80>
 800a754:	f1c0 0320 	rsb	r3, r0, #32
 800a758:	fa02 f303 	lsl.w	r3, r2, r3
 800a75c:	430b      	orrs	r3, r1
 800a75e:	40c2      	lsrs	r2, r0
 800a760:	6163      	str	r3, [r4, #20]
 800a762:	9201      	str	r2, [sp, #4]
 800a764:	9b01      	ldr	r3, [sp, #4]
 800a766:	61a3      	str	r3, [r4, #24]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bf14      	ite	ne
 800a76c:	2202      	movne	r2, #2
 800a76e:	2201      	moveq	r2, #1
 800a770:	6122      	str	r2, [r4, #16]
 800a772:	b1bd      	cbz	r5, 800a7a4 <__d2b+0x94>
 800a774:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a778:	4405      	add	r5, r0
 800a77a:	603d      	str	r5, [r7, #0]
 800a77c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a780:	6030      	str	r0, [r6, #0]
 800a782:	4620      	mov	r0, r4
 800a784:	b003      	add	sp, #12
 800a786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a78a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a78e:	e7d6      	b.n	800a73e <__d2b+0x2e>
 800a790:	6161      	str	r1, [r4, #20]
 800a792:	e7e7      	b.n	800a764 <__d2b+0x54>
 800a794:	a801      	add	r0, sp, #4
 800a796:	f7ff fd61 	bl	800a25c <__lo0bits>
 800a79a:	9b01      	ldr	r3, [sp, #4]
 800a79c:	6163      	str	r3, [r4, #20]
 800a79e:	3020      	adds	r0, #32
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	e7e5      	b.n	800a770 <__d2b+0x60>
 800a7a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7ac:	6038      	str	r0, [r7, #0]
 800a7ae:	6918      	ldr	r0, [r3, #16]
 800a7b0:	f7ff fd34 	bl	800a21c <__hi0bits>
 800a7b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7b8:	e7e2      	b.n	800a780 <__d2b+0x70>
 800a7ba:	bf00      	nop
 800a7bc:	0800b801 	.word	0x0800b801
 800a7c0:	0800b812 	.word	0x0800b812

0800a7c4 <__ssputs_r>:
 800a7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c8:	688e      	ldr	r6, [r1, #8]
 800a7ca:	461f      	mov	r7, r3
 800a7cc:	42be      	cmp	r6, r7
 800a7ce:	680b      	ldr	r3, [r1, #0]
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	4690      	mov	r8, r2
 800a7d6:	d82c      	bhi.n	800a832 <__ssputs_r+0x6e>
 800a7d8:	898a      	ldrh	r2, [r1, #12]
 800a7da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7de:	d026      	beq.n	800a82e <__ssputs_r+0x6a>
 800a7e0:	6965      	ldr	r5, [r4, #20]
 800a7e2:	6909      	ldr	r1, [r1, #16]
 800a7e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7e8:	eba3 0901 	sub.w	r9, r3, r1
 800a7ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7f0:	1c7b      	adds	r3, r7, #1
 800a7f2:	444b      	add	r3, r9
 800a7f4:	106d      	asrs	r5, r5, #1
 800a7f6:	429d      	cmp	r5, r3
 800a7f8:	bf38      	it	cc
 800a7fa:	461d      	movcc	r5, r3
 800a7fc:	0553      	lsls	r3, r2, #21
 800a7fe:	d527      	bpl.n	800a850 <__ssputs_r+0x8c>
 800a800:	4629      	mov	r1, r5
 800a802:	f7ff fbd7 	bl	8009fb4 <_malloc_r>
 800a806:	4606      	mov	r6, r0
 800a808:	b360      	cbz	r0, 800a864 <__ssputs_r+0xa0>
 800a80a:	6921      	ldr	r1, [r4, #16]
 800a80c:	464a      	mov	r2, r9
 800a80e:	f000 fb23 	bl	800ae58 <memcpy>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	6126      	str	r6, [r4, #16]
 800a820:	6165      	str	r5, [r4, #20]
 800a822:	444e      	add	r6, r9
 800a824:	eba5 0509 	sub.w	r5, r5, r9
 800a828:	6026      	str	r6, [r4, #0]
 800a82a:	60a5      	str	r5, [r4, #8]
 800a82c:	463e      	mov	r6, r7
 800a82e:	42be      	cmp	r6, r7
 800a830:	d900      	bls.n	800a834 <__ssputs_r+0x70>
 800a832:	463e      	mov	r6, r7
 800a834:	6820      	ldr	r0, [r4, #0]
 800a836:	4632      	mov	r2, r6
 800a838:	4641      	mov	r1, r8
 800a83a:	f000 fac1 	bl	800adc0 <memmove>
 800a83e:	68a3      	ldr	r3, [r4, #8]
 800a840:	1b9b      	subs	r3, r3, r6
 800a842:	60a3      	str	r3, [r4, #8]
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	4433      	add	r3, r6
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	2000      	movs	r0, #0
 800a84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a850:	462a      	mov	r2, r5
 800a852:	f000 fb55 	bl	800af00 <_realloc_r>
 800a856:	4606      	mov	r6, r0
 800a858:	2800      	cmp	r0, #0
 800a85a:	d1e0      	bne.n	800a81e <__ssputs_r+0x5a>
 800a85c:	6921      	ldr	r1, [r4, #16]
 800a85e:	4650      	mov	r0, sl
 800a860:	f7ff fb34 	bl	8009ecc <_free_r>
 800a864:	230c      	movs	r3, #12
 800a866:	f8ca 3000 	str.w	r3, [sl]
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	f04f 30ff 	mov.w	r0, #4294967295
 800a876:	e7e9      	b.n	800a84c <__ssputs_r+0x88>

0800a878 <_svfiprintf_r>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	4698      	mov	r8, r3
 800a87e:	898b      	ldrh	r3, [r1, #12]
 800a880:	061b      	lsls	r3, r3, #24
 800a882:	b09d      	sub	sp, #116	; 0x74
 800a884:	4607      	mov	r7, r0
 800a886:	460d      	mov	r5, r1
 800a888:	4614      	mov	r4, r2
 800a88a:	d50e      	bpl.n	800a8aa <_svfiprintf_r+0x32>
 800a88c:	690b      	ldr	r3, [r1, #16]
 800a88e:	b963      	cbnz	r3, 800a8aa <_svfiprintf_r+0x32>
 800a890:	2140      	movs	r1, #64	; 0x40
 800a892:	f7ff fb8f 	bl	8009fb4 <_malloc_r>
 800a896:	6028      	str	r0, [r5, #0]
 800a898:	6128      	str	r0, [r5, #16]
 800a89a:	b920      	cbnz	r0, 800a8a6 <_svfiprintf_r+0x2e>
 800a89c:	230c      	movs	r3, #12
 800a89e:	603b      	str	r3, [r7, #0]
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	e0d0      	b.n	800aa48 <_svfiprintf_r+0x1d0>
 800a8a6:	2340      	movs	r3, #64	; 0x40
 800a8a8:	616b      	str	r3, [r5, #20]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ae:	2320      	movs	r3, #32
 800a8b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8b8:	2330      	movs	r3, #48	; 0x30
 800a8ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa60 <_svfiprintf_r+0x1e8>
 800a8be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8c2:	f04f 0901 	mov.w	r9, #1
 800a8c6:	4623      	mov	r3, r4
 800a8c8:	469a      	mov	sl, r3
 800a8ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ce:	b10a      	cbz	r2, 800a8d4 <_svfiprintf_r+0x5c>
 800a8d0:	2a25      	cmp	r2, #37	; 0x25
 800a8d2:	d1f9      	bne.n	800a8c8 <_svfiprintf_r+0x50>
 800a8d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8d8:	d00b      	beq.n	800a8f2 <_svfiprintf_r+0x7a>
 800a8da:	465b      	mov	r3, fp
 800a8dc:	4622      	mov	r2, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff ff6f 	bl	800a7c4 <__ssputs_r>
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f000 80a9 	beq.w	800aa3e <_svfiprintf_r+0x1c6>
 800a8ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ee:	445a      	add	r2, fp
 800a8f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 80a1 	beq.w	800aa3e <_svfiprintf_r+0x1c6>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a906:	f10a 0a01 	add.w	sl, sl, #1
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	9307      	str	r3, [sp, #28]
 800a90e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a912:	931a      	str	r3, [sp, #104]	; 0x68
 800a914:	4654      	mov	r4, sl
 800a916:	2205      	movs	r2, #5
 800a918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91c:	4850      	ldr	r0, [pc, #320]	; (800aa60 <_svfiprintf_r+0x1e8>)
 800a91e:	f7f5 fc67 	bl	80001f0 <memchr>
 800a922:	9a04      	ldr	r2, [sp, #16]
 800a924:	b9d8      	cbnz	r0, 800a95e <_svfiprintf_r+0xe6>
 800a926:	06d0      	lsls	r0, r2, #27
 800a928:	bf44      	itt	mi
 800a92a:	2320      	movmi	r3, #32
 800a92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a930:	0711      	lsls	r1, r2, #28
 800a932:	bf44      	itt	mi
 800a934:	232b      	movmi	r3, #43	; 0x2b
 800a936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a93a:	f89a 3000 	ldrb.w	r3, [sl]
 800a93e:	2b2a      	cmp	r3, #42	; 0x2a
 800a940:	d015      	beq.n	800a96e <_svfiprintf_r+0xf6>
 800a942:	9a07      	ldr	r2, [sp, #28]
 800a944:	4654      	mov	r4, sl
 800a946:	2000      	movs	r0, #0
 800a948:	f04f 0c0a 	mov.w	ip, #10
 800a94c:	4621      	mov	r1, r4
 800a94e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a952:	3b30      	subs	r3, #48	; 0x30
 800a954:	2b09      	cmp	r3, #9
 800a956:	d94d      	bls.n	800a9f4 <_svfiprintf_r+0x17c>
 800a958:	b1b0      	cbz	r0, 800a988 <_svfiprintf_r+0x110>
 800a95a:	9207      	str	r2, [sp, #28]
 800a95c:	e014      	b.n	800a988 <_svfiprintf_r+0x110>
 800a95e:	eba0 0308 	sub.w	r3, r0, r8
 800a962:	fa09 f303 	lsl.w	r3, r9, r3
 800a966:	4313      	orrs	r3, r2
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	46a2      	mov	sl, r4
 800a96c:	e7d2      	b.n	800a914 <_svfiprintf_r+0x9c>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	1d19      	adds	r1, r3, #4
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	9103      	str	r1, [sp, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	bfbb      	ittet	lt
 800a97a:	425b      	neglt	r3, r3
 800a97c:	f042 0202 	orrlt.w	r2, r2, #2
 800a980:	9307      	strge	r3, [sp, #28]
 800a982:	9307      	strlt	r3, [sp, #28]
 800a984:	bfb8      	it	lt
 800a986:	9204      	strlt	r2, [sp, #16]
 800a988:	7823      	ldrb	r3, [r4, #0]
 800a98a:	2b2e      	cmp	r3, #46	; 0x2e
 800a98c:	d10c      	bne.n	800a9a8 <_svfiprintf_r+0x130>
 800a98e:	7863      	ldrb	r3, [r4, #1]
 800a990:	2b2a      	cmp	r3, #42	; 0x2a
 800a992:	d134      	bne.n	800a9fe <_svfiprintf_r+0x186>
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	1d1a      	adds	r2, r3, #4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	9203      	str	r2, [sp, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bfb8      	it	lt
 800a9a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9a4:	3402      	adds	r4, #2
 800a9a6:	9305      	str	r3, [sp, #20]
 800a9a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa70 <_svfiprintf_r+0x1f8>
 800a9ac:	7821      	ldrb	r1, [r4, #0]
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	f7f5 fc1d 	bl	80001f0 <memchr>
 800a9b6:	b138      	cbz	r0, 800a9c8 <_svfiprintf_r+0x150>
 800a9b8:	9b04      	ldr	r3, [sp, #16]
 800a9ba:	eba0 000a 	sub.w	r0, r0, sl
 800a9be:	2240      	movs	r2, #64	; 0x40
 800a9c0:	4082      	lsls	r2, r0
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	3401      	adds	r4, #1
 800a9c6:	9304      	str	r3, [sp, #16]
 800a9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9cc:	4825      	ldr	r0, [pc, #148]	; (800aa64 <_svfiprintf_r+0x1ec>)
 800a9ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9d2:	2206      	movs	r2, #6
 800a9d4:	f7f5 fc0c 	bl	80001f0 <memchr>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d038      	beq.n	800aa4e <_svfiprintf_r+0x1d6>
 800a9dc:	4b22      	ldr	r3, [pc, #136]	; (800aa68 <_svfiprintf_r+0x1f0>)
 800a9de:	bb1b      	cbnz	r3, 800aa28 <_svfiprintf_r+0x1b0>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	3307      	adds	r3, #7
 800a9e4:	f023 0307 	bic.w	r3, r3, #7
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	9303      	str	r3, [sp, #12]
 800a9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ee:	4433      	add	r3, r6
 800a9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f2:	e768      	b.n	800a8c6 <_svfiprintf_r+0x4e>
 800a9f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	e7a6      	b.n	800a94c <_svfiprintf_r+0xd4>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	3401      	adds	r4, #1
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	4619      	mov	r1, r3
 800aa06:	f04f 0c0a 	mov.w	ip, #10
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa10:	3a30      	subs	r2, #48	; 0x30
 800aa12:	2a09      	cmp	r2, #9
 800aa14:	d903      	bls.n	800aa1e <_svfiprintf_r+0x1a6>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0c6      	beq.n	800a9a8 <_svfiprintf_r+0x130>
 800aa1a:	9105      	str	r1, [sp, #20]
 800aa1c:	e7c4      	b.n	800a9a8 <_svfiprintf_r+0x130>
 800aa1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa22:	4604      	mov	r4, r0
 800aa24:	2301      	movs	r3, #1
 800aa26:	e7f0      	b.n	800aa0a <_svfiprintf_r+0x192>
 800aa28:	ab03      	add	r3, sp, #12
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	462a      	mov	r2, r5
 800aa2e:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <_svfiprintf_r+0x1f4>)
 800aa30:	a904      	add	r1, sp, #16
 800aa32:	4638      	mov	r0, r7
 800aa34:	f7fd fbe0 	bl	80081f8 <_printf_float>
 800aa38:	1c42      	adds	r2, r0, #1
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	d1d6      	bne.n	800a9ec <_svfiprintf_r+0x174>
 800aa3e:	89ab      	ldrh	r3, [r5, #12]
 800aa40:	065b      	lsls	r3, r3, #25
 800aa42:	f53f af2d 	bmi.w	800a8a0 <_svfiprintf_r+0x28>
 800aa46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa48:	b01d      	add	sp, #116	; 0x74
 800aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4e:	ab03      	add	r3, sp, #12
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	462a      	mov	r2, r5
 800aa54:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <_svfiprintf_r+0x1f4>)
 800aa56:	a904      	add	r1, sp, #16
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f7fd fe71 	bl	8008740 <_printf_i>
 800aa5e:	e7eb      	b.n	800aa38 <_svfiprintf_r+0x1c0>
 800aa60:	0800b96c 	.word	0x0800b96c
 800aa64:	0800b976 	.word	0x0800b976
 800aa68:	080081f9 	.word	0x080081f9
 800aa6c:	0800a7c5 	.word	0x0800a7c5
 800aa70:	0800b972 	.word	0x0800b972

0800aa74 <__sfputc_r>:
 800aa74:	6893      	ldr	r3, [r2, #8]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	b410      	push	{r4}
 800aa7c:	6093      	str	r3, [r2, #8]
 800aa7e:	da08      	bge.n	800aa92 <__sfputc_r+0x1e>
 800aa80:	6994      	ldr	r4, [r2, #24]
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	db01      	blt.n	800aa8a <__sfputc_r+0x16>
 800aa86:	290a      	cmp	r1, #10
 800aa88:	d103      	bne.n	800aa92 <__sfputc_r+0x1e>
 800aa8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa8e:	f7fe ba7c 	b.w	8008f8a <__swbuf_r>
 800aa92:	6813      	ldr	r3, [r2, #0]
 800aa94:	1c58      	adds	r0, r3, #1
 800aa96:	6010      	str	r0, [r2, #0]
 800aa98:	7019      	strb	r1, [r3, #0]
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <__sfputs_r>:
 800aaa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	460f      	mov	r7, r1
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	18d5      	adds	r5, r2, r3
 800aaac:	42ac      	cmp	r4, r5
 800aaae:	d101      	bne.n	800aab4 <__sfputs_r+0x12>
 800aab0:	2000      	movs	r0, #0
 800aab2:	e007      	b.n	800aac4 <__sfputs_r+0x22>
 800aab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab8:	463a      	mov	r2, r7
 800aaba:	4630      	mov	r0, r6
 800aabc:	f7ff ffda 	bl	800aa74 <__sfputc_r>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d1f3      	bne.n	800aaac <__sfputs_r+0xa>
 800aac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aac8 <_vfiprintf_r>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	460d      	mov	r5, r1
 800aace:	b09d      	sub	sp, #116	; 0x74
 800aad0:	4614      	mov	r4, r2
 800aad2:	4698      	mov	r8, r3
 800aad4:	4606      	mov	r6, r0
 800aad6:	b118      	cbz	r0, 800aae0 <_vfiprintf_r+0x18>
 800aad8:	6a03      	ldr	r3, [r0, #32]
 800aada:	b90b      	cbnz	r3, 800aae0 <_vfiprintf_r+0x18>
 800aadc:	f7fe f8a0 	bl	8008c20 <__sinit>
 800aae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aae2:	07d9      	lsls	r1, r3, #31
 800aae4:	d405      	bmi.n	800aaf2 <_vfiprintf_r+0x2a>
 800aae6:	89ab      	ldrh	r3, [r5, #12]
 800aae8:	059a      	lsls	r2, r3, #22
 800aaea:	d402      	bmi.n	800aaf2 <_vfiprintf_r+0x2a>
 800aaec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaee:	f7fe fb70 	bl	80091d2 <__retarget_lock_acquire_recursive>
 800aaf2:	89ab      	ldrh	r3, [r5, #12]
 800aaf4:	071b      	lsls	r3, r3, #28
 800aaf6:	d501      	bpl.n	800aafc <_vfiprintf_r+0x34>
 800aaf8:	692b      	ldr	r3, [r5, #16]
 800aafa:	b99b      	cbnz	r3, 800ab24 <_vfiprintf_r+0x5c>
 800aafc:	4629      	mov	r1, r5
 800aafe:	4630      	mov	r0, r6
 800ab00:	f7fe fa80 	bl	8009004 <__swsetup_r>
 800ab04:	b170      	cbz	r0, 800ab24 <_vfiprintf_r+0x5c>
 800ab06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab08:	07dc      	lsls	r4, r3, #31
 800ab0a:	d504      	bpl.n	800ab16 <_vfiprintf_r+0x4e>
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	b01d      	add	sp, #116	; 0x74
 800ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab16:	89ab      	ldrh	r3, [r5, #12]
 800ab18:	0598      	lsls	r0, r3, #22
 800ab1a:	d4f7      	bmi.n	800ab0c <_vfiprintf_r+0x44>
 800ab1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab1e:	f7fe fb59 	bl	80091d4 <__retarget_lock_release_recursive>
 800ab22:	e7f3      	b.n	800ab0c <_vfiprintf_r+0x44>
 800ab24:	2300      	movs	r3, #0
 800ab26:	9309      	str	r3, [sp, #36]	; 0x24
 800ab28:	2320      	movs	r3, #32
 800ab2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab32:	2330      	movs	r3, #48	; 0x30
 800ab34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ace8 <_vfiprintf_r+0x220>
 800ab38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab3c:	f04f 0901 	mov.w	r9, #1
 800ab40:	4623      	mov	r3, r4
 800ab42:	469a      	mov	sl, r3
 800ab44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab48:	b10a      	cbz	r2, 800ab4e <_vfiprintf_r+0x86>
 800ab4a:	2a25      	cmp	r2, #37	; 0x25
 800ab4c:	d1f9      	bne.n	800ab42 <_vfiprintf_r+0x7a>
 800ab4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ab52:	d00b      	beq.n	800ab6c <_vfiprintf_r+0xa4>
 800ab54:	465b      	mov	r3, fp
 800ab56:	4622      	mov	r2, r4
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7ff ffa1 	bl	800aaa2 <__sfputs_r>
 800ab60:	3001      	adds	r0, #1
 800ab62:	f000 80a9 	beq.w	800acb8 <_vfiprintf_r+0x1f0>
 800ab66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab68:	445a      	add	r2, fp
 800ab6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 80a1 	beq.w	800acb8 <_vfiprintf_r+0x1f0>
 800ab76:	2300      	movs	r3, #0
 800ab78:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab80:	f10a 0a01 	add.w	sl, sl, #1
 800ab84:	9304      	str	r3, [sp, #16]
 800ab86:	9307      	str	r3, [sp, #28]
 800ab88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ab8e:	4654      	mov	r4, sl
 800ab90:	2205      	movs	r2, #5
 800ab92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab96:	4854      	ldr	r0, [pc, #336]	; (800ace8 <_vfiprintf_r+0x220>)
 800ab98:	f7f5 fb2a 	bl	80001f0 <memchr>
 800ab9c:	9a04      	ldr	r2, [sp, #16]
 800ab9e:	b9d8      	cbnz	r0, 800abd8 <_vfiprintf_r+0x110>
 800aba0:	06d1      	lsls	r1, r2, #27
 800aba2:	bf44      	itt	mi
 800aba4:	2320      	movmi	r3, #32
 800aba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abaa:	0713      	lsls	r3, r2, #28
 800abac:	bf44      	itt	mi
 800abae:	232b      	movmi	r3, #43	; 0x2b
 800abb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abb4:	f89a 3000 	ldrb.w	r3, [sl]
 800abb8:	2b2a      	cmp	r3, #42	; 0x2a
 800abba:	d015      	beq.n	800abe8 <_vfiprintf_r+0x120>
 800abbc:	9a07      	ldr	r2, [sp, #28]
 800abbe:	4654      	mov	r4, sl
 800abc0:	2000      	movs	r0, #0
 800abc2:	f04f 0c0a 	mov.w	ip, #10
 800abc6:	4621      	mov	r1, r4
 800abc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abcc:	3b30      	subs	r3, #48	; 0x30
 800abce:	2b09      	cmp	r3, #9
 800abd0:	d94d      	bls.n	800ac6e <_vfiprintf_r+0x1a6>
 800abd2:	b1b0      	cbz	r0, 800ac02 <_vfiprintf_r+0x13a>
 800abd4:	9207      	str	r2, [sp, #28]
 800abd6:	e014      	b.n	800ac02 <_vfiprintf_r+0x13a>
 800abd8:	eba0 0308 	sub.w	r3, r0, r8
 800abdc:	fa09 f303 	lsl.w	r3, r9, r3
 800abe0:	4313      	orrs	r3, r2
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	46a2      	mov	sl, r4
 800abe6:	e7d2      	b.n	800ab8e <_vfiprintf_r+0xc6>
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	1d19      	adds	r1, r3, #4
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	9103      	str	r1, [sp, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bfbb      	ittet	lt
 800abf4:	425b      	neglt	r3, r3
 800abf6:	f042 0202 	orrlt.w	r2, r2, #2
 800abfa:	9307      	strge	r3, [sp, #28]
 800abfc:	9307      	strlt	r3, [sp, #28]
 800abfe:	bfb8      	it	lt
 800ac00:	9204      	strlt	r2, [sp, #16]
 800ac02:	7823      	ldrb	r3, [r4, #0]
 800ac04:	2b2e      	cmp	r3, #46	; 0x2e
 800ac06:	d10c      	bne.n	800ac22 <_vfiprintf_r+0x15a>
 800ac08:	7863      	ldrb	r3, [r4, #1]
 800ac0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac0c:	d134      	bne.n	800ac78 <_vfiprintf_r+0x1b0>
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	1d1a      	adds	r2, r3, #4
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	9203      	str	r2, [sp, #12]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	bfb8      	it	lt
 800ac1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac1e:	3402      	adds	r4, #2
 800ac20:	9305      	str	r3, [sp, #20]
 800ac22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800acf8 <_vfiprintf_r+0x230>
 800ac26:	7821      	ldrb	r1, [r4, #0]
 800ac28:	2203      	movs	r2, #3
 800ac2a:	4650      	mov	r0, sl
 800ac2c:	f7f5 fae0 	bl	80001f0 <memchr>
 800ac30:	b138      	cbz	r0, 800ac42 <_vfiprintf_r+0x17a>
 800ac32:	9b04      	ldr	r3, [sp, #16]
 800ac34:	eba0 000a 	sub.w	r0, r0, sl
 800ac38:	2240      	movs	r2, #64	; 0x40
 800ac3a:	4082      	lsls	r2, r0
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	3401      	adds	r4, #1
 800ac40:	9304      	str	r3, [sp, #16]
 800ac42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac46:	4829      	ldr	r0, [pc, #164]	; (800acec <_vfiprintf_r+0x224>)
 800ac48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac4c:	2206      	movs	r2, #6
 800ac4e:	f7f5 facf 	bl	80001f0 <memchr>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d03f      	beq.n	800acd6 <_vfiprintf_r+0x20e>
 800ac56:	4b26      	ldr	r3, [pc, #152]	; (800acf0 <_vfiprintf_r+0x228>)
 800ac58:	bb1b      	cbnz	r3, 800aca2 <_vfiprintf_r+0x1da>
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	3307      	adds	r3, #7
 800ac5e:	f023 0307 	bic.w	r3, r3, #7
 800ac62:	3308      	adds	r3, #8
 800ac64:	9303      	str	r3, [sp, #12]
 800ac66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac68:	443b      	add	r3, r7
 800ac6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac6c:	e768      	b.n	800ab40 <_vfiprintf_r+0x78>
 800ac6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac72:	460c      	mov	r4, r1
 800ac74:	2001      	movs	r0, #1
 800ac76:	e7a6      	b.n	800abc6 <_vfiprintf_r+0xfe>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	3401      	adds	r4, #1
 800ac7c:	9305      	str	r3, [sp, #20]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	f04f 0c0a 	mov.w	ip, #10
 800ac84:	4620      	mov	r0, r4
 800ac86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac8a:	3a30      	subs	r2, #48	; 0x30
 800ac8c:	2a09      	cmp	r2, #9
 800ac8e:	d903      	bls.n	800ac98 <_vfiprintf_r+0x1d0>
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0c6      	beq.n	800ac22 <_vfiprintf_r+0x15a>
 800ac94:	9105      	str	r1, [sp, #20]
 800ac96:	e7c4      	b.n	800ac22 <_vfiprintf_r+0x15a>
 800ac98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e7f0      	b.n	800ac84 <_vfiprintf_r+0x1bc>
 800aca2:	ab03      	add	r3, sp, #12
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	462a      	mov	r2, r5
 800aca8:	4b12      	ldr	r3, [pc, #72]	; (800acf4 <_vfiprintf_r+0x22c>)
 800acaa:	a904      	add	r1, sp, #16
 800acac:	4630      	mov	r0, r6
 800acae:	f7fd faa3 	bl	80081f8 <_printf_float>
 800acb2:	4607      	mov	r7, r0
 800acb4:	1c78      	adds	r0, r7, #1
 800acb6:	d1d6      	bne.n	800ac66 <_vfiprintf_r+0x19e>
 800acb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acba:	07d9      	lsls	r1, r3, #31
 800acbc:	d405      	bmi.n	800acca <_vfiprintf_r+0x202>
 800acbe:	89ab      	ldrh	r3, [r5, #12]
 800acc0:	059a      	lsls	r2, r3, #22
 800acc2:	d402      	bmi.n	800acca <_vfiprintf_r+0x202>
 800acc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acc6:	f7fe fa85 	bl	80091d4 <__retarget_lock_release_recursive>
 800acca:	89ab      	ldrh	r3, [r5, #12]
 800accc:	065b      	lsls	r3, r3, #25
 800acce:	f53f af1d 	bmi.w	800ab0c <_vfiprintf_r+0x44>
 800acd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acd4:	e71c      	b.n	800ab10 <_vfiprintf_r+0x48>
 800acd6:	ab03      	add	r3, sp, #12
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	462a      	mov	r2, r5
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <_vfiprintf_r+0x22c>)
 800acde:	a904      	add	r1, sp, #16
 800ace0:	4630      	mov	r0, r6
 800ace2:	f7fd fd2d 	bl	8008740 <_printf_i>
 800ace6:	e7e4      	b.n	800acb2 <_vfiprintf_r+0x1ea>
 800ace8:	0800b96c 	.word	0x0800b96c
 800acec:	0800b976 	.word	0x0800b976
 800acf0:	080081f9 	.word	0x080081f9
 800acf4:	0800aaa3 	.word	0x0800aaa3
 800acf8:	0800b972 	.word	0x0800b972

0800acfc <__swhatbuf_r>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	460c      	mov	r4, r1
 800ad00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad04:	2900      	cmp	r1, #0
 800ad06:	b096      	sub	sp, #88	; 0x58
 800ad08:	4615      	mov	r5, r2
 800ad0a:	461e      	mov	r6, r3
 800ad0c:	da0d      	bge.n	800ad2a <__swhatbuf_r+0x2e>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad14:	f04f 0100 	mov.w	r1, #0
 800ad18:	bf0c      	ite	eq
 800ad1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad1e:	2340      	movne	r3, #64	; 0x40
 800ad20:	2000      	movs	r0, #0
 800ad22:	6031      	str	r1, [r6, #0]
 800ad24:	602b      	str	r3, [r5, #0]
 800ad26:	b016      	add	sp, #88	; 0x58
 800ad28:	bd70      	pop	{r4, r5, r6, pc}
 800ad2a:	466a      	mov	r2, sp
 800ad2c:	f000 f862 	bl	800adf4 <_fstat_r>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	dbec      	blt.n	800ad0e <__swhatbuf_r+0x12>
 800ad34:	9901      	ldr	r1, [sp, #4]
 800ad36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad3e:	4259      	negs	r1, r3
 800ad40:	4159      	adcs	r1, r3
 800ad42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad46:	e7eb      	b.n	800ad20 <__swhatbuf_r+0x24>

0800ad48 <__smakebuf_r>:
 800ad48:	898b      	ldrh	r3, [r1, #12]
 800ad4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad4c:	079d      	lsls	r5, r3, #30
 800ad4e:	4606      	mov	r6, r0
 800ad50:	460c      	mov	r4, r1
 800ad52:	d507      	bpl.n	800ad64 <__smakebuf_r+0x1c>
 800ad54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	6123      	str	r3, [r4, #16]
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	6163      	str	r3, [r4, #20]
 800ad60:	b002      	add	sp, #8
 800ad62:	bd70      	pop	{r4, r5, r6, pc}
 800ad64:	ab01      	add	r3, sp, #4
 800ad66:	466a      	mov	r2, sp
 800ad68:	f7ff ffc8 	bl	800acfc <__swhatbuf_r>
 800ad6c:	9900      	ldr	r1, [sp, #0]
 800ad6e:	4605      	mov	r5, r0
 800ad70:	4630      	mov	r0, r6
 800ad72:	f7ff f91f 	bl	8009fb4 <_malloc_r>
 800ad76:	b948      	cbnz	r0, 800ad8c <__smakebuf_r+0x44>
 800ad78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad7c:	059a      	lsls	r2, r3, #22
 800ad7e:	d4ef      	bmi.n	800ad60 <__smakebuf_r+0x18>
 800ad80:	f023 0303 	bic.w	r3, r3, #3
 800ad84:	f043 0302 	orr.w	r3, r3, #2
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	e7e3      	b.n	800ad54 <__smakebuf_r+0xc>
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	6020      	str	r0, [r4, #0]
 800ad90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad94:	81a3      	strh	r3, [r4, #12]
 800ad96:	9b00      	ldr	r3, [sp, #0]
 800ad98:	6163      	str	r3, [r4, #20]
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	6120      	str	r0, [r4, #16]
 800ad9e:	b15b      	cbz	r3, 800adb8 <__smakebuf_r+0x70>
 800ada0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada4:	4630      	mov	r0, r6
 800ada6:	f000 f837 	bl	800ae18 <_isatty_r>
 800adaa:	b128      	cbz	r0, 800adb8 <__smakebuf_r+0x70>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	f023 0303 	bic.w	r3, r3, #3
 800adb2:	f043 0301 	orr.w	r3, r3, #1
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	431d      	orrs	r5, r3
 800adbc:	81a5      	strh	r5, [r4, #12]
 800adbe:	e7cf      	b.n	800ad60 <__smakebuf_r+0x18>

0800adc0 <memmove>:
 800adc0:	4288      	cmp	r0, r1
 800adc2:	b510      	push	{r4, lr}
 800adc4:	eb01 0402 	add.w	r4, r1, r2
 800adc8:	d902      	bls.n	800add0 <memmove+0x10>
 800adca:	4284      	cmp	r4, r0
 800adcc:	4623      	mov	r3, r4
 800adce:	d807      	bhi.n	800ade0 <memmove+0x20>
 800add0:	1e43      	subs	r3, r0, #1
 800add2:	42a1      	cmp	r1, r4
 800add4:	d008      	beq.n	800ade8 <memmove+0x28>
 800add6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adde:	e7f8      	b.n	800add2 <memmove+0x12>
 800ade0:	4402      	add	r2, r0
 800ade2:	4601      	mov	r1, r0
 800ade4:	428a      	cmp	r2, r1
 800ade6:	d100      	bne.n	800adea <memmove+0x2a>
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adf2:	e7f7      	b.n	800ade4 <memmove+0x24>

0800adf4 <_fstat_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d07      	ldr	r5, [pc, #28]	; (800ae14 <_fstat_r+0x20>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	4611      	mov	r1, r2
 800ae00:	602b      	str	r3, [r5, #0]
 800ae02:	f7f7 fa34 	bl	800226e <_fstat>
 800ae06:	1c43      	adds	r3, r0, #1
 800ae08:	d102      	bne.n	800ae10 <_fstat_r+0x1c>
 800ae0a:	682b      	ldr	r3, [r5, #0]
 800ae0c:	b103      	cbz	r3, 800ae10 <_fstat_r+0x1c>
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	bd38      	pop	{r3, r4, r5, pc}
 800ae12:	bf00      	nop
 800ae14:	20000d60 	.word	0x20000d60

0800ae18 <_isatty_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4d06      	ldr	r5, [pc, #24]	; (800ae34 <_isatty_r+0x1c>)
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4604      	mov	r4, r0
 800ae20:	4608      	mov	r0, r1
 800ae22:	602b      	str	r3, [r5, #0]
 800ae24:	f7f7 fa33 	bl	800228e <_isatty>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d102      	bne.n	800ae32 <_isatty_r+0x1a>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	b103      	cbz	r3, 800ae32 <_isatty_r+0x1a>
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	20000d60 	.word	0x20000d60

0800ae38 <_sbrk_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d06      	ldr	r5, [pc, #24]	; (800ae54 <_sbrk_r+0x1c>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	602b      	str	r3, [r5, #0]
 800ae44:	f7f7 fa3c 	bl	80022c0 <_sbrk>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_sbrk_r+0x1a>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_sbrk_r+0x1a>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20000d60 	.word	0x20000d60

0800ae58 <memcpy>:
 800ae58:	440a      	add	r2, r1
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae60:	d100      	bne.n	800ae64 <memcpy+0xc>
 800ae62:	4770      	bx	lr
 800ae64:	b510      	push	{r4, lr}
 800ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6e:	4291      	cmp	r1, r2
 800ae70:	d1f9      	bne.n	800ae66 <memcpy+0xe>
 800ae72:	bd10      	pop	{r4, pc}

0800ae74 <__assert_func>:
 800ae74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae76:	4614      	mov	r4, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <__assert_func+0x2c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4605      	mov	r5, r0
 800ae80:	68d8      	ldr	r0, [r3, #12]
 800ae82:	b14c      	cbz	r4, 800ae98 <__assert_func+0x24>
 800ae84:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <__assert_func+0x30>)
 800ae86:	9100      	str	r1, [sp, #0]
 800ae88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae8c:	4906      	ldr	r1, [pc, #24]	; (800aea8 <__assert_func+0x34>)
 800ae8e:	462b      	mov	r3, r5
 800ae90:	f000 f872 	bl	800af78 <fiprintf>
 800ae94:	f000 f882 	bl	800af9c <abort>
 800ae98:	4b04      	ldr	r3, [pc, #16]	; (800aeac <__assert_func+0x38>)
 800ae9a:	461c      	mov	r4, r3
 800ae9c:	e7f3      	b.n	800ae86 <__assert_func+0x12>
 800ae9e:	bf00      	nop
 800aea0:	200007c4 	.word	0x200007c4
 800aea4:	0800b987 	.word	0x0800b987
 800aea8:	0800b994 	.word	0x0800b994
 800aeac:	0800b9c2 	.word	0x0800b9c2

0800aeb0 <_calloc_r>:
 800aeb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeb2:	fba1 2402 	umull	r2, r4, r1, r2
 800aeb6:	b94c      	cbnz	r4, 800aecc <_calloc_r+0x1c>
 800aeb8:	4611      	mov	r1, r2
 800aeba:	9201      	str	r2, [sp, #4]
 800aebc:	f7ff f87a 	bl	8009fb4 <_malloc_r>
 800aec0:	9a01      	ldr	r2, [sp, #4]
 800aec2:	4605      	mov	r5, r0
 800aec4:	b930      	cbnz	r0, 800aed4 <_calloc_r+0x24>
 800aec6:	4628      	mov	r0, r5
 800aec8:	b003      	add	sp, #12
 800aeca:	bd30      	pop	{r4, r5, pc}
 800aecc:	220c      	movs	r2, #12
 800aece:	6002      	str	r2, [r0, #0]
 800aed0:	2500      	movs	r5, #0
 800aed2:	e7f8      	b.n	800aec6 <_calloc_r+0x16>
 800aed4:	4621      	mov	r1, r4
 800aed6:	f7fe f8ed 	bl	80090b4 <memset>
 800aeda:	e7f4      	b.n	800aec6 <_calloc_r+0x16>

0800aedc <__ascii_mbtowc>:
 800aedc:	b082      	sub	sp, #8
 800aede:	b901      	cbnz	r1, 800aee2 <__ascii_mbtowc+0x6>
 800aee0:	a901      	add	r1, sp, #4
 800aee2:	b142      	cbz	r2, 800aef6 <__ascii_mbtowc+0x1a>
 800aee4:	b14b      	cbz	r3, 800aefa <__ascii_mbtowc+0x1e>
 800aee6:	7813      	ldrb	r3, [r2, #0]
 800aee8:	600b      	str	r3, [r1, #0]
 800aeea:	7812      	ldrb	r2, [r2, #0]
 800aeec:	1e10      	subs	r0, r2, #0
 800aeee:	bf18      	it	ne
 800aef0:	2001      	movne	r0, #1
 800aef2:	b002      	add	sp, #8
 800aef4:	4770      	bx	lr
 800aef6:	4610      	mov	r0, r2
 800aef8:	e7fb      	b.n	800aef2 <__ascii_mbtowc+0x16>
 800aefa:	f06f 0001 	mvn.w	r0, #1
 800aefe:	e7f8      	b.n	800aef2 <__ascii_mbtowc+0x16>

0800af00 <_realloc_r>:
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	4680      	mov	r8, r0
 800af06:	4614      	mov	r4, r2
 800af08:	460e      	mov	r6, r1
 800af0a:	b921      	cbnz	r1, 800af16 <_realloc_r+0x16>
 800af0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af10:	4611      	mov	r1, r2
 800af12:	f7ff b84f 	b.w	8009fb4 <_malloc_r>
 800af16:	b92a      	cbnz	r2, 800af24 <_realloc_r+0x24>
 800af18:	f7fe ffd8 	bl	8009ecc <_free_r>
 800af1c:	4625      	mov	r5, r4
 800af1e:	4628      	mov	r0, r5
 800af20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af24:	f000 f841 	bl	800afaa <_malloc_usable_size_r>
 800af28:	4284      	cmp	r4, r0
 800af2a:	4607      	mov	r7, r0
 800af2c:	d802      	bhi.n	800af34 <_realloc_r+0x34>
 800af2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af32:	d812      	bhi.n	800af5a <_realloc_r+0x5a>
 800af34:	4621      	mov	r1, r4
 800af36:	4640      	mov	r0, r8
 800af38:	f7ff f83c 	bl	8009fb4 <_malloc_r>
 800af3c:	4605      	mov	r5, r0
 800af3e:	2800      	cmp	r0, #0
 800af40:	d0ed      	beq.n	800af1e <_realloc_r+0x1e>
 800af42:	42bc      	cmp	r4, r7
 800af44:	4622      	mov	r2, r4
 800af46:	4631      	mov	r1, r6
 800af48:	bf28      	it	cs
 800af4a:	463a      	movcs	r2, r7
 800af4c:	f7ff ff84 	bl	800ae58 <memcpy>
 800af50:	4631      	mov	r1, r6
 800af52:	4640      	mov	r0, r8
 800af54:	f7fe ffba 	bl	8009ecc <_free_r>
 800af58:	e7e1      	b.n	800af1e <_realloc_r+0x1e>
 800af5a:	4635      	mov	r5, r6
 800af5c:	e7df      	b.n	800af1e <_realloc_r+0x1e>

0800af5e <__ascii_wctomb>:
 800af5e:	b149      	cbz	r1, 800af74 <__ascii_wctomb+0x16>
 800af60:	2aff      	cmp	r2, #255	; 0xff
 800af62:	bf85      	ittet	hi
 800af64:	238a      	movhi	r3, #138	; 0x8a
 800af66:	6003      	strhi	r3, [r0, #0]
 800af68:	700a      	strbls	r2, [r1, #0]
 800af6a:	f04f 30ff 	movhi.w	r0, #4294967295
 800af6e:	bf98      	it	ls
 800af70:	2001      	movls	r0, #1
 800af72:	4770      	bx	lr
 800af74:	4608      	mov	r0, r1
 800af76:	4770      	bx	lr

0800af78 <fiprintf>:
 800af78:	b40e      	push	{r1, r2, r3}
 800af7a:	b503      	push	{r0, r1, lr}
 800af7c:	4601      	mov	r1, r0
 800af7e:	ab03      	add	r3, sp, #12
 800af80:	4805      	ldr	r0, [pc, #20]	; (800af98 <fiprintf+0x20>)
 800af82:	f853 2b04 	ldr.w	r2, [r3], #4
 800af86:	6800      	ldr	r0, [r0, #0]
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	f7ff fd9d 	bl	800aac8 <_vfiprintf_r>
 800af8e:	b002      	add	sp, #8
 800af90:	f85d eb04 	ldr.w	lr, [sp], #4
 800af94:	b003      	add	sp, #12
 800af96:	4770      	bx	lr
 800af98:	200007c4 	.word	0x200007c4

0800af9c <abort>:
 800af9c:	b508      	push	{r3, lr}
 800af9e:	2006      	movs	r0, #6
 800afa0:	f000 f834 	bl	800b00c <raise>
 800afa4:	2001      	movs	r0, #1
 800afa6:	f7f7 f92f 	bl	8002208 <_exit>

0800afaa <_malloc_usable_size_r>:
 800afaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afae:	1f18      	subs	r0, r3, #4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bfbc      	itt	lt
 800afb4:	580b      	ldrlt	r3, [r1, r0]
 800afb6:	18c0      	addlt	r0, r0, r3
 800afb8:	4770      	bx	lr

0800afba <_raise_r>:
 800afba:	291f      	cmp	r1, #31
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	4604      	mov	r4, r0
 800afc0:	460d      	mov	r5, r1
 800afc2:	d904      	bls.n	800afce <_raise_r+0x14>
 800afc4:	2316      	movs	r3, #22
 800afc6:	6003      	str	r3, [r0, #0]
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
 800afce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800afd0:	b112      	cbz	r2, 800afd8 <_raise_r+0x1e>
 800afd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afd6:	b94b      	cbnz	r3, 800afec <_raise_r+0x32>
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 f831 	bl	800b040 <_getpid_r>
 800afde:	462a      	mov	r2, r5
 800afe0:	4601      	mov	r1, r0
 800afe2:	4620      	mov	r0, r4
 800afe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afe8:	f000 b818 	b.w	800b01c <_kill_r>
 800afec:	2b01      	cmp	r3, #1
 800afee:	d00a      	beq.n	800b006 <_raise_r+0x4c>
 800aff0:	1c59      	adds	r1, r3, #1
 800aff2:	d103      	bne.n	800affc <_raise_r+0x42>
 800aff4:	2316      	movs	r3, #22
 800aff6:	6003      	str	r3, [r0, #0]
 800aff8:	2001      	movs	r0, #1
 800affa:	e7e7      	b.n	800afcc <_raise_r+0x12>
 800affc:	2400      	movs	r4, #0
 800affe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b002:	4628      	mov	r0, r5
 800b004:	4798      	blx	r3
 800b006:	2000      	movs	r0, #0
 800b008:	e7e0      	b.n	800afcc <_raise_r+0x12>
	...

0800b00c <raise>:
 800b00c:	4b02      	ldr	r3, [pc, #8]	; (800b018 <raise+0xc>)
 800b00e:	4601      	mov	r1, r0
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	f7ff bfd2 	b.w	800afba <_raise_r>
 800b016:	bf00      	nop
 800b018:	200007c4 	.word	0x200007c4

0800b01c <_kill_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d07      	ldr	r5, [pc, #28]	; (800b03c <_kill_r+0x20>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	4611      	mov	r1, r2
 800b028:	602b      	str	r3, [r5, #0]
 800b02a:	f7f7 f8dd 	bl	80021e8 <_kill>
 800b02e:	1c43      	adds	r3, r0, #1
 800b030:	d102      	bne.n	800b038 <_kill_r+0x1c>
 800b032:	682b      	ldr	r3, [r5, #0]
 800b034:	b103      	cbz	r3, 800b038 <_kill_r+0x1c>
 800b036:	6023      	str	r3, [r4, #0]
 800b038:	bd38      	pop	{r3, r4, r5, pc}
 800b03a:	bf00      	nop
 800b03c:	20000d60 	.word	0x20000d60

0800b040 <_getpid_r>:
 800b040:	f7f7 b8ca 	b.w	80021d8 <_getpid>

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
