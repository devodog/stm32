
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b234  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  0800b3c8  0800b3c8  0001b3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdb4  0800bdb4  00020934  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdb4  0800bdb4  00020934  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdb4  0800bdb4  00020934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdb4  0800bdb4  0001bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdb8  0800bdb8  0001bdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000934  20000000  0800bdbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000934  0800c6f0  00020934  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  0800c6f0  00020d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020934  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020964  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018873  00000000  00000000  000209a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000365f  00000000  00000000  0003921a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  0003c880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001015  00000000  00000000  0003dd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0f5  00000000  00000000  0003ed25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3d3  00000000  00000000  0005de1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1e4a  00000000  00000000  000791ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006984  00000000  00000000  0012b038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001319bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000934 	.word	0x20000934
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3ac 	.word	0x0800b3ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000938 	.word	0x20000938
 80001cc:	0800b3ac 	.word	0x0800b3ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};
///////////////////////////////////////////////////
// Define cmd-line Command support functions below.
void LED(char* paramStr, int* paramValues) {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4939      	ldr	r1, [pc, #228]	; (8000cbc <LED+0xf4>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f008 fc28 	bl	800942c <strncmp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d111      	bne.n	8000c06 <LED+0x3e>
		printf("\r\nLED ON");
 8000be2:	4837      	ldr	r0, [pc, #220]	; (8000cc0 <LED+0xf8>)
 8000be4:	f008 fa06 	bl	8008ff4 <iprintf>
		paramValues[0] = 1;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
      led2 = ON;
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <LED+0xfc>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 8000c04:	e055      	b.n	8000cb2 <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 8000c06:	2203      	movs	r2, #3
 8000c08:	492f      	ldr	r1, [pc, #188]	; (8000cc8 <LED+0x100>)
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f008 fc0e 	bl	800942c <strncmp>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d111      	bne.n	8000c3a <LED+0x72>
		printf("\r\nLED OFF");
 8000c16:	482d      	ldr	r0, [pc, #180]	; (8000ccc <LED+0x104>)
 8000c18:	f008 f9ec 	bl	8008ff4 <iprintf>
		paramValues[0] = 0;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <LED+0xfc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
}
 8000c38:	e03b      	b.n	8000cb2 <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	4924      	ldr	r1, [pc, #144]	; (8000cd0 <LED+0x108>)
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f008 fbf4 	bl	800942c <strncmp>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d130      	bne.n	8000cac <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3306      	adds	r3, #6
 8000c4e:	4921      	ldr	r1, [pc, #132]	; (8000cd4 <LED+0x10c>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fabd 	bl	80001d0 <strcmp>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01c      	beq.n	8000c96 <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	1d9a      	adds	r2, r3, #6
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f103 0408 	add.w	r4, r3, #8
 8000c66:	4610      	mov	r0, r2
 8000c68:	f007 fb4a 	bl	8008300 <atoi>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3306      	adds	r3, #6
 8000c74:	4618      	mov	r0, r3
 8000c76:	f007 fb43 	bl	8008300 <atoi>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <LED+0x110>)
 8000c7e:	6013      	str	r3, [r2, #0]
         paramValues[0] = 0;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
         paramValues[1] = 0;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
         led2 = BLINKING;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <LED+0xfc>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e003      	b.n	8000c9e <LED+0xd6>
			paramValues[2] = 0;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3308      	adds	r3, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <LED+0x110>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LED+0x114>)
 8000ca6:	f008 f9a5 	bl	8008ff4 <iprintf>
}
 8000caa:	e002      	b.n	8000cb2 <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LED+0x118>)
 8000cae:	f008 f9a1 	bl	8008ff4 <iprintf>
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800b3c8 	.word	0x0800b3c8
 8000cc0:	0800b3cc 	.word	0x0800b3cc
 8000cc4:	20000c44 	.word	0x20000c44
 8000cc8:	0800b3d8 	.word	0x0800b3d8
 8000ccc:	0800b3dc 	.word	0x0800b3dc
 8000cd0:	0800b3e8 	.word	0x0800b3e8
 8000cd4:	0800b3f0 	.word	0x0800b3f0
 8000cd8:	2000097c 	.word	0x2000097c
 8000cdc:	0800b3f4 	.word	0x0800b3f4
 8000ce0:	0800b404 	.word	0x0800b404

08000ce4 <ADC>:

void ADC(char* paramStr, int* paramValues){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "RO", 2) == 0) {
 8000cee:	2202      	movs	r2, #2
 8000cf0:	491c      	ldr	r1, [pc, #112]	; (8000d64 <ADC+0x80>)
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f008 fb9a 	bl	800942c <strncmp>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d11b      	bne.n	8000d36 <ADC+0x52>
      printf("\r\nADC READ ONCE");
 8000cfe:	481a      	ldr	r0, [pc, #104]	; (8000d68 <ADC+0x84>)
 8000d00:	f008 f978 	bl	8008ff4 <iprintf>
      // Start ADC Conversion
      HAL_ADC_Start(&hadc1);
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <ADC+0x88>)
 8000d06:	f001 ff11 	bl	8002b2c <HAL_ADC_Start>
      HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4817      	ldr	r0, [pc, #92]	; (8000d6c <ADC+0x88>)
 8000d0e:	f002 f846 	bl	8002d9e <HAL_ADCEx_Calibration_Start>

      // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	4815      	ldr	r0, [pc, #84]	; (8000d6c <ADC+0x88>)
 8000d16:	f001 ff77 	bl	8002c08 <HAL_ADC_PollForConversion>
      // Read The ADC Conversion Result - using 3300 + 400 offset to
      // calculate the analog value
      printf("\r\nAA Battery voltage: %ld mV", 3700*HAL_ADC_GetValue(&hadc1)/4096);
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <ADC+0x88>)
 8000d1c:	f002 f832 	bl	8002d84 <HAL_ADC_GetValue>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f640 6274 	movw	r2, #3700	; 0xe74
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	0b1b      	lsrs	r3, r3, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <ADC+0x8c>)
 8000d30:	f008 f960 	bl	8008ff4 <iprintf>
            "AVRAGE (not implemented)\r\nPOLL (not implemented)\r\nHELP = this printout.");
   }
   else {
      printf("\r\nUNKNOWN ADC COMMAND");
   }
}
 8000d34:	e011      	b.n	8000d5a <ADC+0x76>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000d36:	2202      	movs	r2, #2
 8000d38:	490e      	ldr	r1, [pc, #56]	; (8000d74 <ADC+0x90>)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f008 fb76 	bl	800942c <strncmp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d106      	bne.n	8000d54 <ADC+0x70>
      printf("\r\nThe ADC command takes the following parameters\r\n");
 8000d46:	480c      	ldr	r0, [pc, #48]	; (8000d78 <ADC+0x94>)
 8000d48:	f008 f9ba 	bl	80090c0 <puts>
      printf("RO = Read Once\r\n" \
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <ADC+0x98>)
 8000d4e:	f008 f951 	bl	8008ff4 <iprintf>
}
 8000d52:	e002      	b.n	8000d5a <ADC+0x76>
      printf("\r\nUNKNOWN ADC COMMAND");
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <ADC+0x9c>)
 8000d56:	f008 f94d 	bl	8008ff4 <iprintf>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	0800b41c 	.word	0x0800b41c
 8000d68:	0800b420 	.word	0x0800b420
 8000d6c:	20000984 	.word	0x20000984
 8000d70:	0800b430 	.word	0x0800b430
 8000d74:	0800b450 	.word	0x0800b450
 8000d78:	0800b458 	.word	0x0800b458
 8000d7c:	0800b48c 	.word	0x0800b48c
 8000d80:	0800b4e4 	.word	0x0800b4e4

08000d84 <TIM>:

void TIM(char* paramStr, int* paramValues) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "OS", 2) == 0) {      
 8000d8e:	2202      	movs	r2, #2
 8000d90:	493b      	ldr	r1, [pc, #236]	; (8000e80 <TIM+0xfc>)
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f008 fb4a 	bl	800942c <strncmp>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11b      	bne.n	8000dd6 <TIM+0x52>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[3]));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3303      	adds	r3, #3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 faac 	bl	8008300 <atoi>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <TIM+0x100>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3303      	adds	r3, #3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 faa3 	bl	8008300 <atoi>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <TIM+0x100>)
 8000dc0:	60da      	str	r2, [r3, #12]
      printf("\r\nOne Shot timer with period: %d", (int)htim2.Init.Period);
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <TIM+0x100>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <TIM+0x104>)
 8000dca:	f008 f913 	bl	8008ff4 <iprintf>
      // The timer2 struct is updated accordingly to the __HAL_TIM_SET_AUTORELOAD() function.
      
      HAL_TIM_Base_Start_IT(&htim2);
 8000dce:	482d      	ldr	r0, [pc, #180]	; (8000e84 <TIM+0x100>)
 8000dd0:	f005 fc50 	bl	8006674 <HAL_TIM_Base_Start_IT>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
   }
   else {
      printf("\r\nUNKNOWN TCD COMMAND");
   }
}
 8000dd4:	e04f      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "PERIOD", 6) == 0) {
 8000dd6:	2206      	movs	r2, #6
 8000dd8:	492c      	ldr	r1, [pc, #176]	; (8000e8c <TIM+0x108>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f008 fb26 	bl	800942c <strncmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d118      	bne.n	8000e18 <TIM+0x94>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[7]));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3307      	adds	r3, #7
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 fa88 	bl	8008300 <atoi>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <TIM+0x100>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3307      	adds	r3, #7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fa7f 	bl	8008300 <atoi>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <TIM+0x100>)
 8000e08:	60da      	str	r2, [r3, #12]
      printf("\r\nAuto-reload period: %d", (int)htim2.Init.Period);
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <TIM+0x100>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481f      	ldr	r0, [pc, #124]	; (8000e90 <TIM+0x10c>)
 8000e12:	f008 f8ef 	bl	8008ff4 <iprintf>
}
 8000e16:	e02e      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "REPEAT", 6) == 0) {
 8000e18:	2206      	movs	r2, #6
 8000e1a:	491e      	ldr	r1, [pc, #120]	; (8000e94 <TIM+0x110>)
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f008 fb05 	bl	800942c <strncmp>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d117      	bne.n	8000e58 <TIM+0xd4>
      timRepeat = atoi(&paramStr[7]);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3307      	adds	r3, #7
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 fa67 	bl	8008300 <atoi>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <TIM+0x114>)
 8000e36:	6013      	str	r3, [r2, #0]
      timRepeatCount = 0;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <TIM+0x118>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim2);
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <TIM+0x100>)
 8000e40:	f005 fc18 	bl	8006674 <HAL_TIM_Base_Start_IT>
      timMode = REPEAT;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <TIM+0x11c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
      printf("\r\nAuto-reload repeat % times", timRepeat);
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <TIM+0x114>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <TIM+0x120>)
 8000e52:	f008 f8cf 	bl	8008ff4 <iprintf>
}
 8000e56:	e00e      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <TIM+0x124>)
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f008 fae5 	bl	800942c <strncmp>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d103      	bne.n	8000e70 <TIM+0xec>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
 8000e68:	4810      	ldr	r0, [pc, #64]	; (8000eac <TIM+0x128>)
 8000e6a:	f008 f8c3 	bl	8008ff4 <iprintf>
}
 8000e6e:	e002      	b.n	8000e76 <TIM+0xf2>
      printf("\r\nUNKNOWN TCD COMMAND");
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <TIM+0x12c>)
 8000e72:	f008 f8bf 	bl	8008ff4 <iprintf>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800b4fc 	.word	0x0800b4fc
 8000e84:	20000a80 	.word	0x20000a80
 8000e88:	0800b500 	.word	0x0800b500
 8000e8c:	0800b524 	.word	0x0800b524
 8000e90:	0800b52c 	.word	0x0800b52c
 8000e94:	0800b548 	.word	0x0800b548
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000978 	.word	0x20000978
 8000ea0:	20000c45 	.word	0x20000c45
 8000ea4:	0800b550 	.word	0x0800b550
 8000ea8:	0800b450 	.word	0x0800b450
 8000eac:	0800b570 	.word	0x0800b570
 8000eb0:	0800b5b4 	.word	0x0800b5b4

08000eb4 <SYS>:

void SYS(char* paramStr, int* paramValues){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "BN", 2) == 0) {
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4915      	ldr	r1, [pc, #84]	; (8000f18 <SYS+0x64>)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f008 fab2 	bl	800942c <strncmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <SYS+0x26>
      printf("\r\nBuild no.:%d", BUILD);
 8000ece:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000ed2:	4812      	ldr	r0, [pc, #72]	; (8000f1c <SYS+0x68>)
 8000ed4:	f008 f88e 	bl	8008ff4 <iprintf>
   }
   else if (strncmp(paramStr, "VER", 2) == 0) {
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
   }

}
 8000ed8:	e019      	b.n	8000f0e <SYS+0x5a>
   else if (strncmp(paramStr, "BD", 2) == 0) {
 8000eda:	2202      	movs	r2, #2
 8000edc:	4910      	ldr	r1, [pc, #64]	; (8000f20 <SYS+0x6c>)
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f008 faa4 	bl	800942c <strncmp>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <SYS+0x40>
      printf("\r\nBuild date: %s", BUILD_DATE_AND_TIME);
 8000eea:	490e      	ldr	r1, [pc, #56]	; (8000f24 <SYS+0x70>)
 8000eec:	480e      	ldr	r0, [pc, #56]	; (8000f28 <SYS+0x74>)
 8000eee:	f008 f881 	bl	8008ff4 <iprintf>
}
 8000ef2:	e00c      	b.n	8000f0e <SYS+0x5a>
   else if (strncmp(paramStr, "VER", 2) == 0) {
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <SYS+0x78>)
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f008 fa97 	bl	800942c <strncmp>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <SYS+0x5a>
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <SYS+0x7c>)
 8000f0a:	f008 f873 	bl	8008ff4 <iprintf>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	0800b5cc 	.word	0x0800b5cc
 8000f1c:	0800b5d0 	.word	0x0800b5d0
 8000f20:	0800b5e0 	.word	0x0800b5e0
 8000f24:	0800b5e4 	.word	0x0800b5e4
 8000f28:	0800b600 	.word	0x0800b600
 8000f2c:	0800b614 	.word	0x0800b614
 8000f30:	0800b618 	.word	0x0800b618

08000f34 <CO2>:

void CO2(char* paramStr, int* paramValues) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	; 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "START", 5) == 0) {
 8000f3e:	2205      	movs	r2, #5
 8000f40:	4979      	ldr	r1, [pc, #484]	; (8001128 <CO2+0x1f4>)
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f008 fa72 	bl	800942c <strncmp>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d103      	bne.n	8000f56 <CO2+0x22>
      ContinuousMeasurement(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 ff6e 	bl	8001e30 <ContinuousMeasurement>
 8000f54:	e0e5      	b.n	8001122 <CO2+0x1ee>
   }
   else if (strncmp(paramStr, "STOP", 4) == 0) {
 8000f56:	2204      	movs	r2, #4
 8000f58:	4974      	ldr	r1, [pc, #464]	; (800112c <CO2+0x1f8>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f008 fa66 	bl	800942c <strncmp>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <CO2+0x38>
      StopContinuousMeasurement();
 8000f66:	f000 ff9b 	bl	8001ea0 <StopContinuousMeasurement>
 8000f6a:	e0da      	b.n	8001122 <CO2+0x1ee>
   }
   else if (strncmp(paramStr, "VERSION", 7) == 0) {
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	4970      	ldr	r1, [pc, #448]	; (8001130 <CO2+0x1fc>)
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f008 fa5b 	bl	800942c <strncmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <CO2+0x4e>
      ReadFirmwareVersion();
 8000f7c:	f000 ff20 	bl	8001dc0 <ReadFirmwareVersion>
 8000f80:	e0cf      	b.n	8001122 <CO2+0x1ee>
   }
   else if (strncmp(paramStr, "INTERVAL", sizeof("INTERVAL")) == 0){
 8000f82:	496c      	ldr	r1, [pc, #432]	; (8001134 <CO2+0x200>)
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff f923 	bl	80001d0 <strcmp>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <CO2+0x64>
      SetMeasurementInterval(2); // will probably only work with 2 sec interval since the crc is pre-calculated for this value.
 8000f90:	2002      	movs	r0, #2
 8000f92:	f000 ffa9 	bl	8001ee8 <SetMeasurementInterval>
 8000f96:	e0c4      	b.n	8001122 <CO2+0x1ee>
   }
   else if (strncmp(paramStr, "READ", 4) == 0) {
 8000f98:	2204      	movs	r2, #4
 8000f9a:	4967      	ldr	r1, [pc, #412]	; (8001138 <CO2+0x204>)
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f008 fa45 	bl	800942c <strncmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f040 80ad 	bne.w	8001104 <CO2+0x1d0>
      uint8_t data[20];
      int readRes = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
      int i = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (; i < 10; i++) {
 8000fb2:	e00e      	b.n	8000fd2 <CO2+0x9e>
         if (GetDataReadyStatus() == 1) {
 8000fb4:	f000 ffd2 	bl	8001f5c <GetDataReadyStatus>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d103      	bne.n	8000fc6 <CO2+0x92>
            HAL_Delay(5);
 8000fbe:	2005      	movs	r0, #5
 8000fc0:	f001 fc0a 	bl	80027d8 <HAL_Delay>
            break;
 8000fc4:	e008      	b.n	8000fd8 <CO2+0xa4>
         }
         HAL_Delay(5);
 8000fc6:	2005      	movs	r0, #5
 8000fc8:	f001 fc06 	bl	80027d8 <HAL_Delay>
      for (; i < 10; i++) {
 8000fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fce:	3301      	adds	r3, #1
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	dded      	ble.n	8000fb4 <CO2+0x80>
      }

      if (i>=10) {
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	dd03      	ble.n	8000fe6 <CO2+0xb2>
         printf("\r\nSensor-data NOT READY!");
 8000fde:	4857      	ldr	r0, [pc, #348]	; (800113c <CO2+0x208>)
 8000fe0:	f008 f808 	bl	8008ff4 <iprintf>
 8000fe4:	e09d      	b.n	8001122 <CO2+0x1ee>
         return;
      }

      readRes = ReadMeasurement(data, sizeof(data));
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2114      	movs	r1, #20
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 f82f 	bl	8002050 <ReadMeasurement>
 8000ff2:	62b8      	str	r0, [r7, #40]	; 0x28

      if (0 == readRes) {
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d16d      	bne.n	80010d6 <CO2+0x1a2>
         buffer[1] = 0xDB; // MLSB CO2
         buffer[2] = 0x8C; // LMSB CO2
         buffer[3] = 0x2E; // LLSB CO2
         *****************************/
         // cast 4 bytes to one unsigned 32 bit integer
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 8000ffa:	7b3b      	ldrb	r3, [r7, #12]
 8000ffc:	061a      	lsls	r2, r3, #24
         (((unsigned int)data[1]) << 16) |
 8000ffe:	7b7b      	ldrb	r3, [r7, #13]
 8001000:	041b      	lsls	r3, r3, #16
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 8001002:	431a      	orrs	r2, r3
         (((unsigned int)data[3]) << 8) |
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	021b      	lsls	r3, r3, #8
         (((unsigned int)data[1]) << 16) |
 8001008:	4313      	orrs	r3, r2
         ((unsigned int)data[4]));
 800100a:	7c3a      	ldrb	r2, [r7, #16]
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 800100c:	4313      	orrs	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
         // cast unsigned 32 bit integer to 32 bit float
         co2Concentration = *(float*)&tempU32; // co2Concentration
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	627b      	str	r3, [r7, #36]	; 0x24

         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 8001018:	7cbb      	ldrb	r3, [r7, #18]
 800101a:	061a      	lsls	r2, r3, #24
         (((unsigned int)data[7]) << 16) |
 800101c:	7cfb      	ldrb	r3, [r7, #19]
 800101e:	041b      	lsls	r3, r3, #16
         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 8001020:	431a      	orrs	r2, r3
         (((unsigned int)data[9]) << 8) |
 8001022:	7d7b      	ldrb	r3, [r7, #21]
 8001024:	021b      	lsls	r3, r3, #8
         (((unsigned int)data[7]) << 16) |
 8001026:	4313      	orrs	r3, r2
         ((unsigned int)data[10]));
 8001028:	7dba      	ldrb	r2, [r7, #22]
         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 800102a:	4313      	orrs	r3, r2
 800102c:	60bb      	str	r3, [r7, #8]
         // cast unsigned 32 bit integer to 32 bit float
         temperature = *(float*)&tempU32;
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	623b      	str	r3, [r7, #32]

         printf("\r\nCO2 Concentration = %8.2f", co2Concentration);
 8001036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001038:	f7ff fa96 	bl	8000568 <__aeabi_f2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	483f      	ldr	r0, [pc, #252]	; (8001140 <CO2+0x20c>)
 8001042:	f007 ffd7 	bl	8008ff4 <iprintf>
         printf("\r\n    Temperature   = %8.2f", temperature);
 8001046:	6a38      	ldr	r0, [r7, #32]
 8001048:	f7ff fa8e 	bl	8000568 <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	483c      	ldr	r0, [pc, #240]	; (8001144 <CO2+0x210>)
 8001052:	f007 ffcf 	bl	8008ff4 <iprintf>

         //
         if ( ((co2Concentration > 1.0) && (co2Concentration < 15000.0)) &&
 8001056:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800105a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800105e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	dd32      	ble.n	80010ce <CO2+0x19a>
 8001068:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800106c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001148 <CO2+0x214>
 8001070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	d529      	bpl.n	80010ce <CO2+0x19a>
 800107a:	edd7 7a08 	vldr	s15, [r7, #32]
 800107e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8001082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	dd20      	ble.n	80010ce <CO2+0x19a>
              ((temperature > -20.0) && (temperature < 40.0)))   {
 800108c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001090:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800114c <CO2+0x218>
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	d517      	bpl.n	80010ce <CO2+0x19a>
            sensorReadings++;
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <CO2+0x21c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <CO2+0x21c>)
 80010a6:	6013      	str	r3, [r2, #0]
            sprintf((char*) co2, "CO2[ppm] = %6.2f", co2Concentration);
 80010a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010aa:	f7ff fa5d 	bl	8000568 <__aeabi_f2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4928      	ldr	r1, [pc, #160]	; (8001154 <CO2+0x220>)
 80010b4:	4828      	ldr	r0, [pc, #160]	; (8001158 <CO2+0x224>)
 80010b6:	f008 f8b9 	bl	800922c <siprintf>
            sprintf((char*) temp, "Temp[C]  = %4.2f", temperature);
 80010ba:	6a38      	ldr	r0, [r7, #32]
 80010bc:	f7ff fa54 	bl	8000568 <__aeabi_f2d>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4925      	ldr	r1, [pc, #148]	; (800115c <CO2+0x228>)
 80010c6:	4826      	ldr	r0, [pc, #152]	; (8001160 <CO2+0x22c>)
 80010c8:	f008 f8b0 	bl	800922c <siprintf>
 80010cc:	e029      	b.n	8001122 <CO2+0x1ee>
         }
         else {
            printf("\r\nReadings outside sensor boundaries!");
 80010ce:	4825      	ldr	r0, [pc, #148]	; (8001164 <CO2+0x230>)
 80010d0:	f007 ff90 	bl	8008ff4 <iprintf>
 80010d4:	e025      	b.n	8001122 <CO2+0x1ee>
         }
      }
      else if (readRes >= 1) {
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dd04      	ble.n	80010e6 <CO2+0x1b2>
         printf("\r\nCRC Error: %d", readRes);
 80010dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010de:	4822      	ldr	r0, [pc, #136]	; (8001168 <CO2+0x234>)
 80010e0:	f007 ff88 	bl	8008ff4 <iprintf>
 80010e4:	e01d      	b.n	8001122 <CO2+0x1ee>
      }
      else {
         printf("\r\nReading sensor-data failed!");
 80010e6:	4821      	ldr	r0, [pc, #132]	; (800116c <CO2+0x238>)
 80010e8:	f007 ff84 	bl	8008ff4 <iprintf>
         // Software reset.
         //SoftReset();
         sprintf((char*) co2, "Sensor reading");
 80010ec:	4920      	ldr	r1, [pc, #128]	; (8001170 <CO2+0x23c>)
 80010ee:	481a      	ldr	r0, [pc, #104]	; (8001158 <CO2+0x224>)
 80010f0:	f008 f89c 	bl	800922c <siprintf>
         sprintf((char*) temp, "ERROR. %d ok", sensorReadings);
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <CO2+0x21c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	491e      	ldr	r1, [pc, #120]	; (8001174 <CO2+0x240>)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <CO2+0x22c>)
 80010fe:	f008 f895 	bl	800922c <siprintf>
 8001102:	e00e      	b.n	8001122 <CO2+0x1ee>
      }
   }
   else if (strncmp(paramStr, "HELP", 4) == 0){
 8001104:	2204      	movs	r2, #4
 8001106:	491c      	ldr	r1, [pc, #112]	; (8001178 <CO2+0x244>)
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f008 f98f 	bl	800942c <strncmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d103      	bne.n	800111c <CO2+0x1e8>
      printf("\r\nSome help text for the CO2 Measurement command-set here...");
 8001114:	4819      	ldr	r0, [pc, #100]	; (800117c <CO2+0x248>)
 8001116:	f007 ff6d 	bl	8008ff4 <iprintf>
 800111a:	e002      	b.n	8001122 <CO2+0x1ee>
      }
   }
   *************/

   else {
      printf("\r\nUNKNOWN TCD COMMAND");
 800111c:	4818      	ldr	r0, [pc, #96]	; (8001180 <CO2+0x24c>)
 800111e:	f007 ff69 	bl	8008ff4 <iprintf>
   }
}
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800b628 	.word	0x0800b628
 800112c:	0800b630 	.word	0x0800b630
 8001130:	0800b638 	.word	0x0800b638
 8001134:	0800b640 	.word	0x0800b640
 8001138:	0800b64c 	.word	0x0800b64c
 800113c:	0800b654 	.word	0x0800b654
 8001140:	0800b670 	.word	0x0800b670
 8001144:	0800b68c 	.word	0x0800b68c
 8001148:	466a6000 	.word	0x466a6000
 800114c:	42200000 	.word	0x42200000
 8001150:	20000980 	.word	0x20000980
 8001154:	0800b6a8 	.word	0x0800b6a8
 8001158:	20000950 	.word	0x20000950
 800115c:	0800b6bc 	.word	0x0800b6bc
 8001160:	20000964 	.word	0x20000964
 8001164:	0800b6d0 	.word	0x0800b6d0
 8001168:	0800b6f8 	.word	0x0800b6f8
 800116c:	0800b708 	.word	0x0800b708
 8001170:	0800b728 	.word	0x0800b728
 8001174:	0800b738 	.word	0x0800b738
 8001178:	0800b450 	.word	0x0800b450
 800117c:	0800b748 	.word	0x0800b748
 8001180:	0800b5b4 	.word	0x0800b5b4

08001184 <promt>:
  {"TCD", 4, 7, {"OS", "PERIOD", "REPEAT", "HELP"}, {0, 500, 10, 0}, &TIM},
  {"CO2", 4, 7, {"READ", "VERSION", "INTERVAL", "HELP"}, {0, 1000, 60, 0}, &CO2},
  {"SYS", 3, 4, {"BN", "BD", "VER"}, {0, 0, 0}, &SYS}
};

void promt() {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <promt+0x1c>)
 800118a:	f007 ff33 	bl	8008ff4 <iprintf>
   fflush(stdout);
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <promt+0x20>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4618      	mov	r0, r3
 8001196:	f007 fe57 	bl	8008e48 <fflush>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	0800b788 	.word	0x0800b788
 80011a4:	200007c4 	.word	0x200007c4

080011a8 <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
   int i = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 80011b6:	2305      	movs	r3, #5
 80011b8:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 80011ba:	e03d      	b.n	8001238 <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	22ac      	movs	r2, #172	; 0xac
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <executeCmd+0xbc>)
 80011c6:	189c      	adds	r4, r3, r2
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	22ac      	movs	r2, #172	; 0xac
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	4a24      	ldr	r2, [pc, #144]	; (8001264 <executeCmd+0xbc>)
 80011d2:	4413      	add	r3, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f85b 	bl	8000290 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4620      	mov	r0, r4
 80011e2:	f008 f923 	bl	800942c <strncmp>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d122      	bne.n	8001232 <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <executeCmd+0xbc>)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	21ac      	movs	r1, #172	; 0xac
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	33a8      	adds	r3, #168	; 0xa8
 80011fa:	681c      	ldr	r4, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	22ac      	movs	r2, #172	; 0xac
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <executeCmd+0xbc>)
 8001206:	4413      	add	r3, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f841 	bl	8000290 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	3301      	adds	r3, #1
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	441a      	add	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	21ac      	movs	r1, #172	; 0xac
 800121a:	fb01 f303 	mul.w	r3, r1, r3
 800121e:	3380      	adds	r3, #128	; 0x80
 8001220:	4910      	ldr	r1, [pc, #64]	; (8001264 <executeCmd+0xbc>)
 8001222:	440b      	add	r3, r1
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	47a0      	blx	r4
       /*** for test only...
 		 printf("\r\nparamValues[0]: %d, paramValues[1]: %d, paramValues[2]: %d",
               mcuCmds[i].paramValues[0],mcuCmds[i].paramValues[1],mcuCmds[i].paramValues[2]);
               ***/
 		 promt();
 800122a:	f7ff ffab 	bl	8001184 <promt>
     	 return 0;
 800122e:	2300      	movs	r3, #0
 8001230:	e014      	b.n	800125c <executeCmd+0xb4>
   for (; i < numberOfCommands; i++) {
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3301      	adds	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8bd      	bhi.n	80011bc <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	429a      	cmp	r2, r3
 8001246:	d808      	bhi.n	800125a <executeCmd+0xb2>
      printf("\r\nThe command: %s[%d], is not recognized", termInput, numberOfCommands);
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <executeCmd+0xc0>)
 800124e:	f007 fed1 	bl	8008ff4 <iprintf>
      promt();
 8001252:	f7ff ff97 	bl	8001184 <promt>
      return -1;
 8001256:	23ff      	movs	r3, #255	; 0xff
 8001258:	e000      	b.n	800125c <executeCmd+0xb4>
   }
   else {
	  return -2;
 800125a:	23fe      	movs	r3, #254	; 0xfe
   }
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000004 	.word	0x20000004
 8001268:	0800b794 	.word	0x0800b794

0800126c <load4BitBus>:
   // 00: No pull-up, pull-down
   GPIOB->PUPDR |= 0b0000000000000000;
  return 0;
}

void load4BitBus(uint8_t bits) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
   // B7 B6 B5 B4
   GPIOB->ODR &= ~0xf0; //
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <load4BitBus+0x34>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <load4BitBus+0x34>)
 800127c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001280:	6153      	str	r3, [r2, #20]
   GPIOB->ODR |= bits & 0xf0;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <load4BitBus+0x34>)
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800128c:	4904      	ldr	r1, [pc, #16]	; (80012a0 <load4BitBus+0x34>)
 800128e:	4313      	orrs	r3, r2
 8001290:	614b      	str	r3, [r1, #20]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	48000400 	.word	0x48000400

080012a4 <pulseEnable>:

void pulseEnable() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
   GPIOB->ODR &= ~0x2; // Enable 0
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <pulseEnable+0x38>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <pulseEnable+0x38>)
 80012ae:	f023 0302 	bic.w	r3, r3, #2
 80012b2:	6153      	str	r3, [r2, #20]
   GPIOB->ODR |= 0x2; // Enable 1
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <pulseEnable+0x38>)
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	4a08      	ldr	r2, [pc, #32]	; (80012dc <pulseEnable+0x38>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	6153      	str	r3, [r2, #20]
   delay_us(10);
 80012c0:	200a      	movs	r0, #10
 80012c2:	f000 f9dd 	bl	8001680 <delay_us>
   GPIOB->ODR &= ~0x2; // Enable 0
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <pulseEnable+0x38>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <pulseEnable+0x38>)
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	6153      	str	r3, [r2, #20]
   delay_us(100);
 80012d2:	2064      	movs	r0, #100	; 0x64
 80012d4:	f000 f9d4 	bl	8001680 <delay_us>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	48000400 	.word	0x48000400

080012e0 <lcd4wireHwInit>:
 * HD44780 display controller.
 * It will load the instructions according to the recommended initialization
 * sequence for the HD44780 display controller's.
 *
 */
void lcd4wireHwInit() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
   HAL_Delay(50); // Wait 50 ms after power is applied - could reduce this time
 80012e4:	2032      	movs	r0, #50	; 0x32
 80012e6:	f001 fa77 	bl	80027d8 <HAL_Delay>
   // Clear the bits in the GPIO Port B that is used for communication with the
   // LCD, alike Hitachi HD44780 display controller.
   GPIOB->ODR &= ~0xf3; // RS = 0 (PB6) & EN = 0 (PB7) & D4-D7 = 0 (PB0-PB3)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <lcd4wireHwInit+0x60>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <lcd4wireHwInit+0x60>)
 80012f0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80012f4:	6153      	str	r3, [r2, #20]

   load4BitBus(0x30); // Set D4-D7 = 0b0011xxxx (PB4-PB7)
 80012f6:	2030      	movs	r0, #48	; 0x30
 80012f8:	f7ff ffb8 	bl	800126c <load4BitBus>
   pulseEnable();
 80012fc:	f7ff ffd2 	bl	80012a4 <pulseEnable>
   delay_us(4500);
 8001300:	f241 1094 	movw	r0, #4500	; 0x1194
 8001304:	f000 f9bc 	bl	8001680 <delay_us>

   load4BitBus(0x30); // Set D4-D7 = 0b0011xxxx (PB4-PB7)
 8001308:	2030      	movs	r0, #48	; 0x30
 800130a:	f7ff ffaf 	bl	800126c <load4BitBus>
   pulseEnable();
 800130e:	f7ff ffc9 	bl	80012a4 <pulseEnable>
   delay_us(4500);
 8001312:	f241 1094 	movw	r0, #4500	; 0x1194
 8001316:	f000 f9b3 	bl	8001680 <delay_us>

   load4BitBus(0x30); // Set D4-D7 = 0b0011xxxx (PB4-PB7)
 800131a:	2030      	movs	r0, #48	; 0x30
 800131c:	f7ff ffa6 	bl	800126c <load4BitBus>
   pulseEnable();
 8001320:	f7ff ffc0 	bl	80012a4 <pulseEnable>
   delay_us(150);
 8001324:	2096      	movs	r0, #150	; 0x96
 8001326:	f000 f9ab 	bl	8001680 <delay_us>

   load4BitBus(0x20); // Set D4-D7 = 0b0010xxxx (PB4-PB7)
 800132a:	2020      	movs	r0, #32
 800132c:	f7ff ff9e 	bl	800126c <load4BitBus>
   pulseEnable();
 8001330:	f7ff ffb8 	bl	80012a4 <pulseEnable>
   delay_us(150);
 8001334:	2096      	movs	r0, #150	; 0x96
 8001336:	f000 f9a3 	bl	8001680 <delay_us>
   /****
   load4BitBus(0x20); // Set D4-D7 = 0b0010 (PB4-PB7)
   pulseEnable();
   delay_us(150);
   ***/
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	48000400 	.word	0x48000400

08001344 <loadLcdRegister>:

void loadLcdRegister(uint8_t regValue, uint8_t regType) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
   // Loads a 8-bit value into either a Instruction register or a Data register
   // depending on the regType.
   // regType 0 = Instruction register
   // regType 1 = Data register
   if (regType == 1) {
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d106      	bne.n	8001368 <loadLcdRegister+0x24>
      GPIOB->ODR |= 0x1;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <loadLcdRegister+0x54>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <loadLcdRegister+0x54>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6153      	str	r3, [r2, #20]
 8001366:	e005      	b.n	8001374 <loadLcdRegister+0x30>
      //printf("\r\nD=0x%x", (unsigned int)GPIOB->ODR);
   }
   else
      GPIOB->ODR &= ~0x1;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <loadLcdRegister+0x54>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <loadLcdRegister+0x54>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6153      	str	r3, [r2, #20]

   load4BitBus(regValue);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff78 	bl	800126c <load4BitBus>
   pulseEnable();
 800137c:	f7ff ff92 	bl	80012a4 <pulseEnable>
   load4BitBus((regValue << 4) & 0xf0);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff70 	bl	800126c <load4BitBus>
   pulseEnable();
 800138c:	f7ff ff8a 	bl	80012a4 <pulseEnable>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	48000400 	.word	0x48000400

0800139c <lcdConfig>:

int lcdConfig() {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
   lcd4wireHwInit();
 80013a0:	f7ff ff9e 	bl	80012e0 <lcd4wireHwInit>
   loadLcdRegister(FUNCTION_SET | FUNCTION_4BIT_BUS | FUNCTION_2LINE_DISPLAY, 0);
 80013a4:	2100      	movs	r1, #0
 80013a6:	2028      	movs	r0, #40	; 0x28
 80013a8:	f7ff ffcc 	bl	8001344 <loadLcdRegister>
   //loadLcdRegister(0x28);

   loadLcdRegister(DISPLAY_SETUP | DISPLAY_SETUP_ON, 0);
 80013ac:	2100      	movs	r1, #0
 80013ae:	200c      	movs	r0, #12
 80013b0:	f7ff ffc8 	bl	8001344 <loadLcdRegister>
   //loadLcdRegister(0x0c);

   loadLcdRegister(ENTRY_MODE | ENTRY_MODE_INCR, 0);
 80013b4:	2100      	movs	r1, #0
 80013b6:	2006      	movs	r0, #6
 80013b8:	f7ff ffc4 	bl	8001344 <loadLcdRegister>
   //loadLcdRegister(0x06);
   return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <lcdInit>:

void lcdInit() {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
   //lcdInterfaceInit(); // the bus-interface is configured in the ioc gui.
   lcdConfig();
 80013ca:	f7ff ffe7 	bl	800139c <lcdConfig>

   // Write a character to the display?
   uint8_t txt[] = {'N', 'U', 'C', 'L', 'E', 'O', ' ', 'b', 'a', 'r', 'e', '-'};
 80013ce:	4a24      	ldr	r2, [pc, #144]	; (8001460 <lcdInit+0x9c>)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   uint8_t txt2[] = {'m', 'e', 't', 'a', 'l', ' ', '2', '0', '2', '4'};
 80013da:	4a22      	ldr	r2, [pc, #136]	; (8001464 <lcdInit+0xa0>)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e0:	c303      	stmia	r3!, {r0, r1}
 80013e2:	801a      	strh	r2, [r3, #0]
   for (int i = 0; i < sizeof(txt); i++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
 80013e8:	e00e      	b.n	8001408 <lcdInit+0x44>
      loadLcdRegister(txt[i], 1);
 80013ea:	f107 0210 	add.w	r2, r7, #16
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ffa4 	bl	8001344 <loadLcdRegister>
      HAL_Delay(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f001 f9eb 	bl	80027d8 <HAL_Delay>
   for (int i = 0; i < sizeof(txt); i++) {
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	3301      	adds	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	2b0b      	cmp	r3, #11
 800140c:	d9ed      	bls.n	80013ea <lcdInit+0x26>
   // In a 2-line display, the cursor moves to the second line when it passes
   // the 40th digit of the first line. Note that the first and second line
   // displays will shift at the same time.
   // ref. https://cdn-shop.adafruit.com/datasheets/HD44780.pdf
   //
   for (int i = 0; i < (40-sizeof(txt)); i++) {
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
 8001412:	e009      	b.n	8001428 <lcdInit+0x64>
      loadLcdRegister(0x20, 1);
 8001414:	2101      	movs	r1, #1
 8001416:	2020      	movs	r0, #32
 8001418:	f7ff ff94 	bl	8001344 <loadLcdRegister>
      HAL_Delay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f001 f9db 	bl	80027d8 <HAL_Delay>
   for (int i = 0; i < (40-sizeof(txt)); i++) {
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	3301      	adds	r3, #1
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	2b1b      	cmp	r3, #27
 800142c:	d9f2      	bls.n	8001414 <lcdInit+0x50>
   }
   // next line...
   for (int i = 0; i < sizeof(txt2); i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e00d      	b.n	8001450 <lcdInit+0x8c>
      loadLcdRegister(txt2[i], 1);
 8001434:	1d3a      	adds	r2, r7, #4
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff80 	bl	8001344 <loadLcdRegister>
      HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f001 f9c7 	bl	80027d8 <HAL_Delay>
   for (int i = 0; i < sizeof(txt2); i++) {
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b09      	cmp	r3, #9
 8001454:	d9ee      	bls.n	8001434 <lcdInit+0x70>
   }
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0800b7c0 	.word	0x0800b7c0
 8001464:	0800b7cc 	.word	0x0800b7cc

08001468 <lcdClear>:

void lcdClear() {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
   loadLcdRegister(LCD_CLEAR, 0);
 800146c:	2100      	movs	r1, #0
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff ff68 	bl	8001344 <loadLcdRegister>
   HAL_Delay(2);
 8001474:	2002      	movs	r0, #2
 8001476:	f001 f9af 	bl	80027d8 <HAL_Delay>
}  // lcdClear
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}

0800147e <lcdHome>:

void lcdHome() {
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
   loadLcdRegister(LCD_HOME, 0);
 8001482:	2100      	movs	r1, #0
 8001484:	2002      	movs	r0, #2
 8001486:	f7ff ff5d 	bl	8001344 <loadLcdRegister>
   HAL_Delay(2);
 800148a:	2002      	movs	r0, #2
 800148c:	f001 f9a4 	bl	80027d8 <HAL_Delay>
}  // lcdHome 
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <strings4lcd>:
   }

   return len;
}

int strings4lcd(uint8_t* line1, uint8_t len1, uint8_t* line2, uint8_t len2) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	72fb      	strb	r3, [r7, #11]
 80014a4:	4613      	mov	r3, r2
 80014a6:	72bb      	strb	r3, [r7, #10]
   lcdClear();
 80014a8:	f7ff ffde 	bl	8001468 <lcdClear>
   lcdHome();
 80014ac:	f7ff ffe7 	bl	800147e <lcdHome>
   int spaceLen = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]

   if (len1 > MAX_LEN)
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d901      	bls.n	80014be <strings4lcd+0x2a>
      len1 = MAX_LEN;
 80014ba:	2320      	movs	r3, #32
 80014bc:	72fb      	strb	r3, [r7, #11]
   for (int i = 0; i < len1; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e00d      	b.n	80014e0 <strings4lcd+0x4c>
      loadLcdRegister(line1[i], 1);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff38 	bl	8001344 <loadLcdRegister>
      HAL_Delay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f001 f97f 	bl	80027d8 <HAL_Delay>
   for (int i = 0; i < len1; i++) {
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbed      	blt.n	80014c4 <strings4lcd+0x30>
   }
   spaceLen = 40 - len1;
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80014ee:	613b      	str	r3, [r7, #16]
   for (int i = 0; i < spaceLen; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	e006      	b.n	8001504 <strings4lcd+0x70>
         loadLcdRegister(0x20, 1);
 80014f6:	2101      	movs	r1, #1
 80014f8:	2020      	movs	r0, #32
 80014fa:	f7ff ff23 	bl	8001344 <loadLcdRegister>
   for (int i = 0; i < spaceLen; i++) {
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	3301      	adds	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf4      	blt.n	80014f6 <strings4lcd+0x62>
         //HAL_Delay(1);
   }

   if (len2 > MAX_LEN)
 800150c:	7abb      	ldrb	r3, [r7, #10]
 800150e:	2b20      	cmp	r3, #32
 8001510:	d901      	bls.n	8001516 <strings4lcd+0x82>
      len2 = MAX_LEN;
 8001512:	2320      	movs	r3, #32
 8001514:	72bb      	strb	r3, [r7, #10]
   for (int i = 0; i < len2; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e00d      	b.n	8001538 <strings4lcd+0xa4>
      loadLcdRegister(line2[i], 1);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff0c 	bl	8001344 <loadLcdRegister>
      HAL_Delay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f001 f953 	bl	80027d8 <HAL_Delay>
   for (int i = 0; i < len2; i++) {
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	7abb      	ldrb	r3, [r7, #10]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbed      	blt.n	800151c <strings4lcd+0x88>
   }

   return len1+len2;
 8001540:	7afa      	ldrb	r2, [r7, #11]
 8001542:	7abb      	ldrb	r3, [r7, #10]
 8001544:	4413      	add	r3, r2
}
 8001546:	4618      	mov	r0, r3
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <_write>:
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	b29a      	uxth	r2, r3
 8001560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <_write+0x28>)
 8001568:	f005 fcf2 	bl	8006f50 <HAL_UART_Transmit>
	return len;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000b64 	.word	0x20000b64

0800157c <HAL_UART_RxCpltCallback>:
uint8_t relHours = 0;
uint8_t relMinutes = 0;
uint8_t relSeconds = 0;
uint8_t relHundreds = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_UART_RxCpltCallback+0x90>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b0d      	cmp	r3, #13
 800158a:	d126      	bne.n	80015da <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_UART_RxCpltCallback+0x94>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	dd1a      	ble.n	80015ca <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159a:	481e      	ldr	r0, [pc, #120]	; (8001614 <HAL_UART_RxCpltCallback+0x98>)
 800159c:	f002 fdb2 	bl	8004104 <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_UART_RxCpltCallback+0x94>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	481c      	ldr	r0, [pc, #112]	; (8001618 <HAL_UART_RxCpltCallback+0x9c>)
 80015a8:	f7ff fdfe 	bl	80011a8 <executeCmd>
			bytesReceived = 0;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_UART_RxCpltCallback+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80015b2:	2250      	movs	r2, #80	; 0x50
 80015b4:	2100      	movs	r1, #0
 80015b6:	4818      	ldr	r0, [pc, #96]	; (8001618 <HAL_UART_RxCpltCallback+0x9c>)
 80015b8:	f007 ff30 	bl	800941c <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <HAL_UART_RxCpltCallback+0x98>)
 80015c4:	f002 fd9e 	bl	8004104 <HAL_GPIO_WritePin>
 80015c8:	e001      	b.n	80015ce <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 80015ca:	f7ff fddb 	bl	8001184 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80015ce:	2201      	movs	r2, #1
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <HAL_UART_RxCpltCallback+0x90>)
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <HAL_UART_RxCpltCallback+0xa0>)
 80015d4:	f005 fd46 	bl	8007064 <HAL_UART_Receive_IT>
		return;
 80015d8:	e015      	b.n	8001606 <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 80015da:	2364      	movs	r3, #100	; 0x64
 80015dc:	2201      	movs	r2, #1
 80015de:	490b      	ldr	r1, [pc, #44]	; (800160c <HAL_UART_RxCpltCallback+0x90>)
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <HAL_UART_RxCpltCallback+0xa0>)
 80015e2:	f005 fcb5 	bl	8006f50 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_UART_RxCpltCallback+0x94>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_UART_RxCpltCallback+0x90>)
 80015ec:	7811      	ldrb	r1, [r2, #0]
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_UART_RxCpltCallback+0x9c>)
 80015f0:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_UART_RxCpltCallback+0x94>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <HAL_UART_RxCpltCallback+0x94>)
 80015fa:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	4903      	ldr	r1, [pc, #12]	; (800160c <HAL_UART_RxCpltCallback+0x90>)
 8001600:	4806      	ldr	r0, [pc, #24]	; (800161c <HAL_UART_RxCpltCallback+0xa0>)
 8001602:	f005 fd2f 	bl	8007064 <HAL_UART_Receive_IT>
}
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000bec 	.word	0x20000bec
 8001610:	20000c40 	.word	0x20000c40
 8001614:	48000400 	.word	0x48000400
 8001618:	20000bf0 	.word	0x20000bf0
 800161c:	20000b64 	.word	0x20000b64

08001620 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
   if (timMode == ONE_SHOT) {
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d108      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x22>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001634:	480e      	ldr	r0, [pc, #56]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001636:	f002 fd7d 	bl	8004134 <HAL_GPIO_TogglePin>
      HAL_TIM_Base_Stop_IT(&htim2);
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800163c:	f005 f86e 	bl	800671c <HAL_TIM_Base_Stop_IT>
         HAL_TIM_Base_Stop_IT(&htim2);
      }
   }
   //printf("\r\nHAL_TIM_PeriodElapsedCallback");
   //promt();
}
 8001640:	e010      	b.n	8001664 <HAL_TIM_PeriodElapsedCallback+0x44>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001646:	480a      	ldr	r0, [pc, #40]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001648:	f002 fd74 	bl	8004134 <HAL_GPIO_TogglePin>
      if (timRepeatCount++ > timRepeat) {
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	4909      	ldr	r1, [pc, #36]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001654:	600a      	str	r2, [r1, #0]
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	4293      	cmp	r3, r2
 800165c:	dd02      	ble.n	8001664 <HAL_TIM_PeriodElapsedCallback+0x44>
         HAL_TIM_Base_Stop_IT(&htim2);
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001660:	f005 f85c 	bl	800671c <HAL_TIM_Base_Stop_IT>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000c45 	.word	0x20000c45
 8001670:	48000400 	.word	0x48000400
 8001674:	20000a80 	.word	0x20000a80
 8001678:	20000978 	.word	0x20000978
 800167c:	20000000 	.word	0x20000000

08001680 <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
   htim15.Instance->CNT = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <delay_us+0x30>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
   while (htim15.Instance->CNT < au16_us);
 8001692:	bf00      	nop
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <delay_us+0x30>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	b292      	uxth	r2, r2
 800169e:	4293      	cmp	r3, r2
 80016a0:	d3f8      	bcc.n	8001694 <delay_us+0x14>
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	20000b18 	.word	0x20000b18

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint32_t values[3];

  setvbuf(stdout, NULL, _IONBF, 0);
 80016ba:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <main+0x134>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6898      	ldr	r0, [r3, #8]
 80016c0:	2300      	movs	r3, #0
 80016c2:	2202      	movs	r2, #2
 80016c4:	2100      	movs	r1, #0
 80016c6:	f007 fd03 	bl	80090d0 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ca:	f001 f81f 	bl	800270c <HAL_Init>
  /* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ce:	f000 f8a9 	bl	8001824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d2:	f000 fb03 	bl	8001cdc <MX_GPIO_Init>
  MX_DMA_Init();
 80016d6:	f000 fae3 	bl	8001ca0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80016da:	f000 fab1 	bl	8001c40 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80016de:	f000 f8f7 	bl	80018d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80016e2:	f000 f9d5 	bl	8001a90 <MX_TIM2_Init>
  MX_I2C3_Init();
 80016e6:	f000 f993 	bl	8001a10 <MX_I2C3_Init>
  MX_DAC_Init();
 80016ea:	f000 f967 	bl	80019bc <MX_DAC_Init>
  MX_TIM6_Init();
 80016ee:	f000 fa1f 	bl	8001b30 <MX_TIM6_Init>
  MX_TIM15_Init();
 80016f2:	f000 fa53 	bl	8001b9c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80016f6:	2201      	movs	r2, #1
 80016f8:	493c      	ldr	r1, [pc, #240]	; (80017ec <main+0x138>)
 80016fa:	483d      	ldr	r0, [pc, #244]	; (80017f0 <main+0x13c>)
 80016fc:	f005 fcb2 	bl	8007064 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim15);
 8001700:	483c      	ldr	r0, [pc, #240]	; (80017f4 <main+0x140>)
 8001702:	f004 ff6b 	bl	80065dc <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim6);
  //HAL_DMA_Start_IT(&hdma_dac_ch1, (uint32_t)sinData, (uint32_t)&DAC1->DHR8R1, 256);
  //htim6.Instance->ARR = 32000;
  //HAL_DAC_Start(&hdac, DAC_CHANNEL_1);

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sinData, 256, DAC_ALIGN_8B_R);
 8001706:	2308      	movs	r3, #8
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170e:	4a3a      	ldr	r2, [pc, #232]	; (80017f8 <main+0x144>)
 8001710:	2100      	movs	r1, #0
 8001712:	483a      	ldr	r0, [pc, #232]	; (80017fc <main+0x148>)
 8001714:	f002 f884 	bl	8003820 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8001718:	4839      	ldr	r0, [pc, #228]	; (8001800 <main+0x14c>)
 800171a:	f004 ff5f 	bl	80065dc <HAL_TIM_Base_Start>

  uint8_t ledState = OFF;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
  printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 8001722:	4838      	ldr	r0, [pc, #224]	; (8001804 <main+0x150>)
 8001724:	f007 fc66 	bl	8008ff4 <iprintf>
  printf("\r\nBuild No. %d", BUILD);
 8001728:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800172c:	4836      	ldr	r0, [pc, #216]	; (8001808 <main+0x154>)
 800172e:	f007 fc61 	bl	8008ff4 <iprintf>
  // Check if a I2C device is connected.
  //ReadFirmwareVersion(); // NOT OBVIOUS THAT THIS IS A I2C SENSOR....

  lcdInit();
 8001732:	f7ff fe47 	bl	80013c4 <lcdInit>
  promt();
 8001736:	f7ff fd25 	bl	8001184 <promt>
  HAL_Delay(2000);
 800173a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800173e:	f001 f84b 	bl	80027d8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   SetMeasurementInterval(2);
 8001742:	2002      	movs	r0, #2
 8001744:	f000 fbd0 	bl	8001ee8 <SetMeasurementInterval>
   ContinuousMeasurement(0);
 8001748:	2000      	movs	r0, #0
 800174a:	f000 fb71 	bl	8001e30 <ContinuousMeasurement>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <main+0x158>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	429a      	cmp	r2, r3
 8001756:	d013      	beq.n	8001780 <main+0xcc>
			ledState = led2;
 8001758:	4b2c      	ldr	r3, [pc, #176]	; (800180c <main+0x158>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	73fb      	strb	r3, [r7, #15]
			if (led2 == ON) {
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <main+0x158>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d106      	bne.n	8001774 <main+0xc0>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176c:	4828      	ldr	r0, [pc, #160]	; (8001810 <main+0x15c>)
 800176e:	f002 fcc9 	bl	8004104 <HAL_GPIO_WritePin>
 8001772:	e005      	b.n	8001780 <main+0xcc>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177a:	4825      	ldr	r0, [pc, #148]	; (8001810 <main+0x15c>)
 800177c:	f002 fcc2 	bl	8004104 <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <main+0x158>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d116      	bne.n	80017b6 <main+0x102>
		   if (msValue > 0) {
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <main+0x160>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	dd0a      	ble.n	80017a6 <main+0xf2>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001794:	481e      	ldr	r0, [pc, #120]	; (8001810 <main+0x15c>)
 8001796:	f002 fccd 	bl	8004134 <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <main+0x160>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 f81a 	bl	80027d8 <HAL_Delay>
 80017a4:	e007      	b.n	80017b6 <main+0x102>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ac:	4818      	ldr	r0, [pc, #96]	; (8001810 <main+0x15c>)
 80017ae:	f002 fca9 	bl	8004104 <HAL_GPIO_WritePin>
			   ledState = OFF;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
         TIM17->CCR1 = i;
         HAL_Delay(15);
      }
      ***/

		HAL_Delay(10000);
 80017b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80017ba:	f001 f80d 	bl	80027d8 <HAL_Delay>
		CO2("READ", (int*)&values[0]);
 80017be:	463b      	mov	r3, r7
 80017c0:	4619      	mov	r1, r3
 80017c2:	4815      	ldr	r0, [pc, #84]	; (8001818 <main+0x164>)
 80017c4:	f7ff fbb6 	bl	8000f34 <CO2>
      strings4lcd((uint8_t*)co2, strlen((char *)co2), (uint8_t*)temp, strlen((char *)temp));
 80017c8:	4814      	ldr	r0, [pc, #80]	; (800181c <main+0x168>)
 80017ca:	f7fe fd61 	bl	8000290 <strlen>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b2dc      	uxtb	r4, r3
 80017d2:	4813      	ldr	r0, [pc, #76]	; (8001820 <main+0x16c>)
 80017d4:	f7fe fd5c 	bl	8000290 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4a10      	ldr	r2, [pc, #64]	; (8001820 <main+0x16c>)
 80017de:	4621      	mov	r1, r4
 80017e0:	480e      	ldr	r0, [pc, #56]	; (800181c <main+0x168>)
 80017e2:	f7ff fe57 	bl	8001494 <strings4lcd>
		if (led2 != ledState) {
 80017e6:	e7b2      	b.n	800174e <main+0x9a>
 80017e8:	200007c4 	.word	0x200007c4
 80017ec:	20000bec 	.word	0x20000bec
 80017f0:	20000b64 	.word	0x20000b64
 80017f4:	20000b18 	.word	0x20000b18
 80017f8:	20000360 	.word	0x20000360
 80017fc:	200009d4 	.word	0x200009d4
 8001800:	20000acc 	.word	0x20000acc
 8001804:	0800b800 	.word	0x0800b800
 8001808:	0800b83c 	.word	0x0800b83c
 800180c:	20000c44 	.word	0x20000c44
 8001810:	48000400 	.word	0x48000400
 8001814:	2000097c 	.word	0x2000097c
 8001818:	0800b84c 	.word	0x0800b84c
 800181c:	20000950 	.word	0x20000950
 8001820:	20000964 	.word	0x20000964

08001824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b09c      	sub	sp, #112	; 0x70
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800182e:	2228      	movs	r2, #40	; 0x28
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f007 fdf2 	bl	800941c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2234      	movs	r2, #52	; 0x34
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f007 fde4 	bl	800941c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001854:	2302      	movs	r3, #2
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001858:	2301      	movs	r3, #1
 800185a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800185c:	2310      	movs	r3, #16
 800185e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001860:	2300      	movs	r3, #0
 8001862:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fa59 	bl	8004d20 <HAL_RCC_OscConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001874:	f000 fa9e 	bl	8001db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001878:	230f      	movs	r3, #15
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800187c:	2300      	movs	r3, #0
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800188c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f004 fa82 	bl	8005d9c <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800189e:	f000 fa89 	bl	8001db4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C3
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <SystemClock_Config+0xa8>)
 80018a4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM15;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 fca7 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80018c0:	f000 fa78 	bl	8001db4 <Error_Handler>
  }
}
 80018c4:	bf00      	nop
 80018c6:	3770      	adds	r7, #112	; 0x70
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	00048001 	.word	0x00048001

080018d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <MX_ADC1_Init+0xe8>)
 80018e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80018ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <MX_ADC1_Init+0xe8>)
 80018f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018f6:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <MX_ADC1_Init+0xe8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018fc:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <MX_ADC1_Init+0xe8>)
 80018fe:	2201      	movs	r2, #1
 8001900:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001902:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001904:	2201      	movs	r2, #1
 8001906:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <MX_ADC1_Init+0xe8>)
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001912:	2200      	movs	r2, #0
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001918:	2201      	movs	r2, #1
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <MX_ADC1_Init+0xe8>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001924:	2203      	movs	r2, #3
 8001926:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <MX_ADC1_Init+0xe8>)
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001932:	2208      	movs	r2, #8
 8001934:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001938:	2200      	movs	r2, #0
 800193a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_ADC1_Init+0xe8>)
 800193e:	2200      	movs	r2, #0
 8001940:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001942:	481d      	ldr	r0, [pc, #116]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001944:	f000 ff6c 	bl	8002820 <HAL_ADC_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800194e:	f000 fa31 	bl	8001db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001952:	230f      	movs	r3, #15
 8001954:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001956:	2301      	movs	r3, #1
 8001958:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196a:	463b      	mov	r3, r7
 800196c:	4619      	mov	r1, r3
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001970:	f001 fa88 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800197a:	f000 fa1b 	bl	8001db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800197e:	2302      	movs	r3, #2
 8001980:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001982:	463b      	mov	r3, r7
 8001984:	4619      	mov	r1, r3
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <MX_ADC1_Init+0xe8>)
 8001988:	f001 fa7c 	bl	8002e84 <HAL_ADC_ConfigChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001992:	f000 fa0f 	bl	8001db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001996:	2303      	movs	r3, #3
 8001998:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <MX_ADC1_Init+0xe8>)
 80019a0:	f001 fa70 	bl	8002e84 <HAL_ADC_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80019aa:	f000 fa03 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000984 	.word	0x20000984

080019bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_DAC_Init+0x4c>)
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <MX_DAC_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <MX_DAC_Init+0x4c>)
 80019d4:	f001 fee3 	bl	800379e <HAL_DAC_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80019de:	f000 f9e9 	bl	8001db4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80019e2:	2304      	movs	r3, #4
 80019e4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_DAC_Init+0x4c>)
 80019f2:	f001 ff83 	bl	80038fc <HAL_DAC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80019fc:	f000 f9da 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200009d4 	.word	0x200009d4
 8001a0c:	40007400 	.word	0x40007400

08001a10 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <MX_I2C3_Init+0x78>)
 8001a18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00101DD6;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <MX_I2C3_Init+0x7c>)
 8001a1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a4c:	f002 fbaf 	bl	80041ae <HAL_I2C_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001a56:	f000 f9ad 	bl	8001db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a5e:	f003 f8a7 	bl	8004bb0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001a68:	f000 f9a4 	bl	8001db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_I2C3_Init+0x74>)
 8001a70:	f003 f8e9 	bl	8004c46 <HAL_I2CEx_ConfigDigitalFilter>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 f99b 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000a2c 	.word	0x20000a2c
 8001a88:	40007800 	.word	0x40007800
 8001a8c:	00101dd6 	.word	0x00101dd6

08001a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001abc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001ac6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001aca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ada:	4814      	ldr	r0, [pc, #80]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001adc:	f004 fd26 	bl	800652c <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ae6:	f000 f965 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001af8:	f004 ff5e 	bl	80069b8 <HAL_TIM_ConfigClockSource>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001b02:	f000 f957 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <MX_TIM2_Init+0x9c>)
 8001b14:	f005 f94a 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001b1e:	f000 f949 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000a80 	.word	0x20000a80

08001b30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_TIM6_Init+0x64>)
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <MX_TIM6_Init+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <MX_TIM6_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_TIM6_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 624;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <MX_TIM6_Init+0x64>)
 8001b54:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001b58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_TIM6_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <MX_TIM6_Init+0x64>)
 8001b62:	f004 fce3 	bl	800652c <HAL_TIM_Base_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b6c:	f000 f922 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b70:	2320      	movs	r3, #32
 8001b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_TIM6_Init+0x64>)
 8001b7e:	f005 f915 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b88:	f000 f914 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000acc 	.word	0x20000acc
 8001b98:	40001000 	.word	0x40001000

08001b9c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001bba:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <MX_TIM15_Init+0xa0>)
 8001bbe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001be6:	4814      	ldr	r0, [pc, #80]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001be8:	f004 fca0 	bl	800652c <HAL_TIM_Base_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001bf2:	f000 f8df 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	480d      	ldr	r0, [pc, #52]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001c04:	f004 fed8 	bl	80069b8 <HAL_TIM_ConfigClockSource>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001c0e:	f000 f8d1 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_TIM15_Init+0x9c>)
 8001c20:	f005 f8c4 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001c2a:	f000 f8c3 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000b18 	.word	0x20000b18
 8001c3c:	40014000 	.word	0x40014000

08001c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c46:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <MX_USART1_UART_Init+0x5c>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USART1_UART_Init+0x58>)
 8001c84:	f005 f916 	bl	8006eb4 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c8e:	f000 f891 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000b64 	.word	0x20000b64
 8001c9c:	40013800 	.word	0x40013800

08001ca0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_DMA_Init+0x38>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <MX_DMA_Init+0x38>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6153      	str	r3, [r2, #20]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_DMA_Init+0x38>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	200d      	movs	r0, #13
 8001cc4:	f001 fd35 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001cc8:	200d      	movs	r0, #13
 8001cca:	f001 fd4e 	bl	800376a <HAL_NVIC_EnableIRQ>

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000

08001cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	6153      	str	r3, [r2, #20]
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001d10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d14:	6153      	str	r3, [r2, #20]
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	4a20      	ldr	r2, [pc, #128]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	6153      	str	r3, [r2, #20]
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <MX_GPIO_Init+0xcc>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f242 01f3 	movw	r1, #8435	; 0x20f3
 8001d40:	481a      	ldr	r0, [pc, #104]	; (8001dac <MX_GPIO_Init+0xd0>)
 8001d42:	f002 f9df 	bl	8004104 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 LD2_Pin PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_4
 8001d46:	f242 03f3 	movw	r3, #8435	; 0x20f3
 8001d4a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4813      	ldr	r0, [pc, #76]	; (8001dac <MX_GPIO_Init+0xd0>)
 8001d60:	f002 f85e 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d6a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <MX_GPIO_Init+0xd4>)
 8001d7c:	f002 f850 	bl	8003e20 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001d80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001d84:	f002 ffac 	bl	8004ce0 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001d88:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d8c:	f002 ffa8 	bl	8004ce0 <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2028      	movs	r0, #40	; 0x28
 8001d96:	f001 fccc 	bl	8003732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d9a:	2028      	movs	r0, #40	; 0x28
 8001d9c:	f001 fce5 	bl	800376a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000800 	.word	0x48000800

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dbc:	e7fe      	b.n	8001dbc <Error_Handler+0x8>
	...

08001dc0 <ReadFirmwareVersion>:
#define READ_MEASURMENT 0x0300
#define SOFTWARE_RESET 0xD304

extern I2C_HandleTypeDef hi2c3;

void ReadFirmwareVersion() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af04      	add	r7, sp, #16
   uint8_t firmwareVersion[4] = {0xd1,0,0,0};
 8001dc6:	23d1      	movs	r3, #209	; 0xd1
 8001dc8:	603b      	str	r3, [r7, #0]
   uint16_t firmware = 0xD100;
 8001dca:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001dce:	80fb      	strh	r3, [r7, #6]

   // Send a specific command to the Sensiron I2C slave... the command is a two byte register address...
   HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, firmwareVersion, 2, 1000);
 8001dd0:	463a      	mov	r2, r7
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	21c2      	movs	r1, #194	; 0xc2
 8001ddc:	4811      	ldr	r0, [pc, #68]	; (8001e24 <ReadFirmwareVersion+0x64>)
 8001dde:	f002 fa75 	bl	80042cc <HAL_I2C_Master_Transmit>

   if (HAL_I2C_Mem_Read(&hi2c3, SENSIRION_ADDRESS, firmware, I2C_MEMADD_SIZE_16BIT, &firmwareVersion[0], 3, 1000) != HAL_OK) {
 8001de2:	88fa      	ldrh	r2, [r7, #6]
 8001de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de8:	9302      	str	r3, [sp, #8]
 8001dea:	2303      	movs	r3, #3
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	463b      	mov	r3, r7
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	21c2      	movs	r1, #194	; 0xc2
 8001df6:	480b      	ldr	r0, [pc, #44]	; (8001e24 <ReadFirmwareVersion+0x64>)
 8001df8:	f002 fb5c 	bl	80044b4 <HAL_I2C_Mem_Read>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <ReadFirmwareVersion+0x4a>
      printf("\r\nHAL_I2C_Mem_Read() FAILED!");
 8001e02:	4809      	ldr	r0, [pc, #36]	; (8001e28 <ReadFirmwareVersion+0x68>)
 8001e04:	f007 f8f6 	bl	8008ff4 <iprintf>
   }
   else {
      printf("\r\nSensiron SCD30 Ver.:0x%02x.0x%02x crc=0x%02x", firmwareVersion[0],firmwareVersion[1], firmwareVersion[2]);
   }
}
 8001e08:	e007      	b.n	8001e1a <ReadFirmwareVersion+0x5a>
      printf("\r\nSensiron SCD30 Ver.:0x%02x.0x%02x crc=0x%02x", firmwareVersion[0],firmwareVersion[1], firmwareVersion[2]);
 8001e0a:	783b      	ldrb	r3, [r7, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	787b      	ldrb	r3, [r7, #1]
 8001e10:	461a      	mov	r2, r3
 8001e12:	78bb      	ldrb	r3, [r7, #2]
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <ReadFirmwareVersion+0x6c>)
 8001e16:	f007 f8ed 	bl	8008ff4 <iprintf>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000a2c 	.word	0x20000a2c
 8001e28:	0800b854 	.word	0x0800b854
 8001e2c:	0800b874 	.word	0x0800b874

08001e30 <ContinuousMeasurement>:

int ContinuousMeasurement(uint16_t AmbientPressureCompensation) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
   uint8_t cm[5] = {0, 0x10, 0, 0, 0x81};
 8001e3a:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <ContinuousMeasurement+0x60>)
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e44:	6018      	str	r0, [r3, #0]
 8001e46:	3304      	adds	r3, #4
 8001e48:	7019      	strb	r1, [r3, #0]
   cm[2] = (AmbientPressureCompensation>>8) & 0xff;
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	72bb      	strb	r3, [r7, #10]
   cm[3] = AmbientPressureCompensation & 0xff;
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	72fb      	strb	r3, [r7, #11]

   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 5, 1000)!= HAL_OK) {
 8001e5a:	f107 0208 	add.w	r2, r7, #8
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2305      	movs	r3, #5
 8001e66:	21c2      	movs	r1, #194	; 0xc2
 8001e68:	480a      	ldr	r0, [pc, #40]	; (8001e94 <ContinuousMeasurement+0x64>)
 8001e6a:	f002 fa2f 	bl	80042cc <HAL_I2C_Master_Transmit>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <ContinuousMeasurement+0x4e>
      printf("\r\nStarting Continuous Measurement FAILED!");
 8001e74:	4808      	ldr	r0, [pc, #32]	; (8001e98 <ContinuousMeasurement+0x68>)
 8001e76:	f007 f8bd 	bl	8008ff4 <iprintf>
      return 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e003      	b.n	8001e86 <ContinuousMeasurement+0x56>
   }
   else {
      printf("\r\nContinuous Measurement started.");
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <ContinuousMeasurement+0x6c>)
 8001e80:	f007 f8b8 	bl	8008ff4 <iprintf>
      return 1;
 8001e84:	2301      	movs	r3, #1
   }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800b8f4 	.word	0x0800b8f4
 8001e94:	20000a2c 	.word	0x20000a2c
 8001e98:	0800b8a4 	.word	0x0800b8a4
 8001e9c:	0800b8d0 	.word	0x0800b8d0

08001ea0 <StopContinuousMeasurement>:

void StopContinuousMeasurement() {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af02      	add	r7, sp, #8
   uint8_t cm[2] = {0x01, 0x04};
 8001ea6:	f240 4301 	movw	r3, #1025	; 0x401
 8001eaa:	80bb      	strh	r3, [r7, #4]
   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 2, 1000)!= HAL_OK) {
 8001eac:	1d3a      	adds	r2, r7, #4
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	21c2      	movs	r1, #194	; 0xc2
 8001eb8:	4808      	ldr	r0, [pc, #32]	; (8001edc <StopContinuousMeasurement+0x3c>)
 8001eba:	f002 fa07 	bl	80042cc <HAL_I2C_Master_Transmit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <StopContinuousMeasurement+0x2c>
      printf("\r\nStopping Continuous Measurement FAILED!");
 8001ec4:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <StopContinuousMeasurement+0x40>)
 8001ec6:	f007 f895 	bl	8008ff4 <iprintf>
   }
   else {
      printf("\r\nContinuous Measurement stopped.");
   }
}
 8001eca:	e002      	b.n	8001ed2 <StopContinuousMeasurement+0x32>
      printf("\r\nContinuous Measurement stopped.");
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <StopContinuousMeasurement+0x44>)
 8001ece:	f007 f891 	bl	8008ff4 <iprintf>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000a2c 	.word	0x20000a2c
 8001ee0:	0800b8fc 	.word	0x0800b8fc
 8001ee4:	0800b928 	.word	0x0800b928

08001ee8 <SetMeasurementInterval>:

void SetMeasurementInterval(uint16_t interval) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
   uint8_t cm[5] = {0x46, 0x00, 0x00, 0x02, 0xE3};
 8001ef2:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <SetMeasurementInterval+0x64>)
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001efc:	6018      	str	r0, [r3, #0]
 8001efe:	3304      	adds	r3, #4
 8001f00:	7019      	strb	r1, [r3, #0]
   cm[2] = (interval>>8) & 0xff;
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	72bb      	strb	r3, [r7, #10]
   cm[3] = interval & 0xff;
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	72fb      	strb	r3, [r7, #11]

   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 5, 1000)!= HAL_OK) {
 8001f12:	f107 0208 	add.w	r2, r7, #8
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	21c2      	movs	r1, #194	; 0xc2
 8001f20:	480b      	ldr	r0, [pc, #44]	; (8001f50 <SetMeasurementInterval+0x68>)
 8001f22:	f002 f9d3 	bl	80042cc <HAL_I2C_Master_Transmit>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <SetMeasurementInterval+0x4c>
      printf("\r\nSetting Measurement Interval FAILED!");
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <SetMeasurementInterval+0x6c>)
 8001f2e:	f007 f861 	bl	8008ff4 <iprintf>
   }
   else {
      printf("\r\nMeasurement Interval is set to 0x%02x%02x sec.", cm[2], cm[3]);
   }
}
 8001f32:	e006      	b.n	8001f42 <SetMeasurementInterval+0x5a>
      printf("\r\nMeasurement Interval is set to 0x%02x%02x sec.", cm[2], cm[3]);
 8001f34:	7abb      	ldrb	r3, [r7, #10]
 8001f36:	4619      	mov	r1, r3
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4806      	ldr	r0, [pc, #24]	; (8001f58 <SetMeasurementInterval+0x70>)
 8001f3e:	f007 f859 	bl	8008ff4 <iprintf>
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800b9a8 	.word	0x0800b9a8
 8001f50:	20000a2c 	.word	0x20000a2c
 8001f54:	0800b94c 	.word	0x0800b94c
 8001f58:	0800b974 	.word	0x0800b974

08001f5c <GetDataReadyStatus>:

int GetDataReadyStatus() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af04      	add	r7, sp, #16
   uint8_t cm[3] = {0x02, 0x02, 0}; //Get data ready status
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <GetDataReadyStatus+0x78>)
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	8019      	strh	r1, [r3, #0]
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	0c12      	lsrs	r2, r2, #16
 8001f70:	701a      	strb	r2, [r3, #0]

   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 2, 1000)!= HAL_OK) {
 8001f72:	1d3a      	adds	r2, r7, #4
 8001f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	21c2      	movs	r1, #194	; 0xc2
 8001f7e:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <GetDataReadyStatus+0x7c>)
 8001f80:	f002 f9a4 	bl	80042cc <HAL_I2C_Master_Transmit>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <GetDataReadyStatus+0x3a>
      printf("\r\nGet Data Ready Status FAILED!");
 8001f8a:	4814      	ldr	r0, [pc, #80]	; (8001fdc <GetDataReadyStatus+0x80>)
 8001f8c:	f007 f832 	bl	8008ff4 <iprintf>
      return -1;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	e019      	b.n	8001fca <GetDataReadyStatus+0x6e>
   }
   else {
      HAL_Delay(3);
 8001f96:	2003      	movs	r0, #3
 8001f98:	f000 fc1e 	bl	80027d8 <HAL_Delay>
      HAL_I2C_Mem_Read(&hi2c3, SENSIRION_ADDRESS, GET_DATA_READY_STATUS, I2C_MEMADD_SIZE_16BIT, cm, 3, 1000);
 8001f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2302      	movs	r3, #2
 8001fac:	f240 2202 	movw	r2, #514	; 0x202
 8001fb0:	21c2      	movs	r1, #194	; 0xc2
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <GetDataReadyStatus+0x7c>)
 8001fb4:	f002 fa7e 	bl	80044b4 <HAL_I2C_Mem_Read>
      //printf("\r\nReady Status.:0x%02x|0x%02x|0x%02x", cm[0],cm[1], cm[2]);
      if ((cm[0]==1)&&(cm[1]==0xb0))
 8001fb8:	793b      	ldrb	r3, [r7, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d104      	bne.n	8001fc8 <GetDataReadyStatus+0x6c>
 8001fbe:	797b      	ldrb	r3, [r7, #5]
 8001fc0:	2bb0      	cmp	r3, #176	; 0xb0
 8001fc2:	d101      	bne.n	8001fc8 <GetDataReadyStatus+0x6c>
         return 1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <GetDataReadyStatus+0x6e>
      else
         return 0;
 8001fc8:	2300      	movs	r3, #0
   }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	0800b9d0 	.word	0x0800b9d0
 8001fd8:	20000a2c 	.word	0x20000a2c
 8001fdc:	0800b9b0 	.word	0x0800b9b0

08001fe0 <gencrc>:

uint8_t gencrc(uint8_t *data, size_t len)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xff;
 8001fea:	23ff      	movs	r3, #255	; 0xff
 8001fec:	75fb      	strb	r3, [r7, #23]
    size_t i, j;
    for (i = 0; i < len; i++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e021      	b.n	8002038 <gencrc+0x58>
        crc ^= data[i];
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	4053      	eors	r3, r2
 8002000:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++) {
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e011      	b.n	800202c <gencrc+0x4c>
            if ((crc & 0x80) != 0)
 8002008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da07      	bge.n	8002020 <gencrc+0x40>
                crc = (uint8_t)((crc << 1) ^ 0x31);
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	b25b      	sxtb	r3, r3
 8002016:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800201a:	b25b      	sxtb	r3, r3
 800201c:	75fb      	strb	r3, [r7, #23]
 800201e:	e002      	b.n	8002026 <gencrc+0x46>
            else
                crc <<= 1;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++) {
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b07      	cmp	r3, #7
 8002030:	d9ea      	bls.n	8002008 <gencrc+0x28>
    for (i = 0; i < len; i++) {
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	3301      	adds	r3, #1
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d3d9      	bcc.n	8001ff4 <gencrc+0x14>
        }
    }
    return crc;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <ReadMeasurement>:

int ReadMeasurement(uint8_t* data, uint8_t len) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af04      	add	r7, sp, #16
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
   uint8_t cm[2] = {0x03, 0x00};
 800205c:	2303      	movs	r3, #3
 800205e:	813b      	strh	r3, [r7, #8]

   if (HAL_I2C_Master_Transmit(&hi2c3, SENSIRION_ADDRESS, cm, 2, 1000)!= HAL_OK) {
 8002060:	f107 0208 	add.w	r2, r7, #8
 8002064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2302      	movs	r3, #2
 800206c:	21c2      	movs	r1, #194	; 0xc2
 800206e:	4822      	ldr	r0, [pc, #136]	; (80020f8 <ReadMeasurement+0xa8>)
 8002070:	f002 f92c 	bl	80042cc <HAL_I2C_Master_Transmit>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <ReadMeasurement+0x36>
      printf("\r\nRead Measurement FAILED!");
 800207a:	4820      	ldr	r0, [pc, #128]	; (80020fc <ReadMeasurement+0xac>)
 800207c:	f006 ffba 	bl	8008ff4 <iprintf>
      return -1;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	e034      	b.n	80020f0 <ReadMeasurement+0xa0>
   }
   else {
      HAL_I2C_Mem_Read(&hi2c3, SENSIRION_ADDRESS, READ_MEASURMENT, I2C_MEMADD_SIZE_16BIT, data, len, 1000);
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208e:	9202      	str	r2, [sp, #8]
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2302      	movs	r3, #2
 8002098:	f44f 7240 	mov.w	r2, #768	; 0x300
 800209c:	21c2      	movs	r1, #194	; 0xc2
 800209e:	4816      	ldr	r0, [pc, #88]	; (80020f8 <ReadMeasurement+0xa8>)
 80020a0:	f002 fa08 	bl	80044b4 <HAL_I2C_Mem_Read>
      // CRC CHECK.
      for (int i = 0; i < 18; i+=3) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e01e      	b.n	80020e8 <ReadMeasurement+0x98>
         if (gencrc(&data[i], 2) != data[i+2]) {
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff94 	bl	8001fe0 <gencrc>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4619      	mov	r1, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3302      	adds	r3, #2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	4299      	cmp	r1, r3
 80020c8:	d00b      	beq.n	80020e2 <ReadMeasurement+0x92>
            return (i%3+1);
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <ReadMeasurement+0xb0>)
 80020ce:	fb83 3201 	smull	r3, r2, r3, r1
 80020d2:	17cb      	asrs	r3, r1, #31
 80020d4:	1ad2      	subs	r2, r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	1aca      	subs	r2, r1, r3
 80020de:	1c53      	adds	r3, r2, #1
 80020e0:	e006      	b.n	80020f0 <ReadMeasurement+0xa0>
      for (int i = 0; i < 18; i+=3) {
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3303      	adds	r3, #3
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b11      	cmp	r3, #17
 80020ec:	dddd      	ble.n	80020aa <ReadMeasurement+0x5a>
      if (gencrc(&data[0], 2) != data[2]) {
         return 1; // CRC error on the first half word...
      }
      */
      //printf("\r\nMeasurement read.");
      return 0;
 80020ee:	2300      	movs	r3, #0
   }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000a2c 	.word	0x20000a2c
 80020fc:	0800b9d4 	.word	0x0800b9d4
 8002100:	55555556 	.word	0x55555556

08002104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_MspInit+0x44>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_MspInit+0x44>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_MspInit+0x44>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_MspInit+0x44>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_MspInit+0x44>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_MspInit+0x44>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216c:	d124      	bne.n	80021b8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_ADC_MspInit+0x74>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <HAL_ADC_MspInit+0x74>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6153      	str	r3, [r2, #20]
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_ADC_MspInit+0x74>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_ADC_MspInit+0x74>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_ADC_MspInit+0x74>)
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	6153      	str	r3, [r2, #20]
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_ADC_MspInit+0x74>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a2:	2303      	movs	r3, #3
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b4:	f001 fe34 	bl	8003e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021b8:	bf00      	nop
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_DAC_MspInit+0xd4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d153      	bne.n	800228e <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_DAC_MspInit+0xd8>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a2c      	ldr	r2, [pc, #176]	; (800229c <HAL_DAC_MspInit+0xd8>)
 80021ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_DAC_MspInit+0xd8>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b27      	ldr	r3, [pc, #156]	; (800229c <HAL_DAC_MspInit+0xd8>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4a26      	ldr	r2, [pc, #152]	; (800229c <HAL_DAC_MspInit+0xd8>)
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002208:	6153      	str	r3, [r2, #20]
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_DAC_MspInit+0xd8>)
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002216:	2310      	movs	r3, #16
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221a:	2303      	movs	r3, #3
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222c:	f001 fdf8 	bl	8003e20 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <HAL_DAC_MspInit+0xe0>)
 8002234:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 8002238:	2210      	movs	r2, #16
 800223a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 800224a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800224e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 8002252:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002256:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 800225a:	2220      	movs	r2, #32
 800225c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 8002260:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002264:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002266:	480e      	ldr	r0, [pc, #56]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 8002268:	f001 fbcb 	bl	8003a02 <HAL_DMA_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8002272:	f7ff fd9f 	bl	8001db4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_DAC_MspInit+0xe4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_DAC_MspInit+0xe4>)
 800227c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002280:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <HAL_DAC_MspInit+0xdc>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40007400 	.word	0x40007400
 800229c:	40021000 	.word	0x40021000
 80022a0:	200009e8 	.word	0x200009e8
 80022a4:	40020030 	.word	0x40020030
 80022a8:	40010000 	.word	0x40010000

080022ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a26      	ldr	r2, [pc, #152]	; (8002364 <HAL_I2C_MspInit+0xb8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d146      	bne.n	800235c <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4a25      	ldr	r2, [pc, #148]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 80022d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022d8:	6153      	str	r3, [r2, #20]
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	6153      	str	r3, [r2, #20]
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002304:	2312      	movs	r3, #18
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002308:	2301      	movs	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8002310:	2303      	movs	r3, #3
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <HAL_I2C_MspInit+0xc0>)
 800231c:	f001 fd80 	bl	8003e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002326:	2312      	movs	r3, #18
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232a:	2301      	movs	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8002332:	2303      	movs	r3, #3
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002340:	f001 fd6e 	bl	8003e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 800234a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800234e:	61d3      	str	r3, [r2, #28]
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_I2C_MspInit+0xbc>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40007800 	.word	0x40007800
 8002368:	40021000 	.word	0x40021000
 800236c:	48000800 	.word	0x48000800

08002370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d114      	bne.n	80023ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	61d3      	str	r3, [r2, #28]
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	201c      	movs	r0, #28
 80023a0:	f001 f9c7 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023a4:	201c      	movs	r0, #28
 80023a6:	f001 f9e0 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80023aa:	e022      	b.n	80023f2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <HAL_TIM_Base_MspInit+0x90>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10c      	bne.n	80023d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 80023bc:	f043 0310 	orr.w	r3, r3, #16
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
}
 80023ce:	e010      	b.n	80023f2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_TIM_Base_MspInit+0x94>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d10b      	bne.n	80023f2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_TIM_Base_MspInit+0x8c>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	40001000 	.word	0x40001000
 8002404:	40014000 	.word	0x40014000

08002408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <HAL_UART_MspInit+0x8c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12f      	bne.n	800248a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_UART_MspInit+0x90>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_UART_MspInit+0x90>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6193      	str	r3, [r2, #24]
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_UART_MspInit+0x90>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <HAL_UART_MspInit+0x90>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	4a14      	ldr	r2, [pc, #80]	; (8002498 <HAL_UART_MspInit+0x90>)
 8002448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800244c:	6153      	str	r3, [r2, #20]
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_UART_MspInit+0x90>)
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800245a:	2330      	movs	r3, #48	; 0x30
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800246a:	2307      	movs	r3, #7
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4809      	ldr	r0, [pc, #36]	; (800249c <HAL_UART_MspInit+0x94>)
 8002476:	f001 fcd3 	bl	8003e20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	2025      	movs	r0, #37	; 0x25
 8002480:	f001 f957 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002484:	2025      	movs	r0, #37	; 0x25
 8002486:	f001 f970 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800248a:	bf00      	nop
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40013800 	.word	0x40013800
 8002498:	40021000 	.word	0x40021000
 800249c:	48000800 	.word	0x48000800

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <NMI_Handler+0x4>

080024a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <HardFault_Handler+0x4>

080024ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <MemManage_Handler+0x4>

080024b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <UsageFault_Handler+0x4>

080024be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ec:	f000 f954 	bl	8002798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <DMA1_Channel3_IRQHandler+0x10>)
 80024fa:	f001 fb9f 	bl	8003c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200009e8 	.word	0x200009e8

08002508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <TIM2_IRQHandler+0x10>)
 800250e:	f004 f934 	bl	800677a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000a80 	.word	0x20000a80

0800251c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <USART1_IRQHandler+0x10>)
 8002522:	f004 fde3 	bl	80070ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000b64 	.word	0x20000b64

08002530 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002534:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002538:	f001 fe16 	bl	8004168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
	return 1;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_kill>:

int _kill(int pid, int sig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800255a:	f006 ffc3 	bl	80094e4 <__errno>
 800255e:	4603      	mov	r3, r0
 8002560:	2216      	movs	r2, #22
 8002562:	601a      	str	r2, [r3, #0]
	return -1;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_exit>:

void _exit (int status)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ffe7 	bl	8002550 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002582:	e7fe      	b.n	8002582 <_exit+0x12>

08002584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e00a      	b.n	80025ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002596:	f3af 8000 	nop.w
 800259a:	4601      	mov	r1, r0
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	b2ca      	uxtb	r2, r1
 80025a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3301      	adds	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dbf0      	blt.n	8002596 <_read+0x12>
	}

return len;
 80025b4:	687b      	ldr	r3, [r7, #4]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_close>:
	}
	return len;
}

int _close(int file)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
	return -1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e6:	605a      	str	r2, [r3, #4]
	return 0;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <_isatty>:

int _isatty(int file)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
	return 1;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
	return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f006 ff44 	bl	80094e4 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20004000 	.word	0x20004000
 8002688:	00000400 	.word	0x00000400
 800268c:	20000c48 	.word	0x20000c48
 8002690:	20000da0 	.word	0x20000da0

08002694 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026bc:	f7ff ffea 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c2:	490d      	ldr	r1, [pc, #52]	; (80026f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <LoopForever+0xe>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <LoopForever+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026e6:	f006 ff03 	bl	80094f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ea:	f7fe ffe3 	bl	80016b4 <main>

080026ee <LoopForever>:

LoopForever:
    b LoopForever
 80026ee:	e7fe      	b.n	80026ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	20000934 	.word	0x20000934
  ldr r2, =_sidata
 80026fc:	0800bdbc 	.word	0x0800bdbc
  ldr r2, =_sbss
 8002700:	20000934 	.word	0x20000934
  ldr r4, =_ebss
 8002704:	20000d9c 	.word	0x20000d9c

08002708 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC1_IRQHandler>
	...

0800270c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_Init+0x28>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_Init+0x28>)
 8002716:	f043 0310 	orr.w	r3, r3, #16
 800271a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271c:	2003      	movs	r0, #3
 800271e:	f000 fffd 	bl	800371c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002722:	200f      	movs	r0, #15
 8002724:	f000 f808 	bl	8002738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002728:	f7ff fcec 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40022000 	.word	0x40022000

08002738 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_InitTick+0x54>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_InitTick+0x58>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f815 	bl	8003786 <HAL_SYSTICK_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00e      	b.n	8002784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d80a      	bhi.n	8002782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800276c:	2200      	movs	r2, #0
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f000 ffdd 	bl	8003732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <HAL_InitTick+0x5c>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000760 	.word	0x20000760
 8002790:	20000768 	.word	0x20000768
 8002794:	20000764 	.word	0x20000764

08002798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_IncTick+0x24>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000768 	.word	0x20000768
 80027bc:	20000c4c 	.word	0x20000c4c

080027c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000c4c 	.word	0x20000c4c

080027d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff ffee 	bl	80027c0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027fe:	bf00      	nop
 8002800:	f7ff ffde 	bl	80027c0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000768 	.word	0x20000768

08002820 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b09a      	sub	sp, #104	; 0x68
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e169      	b.n	8002b14 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d176      	bne.n	8002940 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d152      	bne.n	8002900 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fc69 	bl	800214c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d13b      	bne.n	8002900 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fe11 	bl	80034b0 <ADC_Disable>
 800288e:	4603      	mov	r3, r0
 8002890:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d12f      	bne.n	8002900 <HAL_ADC_Init+0xe0>
 80028a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d12b      	bne.n	8002900 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028b0:	f023 0302 	bic.w	r3, r3, #2
 80028b4:	f043 0202 	orr.w	r2, r3, #2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028dc:	4b8f      	ldr	r3, [pc, #572]	; (8002b1c <HAL_ADC_Init+0x2fc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8f      	ldr	r2, [pc, #572]	; (8002b20 <HAL_ADC_Init+0x300>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9a      	lsrs	r2, r3, #18
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028f2:	e002      	b.n	80028fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f9      	bne.n	80028f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291c:	d110      	bne.n	8002940 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f023 0312 	bic.w	r3, r3, #18
 8002926:	f043 0210 	orr.w	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 80d6 	bne.w	8002afa <HAL_ADC_Init+0x2da>
 800294e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80d1 	bne.w	8002afa <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 80c9 	bne.w	8002afa <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002970:	f043 0202 	orr.w	r2, r3, #2
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002978:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_ADC_Init+0x304>)
 800297a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d108      	bne.n	80029a0 <HAL_ADC_Init+0x180>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_Init+0x180>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_ADC_Init+0x182>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11c      	bne.n	80029e0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_ADC_Init+0x1a8>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_Init+0x1a8>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_ADC_Init+0x1aa>
 80029c8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d108      	bne.n	80029e0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80029ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	431a      	orrs	r2, r3
 80029dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029de:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7e5b      	ldrb	r3, [r3, #25]
 80029e4:	035b      	lsls	r3, r3, #13
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ea:	2a01      	cmp	r2, #1
 80029ec:	d002      	beq.n	80029f4 <HAL_ADC_Init+0x1d4>
 80029ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029f2:	e000      	b.n	80029f6 <HAL_ADC_Init+0x1d6>
 80029f4:	2200      	movs	r2, #0
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a06:	4313      	orrs	r3, r2
 8002a08:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d11b      	bne.n	8002a4c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7e5b      	ldrb	r3, [r3, #25]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	3b01      	subs	r3, #1
 8002a22:	045a      	lsls	r2, r3, #17
 8002a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a2e:	e00d      	b.n	8002a4c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d007      	beq.n	8002a64 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a60:	4313      	orrs	r3, r2
 8002a62:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d114      	bne.n	8002a9c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a80:	f023 0302 	bic.w	r3, r3, #2
 8002a84:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7e1b      	ldrb	r3, [r3, #24]
 8002a8a:	039a      	lsls	r2, r3, #14
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4313      	orrs	r3, r2
 8002a96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_ADC_Init+0x308>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002aac:	430b      	orrs	r3, r1
 8002aae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f023 010f 	bic.w	r1, r3, #15
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	1e5a      	subs	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad0:	e007      	b.n	8002ae2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 020f 	bic.w	r2, r2, #15
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f023 0303 	bic.w	r3, r3, #3
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
 8002af8:	e00a      	b.n	8002b10 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f023 0312 	bic.w	r3, r3, #18
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002b10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3768      	adds	r7, #104	; 0x68
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000760 	.word	0x20000760
 8002b20:	431bde83 	.word	0x431bde83
 8002b24:	50000300 	.word	0x50000300
 8002b28:	fff0c007 	.word	0xfff0c007

08002b2c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d158      	bne.n	8002bf8 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_Start+0x28>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e054      	b.n	8002bfe <HAL_ADC_Start+0xd2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fc43 	bl	80033e8 <ADC_Enable>
 8002b62:	4603      	mov	r3, r0
 8002b64:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d140      	bne.n	8002bee <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ba2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f023 0206 	bic.w	r2, r3, #6
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	221c      	movs	r2, #28
 8002bda:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0204 	orr.w	r2, r2, #4
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	e006      	b.n	8002bfc <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bf6:	e001      	b.n	8002bfc <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d102      	bne.n	8002c24 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002c1e:	2308      	movs	r3, #8
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e02e      	b.n	8002c82 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c24:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <HAL_ADC_PollForConversion+0x178>)
 8002c26:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d112      	bne.n	8002c5a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d11d      	bne.n	8002c7e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0220 	orr.w	r2, r3, #32
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e08d      	b.n	8002d76 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07b      	b.n	8002d76 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002c7e:	230c      	movs	r3, #12
 8002c80:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002c8a:	f7ff fd99 	bl	80027c0 <HAL_GetTick>
 8002c8e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002c90:	e021      	b.n	8002cd6 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d01d      	beq.n	8002cd6 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_ADC_PollForConversion+0xa8>
 8002ca0:	f7ff fd8e 	bl	80027c0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d212      	bcs.n	8002cd6 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0204 	orr.w	r2, r3, #4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e04f      	b.n	8002d76 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0d6      	beq.n	8002c92 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d131      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d12c      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d125      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d112      	bne.n	8002d4a <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d112      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
 8002d48:	e00b      	b.n	8002d62 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	50000300 	.word	0x50000300

08002d84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_ADCEx_Calibration_Start+0x1c>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e05f      	b.n	8002e7a <HAL_ADCEx_Calibration_Start+0xdc>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fb74 	bl	80034b0 <ADC_Disable>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d14e      	bne.n	8002e70 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002de6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dfc:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e0c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002e0e:	f7ff fcd7 	bl	80027c0 <HAL_GetTick>
 8002e12:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002e14:	e01c      	b.n	8002e50 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e16:	f7ff fcd3 	bl	80027c0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b0a      	cmp	r3, #10
 8002e22:	d915      	bls.n	8002e50 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e32:	d10d      	bne.n	8002e50 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f023 0312 	bic.w	r3, r3, #18
 8002e3c:	f043 0210 	orr.w	r2, r3, #16
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e014      	b.n	8002e7a <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e5e:	d0da      	beq.n	8002e16 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f023 0303 	bic.w	r3, r3, #3
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b09b      	sub	sp, #108	; 0x6c
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x22>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e295      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x54e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 8279 	bne.w	80033b0 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d81c      	bhi.n	8002f00 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	461a      	mov	r2, r3
 8002eda:	231f      	movs	r3, #31
 8002edc:	4093      	lsls	r3, r2
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	4019      	ands	r1, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
 8002efe:	e063      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d81e      	bhi.n	8002f46 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	3b1e      	subs	r3, #30
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4019      	ands	r1, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	3b1e      	subs	r3, #30
 8002f38:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34
 8002f44:	e040      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b0e      	cmp	r3, #14
 8002f4c:	d81e      	bhi.n	8002f8c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	3b3c      	subs	r3, #60	; 0x3c
 8002f62:	221f      	movs	r2, #31
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	4019      	ands	r1, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	3b3c      	subs	r3, #60	; 0x3c
 8002f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8a:	e01d      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	3b5a      	subs	r3, #90	; 0x5a
 8002fa0:	221f      	movs	r2, #31
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	4019      	ands	r1, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	3b5a      	subs	r3, #90	; 0x5a
 8002fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 80e5 	bne.w	80031a2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d91c      	bls.n	800301a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6999      	ldr	r1, [r3, #24]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b1e      	subs	r3, #30
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4019      	ands	r1, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6898      	ldr	r0, [r3, #8]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	3b1e      	subs	r3, #30
 800300c:	fa00 f203 	lsl.w	r2, r0, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
 8003018:	e019      	b.n	800304e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6959      	ldr	r1, [r3, #20]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	2207      	movs	r2, #7
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	4019      	ands	r1, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6898      	ldr	r0, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	3b01      	subs	r3, #1
 800306c:	2b03      	cmp	r3, #3
 800306e:	d84f      	bhi.n	8003110 <HAL_ADC_ConfigChannel+0x28c>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <HAL_ADC_ConfigChannel+0x1f4>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	08003089 	.word	0x08003089
 800307c:	080030ab 	.word	0x080030ab
 8003080:	080030cd 	.word	0x080030cd
 8003084:	080030ef 	.word	0x080030ef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800308e:	4b97      	ldr	r3, [pc, #604]	; (80032ec <HAL_ADC_ConfigChannel+0x468>)
 8003090:	4013      	ands	r3, r2
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	0691      	lsls	r1, r2, #26
 8003098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800309a:	430a      	orrs	r2, r1
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030a6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030a8:	e07b      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030b0:	4b8e      	ldr	r3, [pc, #568]	; (80032ec <HAL_ADC_ConfigChannel+0x468>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	0691      	lsls	r1, r2, #26
 80030ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030bc:	430a      	orrs	r2, r1
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030ca:	e06a      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030d2:	4b86      	ldr	r3, [pc, #536]	; (80032ec <HAL_ADC_ConfigChannel+0x468>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	0691      	lsls	r1, r2, #26
 80030dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030de:	430a      	orrs	r2, r1
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030ea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030ec:	e059      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030f4:	4b7d      	ldr	r3, [pc, #500]	; (80032ec <HAL_ADC_ConfigChannel+0x468>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	0691      	lsls	r1, r2, #26
 80030fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003100:	430a      	orrs	r2, r1
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800310c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800310e:	e048      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	069b      	lsls	r3, r3, #26
 8003120:	429a      	cmp	r2, r3
 8003122:	d107      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003132:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	069b      	lsls	r3, r3, #26
 8003144:	429a      	cmp	r2, r3
 8003146:	d107      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003156:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800315e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	069b      	lsls	r3, r3, #26
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800317a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	069b      	lsls	r3, r3, #26
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800319e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80031a0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x33e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x33e>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x340>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 80fe 	bne.w	80033c6 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d00f      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43da      	mvns	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	400a      	ands	r2, r1
 80031ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80031f0:	e049      	b.n	8003286 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2201      	movs	r2, #1
 8003200:	409a      	lsls	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b09      	cmp	r3, #9
 8003212:	d91c      	bls.n	800324e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6999      	ldr	r1, [r3, #24]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	3b1b      	subs	r3, #27
 8003226:	2207      	movs	r2, #7
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	4019      	ands	r1, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6898      	ldr	r0, [r3, #8]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	3b1b      	subs	r3, #27
 8003240:	fa00 f203 	lsl.w	r2, r0, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	619a      	str	r2, [r3, #24]
 800324c:	e01b      	b.n	8003286 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6959      	ldr	r1, [r3, #20]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	2207      	movs	r2, #7
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	4019      	ands	r1, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6898      	ldr	r0, [r3, #8]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	fa00 f203 	lsl.w	r2, r0, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <HAL_ADC_ConfigChannel+0x46c>)
 8003288:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b10      	cmp	r3, #16
 8003290:	d105      	bne.n	800329e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800329a:	2b00      	cmp	r3, #0
 800329c:	d014      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80032a2:	2b11      	cmp	r3, #17
 80032a4:	d105      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80032a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80032b6:	2b12      	cmp	r3, #18
 80032b8:	f040 8085 	bne.w	80033c6 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80032bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d17e      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d10c      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x470>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x470>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e004      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x472>
 80032ec:	83fff000 	.word	0x83fff000
 80032f0:	50000300 	.word	0x50000300
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d150      	bne.n	800339c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_ADC_ConfigChannel+0x498>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_ADC_ConfigChannel+0x498>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_ADC_ConfigChannel+0x49a>
 800331c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800331e:	2b00      	cmp	r3, #0
 8003320:	d13c      	bne.n	800339c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d11d      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x4e2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003332:	d118      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800333c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_ADC_ConfigChannel+0x55c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <HAL_ADC_ConfigChannel+0x560>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0c9a      	lsrs	r2, r3, #18
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003356:	e002      	b.n	800335e <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f9      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003364:	e02e      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b11      	cmp	r3, #17
 800336c:	d10b      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x502>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003376:	d106      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003382:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003384:	e01e      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b12      	cmp	r3, #18
 800338c:	d11a      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800338e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003398:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800339a:	e013      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033ae:	e00a      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033c2:	e000      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033c4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	376c      	adds	r7, #108	; 0x6c
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000760 	.word	0x20000760
 80033e4:	431bde83 	.word	0x431bde83

080033e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <ADC_Enable+0x2c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <ADC_Enable+0x2c>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <ADC_Enable+0x2e>
 8003414:	2300      	movs	r3, #0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d143      	bne.n	80034a2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	4b22      	ldr	r3, [pc, #136]	; (80034ac <ADC_Enable+0xc4>)
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f043 0210 	orr.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f043 0201 	orr.w	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e02f      	b.n	80034a4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003454:	f7ff f9b4 	bl	80027c0 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800345a:	e01b      	b.n	8003494 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800345c:	f7ff f9b0 	bl	80027c0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d914      	bls.n	8003494 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d00d      	beq.n	8003494 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f043 0210 	orr.w	r2, r3, #16
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e007      	b.n	80034a4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d1dc      	bne.n	800345c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	8000003f 	.word	0x8000003f

080034b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <ADC_Disable+0x2c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <ADC_Disable+0x2c>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <ADC_Disable+0x2e>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d047      	beq.n	8003572 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030d 	and.w	r3, r3, #13
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d10f      	bne.n	8003510 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0202 	orr.w	r2, r2, #2
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2203      	movs	r2, #3
 8003506:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003508:	f7ff f95a 	bl	80027c0 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800350e:	e029      	b.n	8003564 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e023      	b.n	8003574 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800352c:	f7ff f948 	bl	80027c0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d914      	bls.n	8003564 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d10d      	bne.n	8003564 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e007      	b.n	8003574 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d0dc      	beq.n	800352c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003598:	4013      	ands	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ae:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	60d3      	str	r3, [r2, #12]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <__NVIC_GetPriorityGrouping+0x18>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	f003 0307 	and.w	r3, r3, #7
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	db0b      	blt.n	800360a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4907      	ldr	r1, [pc, #28]	; (8003618 <__NVIC_EnableIRQ+0x38>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2001      	movs	r0, #1
 8003602:	fa00 f202 	lsl.w	r2, r0, r2
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000e100 	.word	0xe000e100

0800361c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db0a      	blt.n	8003646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	490c      	ldr	r1, [pc, #48]	; (8003668 <__NVIC_SetPriority+0x4c>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	440b      	add	r3, r1
 8003640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003644:	e00a      	b.n	800365c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4908      	ldr	r1, [pc, #32]	; (800366c <__NVIC_SetPriority+0x50>)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3b04      	subs	r3, #4
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	440b      	add	r3, r1
 800365a:	761a      	strb	r2, [r3, #24]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f1c3 0307 	rsb	r3, r3, #7
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf28      	it	cs
 800368e:	2304      	movcs	r3, #4
 8003690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3304      	adds	r3, #4
 8003696:	2b06      	cmp	r3, #6
 8003698:	d902      	bls.n	80036a0 <NVIC_EncodePriority+0x30>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3b03      	subs	r3, #3
 800369e:	e000      	b.n	80036a2 <NVIC_EncodePriority+0x32>
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	401a      	ands	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43d9      	mvns	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	4313      	orrs	r3, r2
         );
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	; 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e8:	d301      	bcc.n	80036ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00f      	b.n	800370e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <SysTick_Config+0x40>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f6:	210f      	movs	r1, #15
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f7ff ff8e 	bl	800361c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <SysTick_Config+0x40>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <SysTick_Config+0x40>)
 8003708:	2207      	movs	r2, #7
 800370a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	e000e010 	.word	0xe000e010

0800371c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff29 	bl	800357c <__NVIC_SetPriorityGrouping>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003744:	f7ff ff3e 	bl	80035c4 <__NVIC_GetPriorityGrouping>
 8003748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f7ff ff8e 	bl	8003670 <NVIC_EncodePriority>
 8003754:	4602      	mov	r2, r0
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff5d 	bl	800361c <__NVIC_SetPriority>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff31 	bl	80035e0 <__NVIC_EnableIRQ>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffa2 	bl	80036d8 <SysTick_Config>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e014      	b.n	80037da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	791b      	ldrb	r3, [r3, #4]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fe fcff 	bl	80021c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	795b      	ldrb	r3, [r3, #5]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_DAC_Start_DMA+0x1e>
 800383a:	2302      	movs	r3, #2
 800383c:	e053      	b.n	80038e6 <HAL_DAC_Start_DMA+0xc6>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2202      	movs	r2, #2
 8003848:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <HAL_DAC_Start_DMA+0xd0>)
 8003850:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <HAL_DAC_Start_DMA+0xd4>)
 8003858:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <HAL_DAC_Start_DMA+0xd8>)
 8003860:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003870:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d013      	beq.n	80038a0 <HAL_DAC_Start_DMA+0x80>
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	2b08      	cmp	r3, #8
 800387c:	d815      	bhi.n	80038aa <HAL_DAC_Start_DMA+0x8a>
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_DAC_Start_DMA+0x6c>
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d005      	beq.n	8003896 <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 800388a:	e00e      	b.n	80038aa <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3308      	adds	r3, #8
 8003892:	617b      	str	r3, [r7, #20]
      break;
 8003894:	e00a      	b.n	80038ac <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	617b      	str	r3, [r7, #20]
      break;
 800389e:	e005      	b.n	80038ac <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3310      	adds	r3, #16
 80038a6:	617b      	str	r3, [r7, #20]
      break;
 80038a8:	e000      	b.n	80038ac <HAL_DAC_Start_DMA+0x8c>
      break;
 80038aa:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ba:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6898      	ldr	r0, [r3, #8]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	f000 f8e3 	bl	8003a90 <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	2201      	movs	r2, #1
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	08003997 	.word	0x08003997
 80038f4:	080039b9 	.word	0x080039b9
 80038f8:	080039d5 	.word	0x080039d5

080038fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	795b      	ldrb	r3, [r3, #5]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_DAC_ConfigChannel+0x20>
 8003918:	2302      	movs	r3, #2
 800391a:	e036      	b.n	800398a <HAL_DAC_ConfigChannel+0x8e>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2202      	movs	r2, #2
 8003926:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003930:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4013      	ands	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	22c0      	movs	r2, #192	; 0xc0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	400a      	ands	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff ff1c 	bl	80037e2 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	711a      	strb	r2, [r3, #4]
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff ff15 	bl	80037f6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff0b 	bl	800380a <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	711a      	strb	r2, [r3, #4]
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e037      	b.n	8003a88 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f9b8 	bl	8003de0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}  
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DMA_Start_IT+0x20>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e04a      	b.n	8003b46 <HAL_DMA_Start_IT+0xb6>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d13a      	bne.n	8003b38 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f94b 	bl	8003d82 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 020e 	orr.w	r2, r2, #14
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e00f      	b.n	8003b26 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 020a 	orr.w	r2, r2, #10
 8003b14:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0204 	bic.w	r2, r2, #4
 8003b24:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e005      	b.n	8003b44 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
 8003b42:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d008      	beq.n	8003b72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2204      	movs	r2, #4
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e020      	b.n	8003bb4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 020e 	bic.w	r2, r2, #14
 8003b80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d005      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
 8003be0:	e027      	b.n	8003c32 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 020e 	bic.w	r2, r2, #14
 8003bf0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
    } 
  }
  return status;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	2204      	movs	r2, #4
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d024      	beq.n	8003cae <HAL_DMA_IRQHandler+0x72>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01f      	beq.n	8003cae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0204 	bic.w	r2, r2, #4
 8003c8a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	2104      	movs	r1, #4
 8003c96:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d06a      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003cac:	e065      	b.n	8003d7a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d02c      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xdc>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d027      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 020a 	bic.w	r2, r2, #10
 8003ce4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d035      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003d16:	e030      	b.n	8003d7a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d028      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x13e>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d023      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 020e 	bic.w	r2, r2, #14
 8003d40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
    }
  }
}  
 8003d78:	e7ff      	b.n	8003d7a <HAL_DMA_IRQHandler+0x13e>
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d108      	bne.n	8003dc2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dc0:	e007      	b.n	8003dd2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	60da      	str	r2, [r3, #12]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <DMA_CalcBaseAndBitshift+0x34>)
 8003df0:	4413      	add	r3, r2
 8003df2:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <DMA_CalcBaseAndBitshift+0x38>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <DMA_CalcBaseAndBitshift+0x3c>)
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	bffdfff8 	.word	0xbffdfff8
 8003e18:	cccccccd 	.word	0xcccccccd
 8003e1c:	40020000 	.word	0x40020000

08003e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2e:	e14e      	b.n	80040ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8140 	beq.w	80040c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d005      	beq.n	8003e60 <HAL_GPIO_Init+0x40>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d130      	bne.n	8003ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e96:	2201      	movs	r2, #1
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0201 	and.w	r2, r3, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d017      	beq.n	8003efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d123      	bne.n	8003f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	220f      	movs	r2, #15
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	08da      	lsrs	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3208      	adds	r2, #8
 8003f4c:	6939      	ldr	r1, [r7, #16]
 8003f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0203 	and.w	r2, r3, #3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 809a 	beq.w	80040c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f94:	4b55      	ldr	r3, [pc, #340]	; (80040ec <HAL_GPIO_Init+0x2cc>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	4a54      	ldr	r2, [pc, #336]	; (80040ec <HAL_GPIO_Init+0x2cc>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6193      	str	r3, [r2, #24]
 8003fa0:	4b52      	ldr	r3, [pc, #328]	; (80040ec <HAL_GPIO_Init+0x2cc>)
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fac:	4a50      	ldr	r2, [pc, #320]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	3302      	adds	r3, #2
 8003fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fd6:	d013      	beq.n	8004000 <HAL_GPIO_Init+0x1e0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a46      	ldr	r2, [pc, #280]	; (80040f4 <HAL_GPIO_Init+0x2d4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00d      	beq.n	8003ffc <HAL_GPIO_Init+0x1dc>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a45      	ldr	r2, [pc, #276]	; (80040f8 <HAL_GPIO_Init+0x2d8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <HAL_GPIO_Init+0x1d8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a44      	ldr	r2, [pc, #272]	; (80040fc <HAL_GPIO_Init+0x2dc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <HAL_GPIO_Init+0x1d4>
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e006      	b.n	8004002 <HAL_GPIO_Init+0x1e2>
 8003ff4:	2305      	movs	r3, #5
 8003ff6:	e004      	b.n	8004002 <HAL_GPIO_Init+0x1e2>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e002      	b.n	8004002 <HAL_GPIO_Init+0x1e2>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_GPIO_Init+0x1e2>
 8004000:	2300      	movs	r3, #0
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	f002 0203 	and.w	r2, r2, #3
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	4093      	lsls	r3, r2
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004012:	4937      	ldr	r1, [pc, #220]	; (80040f0 <HAL_GPIO_Init+0x2d0>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	3302      	adds	r3, #2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004020:	4b37      	ldr	r3, [pc, #220]	; (8004100 <HAL_GPIO_Init+0x2e0>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004044:	4a2e      	ldr	r2, [pc, #184]	; (8004100 <HAL_GPIO_Init+0x2e0>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800404a:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <HAL_GPIO_Init+0x2e0>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	43db      	mvns	r3, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800406e:	4a24      	ldr	r2, [pc, #144]	; (8004100 <HAL_GPIO_Init+0x2e0>)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <HAL_GPIO_Init+0x2e0>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	43db      	mvns	r3, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_GPIO_Init+0x2e0>)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800409e:	4b18      	ldr	r3, [pc, #96]	; (8004100 <HAL_GPIO_Init+0x2e0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80040c2:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <HAL_GPIO_Init+0x2e0>)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f aea9 	bne.w	8003e30 <HAL_GPIO_Init+0x10>
  }
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40010000 	.word	0x40010000
 80040f4:	48000400 	.word	0x48000400
 80040f8:	48000800 	.word	0x48000800
 80040fc:	48000c00 	.word	0x48000c00
 8004100:	40010400 	.word	0x40010400

08004104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
 8004110:	4613      	mov	r3, r2
 8004112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004114:	787b      	ldrb	r3, [r7, #1]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004120:	e002      	b.n	8004128 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	041a      	lsls	r2, r3, #16
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43d9      	mvns	r1, r3
 8004152:	887b      	ldrh	r3, [r7, #2]
 8004154:	400b      	ands	r3, r1
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800417e:	4a05      	ldr	r2, [pc, #20]	; (8004194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f806 	bl	8004198 <HAL_GPIO_EXTI_Callback>
  }
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40010400 	.word	0x40010400

08004198 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e081      	b.n	80042c4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fe f869 	bl	80022ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	; 0x24
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800420e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d107      	bne.n	8004228 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	e006      	b.n	8004236 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004234:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d104      	bne.n	8004248 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004246:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800426a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69d9      	ldr	r1, [r3, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1a      	ldr	r2, [r3, #32]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	461a      	mov	r2, r3
 80042d8:	460b      	mov	r3, r1
 80042da:	817b      	strh	r3, [r7, #10]
 80042dc:	4613      	mov	r3, r2
 80042de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	f040 80da 	bne.w	80044a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_I2C_Master_Transmit+0x30>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0d3      	b.n	80044a4 <HAL_I2C_Master_Transmit+0x1d8>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004304:	f7fe fa5c 	bl	80027c0 <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2319      	movs	r3, #25
 8004310:	2201      	movs	r2, #1
 8004312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa5e 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0be      	b.n	80044a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2221      	movs	r2, #33	; 0x21
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2210      	movs	r2, #16
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	893a      	ldrh	r2, [r7, #8]
 8004346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2bff      	cmp	r3, #255	; 0xff
 8004356:	d90e      	bls.n	8004376 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	22ff      	movs	r2, #255	; 0xff
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	b2da      	uxtb	r2, r3
 8004364:	8979      	ldrh	r1, [r7, #10]
 8004366:	4b51      	ldr	r3, [pc, #324]	; (80044ac <HAL_I2C_Master_Transmit+0x1e0>)
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fbec 	bl	8004b4c <I2C_TransferConfig>
 8004374:	e06c      	b.n	8004450 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	b2da      	uxtb	r2, r3
 8004386:	8979      	ldrh	r1, [r7, #10]
 8004388:	4b48      	ldr	r3, [pc, #288]	; (80044ac <HAL_I2C_Master_Transmit+0x1e0>)
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fbdb 	bl	8004b4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004396:	e05b      	b.n	8004450 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	6a39      	ldr	r1, [r7, #32]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fa6a 	bl	8004876 <I2C_WaitOnTXISFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e07b      	b.n	80044a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d034      	beq.n	8004450 <HAL_I2C_Master_Transmit+0x184>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d130      	bne.n	8004450 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f9ed 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e04d      	b.n	80044a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2bff      	cmp	r3, #255	; 0xff
 8004410:	d90e      	bls.n	8004430 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	22ff      	movs	r2, #255	; 0xff
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	b2da      	uxtb	r2, r3
 800441e:	8979      	ldrh	r1, [r7, #10]
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fb8f 	bl	8004b4c <I2C_TransferConfig>
 800442e:	e00f      	b.n	8004450 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	b2da      	uxtb	r2, r3
 8004440:	8979      	ldrh	r1, [r7, #10]
 8004442:	2300      	movs	r3, #0
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fb7e 	bl	8004b4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d19e      	bne.n	8004398 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	6a39      	ldr	r1, [r7, #32]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fa50 	bl	8004904 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e01a      	b.n	80044a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2220      	movs	r2, #32
 8004474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8004482:	400b      	ands	r3, r1
 8004484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e000      	b.n	80044a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80044a2:	2302      	movs	r3, #2
  }
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	80002000 	.word	0x80002000
 80044b0:	fe00e800 	.word	0xfe00e800

080044b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	4608      	mov	r0, r1
 80044be:	4611      	mov	r1, r2
 80044c0:	461a      	mov	r2, r3
 80044c2:	4603      	mov	r3, r0
 80044c4:	817b      	strh	r3, [r7, #10]
 80044c6:	460b      	mov	r3, r1
 80044c8:	813b      	strh	r3, [r7, #8]
 80044ca:	4613      	mov	r3, r2
 80044cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	f040 80fd 	bne.w	80046d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_I2C_Mem_Read+0x34>
 80044e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0f1      	b.n	80046d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_I2C_Mem_Read+0x4e>
 80044fe:	2302      	movs	r3, #2
 8004500:	e0ea      	b.n	80046d8 <HAL_I2C_Mem_Read+0x224>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800450a:	f7fe f959 	bl	80027c0 <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2319      	movs	r3, #25
 8004516:	2201      	movs	r2, #1
 8004518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f95b 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0d5      	b.n	80046d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2222      	movs	r2, #34	; 0x22
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2240      	movs	r2, #64	; 0x40
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004554:	88f8      	ldrh	r0, [r7, #6]
 8004556:	893a      	ldrh	r2, [r7, #8]
 8004558:	8979      	ldrh	r1, [r7, #10]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4603      	mov	r3, r0
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f8bf 	bl	80046e8 <I2C_RequestMemoryRead>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0ad      	b.n	80046d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	2bff      	cmp	r3, #255	; 0xff
 8004584:	d90e      	bls.n	80045a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	22ff      	movs	r2, #255	; 0xff
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	b2da      	uxtb	r2, r3
 8004592:	8979      	ldrh	r1, [r7, #10]
 8004594:	4b52      	ldr	r3, [pc, #328]	; (80046e0 <HAL_I2C_Mem_Read+0x22c>)
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fad5 	bl	8004b4c <I2C_TransferConfig>
 80045a2:	e00f      	b.n	80045c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	8979      	ldrh	r1, [r7, #10]
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_I2C_Mem_Read+0x22c>)
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fac4 	bl	8004b4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	2200      	movs	r2, #0
 80045cc:	2104      	movs	r1, #4
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f902 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e07c      	b.n	80046d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d034      	beq.n	8004684 <HAL_I2C_Mem_Read+0x1d0>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	2b00      	cmp	r3, #0
 8004620:	d130      	bne.n	8004684 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	2200      	movs	r2, #0
 800462a:	2180      	movs	r1, #128	; 0x80
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f8d3 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e04d      	b.n	80046d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	2bff      	cmp	r3, #255	; 0xff
 8004644:	d90e      	bls.n	8004664 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	22ff      	movs	r2, #255	; 0xff
 800464a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	b2da      	uxtb	r2, r3
 8004652:	8979      	ldrh	r1, [r7, #10]
 8004654:	2300      	movs	r3, #0
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fa75 	bl	8004b4c <I2C_TransferConfig>
 8004662:	e00f      	b.n	8004684 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	b2da      	uxtb	r2, r3
 8004674:	8979      	ldrh	r1, [r7, #10]
 8004676:	2300      	movs	r3, #0
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fa64 	bl	8004b4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d19a      	bne.n	80045c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f936 	bl	8004904 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e01a      	b.n	80046d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2220      	movs	r2, #32
 80046a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6859      	ldr	r1, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_I2C_Mem_Read+0x230>)
 80046b6:	400b      	ands	r3, r1
 80046b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	80002400 	.word	0x80002400
 80046e4:	fe00e800 	.word	0xfe00e800

080046e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	4608      	mov	r0, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	461a      	mov	r2, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	817b      	strh	r3, [r7, #10]
 80046fa:	460b      	mov	r3, r1
 80046fc:	813b      	strh	r3, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	b2da      	uxtb	r2, r3
 8004706:	8979      	ldrh	r1, [r7, #10]
 8004708:	4b20      	ldr	r3, [pc, #128]	; (800478c <I2C_RequestMemoryRead+0xa4>)
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2300      	movs	r3, #0
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa1c 	bl	8004b4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f8ac 	bl	8004876 <I2C_WaitOnTXISFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e02c      	b.n	8004782 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800472e:	893b      	ldrh	r3, [r7, #8]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
 8004738:	e015      	b.n	8004766 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800473a:	893b      	ldrh	r3, [r7, #8]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	b29b      	uxth	r3, r3
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f892 	bl	8004876 <I2C_WaitOnTXISFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e012      	b.n	8004782 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800475c:	893b      	ldrh	r3, [r7, #8]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2200      	movs	r2, #0
 800476e:	2140      	movs	r1, #64	; 0x40
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f831 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	80002000 	.word	0x80002000

08004790 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d103      	bne.n	80047ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d007      	beq.n	80047cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	619a      	str	r2, [r3, #24]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e8:	e031      	b.n	800484e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d02d      	beq.n	800484e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fd ffe5 	bl	80027c0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d122      	bne.n	800484e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4013      	ands	r3, r2
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	429a      	cmp	r2, r3
 8004824:	d113      	bne.n	800484e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e00f      	b.n	800486e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0be      	beq.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004882:	e033      	b.n	80048ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f87f 	bl	800498c <I2C_IsErrorOccurred>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e031      	b.n	80048fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489e:	d025      	beq.n	80048ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a0:	f7fd ff8e 	bl	80027c0 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11a      	bne.n	80048ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d013      	beq.n	80048ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d1c4      	bne.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004910:	e02f      	b.n	8004972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f838 	bl	800498c <I2C_IsErrorOccurred>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e02d      	b.n	8004982 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7fd ff4b 	bl	80027c0 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d11a      	bne.n	8004972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b20      	cmp	r3, #32
 8004948:	d013      	beq.n	8004972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e007      	b.n	8004982 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b20      	cmp	r3, #32
 800497e:	d1c8      	bne.n	8004912 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d068      	beq.n	8004a8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2210      	movs	r2, #16
 80049be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049c0:	e049      	b.n	8004a56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d045      	beq.n	8004a56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fd fef9 	bl	80027c0 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <I2C_IsErrorOccurred+0x54>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d13a      	bne.n	8004a56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a02:	d121      	bne.n	8004a48 <I2C_IsErrorOccurred+0xbc>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a0a:	d01d      	beq.n	8004a48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d01a      	beq.n	8004a48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a22:	f7fd fecd 	bl	80027c0 <HAL_GetTick>
 8004a26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a28:	e00e      	b.n	8004a48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a2a:	f7fd fec9 	bl	80027c0 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b19      	cmp	r3, #25
 8004a36:	d907      	bls.n	8004a48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f043 0320 	orr.w	r3, r3, #32
 8004a3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004a46:	e006      	b.n	8004a56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d1e9      	bne.n	8004a2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d003      	beq.n	8004a6c <I2C_IsErrorOccurred+0xe0>
 8004a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0aa      	beq.n	80049c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f043 0304 	orr.w	r3, r3, #4
 8004a82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	f043 0308 	orr.w	r3, r3, #8
 8004ac4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ace:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	f043 0302 	orr.w	r3, r3, #2
 8004ae6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01c      	beq.n	8004b3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff fe45 	bl	8004790 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <I2C_IsErrorOccurred+0x1bc>)
 8004b12:	400b      	ands	r3, r1
 8004b14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3728      	adds	r7, #40	; 0x28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	fe00e800 	.word	0xfe00e800

08004b4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	817b      	strh	r3, [r7, #10]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b5e:	897b      	ldrh	r3, [r7, #10]
 8004b60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b64:	7a7b      	ldrb	r3, [r7, #9]
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	0d5b      	lsrs	r3, r3, #21
 8004b86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <I2C_TransferConfig+0x60>)
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	ea02 0103 	and.w	r1, r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	03ff63ff 	.word	0x03ff63ff

08004bb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d138      	bne.n	8004c38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e032      	b.n	8004c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6819      	ldr	r1, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d139      	bne.n	8004cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e033      	b.n	8004cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2224      	movs	r2, #36	; 0x24
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	6193      	str	r3, [r2, #24]
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4905      	ldr	r1, [pc, #20]	; (8004d1c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	600b      	str	r3, [r1, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40010000 	.word	0x40010000

08004d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d102      	bne.n	8004d46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f001 b823 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 817d 	beq.w	8005056 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d5c:	4bbc      	ldr	r3, [pc, #752]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 030c 	and.w	r3, r3, #12
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d00c      	beq.n	8004d82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d68:	4bb9      	ldr	r3, [pc, #740]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d15c      	bne.n	8004e2e <HAL_RCC_OscConfig+0x10e>
 8004d74:	4bb6      	ldr	r3, [pc, #728]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d155      	bne.n	8004e2e <HAL_RCC_OscConfig+0x10e>
 8004d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9a:	fab3 f383 	clz	r3, r3
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_OscConfig+0x94>
 8004dae:	4ba8      	ldr	r3, [pc, #672]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	e015      	b.n	8004de0 <HAL_RCC_OscConfig+0xc0>
 8004db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004dc0:	fa93 f3a3 	rbit	r3, r3
 8004dc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004dd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004ddc:	4b9c      	ldr	r3, [pc, #624]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004de4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004de8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004dec:	fa92 f2a2 	rbit	r2, r2
 8004df0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004df4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004df8:	fab2 f282 	clz	r2, r2
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	f042 0220 	orr.w	r2, r2, #32
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	f002 021f 	and.w	r2, r2, #31
 8004e08:	2101      	movs	r1, #1
 8004e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 811f 	beq.w	8005054 <HAL_RCC_OscConfig+0x334>
 8004e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 8116 	bne.w	8005054 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f000 bfaf 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x12e>
 8004e40:	4b83      	ldr	r3, [pc, #524]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a82      	ldr	r2, [pc, #520]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	e036      	b.n	8004ebc <HAL_RCC_OscConfig+0x19c>
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x158>
 8004e5e:	4b7c      	ldr	r3, [pc, #496]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7b      	ldr	r2, [pc, #492]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b79      	ldr	r3, [pc, #484]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a78      	ldr	r2, [pc, #480]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e021      	b.n	8004ebc <HAL_RCC_OscConfig+0x19c>
 8004e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x184>
 8004e8a:	4b71      	ldr	r3, [pc, #452]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a70      	ldr	r2, [pc, #448]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4b6e      	ldr	r3, [pc, #440]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6d      	ldr	r2, [pc, #436]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCC_OscConfig+0x19c>
 8004ea4:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a69      	ldr	r2, [pc, #420]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b67      	ldr	r3, [pc, #412]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a66      	ldr	r2, [pc, #408]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ebc:	4b64      	ldr	r3, [pc, #400]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	f023 020f 	bic.w	r2, r3, #15
 8004ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	495f      	ldr	r1, [pc, #380]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d059      	beq.n	8004f9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee6:	f7fd fc6b 	bl	80027c0 <HAL_GetTick>
 8004eea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fd fc66 	bl	80027c0 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b64      	cmp	r3, #100	; 0x64
 8004efe:	d902      	bls.n	8004f06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	f000 bf43 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>
 8004f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004f12:	fa93 f3a3 	rbit	r3, r3
 8004f16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004f1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	fab3 f383 	clz	r3, r3
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d102      	bne.n	8004f38 <HAL_RCC_OscConfig+0x218>
 8004f32:	4b47      	ldr	r3, [pc, #284]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	e015      	b.n	8004f64 <HAL_RCC_OscConfig+0x244>
 8004f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004f44:	fa93 f3a3 	rbit	r3, r3
 8004f48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004f54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004f58:	fa93 f3a3 	rbit	r3, r3
 8004f5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004f60:	4b3b      	ldr	r3, [pc, #236]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004f6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004f70:	fa92 f2a2 	rbit	r2, r2
 8004f74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004f78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004f7c:	fab2 f282 	clz	r2, r2
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	f042 0220 	orr.w	r2, r2, #32
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	f002 021f 	and.w	r2, r2, #31
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ab      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x1d0>
 8004f98:	e05d      	b.n	8005056 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fd fc11 	bl	80027c0 <HAL_GetTick>
 8004f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa4:	f7fd fc0c 	bl	80027c0 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b64      	cmp	r3, #100	; 0x64
 8004fb2:	d902      	bls.n	8004fba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	f000 bee9 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>
 8004fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004fce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd2:	fab3 f383 	clz	r3, r3
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d102      	bne.n	8004fec <HAL_RCC_OscConfig+0x2cc>
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	e015      	b.n	8005018 <HAL_RCC_OscConfig+0x2f8>
 8004fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ff0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005004:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005008:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800500c:	fa93 f3a3 	rbit	r3, r3
 8005010:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <HAL_RCC_OscConfig+0x330>)
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800501c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005020:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005024:	fa92 f2a2 	rbit	r2, r2
 8005028:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800502c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005030:	fab2 f282 	clz	r2, r2
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	f042 0220 	orr.w	r2, r2, #32
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	f002 021f 	and.w	r2, r2, #31
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f202 	lsl.w	r2, r1, r2
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ab      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x284>
 800504c:	e003      	b.n	8005056 <HAL_RCC_OscConfig+0x336>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 817d 	beq.w	8005366 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800506c:	4ba6      	ldr	r3, [pc, #664]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 030c 	and.w	r3, r3, #12
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00b      	beq.n	8005090 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005078:	4ba3      	ldr	r3, [pc, #652]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f003 030c 	and.w	r3, r3, #12
 8005080:	2b08      	cmp	r3, #8
 8005082:	d172      	bne.n	800516a <HAL_RCC_OscConfig+0x44a>
 8005084:	4ba0      	ldr	r3, [pc, #640]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d16c      	bne.n	800516a <HAL_RCC_OscConfig+0x44a>
 8005090:	2302      	movs	r3, #2
 8005092:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80050a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a6:	fab3 f383 	clz	r3, r3
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d102      	bne.n	80050c0 <HAL_RCC_OscConfig+0x3a0>
 80050ba:	4b93      	ldr	r3, [pc, #588]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	e013      	b.n	80050e8 <HAL_RCC_OscConfig+0x3c8>
 80050c0:	2302      	movs	r3, #2
 80050c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80050ca:	fa93 f3a3 	rbit	r3, r3
 80050ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80050d2:	2302      	movs	r3, #2
 80050d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80050d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80050dc:	fa93 f3a3 	rbit	r3, r3
 80050e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80050e4:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2202      	movs	r2, #2
 80050ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80050ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80050f2:	fa92 f2a2 	rbit	r2, r2
 80050f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80050fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80050fe:	fab2 f282 	clz	r2, r2
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	f042 0220 	orr.w	r2, r2, #32
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	f002 021f 	and.w	r2, r2, #31
 800510e:	2101      	movs	r1, #1
 8005110:	fa01 f202 	lsl.w	r2, r1, r2
 8005114:	4013      	ands	r3, r2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCC_OscConfig+0x410>
 800511a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d002      	beq.n	8005130 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f000 be2e 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	4b75      	ldr	r3, [pc, #468]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	21f8      	movs	r1, #248	; 0xf8
 8005146:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800514e:	fa91 f1a1 	rbit	r1, r1
 8005152:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005156:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800515a:	fab1 f181 	clz	r1, r1
 800515e:	b2c9      	uxtb	r1, r1
 8005160:	408b      	lsls	r3, r1
 8005162:	4969      	ldr	r1, [pc, #420]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 8005164:	4313      	orrs	r3, r2
 8005166:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005168:	e0fd      	b.n	8005366 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8088 	beq.w	800528c <HAL_RCC_OscConfig+0x56c>
 800517c:	2301      	movs	r3, #1
 800517e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800518e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005192:	fab3 f383 	clz	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800519c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	461a      	mov	r2, r3
 80051a4:	2301      	movs	r3, #1
 80051a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fd fb0a 	bl	80027c0 <HAL_GetTick>
 80051ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051b2:	f7fd fb05 	bl	80027c0 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	f000 bde2 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>
 80051c8:	2302      	movs	r3, #2
 80051ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80051da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051de:	fab3 f383 	clz	r3, r3
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d102      	bne.n	80051f8 <HAL_RCC_OscConfig+0x4d8>
 80051f2:	4b45      	ldr	r3, [pc, #276]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	e013      	b.n	8005220 <HAL_RCC_OscConfig+0x500>
 80051f8:	2302      	movs	r3, #2
 80051fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005202:	fa93 f3a3 	rbit	r3, r3
 8005206:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800520a:	2302      	movs	r3, #2
 800520c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005210:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005214:	fa93 f3a3 	rbit	r3, r3
 8005218:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800521c:	4b3a      	ldr	r3, [pc, #232]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2202      	movs	r2, #2
 8005222:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005226:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800522a:	fa92 f2a2 	rbit	r2, r2
 800522e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005232:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005236:	fab2 f282 	clz	r2, r2
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	f042 0220 	orr.w	r2, r2, #32
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	f002 021f 	and.w	r2, r2, #31
 8005246:	2101      	movs	r1, #1
 8005248:	fa01 f202 	lsl.w	r2, r1, r2
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0af      	beq.n	80051b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005252:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800525a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	21f8      	movs	r1, #248	; 0xf8
 8005268:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005270:	fa91 f1a1 	rbit	r1, r1
 8005274:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005278:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800527c:	fab1 f181 	clz	r1, r1
 8005280:	b2c9      	uxtb	r1, r1
 8005282:	408b      	lsls	r3, r1
 8005284:	4920      	ldr	r1, [pc, #128]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
 800528a:	e06c      	b.n	8005366 <HAL_RCC_OscConfig+0x646>
 800528c:	2301      	movs	r3, #1
 800528e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005296:	fa93 f3a3 	rbit	r3, r3
 800529a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800529e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a2:	fab3 f383 	clz	r3, r3
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	461a      	mov	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fd fa82 	bl	80027c0 <HAL_GetTick>
 80052bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c0:	e00a      	b.n	80052d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052c2:	f7fd fa7d 	bl	80027c0 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d902      	bls.n	80052d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	f000 bd5a 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>
 80052d8:	2302      	movs	r3, #2
 80052da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80052e2:	fa93 f3a3 	rbit	r3, r3
 80052e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80052ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	fab3 f383 	clz	r3, r3
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d104      	bne.n	800530c <HAL_RCC_OscConfig+0x5ec>
 8005302:	4b01      	ldr	r3, [pc, #4]	; (8005308 <HAL_RCC_OscConfig+0x5e8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	e015      	b.n	8005334 <HAL_RCC_OscConfig+0x614>
 8005308:	40021000 	.word	0x40021000
 800530c:	2302      	movs	r3, #2
 800530e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800531e:	2302      	movs	r3, #2
 8005320:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005324:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005328:	fa93 f3a3 	rbit	r3, r3
 800532c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005330:	4bc8      	ldr	r3, [pc, #800]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2202      	movs	r2, #2
 8005336:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800533a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800533e:	fa92 f2a2 	rbit	r2, r2
 8005342:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005346:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800534a:	fab2 f282 	clz	r2, r2
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	f042 0220 	orr.w	r2, r2, #32
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	f002 021f 	and.w	r2, r2, #31
 800535a:	2101      	movs	r1, #1
 800535c:	fa01 f202 	lsl.w	r2, r1, r2
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1ad      	bne.n	80052c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800536a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8110 	beq.w	800559c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800537c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005380:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d079      	beq.n	8005480 <HAL_RCC_OscConfig+0x760>
 800538c:	2301      	movs	r3, #1
 800538e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800539e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a2:	fab3 f383 	clz	r3, r3
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	4bab      	ldr	r3, [pc, #684]	; (8005658 <HAL_RCC_OscConfig+0x938>)
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	461a      	mov	r2, r3
 80053b2:	2301      	movs	r3, #1
 80053b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b6:	f7fd fa03 	bl	80027c0 <HAL_GetTick>
 80053ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c0:	f7fd f9fe 	bl	80027c0 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d902      	bls.n	80053d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	f000 bcdb 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>
 80053d6:	2302      	movs	r3, #2
 80053d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053e0:	fa93 f3a3 	rbit	r3, r3
 80053e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80053f0:	2202      	movs	r2, #2
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	fa93 f2a3 	rbit	r2, r3
 8005402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005414:	2202      	movs	r2, #2
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	fa93 f2a3 	rbit	r2, r3
 8005426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800542e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005430:	4b88      	ldr	r3, [pc, #544]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 8005432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005438:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800543c:	2102      	movs	r1, #2
 800543e:	6019      	str	r1, [r3, #0]
 8005440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005444:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	fa93 f1a3 	rbit	r1, r3
 800544e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005456:	6019      	str	r1, [r3, #0]
  return result;
 8005458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	2101      	movs	r1, #1
 8005474:	fa01 f303 	lsl.w	r3, r1, r3
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0a0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x6a0>
 800547e:	e08d      	b.n	800559c <HAL_RCC_OscConfig+0x87c>
 8005480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005484:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005490:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	fa93 f2a3 	rbit	r2, r3
 800549a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054a2:	601a      	str	r2, [r3, #0]
  return result;
 80054a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ae:	fab3 f383 	clz	r3, r3
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b68      	ldr	r3, [pc, #416]	; (8005658 <HAL_RCC_OscConfig+0x938>)
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c2:	f7fd f97d 	bl	80027c0 <HAL_GetTick>
 80054c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054cc:	f7fd f978 	bl	80027c0 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d902      	bls.n	80054e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	f000 bc55 	b.w	8005d8c <HAL_RCC_OscConfig+0x106c>
 80054e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80054ea:	2202      	movs	r2, #2
 80054ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	fa93 f2a3 	rbit	r2, r3
 80054fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005500:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800550e:	2202      	movs	r2, #2
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005516:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	fa93 f2a3 	rbit	r2, r3
 8005520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005532:	2202      	movs	r2, #2
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	fa93 f2a3 	rbit	r2, r3
 8005544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005548:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800554c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554e:	4b41      	ldr	r3, [pc, #260]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 8005550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005556:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800555a:	2102      	movs	r1, #2
 800555c:	6019      	str	r1, [r3, #0]
 800555e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005562:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	fa93 f1a3 	rbit	r1, r3
 800556c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005570:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005574:	6019      	str	r1, [r3, #0]
  return result;
 8005576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	fab3 f383 	clz	r3, r3
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	2101      	movs	r1, #1
 8005592:	fa01 f303 	lsl.w	r3, r1, r3
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d197      	bne.n	80054cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800559c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 81a1 	beq.w	80058f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b8:	4b26      	ldr	r3, [pc, #152]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d116      	bne.n	80055f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c4:	4b23      	ldr	r3, [pc, #140]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	4a22      	ldr	r2, [pc, #136]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ce:	61d3      	str	r3, [r2, #28]
 80055d0:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80055d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80055ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80055ec:	2301      	movs	r3, #1
 80055ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_RCC_OscConfig+0x93c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d11a      	bne.n	8005634 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <HAL_RCC_OscConfig+0x93c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a16      	ldr	r2, [pc, #88]	; (800565c <HAL_RCC_OscConfig+0x93c>)
 8005604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005608:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560a:	f7fd f8d9 	bl	80027c0 <HAL_GetTick>
 800560e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005612:	e009      	b.n	8005628 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005614:	f7fd f8d4 	bl	80027c0 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b64      	cmp	r3, #100	; 0x64
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e3b1      	b.n	8005d8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <HAL_RCC_OscConfig+0x93c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0ef      	beq.n	8005614 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005638:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10d      	bne.n	8005660 <HAL_RCC_OscConfig+0x940>
 8005644:	4b03      	ldr	r3, [pc, #12]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	4a02      	ldr	r2, [pc, #8]	; (8005654 <HAL_RCC_OscConfig+0x934>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6213      	str	r3, [r2, #32]
 8005650:	e03c      	b.n	80056cc <HAL_RCC_OscConfig+0x9ac>
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	10908120 	.word	0x10908120
 800565c:	40007000 	.word	0x40007000
 8005660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005664:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10c      	bne.n	800568a <HAL_RCC_OscConfig+0x96a>
 8005670:	4bc1      	ldr	r3, [pc, #772]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	4ac0      	ldr	r2, [pc, #768]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	6213      	str	r3, [r2, #32]
 800567c:	4bbe      	ldr	r3, [pc, #760]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	4abd      	ldr	r2, [pc, #756]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 8005682:	f023 0304 	bic.w	r3, r3, #4
 8005686:	6213      	str	r3, [r2, #32]
 8005688:	e020      	b.n	80056cc <HAL_RCC_OscConfig+0x9ac>
 800568a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b05      	cmp	r3, #5
 8005698:	d10c      	bne.n	80056b4 <HAL_RCC_OscConfig+0x994>
 800569a:	4bb7      	ldr	r3, [pc, #732]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	4ab6      	ldr	r2, [pc, #728]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80056a0:	f043 0304 	orr.w	r3, r3, #4
 80056a4:	6213      	str	r3, [r2, #32]
 80056a6:	4bb4      	ldr	r3, [pc, #720]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4ab3      	ldr	r2, [pc, #716]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	6213      	str	r3, [r2, #32]
 80056b2:	e00b      	b.n	80056cc <HAL_RCC_OscConfig+0x9ac>
 80056b4:	4bb0      	ldr	r3, [pc, #704]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	4aaf      	ldr	r2, [pc, #700]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	6213      	str	r3, [r2, #32]
 80056c0:	4bad      	ldr	r3, [pc, #692]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	4aac      	ldr	r2, [pc, #688]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80056c6:	f023 0304 	bic.w	r3, r3, #4
 80056ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8081 	beq.w	80057e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056de:	f7fd f86f 	bl	80027c0 <HAL_GetTick>
 80056e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e6:	e00b      	b.n	8005700 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fd f86a 	bl	80027c0 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e345      	b.n	8005d8c <HAL_RCC_OscConfig+0x106c>
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005708:	2202      	movs	r2, #2
 800570a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005710:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	fa93 f2a3 	rbit	r2, r3
 800571a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005728:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800572c:	2202      	movs	r2, #2
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005734:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	fa93 f2a3 	rbit	r2, r3
 800573e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005742:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005746:	601a      	str	r2, [r3, #0]
  return result;
 8005748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005750:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005752:	fab3 f383 	clz	r3, r3
 8005756:	b2db      	uxtb	r3, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d102      	bne.n	800576c <HAL_RCC_OscConfig+0xa4c>
 8005766:	4b84      	ldr	r3, [pc, #528]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	e013      	b.n	8005794 <HAL_RCC_OscConfig+0xa74>
 800576c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005770:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005774:	2202      	movs	r2, #2
 8005776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	fa93 f2a3 	rbit	r2, r3
 8005786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	4b79      	ldr	r3, [pc, #484]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005798:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800579c:	2102      	movs	r1, #2
 800579e:	6011      	str	r1, [r2, #0]
 80057a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	fa92 f1a2 	rbit	r1, r2
 80057ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80057b6:	6011      	str	r1, [r2, #0]
  return result;
 80057b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	fab2 f282 	clz	r2, r2
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	f002 021f 	and.w	r2, r2, #31
 80057d2:	2101      	movs	r1, #1
 80057d4:	fa01 f202 	lsl.w	r2, r1, r2
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d084      	beq.n	80056e8 <HAL_RCC_OscConfig+0x9c8>
 80057de:	e07f      	b.n	80058e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e0:	f7fc ffee 	bl	80027c0 <HAL_GetTick>
 80057e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e8:	e00b      	b.n	8005802 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fc ffe9 	bl	80027c0 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e2c4      	b.n	8005d8c <HAL_RCC_OscConfig+0x106c>
 8005802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005806:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800580a:	2202      	movs	r2, #2
 800580c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005812:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	fa93 f2a3 	rbit	r2, r3
 800581c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005820:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800582e:	2202      	movs	r2, #2
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005836:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	fa93 f2a3 	rbit	r2, r3
 8005840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005844:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005848:	601a      	str	r2, [r3, #0]
  return result;
 800584a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800584e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005852:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005854:	fab3 f383 	clz	r3, r3
 8005858:	b2db      	uxtb	r3, r3
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f043 0302 	orr.w	r3, r3, #2
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d102      	bne.n	800586e <HAL_RCC_OscConfig+0xb4e>
 8005868:	4b43      	ldr	r3, [pc, #268]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	e013      	b.n	8005896 <HAL_RCC_OscConfig+0xb76>
 800586e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005872:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005876:	2202      	movs	r2, #2
 8005878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	fa93 f2a3 	rbit	r2, r3
 8005888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	4b39      	ldr	r3, [pc, #228]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800589a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800589e:	2102      	movs	r1, #2
 80058a0:	6011      	str	r1, [r2, #0]
 80058a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	fa92 f1a2 	rbit	r1, r2
 80058b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80058b8:	6011      	str	r1, [r2, #0]
  return result;
 80058ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	fab2 f282 	clz	r2, r2
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	f002 021f 	and.w	r2, r2, #31
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f202 	lsl.w	r2, r1, r2
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d184      	bne.n	80057ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d105      	bne.n	80058f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e8:	4b23      	ldr	r3, [pc, #140]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	4a22      	ldr	r2, [pc, #136]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 80058ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8242 	beq.w	8005d8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005906:	4b1c      	ldr	r3, [pc, #112]	; (8005978 <HAL_RCC_OscConfig+0xc58>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b08      	cmp	r3, #8
 8005910:	f000 8213 	beq.w	8005d3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	2b02      	cmp	r3, #2
 8005922:	f040 8162 	bne.w	8005bea <HAL_RCC_OscConfig+0xeca>
 8005926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800592e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005938:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	fa93 f2a3 	rbit	r2, r3
 8005942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005946:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800594a:	601a      	str	r2, [r3, #0]
  return result;
 800594c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005950:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005954:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005956:	fab3 f383 	clz	r3, r3
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005960:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	461a      	mov	r2, r3
 8005968:	2300      	movs	r3, #0
 800596a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596c:	f7fc ff28 	bl	80027c0 <HAL_GetTick>
 8005970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005974:	e00c      	b.n	8005990 <HAL_RCC_OscConfig+0xc70>
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597c:	f7fc ff20 	bl	80027c0 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e1fd      	b.n	8005d8c <HAL_RCC_OscConfig+0x106c>
 8005990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005994:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800599c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	fa93 f2a3 	rbit	r2, r3
 80059ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80059b4:	601a      	str	r2, [r3, #0]
  return result;
 80059b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80059be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c0:	fab3 f383 	clz	r3, r3
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d102      	bne.n	80059da <HAL_RCC_OscConfig+0xcba>
 80059d4:	4bb0      	ldr	r3, [pc, #704]	; (8005c98 <HAL_RCC_OscConfig+0xf78>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	e027      	b.n	8005a2a <HAL_RCC_OscConfig+0xd0a>
 80059da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80059e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	fa93 f2a3 	rbit	r2, r3
 80059f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	fa93 f2a3 	rbit	r2, r3
 8005a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	4b9c      	ldr	r3, [pc, #624]	; (8005c98 <HAL_RCC_OscConfig+0xf78>)
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005a32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a36:	6011      	str	r1, [r2, #0]
 8005a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	fa92 f1a2 	rbit	r1, r2
 8005a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005a4e:	6011      	str	r1, [r2, #0]
  return result;
 8005a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	fab2 f282 	clz	r2, r2
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	f042 0220 	orr.w	r2, r2, #32
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	f002 021f 	and.w	r2, r2, #31
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d182      	bne.n	800597c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a76:	4b88      	ldr	r3, [pc, #544]	; (8005c98 <HAL_RCC_OscConfig+0xf78>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	430b      	orrs	r3, r1
 8005a98:	497f      	ldr	r1, [pc, #508]	; (8005c98 <HAL_RCC_OscConfig+0xf78>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
 8005a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	fa93 f2a3 	rbit	r2, r3
 8005aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005abe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005ac2:	601a      	str	r2, [r3, #0]
  return result;
 8005ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005acc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ace:	fab3 f383 	clz	r3, r3
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fc fe6c 	bl	80027c0 <HAL_GetTick>
 8005ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005aec:	e009      	b.n	8005b02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fc fe67 	bl	80027c0 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e144      	b.n	8005d8c <HAL_RCC_OscConfig+0x106c>
 8005b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	fa93 f2a3 	rbit	r2, r3
 8005b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005b26:	601a      	str	r2, [r3, #0]
  return result;
 8005b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005b30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b32:	fab3 f383 	clz	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d102      	bne.n	8005b4c <HAL_RCC_OscConfig+0xe2c>
 8005b46:	4b54      	ldr	r3, [pc, #336]	; (8005c98 <HAL_RCC_OscConfig+0xf78>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	e027      	b.n	8005b9c <HAL_RCC_OscConfig+0xe7c>
 8005b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	fa93 f2a3 	rbit	r2, r3
 8005b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	fa93 f2a3 	rbit	r2, r3
 8005b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <HAL_RCC_OscConfig+0xf78>)
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ba0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005ba4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	fa92 f1a2 	rbit	r1, r2
 8005bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bbc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005bc0:	6011      	str	r1, [r2, #0]
  return result;
 8005bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bc6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	fab2 f282 	clz	r2, r2
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	f042 0220 	orr.w	r2, r2, #32
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	f002 021f 	and.w	r2, r2, #31
 8005bdc:	2101      	movs	r1, #1
 8005bde:	fa01 f202 	lsl.w	r2, r1, r2
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d082      	beq.n	8005aee <HAL_RCC_OscConfig+0xdce>
 8005be8:	e0cf      	b.n	8005d8a <HAL_RCC_OscConfig+0x106a>
 8005bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	fa93 f2a3 	rbit	r2, r3
 8005c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005c0e:	601a      	str	r2, [r3, #0]
  return result;
 8005c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005c18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1a:	fab3 f383 	clz	r3, r3
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fc fdc6 	bl	80027c0 <HAL_GetTick>
 8005c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c38:	e009      	b.n	8005c4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c3a:	f7fc fdc1 	bl	80027c0 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e09e      	b.n	8005d8c <HAL_RCC_OscConfig+0x106c>
 8005c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	fa93 f2a3 	rbit	r2, r3
 8005c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005c72:	601a      	str	r2, [r3, #0]
  return result;
 8005c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005c7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c7e:	fab3 f383 	clz	r3, r3
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d104      	bne.n	8005c9c <HAL_RCC_OscConfig+0xf7c>
 8005c92:	4b01      	ldr	r3, [pc, #4]	; (8005c98 <HAL_RCC_OscConfig+0xf78>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	e029      	b.n	8005cec <HAL_RCC_OscConfig+0xfcc>
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	fa93 f2a3 	rbit	r2, r3
 8005cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cd4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	fa93 f2a3 	rbit	r2, r3
 8005cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ce2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <HAL_RCC_OscConfig+0x1078>)
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cf0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005cf8:	6011      	str	r1, [r2, #0]
 8005cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cfe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	fa92 f1a2 	rbit	r1, r2
 8005d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005d10:	6011      	str	r1, [r2, #0]
  return result;
 8005d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	fab2 f282 	clz	r2, r2
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	f042 0220 	orr.w	r2, r2, #32
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	f002 021f 	and.w	r2, r2, #31
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d180      	bne.n	8005c3a <HAL_RCC_OscConfig+0xf1a>
 8005d38:	e027      	b.n	8005d8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e01e      	b.n	8005d8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <HAL_RCC_OscConfig+0x1078>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005d5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d10b      	bne.n	8005d86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005d6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d001      	beq.n	8005d8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40021000 	.word	0x40021000

08005d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b09e      	sub	sp, #120	; 0x78
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e162      	b.n	800607a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db4:	4b90      	ldr	r3, [pc, #576]	; (8005ff8 <HAL_RCC_ClockConfig+0x25c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d910      	bls.n	8005de4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc2:	4b8d      	ldr	r3, [pc, #564]	; (8005ff8 <HAL_RCC_ClockConfig+0x25c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 0207 	bic.w	r2, r3, #7
 8005dca:	498b      	ldr	r1, [pc, #556]	; (8005ff8 <HAL_RCC_ClockConfig+0x25c>)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd2:	4b89      	ldr	r3, [pc, #548]	; (8005ff8 <HAL_RCC_ClockConfig+0x25c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e14a      	b.n	800607a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df0:	4b82      	ldr	r3, [pc, #520]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	497f      	ldr	r1, [pc, #508]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 80dc 	beq.w	8005fc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d13c      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xf6>
 8005e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e20:	fa93 f3a3 	rbit	r3, r3
 8005e24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e28:	fab3 f383 	clz	r3, r3
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d102      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xa6>
 8005e3c:	4b6f      	ldr	r3, [pc, #444]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	e00f      	b.n	8005e62 <HAL_RCC_ClockConfig+0xc6>
 8005e42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e4a:	fa93 f3a3 	rbit	r3, r3
 8005e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8005e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e54:	663b      	str	r3, [r7, #96]	; 0x60
 8005e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e58:	fa93 f3a3 	rbit	r3, r3
 8005e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e5e:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e66:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e6a:	fa92 f2a2 	rbit	r2, r2
 8005e6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005e70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e72:	fab2 f282 	clz	r2, r2
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	f042 0220 	orr.w	r2, r2, #32
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	f002 021f 	and.w	r2, r2, #31
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f202 	lsl.w	r2, r1, r2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d17b      	bne.n	8005f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e0f3      	b.n	800607a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d13c      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x178>
 8005e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea2:	fa93 f3a3 	rbit	r3, r3
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eaa:	fab3 f383 	clz	r3, r3
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d102      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0x128>
 8005ebe:	4b4f      	ldr	r3, [pc, #316]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	e00f      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x148>
 8005ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	fa93 f3a3 	rbit	r3, r3
 8005ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eda:	fa93 f3a3 	rbit	r3, r3
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee0:	4b46      	ldr	r3, [pc, #280]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ee8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eec:	fa92 f2a2 	rbit	r2, r2
 8005ef0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef4:	fab2 f282 	clz	r2, r2
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	f042 0220 	orr.w	r2, r2, #32
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	f002 021f 	and.w	r2, r2, #31
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f202 	lsl.w	r2, r1, r2
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d13a      	bne.n	8005f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0b2      	b.n	800607a <HAL_RCC_ClockConfig+0x2de>
 8005f14:	2302      	movs	r3, #2
 8005f16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	fa93 f3a3 	rbit	r3, r3
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d102      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x1a0>
 8005f36:	4b31      	ldr	r3, [pc, #196]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	e00d      	b.n	8005f58 <HAL_RCC_ClockConfig+0x1bc>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
 8005f48:	2302      	movs	r3, #2
 8005f4a:	623b      	str	r3, [r7, #32]
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	fa93 f3a3 	rbit	r3, r3
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	4b29      	ldr	r3, [pc, #164]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	2202      	movs	r2, #2
 8005f5a:	61ba      	str	r2, [r7, #24]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	fa92 f2a2 	rbit	r2, r2
 8005f62:	617a      	str	r2, [r7, #20]
  return result;
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	fab2 f282 	clz	r2, r2
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	f042 0220 	orr.w	r2, r2, #32
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	f002 021f 	and.w	r2, r2, #31
 8005f76:	2101      	movs	r1, #1
 8005f78:	fa01 f202 	lsl.w	r2, r1, r2
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e079      	b.n	800607a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f023 0203 	bic.w	r2, r3, #3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	491a      	ldr	r1, [pc, #104]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f98:	f7fc fc12 	bl	80027c0 <HAL_GetTick>
 8005f9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa0:	f7fc fc0e 	bl	80027c0 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e061      	b.n	800607a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <HAL_RCC_ClockConfig+0x260>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f003 020c 	and.w	r2, r3, #12
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d1eb      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCC_ClockConfig+0x25c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d214      	bcs.n	8006000 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd6:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <HAL_RCC_ClockConfig+0x25c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f023 0207 	bic.w	r2, r3, #7
 8005fde:	4906      	ldr	r1, [pc, #24]	; (8005ff8 <HAL_RCC_ClockConfig+0x25c>)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <HAL_RCC_ClockConfig+0x25c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d005      	beq.n	8006000 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e040      	b.n	800607a <HAL_RCC_ClockConfig+0x2de>
 8005ff8:	40022000 	.word	0x40022000
 8005ffc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800600c:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <HAL_RCC_ClockConfig+0x2e8>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	491a      	ldr	r1, [pc, #104]	; (8006084 <HAL_RCC_ClockConfig+0x2e8>)
 800601a:	4313      	orrs	r3, r2
 800601c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602a:	4b16      	ldr	r3, [pc, #88]	; (8006084 <HAL_RCC_ClockConfig+0x2e8>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	4912      	ldr	r1, [pc, #72]	; (8006084 <HAL_RCC_ClockConfig+0x2e8>)
 800603a:	4313      	orrs	r3, r2
 800603c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800603e:	f000 f829 	bl	8006094 <HAL_RCC_GetSysClockFreq>
 8006042:	4601      	mov	r1, r0
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <HAL_RCC_ClockConfig+0x2e8>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800604c:	22f0      	movs	r2, #240	; 0xf0
 800604e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	fa92 f2a2 	rbit	r2, r2
 8006056:	60fa      	str	r2, [r7, #12]
  return result;
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	fab2 f282 	clz	r2, r2
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	40d3      	lsrs	r3, r2
 8006062:	4a09      	ldr	r2, [pc, #36]	; (8006088 <HAL_RCC_ClockConfig+0x2ec>)
 8006064:	5cd3      	ldrb	r3, [r2, r3]
 8006066:	fa21 f303 	lsr.w	r3, r1, r3
 800606a:	4a08      	ldr	r2, [pc, #32]	; (800608c <HAL_RCC_ClockConfig+0x2f0>)
 800606c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800606e:	4b08      	ldr	r3, [pc, #32]	; (8006090 <HAL_RCC_ClockConfig+0x2f4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f7fc fb60 	bl	8002738 <HAL_InitTick>
  
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3778      	adds	r7, #120	; 0x78
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000
 8006088:	0800ba0c 	.word	0x0800ba0c
 800608c:	20000760 	.word	0x20000760
 8006090:	20000764 	.word	0x20000764

08006094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	b08b      	sub	sp, #44	; 0x2c
 8006098:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	2300      	movs	r3, #0
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	2300      	movs	r3, #0
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80060ae:	4b29      	ldr	r3, [pc, #164]	; (8006154 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d002      	beq.n	80060c4 <HAL_RCC_GetSysClockFreq+0x30>
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d003      	beq.n	80060ca <HAL_RCC_GetSysClockFreq+0x36>
 80060c2:	e03c      	b.n	800613e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060c4:	4b24      	ldr	r3, [pc, #144]	; (8006158 <HAL_RCC_GetSysClockFreq+0xc4>)
 80060c6:	623b      	str	r3, [r7, #32]
      break;
 80060c8:	e03c      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80060d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80060d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	fa92 f2a2 	rbit	r2, r2
 80060dc:	607a      	str	r2, [r7, #4]
  return result;
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	fab2 f282 	clz	r2, r2
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	40d3      	lsrs	r3, r2
 80060e8:	4a1c      	ldr	r2, [pc, #112]	; (800615c <HAL_RCC_GetSysClockFreq+0xc8>)
 80060ea:	5cd3      	ldrb	r3, [r2, r3]
 80060ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80060ee:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	220f      	movs	r2, #15
 80060f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	fa92 f2a2 	rbit	r2, r2
 8006100:	60fa      	str	r2, [r7, #12]
  return result;
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	fab2 f282 	clz	r2, r2
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	40d3      	lsrs	r3, r2
 800610c:	4a14      	ldr	r2, [pc, #80]	; (8006160 <HAL_RCC_GetSysClockFreq+0xcc>)
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d008      	beq.n	800612e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800611c:	4a0e      	ldr	r2, [pc, #56]	; (8006158 <HAL_RCC_GetSysClockFreq+0xc4>)
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	fbb2 f2f3 	udiv	r2, r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
 800612c:	e004      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006132:	fb02 f303 	mul.w	r3, r2, r3
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	623b      	str	r3, [r7, #32]
      break;
 800613c:	e002      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800613e:	4b06      	ldr	r3, [pc, #24]	; (8006158 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006140:	623b      	str	r3, [r7, #32]
      break;
 8006142:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006144:	6a3b      	ldr	r3, [r7, #32]
}
 8006146:	4618      	mov	r0, r3
 8006148:	372c      	adds	r7, #44	; 0x2c
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40021000 	.word	0x40021000
 8006158:	007a1200 	.word	0x007a1200
 800615c:	0800ba24 	.word	0x0800ba24
 8006160:	0800ba34 	.word	0x0800ba34
 8006164:	003d0900 	.word	0x003d0900

08006168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800616c:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_RCC_GetHCLKFreq+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000760 	.word	0x20000760

08006180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006186:	f7ff ffef 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 800618a:	4601      	mov	r1, r0
 800618c:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006194:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006198:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	fa92 f2a2 	rbit	r2, r2
 80061a0:	603a      	str	r2, [r7, #0]
  return result;
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	fab2 f282 	clz	r2, r2
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	40d3      	lsrs	r3, r2
 80061ac:	4a04      	ldr	r2, [pc, #16]	; (80061c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80061ae:	5cd3      	ldrb	r3, [r2, r3]
 80061b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40021000 	.word	0x40021000
 80061c0:	0800ba1c 	.word	0x0800ba1c

080061c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80061ca:	f7ff ffcd 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 80061ce:	4601      	mov	r1, r0
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80061d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80061dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	fa92 f2a2 	rbit	r2, r2
 80061e4:	603a      	str	r2, [r7, #0]
  return result;
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	fab2 f282 	clz	r2, r2
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	40d3      	lsrs	r3, r2
 80061f0:	4a04      	ldr	r2, [pc, #16]	; (8006204 <HAL_RCC_GetPCLK2Freq+0x40>)
 80061f2:	5cd3      	ldrb	r3, [r2, r3]
 80061f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40021000 	.word	0x40021000
 8006204:	0800ba1c 	.word	0x0800ba1c

08006208 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b092      	sub	sp, #72	; 0x48
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006218:	2300      	movs	r3, #0
 800621a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80d4 	beq.w	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800622c:	4b4e      	ldr	r3, [pc, #312]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10e      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006238:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4a4a      	ldr	r2, [pc, #296]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006242:	61d3      	str	r3, [r2, #28]
 8006244:	4b48      	ldr	r3, [pc, #288]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006256:	4b45      	ldr	r3, [pc, #276]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d118      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006262:	4b42      	ldr	r3, [pc, #264]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a41      	ldr	r2, [pc, #260]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800626e:	f7fc faa7 	bl	80027c0 <HAL_GetTick>
 8006272:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006274:	e008      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006276:	f7fc faa3 	bl	80027c0 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b64      	cmp	r3, #100	; 0x64
 8006282:	d901      	bls.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e14b      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006288:	4b38      	ldr	r3, [pc, #224]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f0      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006294:	4b34      	ldr	r3, [pc, #208]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800629e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8084 	beq.w	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d07c      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b4:	4b2c      	ldr	r3, [pc, #176]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	fa93 f3a3 	rbit	r3, r3
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062ce:	fab3 f383 	clz	r3, r3
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	4b26      	ldr	r3, [pc, #152]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	461a      	mov	r2, r3
 80062de:	2301      	movs	r3, #1
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	fa93 f3a3 	rbit	r3, r3
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062f2:	fab3 f383 	clz	r3, r3
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	461a      	mov	r2, r3
 8006302:	2300      	movs	r3, #0
 8006304:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800630c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d04b      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006316:	f7fc fa53 	bl	80027c0 <HAL_GetTick>
 800631a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631c:	e00a      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631e:	f7fc fa4f 	bl	80027c0 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	f241 3288 	movw	r2, #5000	; 0x1388
 800632c:	4293      	cmp	r3, r2
 800632e:	d901      	bls.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e0f5      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006334:	2302      	movs	r3, #2
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	fa93 f3a3 	rbit	r3, r3
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
 8006340:	2302      	movs	r3, #2
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	fa93 f3a3 	rbit	r3, r3
 800634a:	61fb      	str	r3, [r7, #28]
  return result;
 800634c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634e:	fab3 f383 	clz	r3, r3
 8006352:	b2db      	uxtb	r3, r3
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d108      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006362:	4b01      	ldr	r3, [pc, #4]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	e00d      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006368:	40021000 	.word	0x40021000
 800636c:	40007000 	.word	0x40007000
 8006370:	10908100 	.word	0x10908100
 8006374:	2302      	movs	r3, #2
 8006376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	fa93 f3a3 	rbit	r3, r3
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	4b69      	ldr	r3, [pc, #420]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	2202      	movs	r2, #2
 8006386:	613a      	str	r2, [r7, #16]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	fa92 f2a2 	rbit	r2, r2
 800638e:	60fa      	str	r2, [r7, #12]
  return result;
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	fab2 f282 	clz	r2, r2
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	f002 021f 	and.w	r2, r2, #31
 80063a2:	2101      	movs	r1, #1
 80063a4:	fa01 f202 	lsl.w	r2, r1, r2
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0b7      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80063ae:	4b5e      	ldr	r3, [pc, #376]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	495b      	ldr	r1, [pc, #364]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d105      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c8:	4b57      	ldr	r3, [pc, #348]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	4a56      	ldr	r2, [pc, #344]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063e0:	4b51      	ldr	r3, [pc, #324]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	f023 0203 	bic.w	r2, r3, #3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	494e      	ldr	r1, [pc, #312]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d008      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063fe:	4b4a      	ldr	r3, [pc, #296]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	f023 0210 	bic.w	r2, r3, #16
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4947      	ldr	r1, [pc, #284]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800640c:	4313      	orrs	r3, r2
 800640e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800641c:	4b42      	ldr	r3, [pc, #264]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	493f      	ldr	r1, [pc, #252]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800642a:	4313      	orrs	r3, r2
 800642c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800643a:	4b3b      	ldr	r3, [pc, #236]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f023 0220 	bic.w	r2, r3, #32
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4938      	ldr	r1, [pc, #224]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006448:	4313      	orrs	r3, r2
 800644a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006458:	4b33      	ldr	r3, [pc, #204]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	4930      	ldr	r1, [pc, #192]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006466:	4313      	orrs	r3, r2
 8006468:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006472:	2b00      	cmp	r3, #0
 8006474:	d008      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006476:	4b2c      	ldr	r3, [pc, #176]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4929      	ldr	r1, [pc, #164]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006484:	4313      	orrs	r3, r2
 8006486:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006494:	4b24      	ldr	r3, [pc, #144]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	4921      	ldr	r1, [pc, #132]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d008      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80064b2:	4b1d      	ldr	r3, [pc, #116]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	491a      	ldr	r1, [pc, #104]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80064d0:	4b15      	ldr	r3, [pc, #84]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	4912      	ldr	r1, [pc, #72]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80064ee:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fa:	490b      	ldr	r1, [pc, #44]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800650c:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	4903      	ldr	r1, [pc, #12]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800651a:	4313      	orrs	r3, r2
 800651c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3748      	adds	r7, #72	; 0x48
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40021000 	.word	0x40021000

0800652c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e049      	b.n	80065d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fb ff0c 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f000 fb16 	bl	8006b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d001      	beq.n	80065f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e033      	b.n	800665c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a19      	ldr	r2, [pc, #100]	; (8006668 <HAL_TIM_Base_Start+0x8c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d009      	beq.n	800661a <HAL_TIM_Base_Start+0x3e>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660e:	d004      	beq.n	800661a <HAL_TIM_Base_Start+0x3e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <HAL_TIM_Base_Start+0x90>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d115      	bne.n	8006646 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	4b13      	ldr	r3, [pc, #76]	; (8006670 <HAL_TIM_Base_Start+0x94>)
 8006622:	4013      	ands	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b06      	cmp	r3, #6
 800662a:	d015      	beq.n	8006658 <HAL_TIM_Base_Start+0x7c>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006632:	d011      	beq.n	8006658 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006644:	e008      	b.n	8006658 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0201 	orr.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e000      	b.n	800665a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006658:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40014000 	.word	0x40014000
 8006670:	00010007 	.word	0x00010007

08006674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	d001      	beq.n	800668c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e03b      	b.n	8006704 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a19      	ldr	r2, [pc, #100]	; (8006710 <HAL_TIM_Base_Start_IT+0x9c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_TIM_Base_Start_IT+0x4e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b6:	d004      	beq.n	80066c2 <HAL_TIM_Base_Start_IT+0x4e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <HAL_TIM_Base_Start_IT+0xa0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d115      	bne.n	80066ee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	4b13      	ldr	r3, [pc, #76]	; (8006718 <HAL_TIM_Base_Start_IT+0xa4>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b06      	cmp	r3, #6
 80066d2:	d015      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0x8c>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066da:	d011      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ec:	e008      	b.n	8006700 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e000      	b.n	8006702 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40014000 	.word	0x40014000
 8006718:	00010007 	.word	0x00010007

0800671c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a1a      	ldr	r2, [r3, #32]
 800673a:	f241 1311 	movw	r3, #4369	; 0x1111
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10f      	bne.n	8006764 <HAL_TIM_Base_Stop_IT+0x48>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	f240 4344 	movw	r3, #1092	; 0x444
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d107      	bne.n	8006764 <HAL_TIM_Base_Stop_IT+0x48>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b02      	cmp	r3, #2
 800678e:	d122      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b02      	cmp	r3, #2
 800679c:	d11b      	bne.n	80067d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f06f 0202 	mvn.w	r2, #2
 80067a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f9ce 	bl	8006b5e <HAL_TIM_IC_CaptureCallback>
 80067c2:	e005      	b.n	80067d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f9c0 	bl	8006b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9d1 	bl	8006b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d122      	bne.n	800682a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d11b      	bne.n	800682a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f06f 0204 	mvn.w	r2, #4
 80067fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f9a4 	bl	8006b5e <HAL_TIM_IC_CaptureCallback>
 8006816:	e005      	b.n	8006824 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f996 	bl	8006b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f9a7 	bl	8006b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b08      	cmp	r3, #8
 8006836:	d122      	bne.n	800687e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b08      	cmp	r3, #8
 8006844:	d11b      	bne.n	800687e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f06f 0208 	mvn.w	r2, #8
 800684e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2204      	movs	r2, #4
 8006854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f97a 	bl	8006b5e <HAL_TIM_IC_CaptureCallback>
 800686a:	e005      	b.n	8006878 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f96c 	bl	8006b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f97d 	bl	8006b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b10      	cmp	r3, #16
 800688a:	d122      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b10      	cmp	r3, #16
 8006898:	d11b      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f06f 0210 	mvn.w	r2, #16
 80068a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2208      	movs	r2, #8
 80068a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f950 	bl	8006b5e <HAL_TIM_IC_CaptureCallback>
 80068be:	e005      	b.n	80068cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f942 	bl	8006b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f953 	bl	8006b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d10e      	bne.n	80068fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d107      	bne.n	80068fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f06f 0201 	mvn.w	r2, #1
 80068f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fa fe91 	bl	8001620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006908:	2b80      	cmp	r3, #128	; 0x80
 800690a:	d10e      	bne.n	800692a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006916:	2b80      	cmp	r3, #128	; 0x80
 8006918:	d107      	bne.n	800692a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fab1 	bl	8006e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006938:	d10e      	bne.n	8006958 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	d107      	bne.n	8006958 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 faa4 	bl	8006ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d10e      	bne.n	8006984 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d107      	bne.n	8006984 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800697c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f901 	bl	8006b86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b20      	cmp	r3, #32
 8006990:	d10e      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b20      	cmp	r3, #32
 800699e:	d107      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0220 	mvn.w	r2, #32
 80069a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa64 	bl	8006e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e0b6      	b.n	8006b42 <HAL_TIM_ConfigClockSource+0x18a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a10:	d03e      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0xd8>
 8006a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a16:	f200 8087 	bhi.w	8006b28 <HAL_TIM_ConfigClockSource+0x170>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	f000 8086 	beq.w	8006b2e <HAL_TIM_ConfigClockSource+0x176>
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d87f      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x170>
 8006a28:	2b70      	cmp	r3, #112	; 0x70
 8006a2a:	d01a      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0xaa>
 8006a2c:	2b70      	cmp	r3, #112	; 0x70
 8006a2e:	d87b      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x170>
 8006a30:	2b60      	cmp	r3, #96	; 0x60
 8006a32:	d050      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x11e>
 8006a34:	2b60      	cmp	r3, #96	; 0x60
 8006a36:	d877      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x170>
 8006a38:	2b50      	cmp	r3, #80	; 0x50
 8006a3a:	d03c      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0xfe>
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d873      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x170>
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d058      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x13e>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d86f      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x170>
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	d064      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x15e>
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d86b      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x170>
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d060      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x15e>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d867      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x170>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d05c      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x15e>
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d05a      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x15e>
 8006a60:	e062      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a72:	f000 f97b 	bl	8006d6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	609a      	str	r2, [r3, #8]
      break;
 8006a8e:	e04f      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006aa0:	f000 f964 	bl	8006d6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab2:	609a      	str	r2, [r3, #8]
      break;
 8006ab4:	e03c      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f000 f8d8 	bl	8006c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2150      	movs	r1, #80	; 0x50
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f931 	bl	8006d36 <TIM_ITRx_SetConfig>
      break;
 8006ad4:	e02c      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f000 f8f7 	bl	8006cd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2160      	movs	r1, #96	; 0x60
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f921 	bl	8006d36 <TIM_ITRx_SetConfig>
      break;
 8006af4:	e01c      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b02:	461a      	mov	r2, r3
 8006b04:	f000 f8b8 	bl	8006c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2140      	movs	r1, #64	; 0x40
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f911 	bl	8006d36 <TIM_ITRx_SetConfig>
      break;
 8006b14:	e00c      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f000 f908 	bl	8006d36 <TIM_ITRx_SetConfig>
      break;
 8006b26:	e003      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b2c:	e000      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
	...

08006b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a2e      	ldr	r2, [pc, #184]	; (8006c68 <TIM_Base_SetConfig+0xcc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0x20>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bba:	d108      	bne.n	8006bce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a25      	ldr	r2, [pc, #148]	; (8006c68 <TIM_Base_SetConfig+0xcc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x5a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x5a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <TIM_Base_SetConfig+0xd0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_Base_SetConfig+0x5a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a21      	ldr	r2, [pc, #132]	; (8006c70 <TIM_Base_SetConfig+0xd4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_Base_SetConfig+0x5a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <TIM_Base_SetConfig+0xd8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <TIM_Base_SetConfig+0xcc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00b      	beq.n	8006c4c <TIM_Base_SetConfig+0xb0>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a0d      	ldr	r2, [pc, #52]	; (8006c6c <TIM_Base_SetConfig+0xd0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_Base_SetConfig+0xb0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a0c      	ldr	r2, [pc, #48]	; (8006c70 <TIM_Base_SetConfig+0xd4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_Base_SetConfig+0xb0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a0b      	ldr	r2, [pc, #44]	; (8006c74 <TIM_Base_SetConfig+0xd8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d103      	bne.n	8006c54 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	615a      	str	r2, [r3, #20]
}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40014000 	.word	0x40014000
 8006c70:	40014400 	.word	0x40014400
 8006c74:	40014800 	.word	0x40014800

08006c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f023 0201 	bic.w	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f023 030a 	bic.w	r3, r3, #10
 8006cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b087      	sub	sp, #28
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0210 	bic.w	r2, r3, #16
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	031b      	lsls	r3, r3, #12
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f043 0307 	orr.w	r3, r3, #7
 8006d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	609a      	str	r2, [r3, #8]
}
 8006d60:	bf00      	nop
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	021a      	lsls	r2, r3, #8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	609a      	str	r2, [r3, #8]
}
 8006da0:	bf00      	nop
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e04f      	b.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a21      	ldr	r2, [pc, #132]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d108      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006df4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a14      	ldr	r2, [pc, #80]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d009      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2c:	d004      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a10      	ldr	r2, [pc, #64]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10c      	bne.n	8006e52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40014000 	.word	0x40014000

08006e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e040      	b.n	8006f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fb fa96 	bl	8002408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	; 0x24
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0201 	bic.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fc00 	bl	80076f8 <UART_SetConfig>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e022      	b.n	8006f48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fd2a 	bl	8007964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fdb1 	bl	8007aa8 <UART_CheckIdleState>
 8006f46:	4603      	mov	r3, r0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d178      	bne.n	800705a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Transmit+0x24>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e071      	b.n	800705c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2221      	movs	r2, #33	; 0x21
 8006f84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f86:	f7fb fc1b 	bl	80027c0 <HAL_GetTick>
 8006f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	88fa      	ldrh	r2, [r7, #6]
 8006f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa4:	d108      	bne.n	8006fb8 <HAL_UART_Transmit+0x68>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e003      	b.n	8006fc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fc0:	e030      	b.n	8007024 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2180      	movs	r1, #128	; 0x80
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fe13 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e03c      	b.n	800705c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10b      	bne.n	8007000 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	881a      	ldrh	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	3302      	adds	r3, #2
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	e008      	b.n	8007012 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	b292      	uxth	r2, r2
 800700a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	3301      	adds	r3, #1
 8007010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1c8      	bne.n	8006fc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2200      	movs	r2, #0
 8007038:	2140      	movs	r1, #64	; 0x40
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fddc 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e005      	b.n	800705c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	e000      	b.n	800705c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800705a:	2302      	movs	r3, #2
  }
}
 800705c:	4618      	mov	r0, r3
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007078:	2b20      	cmp	r3, #32
 800707a:	d132      	bne.n	80070e2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_UART_Receive_IT+0x24>
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e02b      	b.n	80070e4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d018      	beq.n	80070d2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	613b      	str	r3, [r7, #16]
   return(result);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	623b      	str	r3, [r7, #32]
 80070c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	69f9      	ldr	r1, [r7, #28]
 80070c4:	6a3a      	ldr	r2, [r7, #32]
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	461a      	mov	r2, r3
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fdf5 	bl	8007cc8 <UART_Start_Receive_IT>
 80070de:	4603      	mov	r3, r0
 80070e0:	e000      	b.n	80070e4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80070e2:	2302      	movs	r3, #2
  }
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3728      	adds	r7, #40	; 0x28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b0ba      	sub	sp, #232	; 0xe8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007112:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007116:	f640 030f 	movw	r3, #2063	; 0x80f
 800711a:	4013      	ands	r3, r2
 800711c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d115      	bne.n	8007154 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00f      	beq.n	8007154 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 82ab 	beq.w	80076a0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
      }
      return;
 8007152:	e2a5      	b.n	80076a0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8117 	beq.w	800738c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800715e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800716a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800716e:	4b85      	ldr	r3, [pc, #532]	; (8007384 <HAL_UART_IRQHandler+0x298>)
 8007170:	4013      	ands	r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 810a 	beq.w	800738c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d011      	beq.n	80071a8 <HAL_UART_IRQHandler+0xbc>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2201      	movs	r2, #1
 8007196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d011      	beq.n	80071d8 <HAL_UART_IRQHandler+0xec>
 80071b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2202      	movs	r2, #2
 80071c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ce:	f043 0204 	orr.w	r2, r3, #4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d011      	beq.n	8007208 <HAL_UART_IRQHandler+0x11c>
 80071e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2204      	movs	r2, #4
 80071f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071fe:	f043 0202 	orr.w	r2, r3, #2
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b00      	cmp	r3, #0
 8007212:	d017      	beq.n	8007244 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007224:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2208      	movs	r2, #8
 8007232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723a:	f043 0208 	orr.w	r2, r3, #8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724c:	2b00      	cmp	r3, #0
 800724e:	d012      	beq.n	8007276 <HAL_UART_IRQHandler+0x18a>
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00c      	beq.n	8007276 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800726c:	f043 0220 	orr.w	r2, r3, #32
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8211 	beq.w	80076a4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00d      	beq.n	80072aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800728e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d005      	beq.n	80072ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d04f      	beq.n	800736e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fdc0 	bl	8007e54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d141      	bne.n	8007366 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3308      	adds	r3, #8
 800730a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800730e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800731a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1d9      	bne.n	80072e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007332:	2b00      	cmp	r3, #0
 8007334:	d013      	beq.n	800735e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733a:	4a13      	ldr	r2, [pc, #76]	; (8007388 <HAL_UART_IRQHandler+0x29c>)
 800733c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007342:	4618      	mov	r0, r3
 8007344:	f7fc fc3c 	bl	8003bc0 <HAL_DMA_Abort_IT>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d017      	beq.n	800737e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007358:	4610      	mov	r0, r2
 800735a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735c:	e00f      	b.n	800737e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9b4 	bl	80076cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007364:	e00b      	b.n	800737e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9b0 	bl	80076cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736c:	e007      	b.n	800737e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f9ac 	bl	80076cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800737c:	e192      	b.n	80076a4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800737e:	bf00      	nop
    return;
 8007380:	e190      	b.n	80076a4 <HAL_UART_IRQHandler+0x5b8>
 8007382:	bf00      	nop
 8007384:	04000120 	.word	0x04000120
 8007388:	08007f1d 	.word	0x08007f1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007390:	2b01      	cmp	r3, #1
 8007392:	f040 814b 	bne.w	800762c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8144 	beq.w	800762c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 813d 	beq.w	800762c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2210      	movs	r2, #16
 80073b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	f040 80b5 	bne.w	8007534 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 8164 	beq.w	80076a8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ea:	429a      	cmp	r2, r3
 80073ec:	f080 815c 	bcs.w	80076a8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	2b20      	cmp	r3, #32
 8007402:	f000 8086 	beq.w	8007512 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800741a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800741e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007422:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007430:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007434:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800743c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1da      	bne.n	8007406 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3308      	adds	r3, #8
 8007456:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007462:	f023 0301 	bic.w	r3, r3, #1
 8007466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3308      	adds	r3, #8
 8007470:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007474:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007478:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800747c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e1      	bne.n	8007450 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800749c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800749e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e3      	bne.n	800748c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80074f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e4      	bne.n	80074d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800750c:	4618      	mov	r0, r3
 800750e:	f7fc fb1e 	bl	8003b4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007524:	b29b      	uxth	r3, r3
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	b29b      	uxth	r3, r3
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f8d7 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007532:	e0b9      	b.n	80076a8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007540:	b29b      	uxth	r3, r3
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80ab 	beq.w	80076ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007556:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80a6 	beq.w	80076ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007582:	647b      	str	r3, [r7, #68]	; 0x44
 8007584:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e4      	bne.n	8007560 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3308      	adds	r3, #8
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	623b      	str	r3, [r7, #32]
   return(result);
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f023 0301 	bic.w	r3, r3, #1
 80075ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3308      	adds	r3, #8
 80075b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075ba:	633a      	str	r2, [r7, #48]	; 0x30
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e3      	bne.n	8007596 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0310 	bic.w	r3, r3, #16
 80075f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	69b9      	ldr	r1, [r7, #24]
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	617b      	str	r3, [r7, #20]
   return(result);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e4      	bne.n	80075e2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800761e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f85b 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800762a:	e03f      	b.n	80076ac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00e      	beq.n	8007656 <HAL_UART_IRQHandler+0x56a>
 8007638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800763c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800764c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fe4c 	bl	80082ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007654:	e02d      	b.n	80076b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00e      	beq.n	8007680 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01c      	beq.n	80076b0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
    }
    return;
 800767e:	e017      	b.n	80076b0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	2b00      	cmp	r3, #0
 800768a:	d012      	beq.n	80076b2 <HAL_UART_IRQHandler+0x5c6>
 800768c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00c      	beq.n	80076b2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fc55 	bl	8007f48 <UART_EndTransmit_IT>
    return;
 800769e:	e008      	b.n	80076b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80076a0:	bf00      	nop
 80076a2:	e006      	b.n	80076b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80076a4:	bf00      	nop
 80076a6:	e004      	b.n	80076b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80076a8:	bf00      	nop
 80076aa:	e002      	b.n	80076b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80076ac:	bf00      	nop
 80076ae:	e000      	b.n	80076b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80076b0:	bf00      	nop
  }

}
 80076b2:	37e8      	adds	r7, #232	; 0xe8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b8a      	ldr	r3, [pc, #552]	; (800794c <UART_SetConfig+0x254>)
 8007724:	4013      	ands	r3, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6812      	ldr	r2, [r2, #0]
 800772a:	6979      	ldr	r1, [r7, #20]
 800772c:	430b      	orrs	r3, r1
 800772e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	430a      	orrs	r2, r1
 8007768:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a78      	ldr	r2, [pc, #480]	; (8007950 <UART_SetConfig+0x258>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d120      	bne.n	80077b6 <UART_SetConfig+0xbe>
 8007774:	4b77      	ldr	r3, [pc, #476]	; (8007954 <UART_SetConfig+0x25c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f003 0303 	and.w	r3, r3, #3
 800777c:	2b03      	cmp	r3, #3
 800777e:	d817      	bhi.n	80077b0 <UART_SetConfig+0xb8>
 8007780:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x90>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	08007799 	.word	0x08007799
 800778c:	080077a5 	.word	0x080077a5
 8007790:	080077ab 	.word	0x080077ab
 8007794:	0800779f 	.word	0x0800779f
 8007798:	2300      	movs	r3, #0
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e01d      	b.n	80077da <UART_SetConfig+0xe2>
 800779e:	2302      	movs	r3, #2
 80077a0:	77fb      	strb	r3, [r7, #31]
 80077a2:	e01a      	b.n	80077da <UART_SetConfig+0xe2>
 80077a4:	2304      	movs	r3, #4
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e017      	b.n	80077da <UART_SetConfig+0xe2>
 80077aa:	2308      	movs	r3, #8
 80077ac:	77fb      	strb	r3, [r7, #31]
 80077ae:	e014      	b.n	80077da <UART_SetConfig+0xe2>
 80077b0:	2310      	movs	r3, #16
 80077b2:	77fb      	strb	r3, [r7, #31]
 80077b4:	e011      	b.n	80077da <UART_SetConfig+0xe2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a67      	ldr	r2, [pc, #412]	; (8007958 <UART_SetConfig+0x260>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d102      	bne.n	80077c6 <UART_SetConfig+0xce>
 80077c0:	2300      	movs	r3, #0
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	e009      	b.n	80077da <UART_SetConfig+0xe2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a64      	ldr	r2, [pc, #400]	; (800795c <UART_SetConfig+0x264>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d102      	bne.n	80077d6 <UART_SetConfig+0xde>
 80077d0:	2300      	movs	r3, #0
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e001      	b.n	80077da <UART_SetConfig+0xe2>
 80077d6:	2310      	movs	r3, #16
 80077d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077e2:	d15a      	bne.n	800789a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80077e4:	7ffb      	ldrb	r3, [r7, #31]
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d827      	bhi.n	800783a <UART_SetConfig+0x142>
 80077ea:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <UART_SetConfig+0xf8>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007815 	.word	0x08007815
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	08007825 	.word	0x08007825
 80077fc:	0800783b 	.word	0x0800783b
 8007800:	0800782b 	.word	0x0800782b
 8007804:	0800783b 	.word	0x0800783b
 8007808:	0800783b 	.word	0x0800783b
 800780c:	0800783b 	.word	0x0800783b
 8007810:	08007833 	.word	0x08007833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007814:	f7fe fcb4 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8007818:	61b8      	str	r0, [r7, #24]
        break;
 800781a:	e013      	b.n	8007844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781c:	f7fe fcd2 	bl	80061c4 <HAL_RCC_GetPCLK2Freq>
 8007820:	61b8      	str	r0, [r7, #24]
        break;
 8007822:	e00f      	b.n	8007844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007824:	4b4e      	ldr	r3, [pc, #312]	; (8007960 <UART_SetConfig+0x268>)
 8007826:	61bb      	str	r3, [r7, #24]
        break;
 8007828:	e00c      	b.n	8007844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800782a:	f7fe fc33 	bl	8006094 <HAL_RCC_GetSysClockFreq>
 800782e:	61b8      	str	r0, [r7, #24]
        break;
 8007830:	e008      	b.n	8007844 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007836:	61bb      	str	r3, [r7, #24]
        break;
 8007838:	e004      	b.n	8007844 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	77bb      	strb	r3, [r7, #30]
        break;
 8007842:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d074      	beq.n	8007934 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	005a      	lsls	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	fbb2 f3f3 	udiv	r3, r2, r3
 800785e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b0f      	cmp	r3, #15
 8007864:	d916      	bls.n	8007894 <UART_SetConfig+0x19c>
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786c:	d212      	bcs.n	8007894 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	b29b      	uxth	r3, r3
 8007872:	f023 030f 	bic.w	r3, r3, #15
 8007876:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	b29b      	uxth	r3, r3
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	b29a      	uxth	r2, r3
 8007884:	89fb      	ldrh	r3, [r7, #14]
 8007886:	4313      	orrs	r3, r2
 8007888:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	89fa      	ldrh	r2, [r7, #14]
 8007890:	60da      	str	r2, [r3, #12]
 8007892:	e04f      	b.n	8007934 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	77bb      	strb	r3, [r7, #30]
 8007898:	e04c      	b.n	8007934 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800789a:	7ffb      	ldrb	r3, [r7, #31]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d828      	bhi.n	80078f2 <UART_SetConfig+0x1fa>
 80078a0:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <UART_SetConfig+0x1b0>)
 80078a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a6:	bf00      	nop
 80078a8:	080078cd 	.word	0x080078cd
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078dd 	.word	0x080078dd
 80078b4:	080078f3 	.word	0x080078f3
 80078b8:	080078e3 	.word	0x080078e3
 80078bc:	080078f3 	.word	0x080078f3
 80078c0:	080078f3 	.word	0x080078f3
 80078c4:	080078f3 	.word	0x080078f3
 80078c8:	080078eb 	.word	0x080078eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078cc:	f7fe fc58 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 80078d0:	61b8      	str	r0, [r7, #24]
        break;
 80078d2:	e013      	b.n	80078fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d4:	f7fe fc76 	bl	80061c4 <HAL_RCC_GetPCLK2Freq>
 80078d8:	61b8      	str	r0, [r7, #24]
        break;
 80078da:	e00f      	b.n	80078fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078dc:	4b20      	ldr	r3, [pc, #128]	; (8007960 <UART_SetConfig+0x268>)
 80078de:	61bb      	str	r3, [r7, #24]
        break;
 80078e0:	e00c      	b.n	80078fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078e2:	f7fe fbd7 	bl	8006094 <HAL_RCC_GetSysClockFreq>
 80078e6:	61b8      	str	r0, [r7, #24]
        break;
 80078e8:	e008      	b.n	80078fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ee:	61bb      	str	r3, [r7, #24]
        break;
 80078f0:	e004      	b.n	80078fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	77bb      	strb	r3, [r7, #30]
        break;
 80078fa:	bf00      	nop
    }

    if (pclk != 0U)
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d018      	beq.n	8007934 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	085a      	lsrs	r2, r3, #1
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	441a      	add	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b0f      	cmp	r3, #15
 800791a:	d909      	bls.n	8007930 <UART_SetConfig+0x238>
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007922:	d205      	bcs.n	8007930 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	b29a      	uxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60da      	str	r2, [r3, #12]
 800792e:	e001      	b.n	8007934 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007940:	7fbb      	ldrb	r3, [r7, #30]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	efff69f3 	.word	0xefff69f3
 8007950:	40013800 	.word	0x40013800
 8007954:	40021000 	.word	0x40021000
 8007958:	40004400 	.word	0x40004400
 800795c:	40004800 	.word	0x40004800
 8007960:	007a1200 	.word	0x007a1200

08007964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01a      	beq.n	8007a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a62:	d10a      	bne.n	8007a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	605a      	str	r2, [r3, #4]
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b098      	sub	sp, #96	; 0x60
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ab8:	f7fa fe82 	bl	80027c0 <HAL_GetTick>
 8007abc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d12e      	bne.n	8007b2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f88c 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d021      	beq.n	8007b2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afa:	653b      	str	r3, [r7, #80]	; 0x50
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b04:	647b      	str	r3, [r7, #68]	; 0x44
 8007b06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e6      	bne.n	8007ae6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e062      	b.n	8007bf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d149      	bne.n	8007bcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b40:	2200      	movs	r2, #0
 8007b42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f856 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d03c      	beq.n	8007bcc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b70:	633b      	str	r3, [r7, #48]	; 0x30
 8007b72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e6      	bne.n	8007b52 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba4:	61fa      	str	r2, [r7, #28]
 8007ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	69b9      	ldr	r1, [r7, #24]
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e5      	bne.n	8007b84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e011      	b.n	8007bf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3758      	adds	r7, #88	; 0x58
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c08:	e049      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d045      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c12:	f7fa fdd5 	bl	80027c0 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d302      	bcc.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e048      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d031      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d110      	bne.n	8007c6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f8ff 	bl	8007e54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e029      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c78:	d111      	bne.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f8e5 	bl	8007e54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e00f      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d0a6      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b097      	sub	sp, #92	; 0x5c
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	88fa      	ldrh	r2, [r7, #6]
 8007ce0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	88fa      	ldrh	r2, [r7, #6]
 8007ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfa:	d10e      	bne.n	8007d1a <UART_Start_Receive_IT+0x52>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <UART_Start_Receive_IT+0x48>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d0e:	e02d      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	22ff      	movs	r2, #255	; 0xff
 8007d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d18:	e028      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10d      	bne.n	8007d3e <UART_Start_Receive_IT+0x76>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d104      	bne.n	8007d34 <UART_Start_Receive_IT+0x6c>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	22ff      	movs	r2, #255	; 0xff
 8007d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d32:	e01b      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	227f      	movs	r2, #127	; 0x7f
 8007d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d3c:	e016      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d46:	d10d      	bne.n	8007d64 <UART_Start_Receive_IT+0x9c>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <UART_Start_Receive_IT+0x92>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	227f      	movs	r2, #127	; 0x7f
 8007d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d58:	e008      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	223f      	movs	r2, #63	; 0x3f
 8007d5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d62:	e003      	b.n	8007d6c <UART_Start_Receive_IT+0xa4>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2222      	movs	r2, #34	; 0x22
 8007d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3308      	adds	r3, #8
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	f043 0301 	orr.w	r3, r3, #1
 8007d92:	657b      	str	r3, [r7, #84]	; 0x54
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d9c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d9e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e5      	bne.n	8007d7c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d107      	bne.n	8007dca <UART_Start_Receive_IT+0x102>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4a21      	ldr	r2, [pc, #132]	; (8007e4c <UART_Start_Receive_IT+0x184>)
 8007dc6:	669a      	str	r2, [r3, #104]	; 0x68
 8007dc8:	e002      	b.n	8007dd0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4a20      	ldr	r2, [pc, #128]	; (8007e50 <UART_Start_Receive_IT+0x188>)
 8007dce:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d019      	beq.n	8007e0c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
 8007df8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e6      	bne.n	8007dd8 <UART_Start_Receive_IT+0x110>
 8007e0a:	e018      	b.n	8007e3e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f043 0320 	orr.w	r3, r3, #32
 8007e20:	653b      	str	r3, [r7, #80]	; 0x50
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e2a:	623b      	str	r3, [r7, #32]
 8007e2c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	69f9      	ldr	r1, [r7, #28]
 8007e30:	6a3a      	ldr	r2, [r7, #32]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e6      	bne.n	8007e0c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	375c      	adds	r7, #92	; 0x5c
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	08008145 	.word	0x08008145
 8007e50:	08007f9d 	.word	0x08007f9d

08007e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b095      	sub	sp, #84	; 0x54
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e6      	bne.n	8007e5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	f023 0301 	bic.w	r3, r3, #1
 8007ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d118      	bne.n	8007efc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f023 0310 	bic.w	r3, r3, #16
 8007ede:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6979      	ldr	r1, [r7, #20]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e6      	bne.n	8007eca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f10:	bf00      	nop
 8007f12:	3754      	adds	r7, #84	; 0x54
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fbc6 	bl	80076cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	61bb      	str	r3, [r7, #24]
 8007f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6979      	ldr	r1, [r7, #20]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e6      	bne.n	8007f50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff fb92 	bl	80076b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f94:	bf00      	nop
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b09c      	sub	sp, #112	; 0x70
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007faa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fb4:	2b22      	cmp	r3, #34	; 0x22
 8007fb6:	f040 80b9 	bne.w	800812c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007fc8:	b2d9      	uxtb	r1, r3
 8007fca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd4:	400a      	ands	r2, r1
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 809c 	bne.w	800813c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008018:	66bb      	str	r3, [r7, #104]	; 0x68
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008022:	65bb      	str	r3, [r7, #88]	; 0x58
 8008024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e6      	bne.n	8008004 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3308      	adds	r3, #8
 800803c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	f023 0301 	bic.w	r3, r3, #1
 800804c:	667b      	str	r3, [r7, #100]	; 0x64
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008056:	647a      	str	r2, [r7, #68]	; 0x44
 8008058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800805c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e5      	bne.n	8008036 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d018      	beq.n	80080be <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	623b      	str	r3, [r7, #32]
   return(result);
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080a0:	663b      	str	r3, [r7, #96]	; 0x60
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080aa:	633b      	str	r3, [r7, #48]	; 0x30
 80080ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e6      	bne.n	800808c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d12e      	bne.n	8008124 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f023 0310 	bic.w	r3, r3, #16
 80080e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ea:	61fb      	str	r3, [r7, #28]
 80080ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	69b9      	ldr	r1, [r7, #24]
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	617b      	str	r3, [r7, #20]
   return(result);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e6      	bne.n	80080cc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b10      	cmp	r3, #16
 800810a:	d103      	bne.n	8008114 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2210      	movs	r2, #16
 8008112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff fadf 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008122:	e00b      	b.n	800813c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7f9 fa29 	bl	800157c <HAL_UART_RxCpltCallback>
}
 800812a:	e007      	b.n	800813c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0208 	orr.w	r2, r2, #8
 800813a:	619a      	str	r2, [r3, #24]
}
 800813c:	bf00      	nop
 800813e:	3770      	adds	r7, #112	; 0x70
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b09c      	sub	sp, #112	; 0x70
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008152:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800815c:	2b22      	cmp	r3, #34	; 0x22
 800815e:	f040 80b9 	bne.w	80082d4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008168:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008170:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008172:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008176:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800817a:	4013      	ands	r3, r2
 800817c:	b29a      	uxth	r2, r3
 800817e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008180:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	1c9a      	adds	r2, r3, #2
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 809c 	bne.w	80082e4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081c0:	667b      	str	r3, [r7, #100]	; 0x64
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ca:	657b      	str	r3, [r7, #84]	; 0x54
 80081cc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e6      	bne.n	80081ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3308      	adds	r3, #8
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	663b      	str	r3, [r7, #96]	; 0x60
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3308      	adds	r3, #8
 80081fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081fe:	643a      	str	r2, [r7, #64]	; 0x40
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e5      	bne.n	80081de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d018      	beq.n	8008266 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	61fb      	str	r3, [r7, #28]
   return(result);
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008254:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e6      	bne.n	8008234 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826a:	2b01      	cmp	r3, #1
 800826c:	d12e      	bne.n	80082cc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	60bb      	str	r3, [r7, #8]
   return(result);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f023 0310 	bic.w	r3, r3, #16
 8008288:	65bb      	str	r3, [r7, #88]	; 0x58
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008292:	61bb      	str	r3, [r7, #24]
 8008294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6979      	ldr	r1, [r7, #20]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	613b      	str	r3, [r7, #16]
   return(result);
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e6      	bne.n	8008274 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d103      	bne.n	80082bc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2210      	movs	r2, #16
 80082ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff fa0b 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082ca:	e00b      	b.n	80082e4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7f9 f955 	bl	800157c <HAL_UART_RxCpltCallback>
}
 80082d2:	e007      	b.n	80082e4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0208 	orr.w	r2, r2, #8
 80082e2:	619a      	str	r2, [r3, #24]
}
 80082e4:	bf00      	nop
 80082e6:	3770      	adds	r7, #112	; 0x70
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <atoi>:
 8008300:	220a      	movs	r2, #10
 8008302:	2100      	movs	r1, #0
 8008304:	f000 b882 	b.w	800840c <strtol>

08008308 <_strtol_l.constprop.0>:
 8008308:	2b01      	cmp	r3, #1
 800830a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830e:	d001      	beq.n	8008314 <_strtol_l.constprop.0+0xc>
 8008310:	2b24      	cmp	r3, #36	; 0x24
 8008312:	d906      	bls.n	8008322 <_strtol_l.constprop.0+0x1a>
 8008314:	f001 f8e6 	bl	80094e4 <__errno>
 8008318:	2316      	movs	r3, #22
 800831a:	6003      	str	r3, [r0, #0]
 800831c:	2000      	movs	r0, #0
 800831e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008322:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008408 <_strtol_l.constprop.0+0x100>
 8008326:	460d      	mov	r5, r1
 8008328:	462e      	mov	r6, r5
 800832a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800832e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008332:	f017 0708 	ands.w	r7, r7, #8
 8008336:	d1f7      	bne.n	8008328 <_strtol_l.constprop.0+0x20>
 8008338:	2c2d      	cmp	r4, #45	; 0x2d
 800833a:	d132      	bne.n	80083a2 <_strtol_l.constprop.0+0x9a>
 800833c:	782c      	ldrb	r4, [r5, #0]
 800833e:	2701      	movs	r7, #1
 8008340:	1cb5      	adds	r5, r6, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d05b      	beq.n	80083fe <_strtol_l.constprop.0+0xf6>
 8008346:	2b10      	cmp	r3, #16
 8008348:	d109      	bne.n	800835e <_strtol_l.constprop.0+0x56>
 800834a:	2c30      	cmp	r4, #48	; 0x30
 800834c:	d107      	bne.n	800835e <_strtol_l.constprop.0+0x56>
 800834e:	782c      	ldrb	r4, [r5, #0]
 8008350:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008354:	2c58      	cmp	r4, #88	; 0x58
 8008356:	d14d      	bne.n	80083f4 <_strtol_l.constprop.0+0xec>
 8008358:	786c      	ldrb	r4, [r5, #1]
 800835a:	2310      	movs	r3, #16
 800835c:	3502      	adds	r5, #2
 800835e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008362:	f108 38ff 	add.w	r8, r8, #4294967295
 8008366:	f04f 0e00 	mov.w	lr, #0
 800836a:	fbb8 f9f3 	udiv	r9, r8, r3
 800836e:	4676      	mov	r6, lr
 8008370:	fb03 8a19 	mls	sl, r3, r9, r8
 8008374:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008378:	f1bc 0f09 	cmp.w	ip, #9
 800837c:	d816      	bhi.n	80083ac <_strtol_l.constprop.0+0xa4>
 800837e:	4664      	mov	r4, ip
 8008380:	42a3      	cmp	r3, r4
 8008382:	dd24      	ble.n	80083ce <_strtol_l.constprop.0+0xc6>
 8008384:	f1be 3fff 	cmp.w	lr, #4294967295
 8008388:	d008      	beq.n	800839c <_strtol_l.constprop.0+0x94>
 800838a:	45b1      	cmp	r9, r6
 800838c:	d31c      	bcc.n	80083c8 <_strtol_l.constprop.0+0xc0>
 800838e:	d101      	bne.n	8008394 <_strtol_l.constprop.0+0x8c>
 8008390:	45a2      	cmp	sl, r4
 8008392:	db19      	blt.n	80083c8 <_strtol_l.constprop.0+0xc0>
 8008394:	fb06 4603 	mla	r6, r6, r3, r4
 8008398:	f04f 0e01 	mov.w	lr, #1
 800839c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083a0:	e7e8      	b.n	8008374 <_strtol_l.constprop.0+0x6c>
 80083a2:	2c2b      	cmp	r4, #43	; 0x2b
 80083a4:	bf04      	itt	eq
 80083a6:	782c      	ldrbeq	r4, [r5, #0]
 80083a8:	1cb5      	addeq	r5, r6, #2
 80083aa:	e7ca      	b.n	8008342 <_strtol_l.constprop.0+0x3a>
 80083ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80083b0:	f1bc 0f19 	cmp.w	ip, #25
 80083b4:	d801      	bhi.n	80083ba <_strtol_l.constprop.0+0xb2>
 80083b6:	3c37      	subs	r4, #55	; 0x37
 80083b8:	e7e2      	b.n	8008380 <_strtol_l.constprop.0+0x78>
 80083ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083be:	f1bc 0f19 	cmp.w	ip, #25
 80083c2:	d804      	bhi.n	80083ce <_strtol_l.constprop.0+0xc6>
 80083c4:	3c57      	subs	r4, #87	; 0x57
 80083c6:	e7db      	b.n	8008380 <_strtol_l.constprop.0+0x78>
 80083c8:	f04f 3eff 	mov.w	lr, #4294967295
 80083cc:	e7e6      	b.n	800839c <_strtol_l.constprop.0+0x94>
 80083ce:	f1be 3fff 	cmp.w	lr, #4294967295
 80083d2:	d105      	bne.n	80083e0 <_strtol_l.constprop.0+0xd8>
 80083d4:	2322      	movs	r3, #34	; 0x22
 80083d6:	6003      	str	r3, [r0, #0]
 80083d8:	4646      	mov	r6, r8
 80083da:	b942      	cbnz	r2, 80083ee <_strtol_l.constprop.0+0xe6>
 80083dc:	4630      	mov	r0, r6
 80083de:	e79e      	b.n	800831e <_strtol_l.constprop.0+0x16>
 80083e0:	b107      	cbz	r7, 80083e4 <_strtol_l.constprop.0+0xdc>
 80083e2:	4276      	negs	r6, r6
 80083e4:	2a00      	cmp	r2, #0
 80083e6:	d0f9      	beq.n	80083dc <_strtol_l.constprop.0+0xd4>
 80083e8:	f1be 0f00 	cmp.w	lr, #0
 80083ec:	d000      	beq.n	80083f0 <_strtol_l.constprop.0+0xe8>
 80083ee:	1e69      	subs	r1, r5, #1
 80083f0:	6011      	str	r1, [r2, #0]
 80083f2:	e7f3      	b.n	80083dc <_strtol_l.constprop.0+0xd4>
 80083f4:	2430      	movs	r4, #48	; 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1b1      	bne.n	800835e <_strtol_l.constprop.0+0x56>
 80083fa:	2308      	movs	r3, #8
 80083fc:	e7af      	b.n	800835e <_strtol_l.constprop.0+0x56>
 80083fe:	2c30      	cmp	r4, #48	; 0x30
 8008400:	d0a5      	beq.n	800834e <_strtol_l.constprop.0+0x46>
 8008402:	230a      	movs	r3, #10
 8008404:	e7ab      	b.n	800835e <_strtol_l.constprop.0+0x56>
 8008406:	bf00      	nop
 8008408:	0800ba45 	.word	0x0800ba45

0800840c <strtol>:
 800840c:	4613      	mov	r3, r2
 800840e:	460a      	mov	r2, r1
 8008410:	4601      	mov	r1, r0
 8008412:	4802      	ldr	r0, [pc, #8]	; (800841c <strtol+0x10>)
 8008414:	6800      	ldr	r0, [r0, #0]
 8008416:	f7ff bf77 	b.w	8008308 <_strtol_l.constprop.0>
 800841a:	bf00      	nop
 800841c:	200007c4 	.word	0x200007c4

08008420 <__cvt>:
 8008420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	ec55 4b10 	vmov	r4, r5, d0
 8008428:	2d00      	cmp	r5, #0
 800842a:	460e      	mov	r6, r1
 800842c:	4619      	mov	r1, r3
 800842e:	462b      	mov	r3, r5
 8008430:	bfbb      	ittet	lt
 8008432:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008436:	461d      	movlt	r5, r3
 8008438:	2300      	movge	r3, #0
 800843a:	232d      	movlt	r3, #45	; 0x2d
 800843c:	700b      	strb	r3, [r1, #0]
 800843e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008440:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008444:	4691      	mov	r9, r2
 8008446:	f023 0820 	bic.w	r8, r3, #32
 800844a:	bfbc      	itt	lt
 800844c:	4622      	movlt	r2, r4
 800844e:	4614      	movlt	r4, r2
 8008450:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008454:	d005      	beq.n	8008462 <__cvt+0x42>
 8008456:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800845a:	d100      	bne.n	800845e <__cvt+0x3e>
 800845c:	3601      	adds	r6, #1
 800845e:	2102      	movs	r1, #2
 8008460:	e000      	b.n	8008464 <__cvt+0x44>
 8008462:	2103      	movs	r1, #3
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	ab02      	add	r3, sp, #8
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	ec45 4b10 	vmov	d0, r4, r5
 8008470:	4653      	mov	r3, sl
 8008472:	4632      	mov	r2, r6
 8008474:	f001 f8ec 	bl	8009650 <_dtoa_r>
 8008478:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800847c:	4607      	mov	r7, r0
 800847e:	d102      	bne.n	8008486 <__cvt+0x66>
 8008480:	f019 0f01 	tst.w	r9, #1
 8008484:	d022      	beq.n	80084cc <__cvt+0xac>
 8008486:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800848a:	eb07 0906 	add.w	r9, r7, r6
 800848e:	d110      	bne.n	80084b2 <__cvt+0x92>
 8008490:	783b      	ldrb	r3, [r7, #0]
 8008492:	2b30      	cmp	r3, #48	; 0x30
 8008494:	d10a      	bne.n	80084ac <__cvt+0x8c>
 8008496:	2200      	movs	r2, #0
 8008498:	2300      	movs	r3, #0
 800849a:	4620      	mov	r0, r4
 800849c:	4629      	mov	r1, r5
 800849e:	f7f8 fb23 	bl	8000ae8 <__aeabi_dcmpeq>
 80084a2:	b918      	cbnz	r0, 80084ac <__cvt+0x8c>
 80084a4:	f1c6 0601 	rsb	r6, r6, #1
 80084a8:	f8ca 6000 	str.w	r6, [sl]
 80084ac:	f8da 3000 	ldr.w	r3, [sl]
 80084b0:	4499      	add	r9, r3
 80084b2:	2200      	movs	r2, #0
 80084b4:	2300      	movs	r3, #0
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f8 fb15 	bl	8000ae8 <__aeabi_dcmpeq>
 80084be:	b108      	cbz	r0, 80084c4 <__cvt+0xa4>
 80084c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80084c4:	2230      	movs	r2, #48	; 0x30
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	454b      	cmp	r3, r9
 80084ca:	d307      	bcc.n	80084dc <__cvt+0xbc>
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084d0:	1bdb      	subs	r3, r3, r7
 80084d2:	4638      	mov	r0, r7
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	b004      	add	sp, #16
 80084d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084dc:	1c59      	adds	r1, r3, #1
 80084de:	9103      	str	r1, [sp, #12]
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e7f0      	b.n	80084c6 <__cvt+0xa6>

080084e4 <__exponent>:
 80084e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e6:	4603      	mov	r3, r0
 80084e8:	2900      	cmp	r1, #0
 80084ea:	bfb8      	it	lt
 80084ec:	4249      	neglt	r1, r1
 80084ee:	f803 2b02 	strb.w	r2, [r3], #2
 80084f2:	bfb4      	ite	lt
 80084f4:	222d      	movlt	r2, #45	; 0x2d
 80084f6:	222b      	movge	r2, #43	; 0x2b
 80084f8:	2909      	cmp	r1, #9
 80084fa:	7042      	strb	r2, [r0, #1]
 80084fc:	dd2a      	ble.n	8008554 <__exponent+0x70>
 80084fe:	f10d 0207 	add.w	r2, sp, #7
 8008502:	4617      	mov	r7, r2
 8008504:	260a      	movs	r6, #10
 8008506:	4694      	mov	ip, r2
 8008508:	fb91 f5f6 	sdiv	r5, r1, r6
 800850c:	fb06 1415 	mls	r4, r6, r5, r1
 8008510:	3430      	adds	r4, #48	; 0x30
 8008512:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008516:	460c      	mov	r4, r1
 8008518:	2c63      	cmp	r4, #99	; 0x63
 800851a:	f102 32ff 	add.w	r2, r2, #4294967295
 800851e:	4629      	mov	r1, r5
 8008520:	dcf1      	bgt.n	8008506 <__exponent+0x22>
 8008522:	3130      	adds	r1, #48	; 0x30
 8008524:	f1ac 0402 	sub.w	r4, ip, #2
 8008528:	f802 1c01 	strb.w	r1, [r2, #-1]
 800852c:	1c41      	adds	r1, r0, #1
 800852e:	4622      	mov	r2, r4
 8008530:	42ba      	cmp	r2, r7
 8008532:	d30a      	bcc.n	800854a <__exponent+0x66>
 8008534:	f10d 0209 	add.w	r2, sp, #9
 8008538:	eba2 020c 	sub.w	r2, r2, ip
 800853c:	42bc      	cmp	r4, r7
 800853e:	bf88      	it	hi
 8008540:	2200      	movhi	r2, #0
 8008542:	4413      	add	r3, r2
 8008544:	1a18      	subs	r0, r3, r0
 8008546:	b003      	add	sp, #12
 8008548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800854a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800854e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008552:	e7ed      	b.n	8008530 <__exponent+0x4c>
 8008554:	2330      	movs	r3, #48	; 0x30
 8008556:	3130      	adds	r1, #48	; 0x30
 8008558:	7083      	strb	r3, [r0, #2]
 800855a:	70c1      	strb	r1, [r0, #3]
 800855c:	1d03      	adds	r3, r0, #4
 800855e:	e7f1      	b.n	8008544 <__exponent+0x60>

08008560 <_printf_float>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	ed2d 8b02 	vpush	{d8}
 8008568:	b08d      	sub	sp, #52	; 0x34
 800856a:	460c      	mov	r4, r1
 800856c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008570:	4616      	mov	r6, r2
 8008572:	461f      	mov	r7, r3
 8008574:	4605      	mov	r5, r0
 8008576:	f000 ff6b 	bl	8009450 <_localeconv_r>
 800857a:	f8d0 a000 	ldr.w	sl, [r0]
 800857e:	4650      	mov	r0, sl
 8008580:	f7f7 fe86 	bl	8000290 <strlen>
 8008584:	2300      	movs	r3, #0
 8008586:	930a      	str	r3, [sp, #40]	; 0x28
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	9305      	str	r3, [sp, #20]
 800858c:	f8d8 3000 	ldr.w	r3, [r8]
 8008590:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008594:	3307      	adds	r3, #7
 8008596:	f023 0307 	bic.w	r3, r3, #7
 800859a:	f103 0208 	add.w	r2, r3, #8
 800859e:	f8c8 2000 	str.w	r2, [r8]
 80085a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085aa:	9307      	str	r3, [sp, #28]
 80085ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80085b0:	ee08 0a10 	vmov	s16, r0
 80085b4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80085b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085bc:	4b9e      	ldr	r3, [pc, #632]	; (8008838 <_printf_float+0x2d8>)
 80085be:	f04f 32ff 	mov.w	r2, #4294967295
 80085c2:	f7f8 fac3 	bl	8000b4c <__aeabi_dcmpun>
 80085c6:	bb88      	cbnz	r0, 800862c <_printf_float+0xcc>
 80085c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085cc:	4b9a      	ldr	r3, [pc, #616]	; (8008838 <_printf_float+0x2d8>)
 80085ce:	f04f 32ff 	mov.w	r2, #4294967295
 80085d2:	f7f8 fa9d 	bl	8000b10 <__aeabi_dcmple>
 80085d6:	bb48      	cbnz	r0, 800862c <_printf_float+0xcc>
 80085d8:	2200      	movs	r2, #0
 80085da:	2300      	movs	r3, #0
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f8 fa8c 	bl	8000afc <__aeabi_dcmplt>
 80085e4:	b110      	cbz	r0, 80085ec <_printf_float+0x8c>
 80085e6:	232d      	movs	r3, #45	; 0x2d
 80085e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ec:	4a93      	ldr	r2, [pc, #588]	; (800883c <_printf_float+0x2dc>)
 80085ee:	4b94      	ldr	r3, [pc, #592]	; (8008840 <_printf_float+0x2e0>)
 80085f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085f4:	bf94      	ite	ls
 80085f6:	4690      	movls	r8, r2
 80085f8:	4698      	movhi	r8, r3
 80085fa:	2303      	movs	r3, #3
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	9b05      	ldr	r3, [sp, #20]
 8008600:	f023 0304 	bic.w	r3, r3, #4
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	f04f 0900 	mov.w	r9, #0
 800860a:	9700      	str	r7, [sp, #0]
 800860c:	4633      	mov	r3, r6
 800860e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008610:	4621      	mov	r1, r4
 8008612:	4628      	mov	r0, r5
 8008614:	f000 f9da 	bl	80089cc <_printf_common>
 8008618:	3001      	adds	r0, #1
 800861a:	f040 8090 	bne.w	800873e <_printf_float+0x1de>
 800861e:	f04f 30ff 	mov.w	r0, #4294967295
 8008622:	b00d      	add	sp, #52	; 0x34
 8008624:	ecbd 8b02 	vpop	{d8}
 8008628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862c:	4642      	mov	r2, r8
 800862e:	464b      	mov	r3, r9
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f8 fa8a 	bl	8000b4c <__aeabi_dcmpun>
 8008638:	b140      	cbz	r0, 800864c <_printf_float+0xec>
 800863a:	464b      	mov	r3, r9
 800863c:	2b00      	cmp	r3, #0
 800863e:	bfbc      	itt	lt
 8008640:	232d      	movlt	r3, #45	; 0x2d
 8008642:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008646:	4a7f      	ldr	r2, [pc, #508]	; (8008844 <_printf_float+0x2e4>)
 8008648:	4b7f      	ldr	r3, [pc, #508]	; (8008848 <_printf_float+0x2e8>)
 800864a:	e7d1      	b.n	80085f0 <_printf_float+0x90>
 800864c:	6863      	ldr	r3, [r4, #4]
 800864e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008652:	9206      	str	r2, [sp, #24]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	d13f      	bne.n	80086d8 <_printf_float+0x178>
 8008658:	2306      	movs	r3, #6
 800865a:	6063      	str	r3, [r4, #4]
 800865c:	9b05      	ldr	r3, [sp, #20]
 800865e:	6861      	ldr	r1, [r4, #4]
 8008660:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008664:	2300      	movs	r3, #0
 8008666:	9303      	str	r3, [sp, #12]
 8008668:	ab0a      	add	r3, sp, #40	; 0x28
 800866a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800866e:	ab09      	add	r3, sp, #36	; 0x24
 8008670:	ec49 8b10 	vmov	d0, r8, r9
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	6022      	str	r2, [r4, #0]
 8008678:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800867c:	4628      	mov	r0, r5
 800867e:	f7ff fecf 	bl	8008420 <__cvt>
 8008682:	9b06      	ldr	r3, [sp, #24]
 8008684:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008686:	2b47      	cmp	r3, #71	; 0x47
 8008688:	4680      	mov	r8, r0
 800868a:	d108      	bne.n	800869e <_printf_float+0x13e>
 800868c:	1cc8      	adds	r0, r1, #3
 800868e:	db02      	blt.n	8008696 <_printf_float+0x136>
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	4299      	cmp	r1, r3
 8008694:	dd41      	ble.n	800871a <_printf_float+0x1ba>
 8008696:	f1ab 0302 	sub.w	r3, fp, #2
 800869a:	fa5f fb83 	uxtb.w	fp, r3
 800869e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086a2:	d820      	bhi.n	80086e6 <_printf_float+0x186>
 80086a4:	3901      	subs	r1, #1
 80086a6:	465a      	mov	r2, fp
 80086a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086ac:	9109      	str	r1, [sp, #36]	; 0x24
 80086ae:	f7ff ff19 	bl	80084e4 <__exponent>
 80086b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b4:	1813      	adds	r3, r2, r0
 80086b6:	2a01      	cmp	r2, #1
 80086b8:	4681      	mov	r9, r0
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	dc02      	bgt.n	80086c4 <_printf_float+0x164>
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	07d2      	lsls	r2, r2, #31
 80086c2:	d501      	bpl.n	80086c8 <_printf_float+0x168>
 80086c4:	3301      	adds	r3, #1
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d09c      	beq.n	800860a <_printf_float+0xaa>
 80086d0:	232d      	movs	r3, #45	; 0x2d
 80086d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d6:	e798      	b.n	800860a <_printf_float+0xaa>
 80086d8:	9a06      	ldr	r2, [sp, #24]
 80086da:	2a47      	cmp	r2, #71	; 0x47
 80086dc:	d1be      	bne.n	800865c <_printf_float+0xfc>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1bc      	bne.n	800865c <_printf_float+0xfc>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e7b9      	b.n	800865a <_printf_float+0xfa>
 80086e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086ea:	d118      	bne.n	800871e <_printf_float+0x1be>
 80086ec:	2900      	cmp	r1, #0
 80086ee:	6863      	ldr	r3, [r4, #4]
 80086f0:	dd0b      	ble.n	800870a <_printf_float+0x1aa>
 80086f2:	6121      	str	r1, [r4, #16]
 80086f4:	b913      	cbnz	r3, 80086fc <_printf_float+0x19c>
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	07d0      	lsls	r0, r2, #31
 80086fa:	d502      	bpl.n	8008702 <_printf_float+0x1a2>
 80086fc:	3301      	adds	r3, #1
 80086fe:	440b      	add	r3, r1
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	65a1      	str	r1, [r4, #88]	; 0x58
 8008704:	f04f 0900 	mov.w	r9, #0
 8008708:	e7de      	b.n	80086c8 <_printf_float+0x168>
 800870a:	b913      	cbnz	r3, 8008712 <_printf_float+0x1b2>
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	07d2      	lsls	r2, r2, #31
 8008710:	d501      	bpl.n	8008716 <_printf_float+0x1b6>
 8008712:	3302      	adds	r3, #2
 8008714:	e7f4      	b.n	8008700 <_printf_float+0x1a0>
 8008716:	2301      	movs	r3, #1
 8008718:	e7f2      	b.n	8008700 <_printf_float+0x1a0>
 800871a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800871e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008720:	4299      	cmp	r1, r3
 8008722:	db05      	blt.n	8008730 <_printf_float+0x1d0>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	6121      	str	r1, [r4, #16]
 8008728:	07d8      	lsls	r0, r3, #31
 800872a:	d5ea      	bpl.n	8008702 <_printf_float+0x1a2>
 800872c:	1c4b      	adds	r3, r1, #1
 800872e:	e7e7      	b.n	8008700 <_printf_float+0x1a0>
 8008730:	2900      	cmp	r1, #0
 8008732:	bfd4      	ite	le
 8008734:	f1c1 0202 	rsble	r2, r1, #2
 8008738:	2201      	movgt	r2, #1
 800873a:	4413      	add	r3, r2
 800873c:	e7e0      	b.n	8008700 <_printf_float+0x1a0>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	055a      	lsls	r2, r3, #21
 8008742:	d407      	bmi.n	8008754 <_printf_float+0x1f4>
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	4642      	mov	r2, r8
 8008748:	4631      	mov	r1, r6
 800874a:	4628      	mov	r0, r5
 800874c:	47b8      	blx	r7
 800874e:	3001      	adds	r0, #1
 8008750:	d12c      	bne.n	80087ac <_printf_float+0x24c>
 8008752:	e764      	b.n	800861e <_printf_float+0xbe>
 8008754:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008758:	f240 80e0 	bls.w	800891c <_printf_float+0x3bc>
 800875c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008760:	2200      	movs	r2, #0
 8008762:	2300      	movs	r3, #0
 8008764:	f7f8 f9c0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008768:	2800      	cmp	r0, #0
 800876a:	d034      	beq.n	80087d6 <_printf_float+0x276>
 800876c:	4a37      	ldr	r2, [pc, #220]	; (800884c <_printf_float+0x2ec>)
 800876e:	2301      	movs	r3, #1
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	f43f af51 	beq.w	800861e <_printf_float+0xbe>
 800877c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008780:	429a      	cmp	r2, r3
 8008782:	db02      	blt.n	800878a <_printf_float+0x22a>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	07d8      	lsls	r0, r3, #31
 8008788:	d510      	bpl.n	80087ac <_printf_float+0x24c>
 800878a:	ee18 3a10 	vmov	r3, s16
 800878e:	4652      	mov	r2, sl
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	f43f af41 	beq.w	800861e <_printf_float+0xbe>
 800879c:	f04f 0800 	mov.w	r8, #0
 80087a0:	f104 091a 	add.w	r9, r4, #26
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	3b01      	subs	r3, #1
 80087a8:	4543      	cmp	r3, r8
 80087aa:	dc09      	bgt.n	80087c0 <_printf_float+0x260>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	079b      	lsls	r3, r3, #30
 80087b0:	f100 8107 	bmi.w	80089c2 <_printf_float+0x462>
 80087b4:	68e0      	ldr	r0, [r4, #12]
 80087b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b8:	4298      	cmp	r0, r3
 80087ba:	bfb8      	it	lt
 80087bc:	4618      	movlt	r0, r3
 80087be:	e730      	b.n	8008622 <_printf_float+0xc2>
 80087c0:	2301      	movs	r3, #1
 80087c2:	464a      	mov	r2, r9
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f af27 	beq.w	800861e <_printf_float+0xbe>
 80087d0:	f108 0801 	add.w	r8, r8, #1
 80087d4:	e7e6      	b.n	80087a4 <_printf_float+0x244>
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dc39      	bgt.n	8008850 <_printf_float+0x2f0>
 80087dc:	4a1b      	ldr	r2, [pc, #108]	; (800884c <_printf_float+0x2ec>)
 80087de:	2301      	movs	r3, #1
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	f43f af19 	beq.w	800861e <_printf_float+0xbe>
 80087ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80087f0:	4313      	orrs	r3, r2
 80087f2:	d102      	bne.n	80087fa <_printf_float+0x29a>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	07d9      	lsls	r1, r3, #31
 80087f8:	d5d8      	bpl.n	80087ac <_printf_float+0x24c>
 80087fa:	ee18 3a10 	vmov	r3, s16
 80087fe:	4652      	mov	r2, sl
 8008800:	4631      	mov	r1, r6
 8008802:	4628      	mov	r0, r5
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	f43f af09 	beq.w	800861e <_printf_float+0xbe>
 800880c:	f04f 0900 	mov.w	r9, #0
 8008810:	f104 0a1a 	add.w	sl, r4, #26
 8008814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008816:	425b      	negs	r3, r3
 8008818:	454b      	cmp	r3, r9
 800881a:	dc01      	bgt.n	8008820 <_printf_float+0x2c0>
 800881c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881e:	e792      	b.n	8008746 <_printf_float+0x1e6>
 8008820:	2301      	movs	r3, #1
 8008822:	4652      	mov	r2, sl
 8008824:	4631      	mov	r1, r6
 8008826:	4628      	mov	r0, r5
 8008828:	47b8      	blx	r7
 800882a:	3001      	adds	r0, #1
 800882c:	f43f aef7 	beq.w	800861e <_printf_float+0xbe>
 8008830:	f109 0901 	add.w	r9, r9, #1
 8008834:	e7ee      	b.n	8008814 <_printf_float+0x2b4>
 8008836:	bf00      	nop
 8008838:	7fefffff 	.word	0x7fefffff
 800883c:	0800bb45 	.word	0x0800bb45
 8008840:	0800bb49 	.word	0x0800bb49
 8008844:	0800bb4d 	.word	0x0800bb4d
 8008848:	0800bb51 	.word	0x0800bb51
 800884c:	0800bb55 	.word	0x0800bb55
 8008850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008852:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008854:	429a      	cmp	r2, r3
 8008856:	bfa8      	it	ge
 8008858:	461a      	movge	r2, r3
 800885a:	2a00      	cmp	r2, #0
 800885c:	4691      	mov	r9, r2
 800885e:	dc37      	bgt.n	80088d0 <_printf_float+0x370>
 8008860:	f04f 0b00 	mov.w	fp, #0
 8008864:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008868:	f104 021a 	add.w	r2, r4, #26
 800886c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800886e:	9305      	str	r3, [sp, #20]
 8008870:	eba3 0309 	sub.w	r3, r3, r9
 8008874:	455b      	cmp	r3, fp
 8008876:	dc33      	bgt.n	80088e0 <_printf_float+0x380>
 8008878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887c:	429a      	cmp	r2, r3
 800887e:	db3b      	blt.n	80088f8 <_printf_float+0x398>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	07da      	lsls	r2, r3, #31
 8008884:	d438      	bmi.n	80088f8 <_printf_float+0x398>
 8008886:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800888a:	eba2 0903 	sub.w	r9, r2, r3
 800888e:	9b05      	ldr	r3, [sp, #20]
 8008890:	1ad2      	subs	r2, r2, r3
 8008892:	4591      	cmp	r9, r2
 8008894:	bfa8      	it	ge
 8008896:	4691      	movge	r9, r2
 8008898:	f1b9 0f00 	cmp.w	r9, #0
 800889c:	dc35      	bgt.n	800890a <_printf_float+0x3aa>
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088a6:	f104 0a1a 	add.w	sl, r4, #26
 80088aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	eba3 0309 	sub.w	r3, r3, r9
 80088b4:	4543      	cmp	r3, r8
 80088b6:	f77f af79 	ble.w	80087ac <_printf_float+0x24c>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4652      	mov	r2, sl
 80088be:	4631      	mov	r1, r6
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b8      	blx	r7
 80088c4:	3001      	adds	r0, #1
 80088c6:	f43f aeaa 	beq.w	800861e <_printf_float+0xbe>
 80088ca:	f108 0801 	add.w	r8, r8, #1
 80088ce:	e7ec      	b.n	80088aa <_printf_float+0x34a>
 80088d0:	4613      	mov	r3, r2
 80088d2:	4631      	mov	r1, r6
 80088d4:	4642      	mov	r2, r8
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	d1c0      	bne.n	8008860 <_printf_float+0x300>
 80088de:	e69e      	b.n	800861e <_printf_float+0xbe>
 80088e0:	2301      	movs	r3, #1
 80088e2:	4631      	mov	r1, r6
 80088e4:	4628      	mov	r0, r5
 80088e6:	9205      	str	r2, [sp, #20]
 80088e8:	47b8      	blx	r7
 80088ea:	3001      	adds	r0, #1
 80088ec:	f43f ae97 	beq.w	800861e <_printf_float+0xbe>
 80088f0:	9a05      	ldr	r2, [sp, #20]
 80088f2:	f10b 0b01 	add.w	fp, fp, #1
 80088f6:	e7b9      	b.n	800886c <_printf_float+0x30c>
 80088f8:	ee18 3a10 	vmov	r3, s16
 80088fc:	4652      	mov	r2, sl
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	47b8      	blx	r7
 8008904:	3001      	adds	r0, #1
 8008906:	d1be      	bne.n	8008886 <_printf_float+0x326>
 8008908:	e689      	b.n	800861e <_printf_float+0xbe>
 800890a:	9a05      	ldr	r2, [sp, #20]
 800890c:	464b      	mov	r3, r9
 800890e:	4442      	add	r2, r8
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	d1c1      	bne.n	800889e <_printf_float+0x33e>
 800891a:	e680      	b.n	800861e <_printf_float+0xbe>
 800891c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800891e:	2a01      	cmp	r2, #1
 8008920:	dc01      	bgt.n	8008926 <_printf_float+0x3c6>
 8008922:	07db      	lsls	r3, r3, #31
 8008924:	d53a      	bpl.n	800899c <_printf_float+0x43c>
 8008926:	2301      	movs	r3, #1
 8008928:	4642      	mov	r2, r8
 800892a:	4631      	mov	r1, r6
 800892c:	4628      	mov	r0, r5
 800892e:	47b8      	blx	r7
 8008930:	3001      	adds	r0, #1
 8008932:	f43f ae74 	beq.w	800861e <_printf_float+0xbe>
 8008936:	ee18 3a10 	vmov	r3, s16
 800893a:	4652      	mov	r2, sl
 800893c:	4631      	mov	r1, r6
 800893e:	4628      	mov	r0, r5
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f ae6b 	beq.w	800861e <_printf_float+0xbe>
 8008948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800894c:	2200      	movs	r2, #0
 800894e:	2300      	movs	r3, #0
 8008950:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008954:	f7f8 f8c8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008958:	b9d8      	cbnz	r0, 8008992 <_printf_float+0x432>
 800895a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800895e:	f108 0201 	add.w	r2, r8, #1
 8008962:	4631      	mov	r1, r6
 8008964:	4628      	mov	r0, r5
 8008966:	47b8      	blx	r7
 8008968:	3001      	adds	r0, #1
 800896a:	d10e      	bne.n	800898a <_printf_float+0x42a>
 800896c:	e657      	b.n	800861e <_printf_float+0xbe>
 800896e:	2301      	movs	r3, #1
 8008970:	4652      	mov	r2, sl
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae50 	beq.w	800861e <_printf_float+0xbe>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008984:	3b01      	subs	r3, #1
 8008986:	4543      	cmp	r3, r8
 8008988:	dcf1      	bgt.n	800896e <_printf_float+0x40e>
 800898a:	464b      	mov	r3, r9
 800898c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008990:	e6da      	b.n	8008748 <_printf_float+0x1e8>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 0a1a 	add.w	sl, r4, #26
 800899a:	e7f2      	b.n	8008982 <_printf_float+0x422>
 800899c:	2301      	movs	r3, #1
 800899e:	4642      	mov	r2, r8
 80089a0:	e7df      	b.n	8008962 <_printf_float+0x402>
 80089a2:	2301      	movs	r3, #1
 80089a4:	464a      	mov	r2, r9
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	f43f ae36 	beq.w	800861e <_printf_float+0xbe>
 80089b2:	f108 0801 	add.w	r8, r8, #1
 80089b6:	68e3      	ldr	r3, [r4, #12]
 80089b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089ba:	1a5b      	subs	r3, r3, r1
 80089bc:	4543      	cmp	r3, r8
 80089be:	dcf0      	bgt.n	80089a2 <_printf_float+0x442>
 80089c0:	e6f8      	b.n	80087b4 <_printf_float+0x254>
 80089c2:	f04f 0800 	mov.w	r8, #0
 80089c6:	f104 0919 	add.w	r9, r4, #25
 80089ca:	e7f4      	b.n	80089b6 <_printf_float+0x456>

080089cc <_printf_common>:
 80089cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	4616      	mov	r6, r2
 80089d2:	4699      	mov	r9, r3
 80089d4:	688a      	ldr	r2, [r1, #8]
 80089d6:	690b      	ldr	r3, [r1, #16]
 80089d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089dc:	4293      	cmp	r3, r2
 80089de:	bfb8      	it	lt
 80089e0:	4613      	movlt	r3, r2
 80089e2:	6033      	str	r3, [r6, #0]
 80089e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089e8:	4607      	mov	r7, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	b10a      	cbz	r2, 80089f2 <_printf_common+0x26>
 80089ee:	3301      	adds	r3, #1
 80089f0:	6033      	str	r3, [r6, #0]
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	0699      	lsls	r1, r3, #26
 80089f6:	bf42      	ittt	mi
 80089f8:	6833      	ldrmi	r3, [r6, #0]
 80089fa:	3302      	addmi	r3, #2
 80089fc:	6033      	strmi	r3, [r6, #0]
 80089fe:	6825      	ldr	r5, [r4, #0]
 8008a00:	f015 0506 	ands.w	r5, r5, #6
 8008a04:	d106      	bne.n	8008a14 <_printf_common+0x48>
 8008a06:	f104 0a19 	add.w	sl, r4, #25
 8008a0a:	68e3      	ldr	r3, [r4, #12]
 8008a0c:	6832      	ldr	r2, [r6, #0]
 8008a0e:	1a9b      	subs	r3, r3, r2
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	dc26      	bgt.n	8008a62 <_printf_common+0x96>
 8008a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a18:	1e13      	subs	r3, r2, #0
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	bf18      	it	ne
 8008a1e:	2301      	movne	r3, #1
 8008a20:	0692      	lsls	r2, r2, #26
 8008a22:	d42b      	bmi.n	8008a7c <_printf_common+0xb0>
 8008a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a28:	4649      	mov	r1, r9
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	47c0      	blx	r8
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d01e      	beq.n	8008a70 <_printf_common+0xa4>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	6922      	ldr	r2, [r4, #16]
 8008a36:	f003 0306 	and.w	r3, r3, #6
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	bf02      	ittt	eq
 8008a3e:	68e5      	ldreq	r5, [r4, #12]
 8008a40:	6833      	ldreq	r3, [r6, #0]
 8008a42:	1aed      	subeq	r5, r5, r3
 8008a44:	68a3      	ldr	r3, [r4, #8]
 8008a46:	bf0c      	ite	eq
 8008a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a4c:	2500      	movne	r5, #0
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	bfc4      	itt	gt
 8008a52:	1a9b      	subgt	r3, r3, r2
 8008a54:	18ed      	addgt	r5, r5, r3
 8008a56:	2600      	movs	r6, #0
 8008a58:	341a      	adds	r4, #26
 8008a5a:	42b5      	cmp	r5, r6
 8008a5c:	d11a      	bne.n	8008a94 <_printf_common+0xc8>
 8008a5e:	2000      	movs	r0, #0
 8008a60:	e008      	b.n	8008a74 <_printf_common+0xa8>
 8008a62:	2301      	movs	r3, #1
 8008a64:	4652      	mov	r2, sl
 8008a66:	4649      	mov	r1, r9
 8008a68:	4638      	mov	r0, r7
 8008a6a:	47c0      	blx	r8
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d103      	bne.n	8008a78 <_printf_common+0xac>
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a78:	3501      	adds	r5, #1
 8008a7a:	e7c6      	b.n	8008a0a <_printf_common+0x3e>
 8008a7c:	18e1      	adds	r1, r4, r3
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	2030      	movs	r0, #48	; 0x30
 8008a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a86:	4422      	add	r2, r4
 8008a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a90:	3302      	adds	r3, #2
 8008a92:	e7c7      	b.n	8008a24 <_printf_common+0x58>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4622      	mov	r2, r4
 8008a98:	4649      	mov	r1, r9
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	47c0      	blx	r8
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d0e6      	beq.n	8008a70 <_printf_common+0xa4>
 8008aa2:	3601      	adds	r6, #1
 8008aa4:	e7d9      	b.n	8008a5a <_printf_common+0x8e>
	...

08008aa8 <_printf_i>:
 8008aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	7e0f      	ldrb	r7, [r1, #24]
 8008aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ab0:	2f78      	cmp	r7, #120	; 0x78
 8008ab2:	4691      	mov	r9, r2
 8008ab4:	4680      	mov	r8, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	469a      	mov	sl, r3
 8008aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008abe:	d807      	bhi.n	8008ad0 <_printf_i+0x28>
 8008ac0:	2f62      	cmp	r7, #98	; 0x62
 8008ac2:	d80a      	bhi.n	8008ada <_printf_i+0x32>
 8008ac4:	2f00      	cmp	r7, #0
 8008ac6:	f000 80d4 	beq.w	8008c72 <_printf_i+0x1ca>
 8008aca:	2f58      	cmp	r7, #88	; 0x58
 8008acc:	f000 80c0 	beq.w	8008c50 <_printf_i+0x1a8>
 8008ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ad8:	e03a      	b.n	8008b50 <_printf_i+0xa8>
 8008ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ade:	2b15      	cmp	r3, #21
 8008ae0:	d8f6      	bhi.n	8008ad0 <_printf_i+0x28>
 8008ae2:	a101      	add	r1, pc, #4	; (adr r1, 8008ae8 <_printf_i+0x40>)
 8008ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ae8:	08008b41 	.word	0x08008b41
 8008aec:	08008b55 	.word	0x08008b55
 8008af0:	08008ad1 	.word	0x08008ad1
 8008af4:	08008ad1 	.word	0x08008ad1
 8008af8:	08008ad1 	.word	0x08008ad1
 8008afc:	08008ad1 	.word	0x08008ad1
 8008b00:	08008b55 	.word	0x08008b55
 8008b04:	08008ad1 	.word	0x08008ad1
 8008b08:	08008ad1 	.word	0x08008ad1
 8008b0c:	08008ad1 	.word	0x08008ad1
 8008b10:	08008ad1 	.word	0x08008ad1
 8008b14:	08008c59 	.word	0x08008c59
 8008b18:	08008b81 	.word	0x08008b81
 8008b1c:	08008c13 	.word	0x08008c13
 8008b20:	08008ad1 	.word	0x08008ad1
 8008b24:	08008ad1 	.word	0x08008ad1
 8008b28:	08008c7b 	.word	0x08008c7b
 8008b2c:	08008ad1 	.word	0x08008ad1
 8008b30:	08008b81 	.word	0x08008b81
 8008b34:	08008ad1 	.word	0x08008ad1
 8008b38:	08008ad1 	.word	0x08008ad1
 8008b3c:	08008c1b 	.word	0x08008c1b
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	1d1a      	adds	r2, r3, #4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	602a      	str	r2, [r5, #0]
 8008b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b50:	2301      	movs	r3, #1
 8008b52:	e09f      	b.n	8008c94 <_printf_i+0x1ec>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	0607      	lsls	r7, r0, #24
 8008b5a:	f103 0104 	add.w	r1, r3, #4
 8008b5e:	6029      	str	r1, [r5, #0]
 8008b60:	d501      	bpl.n	8008b66 <_printf_i+0xbe>
 8008b62:	681e      	ldr	r6, [r3, #0]
 8008b64:	e003      	b.n	8008b6e <_printf_i+0xc6>
 8008b66:	0646      	lsls	r6, r0, #25
 8008b68:	d5fb      	bpl.n	8008b62 <_printf_i+0xba>
 8008b6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b6e:	2e00      	cmp	r6, #0
 8008b70:	da03      	bge.n	8008b7a <_printf_i+0xd2>
 8008b72:	232d      	movs	r3, #45	; 0x2d
 8008b74:	4276      	negs	r6, r6
 8008b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b7a:	485a      	ldr	r0, [pc, #360]	; (8008ce4 <_printf_i+0x23c>)
 8008b7c:	230a      	movs	r3, #10
 8008b7e:	e012      	b.n	8008ba6 <_printf_i+0xfe>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	6820      	ldr	r0, [r4, #0]
 8008b84:	1d19      	adds	r1, r3, #4
 8008b86:	6029      	str	r1, [r5, #0]
 8008b88:	0605      	lsls	r5, r0, #24
 8008b8a:	d501      	bpl.n	8008b90 <_printf_i+0xe8>
 8008b8c:	681e      	ldr	r6, [r3, #0]
 8008b8e:	e002      	b.n	8008b96 <_printf_i+0xee>
 8008b90:	0641      	lsls	r1, r0, #25
 8008b92:	d5fb      	bpl.n	8008b8c <_printf_i+0xe4>
 8008b94:	881e      	ldrh	r6, [r3, #0]
 8008b96:	4853      	ldr	r0, [pc, #332]	; (8008ce4 <_printf_i+0x23c>)
 8008b98:	2f6f      	cmp	r7, #111	; 0x6f
 8008b9a:	bf0c      	ite	eq
 8008b9c:	2308      	moveq	r3, #8
 8008b9e:	230a      	movne	r3, #10
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ba6:	6865      	ldr	r5, [r4, #4]
 8008ba8:	60a5      	str	r5, [r4, #8]
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	bfa2      	ittt	ge
 8008bae:	6821      	ldrge	r1, [r4, #0]
 8008bb0:	f021 0104 	bicge.w	r1, r1, #4
 8008bb4:	6021      	strge	r1, [r4, #0]
 8008bb6:	b90e      	cbnz	r6, 8008bbc <_printf_i+0x114>
 8008bb8:	2d00      	cmp	r5, #0
 8008bba:	d04b      	beq.n	8008c54 <_printf_i+0x1ac>
 8008bbc:	4615      	mov	r5, r2
 8008bbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bc2:	fb03 6711 	mls	r7, r3, r1, r6
 8008bc6:	5dc7      	ldrb	r7, [r0, r7]
 8008bc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bcc:	4637      	mov	r7, r6
 8008bce:	42bb      	cmp	r3, r7
 8008bd0:	460e      	mov	r6, r1
 8008bd2:	d9f4      	bls.n	8008bbe <_printf_i+0x116>
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d10b      	bne.n	8008bf0 <_printf_i+0x148>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	07de      	lsls	r6, r3, #31
 8008bdc:	d508      	bpl.n	8008bf0 <_printf_i+0x148>
 8008bde:	6923      	ldr	r3, [r4, #16]
 8008be0:	6861      	ldr	r1, [r4, #4]
 8008be2:	4299      	cmp	r1, r3
 8008be4:	bfde      	ittt	le
 8008be6:	2330      	movle	r3, #48	; 0x30
 8008be8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bf0:	1b52      	subs	r2, r2, r5
 8008bf2:	6122      	str	r2, [r4, #16]
 8008bf4:	f8cd a000 	str.w	sl, [sp]
 8008bf8:	464b      	mov	r3, r9
 8008bfa:	aa03      	add	r2, sp, #12
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4640      	mov	r0, r8
 8008c00:	f7ff fee4 	bl	80089cc <_printf_common>
 8008c04:	3001      	adds	r0, #1
 8008c06:	d14a      	bne.n	8008c9e <_printf_i+0x1f6>
 8008c08:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0c:	b004      	add	sp, #16
 8008c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	f043 0320 	orr.w	r3, r3, #32
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	4833      	ldr	r0, [pc, #204]	; (8008ce8 <_printf_i+0x240>)
 8008c1c:	2778      	movs	r7, #120	; 0x78
 8008c1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	6829      	ldr	r1, [r5, #0]
 8008c26:	061f      	lsls	r7, r3, #24
 8008c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c2c:	d402      	bmi.n	8008c34 <_printf_i+0x18c>
 8008c2e:	065f      	lsls	r7, r3, #25
 8008c30:	bf48      	it	mi
 8008c32:	b2b6      	uxthmi	r6, r6
 8008c34:	07df      	lsls	r7, r3, #31
 8008c36:	bf48      	it	mi
 8008c38:	f043 0320 	orrmi.w	r3, r3, #32
 8008c3c:	6029      	str	r1, [r5, #0]
 8008c3e:	bf48      	it	mi
 8008c40:	6023      	strmi	r3, [r4, #0]
 8008c42:	b91e      	cbnz	r6, 8008c4c <_printf_i+0x1a4>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	f023 0320 	bic.w	r3, r3, #32
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	e7a7      	b.n	8008ba0 <_printf_i+0xf8>
 8008c50:	4824      	ldr	r0, [pc, #144]	; (8008ce4 <_printf_i+0x23c>)
 8008c52:	e7e4      	b.n	8008c1e <_printf_i+0x176>
 8008c54:	4615      	mov	r5, r2
 8008c56:	e7bd      	b.n	8008bd4 <_printf_i+0x12c>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	6826      	ldr	r6, [r4, #0]
 8008c5c:	6961      	ldr	r1, [r4, #20]
 8008c5e:	1d18      	adds	r0, r3, #4
 8008c60:	6028      	str	r0, [r5, #0]
 8008c62:	0635      	lsls	r5, r6, #24
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	d501      	bpl.n	8008c6c <_printf_i+0x1c4>
 8008c68:	6019      	str	r1, [r3, #0]
 8008c6a:	e002      	b.n	8008c72 <_printf_i+0x1ca>
 8008c6c:	0670      	lsls	r0, r6, #25
 8008c6e:	d5fb      	bpl.n	8008c68 <_printf_i+0x1c0>
 8008c70:	8019      	strh	r1, [r3, #0]
 8008c72:	2300      	movs	r3, #0
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	4615      	mov	r5, r2
 8008c78:	e7bc      	b.n	8008bf4 <_printf_i+0x14c>
 8008c7a:	682b      	ldr	r3, [r5, #0]
 8008c7c:	1d1a      	adds	r2, r3, #4
 8008c7e:	602a      	str	r2, [r5, #0]
 8008c80:	681d      	ldr	r5, [r3, #0]
 8008c82:	6862      	ldr	r2, [r4, #4]
 8008c84:	2100      	movs	r1, #0
 8008c86:	4628      	mov	r0, r5
 8008c88:	f7f7 fab2 	bl	80001f0 <memchr>
 8008c8c:	b108      	cbz	r0, 8008c92 <_printf_i+0x1ea>
 8008c8e:	1b40      	subs	r0, r0, r5
 8008c90:	6060      	str	r0, [r4, #4]
 8008c92:	6863      	ldr	r3, [r4, #4]
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	2300      	movs	r3, #0
 8008c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c9c:	e7aa      	b.n	8008bf4 <_printf_i+0x14c>
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	47d0      	blx	sl
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d0ad      	beq.n	8008c08 <_printf_i+0x160>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	079b      	lsls	r3, r3, #30
 8008cb0:	d413      	bmi.n	8008cda <_printf_i+0x232>
 8008cb2:	68e0      	ldr	r0, [r4, #12]
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	4298      	cmp	r0, r3
 8008cb8:	bfb8      	it	lt
 8008cba:	4618      	movlt	r0, r3
 8008cbc:	e7a6      	b.n	8008c0c <_printf_i+0x164>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4632      	mov	r2, r6
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	47d0      	blx	sl
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d09d      	beq.n	8008c08 <_printf_i+0x160>
 8008ccc:	3501      	adds	r5, #1
 8008cce:	68e3      	ldr	r3, [r4, #12]
 8008cd0:	9903      	ldr	r1, [sp, #12]
 8008cd2:	1a5b      	subs	r3, r3, r1
 8008cd4:	42ab      	cmp	r3, r5
 8008cd6:	dcf2      	bgt.n	8008cbe <_printf_i+0x216>
 8008cd8:	e7eb      	b.n	8008cb2 <_printf_i+0x20a>
 8008cda:	2500      	movs	r5, #0
 8008cdc:	f104 0619 	add.w	r6, r4, #25
 8008ce0:	e7f5      	b.n	8008cce <_printf_i+0x226>
 8008ce2:	bf00      	nop
 8008ce4:	0800bb57 	.word	0x0800bb57
 8008ce8:	0800bb68 	.word	0x0800bb68

08008cec <__sflush_r>:
 8008cec:	898a      	ldrh	r2, [r1, #12]
 8008cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	0710      	lsls	r0, r2, #28
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	d458      	bmi.n	8008dac <__sflush_r+0xc0>
 8008cfa:	684b      	ldr	r3, [r1, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	dc05      	bgt.n	8008d0c <__sflush_r+0x20>
 8008d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	dc02      	bgt.n	8008d0c <__sflush_r+0x20>
 8008d06:	2000      	movs	r0, #0
 8008d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	d0f9      	beq.n	8008d06 <__sflush_r+0x1a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d18:	682f      	ldr	r7, [r5, #0]
 8008d1a:	6a21      	ldr	r1, [r4, #32]
 8008d1c:	602b      	str	r3, [r5, #0]
 8008d1e:	d032      	beq.n	8008d86 <__sflush_r+0x9a>
 8008d20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	075a      	lsls	r2, r3, #29
 8008d26:	d505      	bpl.n	8008d34 <__sflush_r+0x48>
 8008d28:	6863      	ldr	r3, [r4, #4]
 8008d2a:	1ac0      	subs	r0, r0, r3
 8008d2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d2e:	b10b      	cbz	r3, 8008d34 <__sflush_r+0x48>
 8008d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d32:	1ac0      	subs	r0, r0, r3
 8008d34:	2300      	movs	r3, #0
 8008d36:	4602      	mov	r2, r0
 8008d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d3a:	6a21      	ldr	r1, [r4, #32]
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	47b0      	blx	r6
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	d106      	bne.n	8008d54 <__sflush_r+0x68>
 8008d46:	6829      	ldr	r1, [r5, #0]
 8008d48:	291d      	cmp	r1, #29
 8008d4a:	d82b      	bhi.n	8008da4 <__sflush_r+0xb8>
 8008d4c:	4a29      	ldr	r2, [pc, #164]	; (8008df4 <__sflush_r+0x108>)
 8008d4e:	410a      	asrs	r2, r1
 8008d50:	07d6      	lsls	r6, r2, #31
 8008d52:	d427      	bmi.n	8008da4 <__sflush_r+0xb8>
 8008d54:	2200      	movs	r2, #0
 8008d56:	6062      	str	r2, [r4, #4]
 8008d58:	04d9      	lsls	r1, r3, #19
 8008d5a:	6922      	ldr	r2, [r4, #16]
 8008d5c:	6022      	str	r2, [r4, #0]
 8008d5e:	d504      	bpl.n	8008d6a <__sflush_r+0x7e>
 8008d60:	1c42      	adds	r2, r0, #1
 8008d62:	d101      	bne.n	8008d68 <__sflush_r+0x7c>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b903      	cbnz	r3, 8008d6a <__sflush_r+0x7e>
 8008d68:	6560      	str	r0, [r4, #84]	; 0x54
 8008d6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d6c:	602f      	str	r7, [r5, #0]
 8008d6e:	2900      	cmp	r1, #0
 8008d70:	d0c9      	beq.n	8008d06 <__sflush_r+0x1a>
 8008d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d76:	4299      	cmp	r1, r3
 8008d78:	d002      	beq.n	8008d80 <__sflush_r+0x94>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f001 fa5a 	bl	800a234 <_free_r>
 8008d80:	2000      	movs	r0, #0
 8008d82:	6360      	str	r0, [r4, #52]	; 0x34
 8008d84:	e7c0      	b.n	8008d08 <__sflush_r+0x1c>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b0      	blx	r6
 8008d8c:	1c41      	adds	r1, r0, #1
 8008d8e:	d1c8      	bne.n	8008d22 <__sflush_r+0x36>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0c5      	beq.n	8008d22 <__sflush_r+0x36>
 8008d96:	2b1d      	cmp	r3, #29
 8008d98:	d001      	beq.n	8008d9e <__sflush_r+0xb2>
 8008d9a:	2b16      	cmp	r3, #22
 8008d9c:	d101      	bne.n	8008da2 <__sflush_r+0xb6>
 8008d9e:	602f      	str	r7, [r5, #0]
 8008da0:	e7b1      	b.n	8008d06 <__sflush_r+0x1a>
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da8:	81a3      	strh	r3, [r4, #12]
 8008daa:	e7ad      	b.n	8008d08 <__sflush_r+0x1c>
 8008dac:	690f      	ldr	r7, [r1, #16]
 8008dae:	2f00      	cmp	r7, #0
 8008db0:	d0a9      	beq.n	8008d06 <__sflush_r+0x1a>
 8008db2:	0793      	lsls	r3, r2, #30
 8008db4:	680e      	ldr	r6, [r1, #0]
 8008db6:	bf08      	it	eq
 8008db8:	694b      	ldreq	r3, [r1, #20]
 8008dba:	600f      	str	r7, [r1, #0]
 8008dbc:	bf18      	it	ne
 8008dbe:	2300      	movne	r3, #0
 8008dc0:	eba6 0807 	sub.w	r8, r6, r7
 8008dc4:	608b      	str	r3, [r1, #8]
 8008dc6:	f1b8 0f00 	cmp.w	r8, #0
 8008dca:	dd9c      	ble.n	8008d06 <__sflush_r+0x1a>
 8008dcc:	6a21      	ldr	r1, [r4, #32]
 8008dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dd0:	4643      	mov	r3, r8
 8008dd2:	463a      	mov	r2, r7
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	47b0      	blx	r6
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	dc06      	bgt.n	8008dea <__sflush_r+0xfe>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	e78e      	b.n	8008d08 <__sflush_r+0x1c>
 8008dea:	4407      	add	r7, r0
 8008dec:	eba8 0800 	sub.w	r8, r8, r0
 8008df0:	e7e9      	b.n	8008dc6 <__sflush_r+0xda>
 8008df2:	bf00      	nop
 8008df4:	dfbffffe 	.word	0xdfbffffe

08008df8 <_fflush_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	690b      	ldr	r3, [r1, #16]
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	b913      	cbnz	r3, 8008e08 <_fflush_r+0x10>
 8008e02:	2500      	movs	r5, #0
 8008e04:	4628      	mov	r0, r5
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	b118      	cbz	r0, 8008e12 <_fflush_r+0x1a>
 8008e0a:	6a03      	ldr	r3, [r0, #32]
 8008e0c:	b90b      	cbnz	r3, 8008e12 <_fflush_r+0x1a>
 8008e0e:	f000 f8bb 	bl	8008f88 <__sinit>
 8008e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0f3      	beq.n	8008e02 <_fflush_r+0xa>
 8008e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e1c:	07d0      	lsls	r0, r2, #31
 8008e1e:	d404      	bmi.n	8008e2a <_fflush_r+0x32>
 8008e20:	0599      	lsls	r1, r3, #22
 8008e22:	d402      	bmi.n	8008e2a <_fflush_r+0x32>
 8008e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e26:	f000 fb88 	bl	800953a <__retarget_lock_acquire_recursive>
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	f7ff ff5d 	bl	8008cec <__sflush_r>
 8008e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e34:	07da      	lsls	r2, r3, #31
 8008e36:	4605      	mov	r5, r0
 8008e38:	d4e4      	bmi.n	8008e04 <_fflush_r+0xc>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	059b      	lsls	r3, r3, #22
 8008e3e:	d4e1      	bmi.n	8008e04 <_fflush_r+0xc>
 8008e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e42:	f000 fb7b 	bl	800953c <__retarget_lock_release_recursive>
 8008e46:	e7dd      	b.n	8008e04 <_fflush_r+0xc>

08008e48 <fflush>:
 8008e48:	4601      	mov	r1, r0
 8008e4a:	b920      	cbnz	r0, 8008e56 <fflush+0xe>
 8008e4c:	4a04      	ldr	r2, [pc, #16]	; (8008e60 <fflush+0x18>)
 8008e4e:	4905      	ldr	r1, [pc, #20]	; (8008e64 <fflush+0x1c>)
 8008e50:	4805      	ldr	r0, [pc, #20]	; (8008e68 <fflush+0x20>)
 8008e52:	f000 b8b1 	b.w	8008fb8 <_fwalk_sglue>
 8008e56:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <fflush+0x24>)
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f7ff bfcd 	b.w	8008df8 <_fflush_r>
 8008e5e:	bf00      	nop
 8008e60:	2000076c 	.word	0x2000076c
 8008e64:	08008df9 	.word	0x08008df9
 8008e68:	20000778 	.word	0x20000778
 8008e6c:	200007c4 	.word	0x200007c4

08008e70 <std>:
 8008e70:	2300      	movs	r3, #0
 8008e72:	b510      	push	{r4, lr}
 8008e74:	4604      	mov	r4, r0
 8008e76:	e9c0 3300 	strd	r3, r3, [r0]
 8008e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e7e:	6083      	str	r3, [r0, #8]
 8008e80:	8181      	strh	r1, [r0, #12]
 8008e82:	6643      	str	r3, [r0, #100]	; 0x64
 8008e84:	81c2      	strh	r2, [r0, #14]
 8008e86:	6183      	str	r3, [r0, #24]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	2208      	movs	r2, #8
 8008e8c:	305c      	adds	r0, #92	; 0x5c
 8008e8e:	f000 fac5 	bl	800941c <memset>
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <std+0x58>)
 8008e94:	6263      	str	r3, [r4, #36]	; 0x24
 8008e96:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <std+0x5c>)
 8008e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <std+0x60>)
 8008e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <std+0x64>)
 8008ea0:	6323      	str	r3, [r4, #48]	; 0x30
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <std+0x68>)
 8008ea4:	6224      	str	r4, [r4, #32]
 8008ea6:	429c      	cmp	r4, r3
 8008ea8:	d006      	beq.n	8008eb8 <std+0x48>
 8008eaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008eae:	4294      	cmp	r4, r2
 8008eb0:	d002      	beq.n	8008eb8 <std+0x48>
 8008eb2:	33d0      	adds	r3, #208	; 0xd0
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	d105      	bne.n	8008ec4 <std+0x54>
 8008eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec0:	f000 bb3a 	b.w	8009538 <__retarget_lock_init_recursive>
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	bf00      	nop
 8008ec8:	0800926d 	.word	0x0800926d
 8008ecc:	0800928f 	.word	0x0800928f
 8008ed0:	080092c7 	.word	0x080092c7
 8008ed4:	080092eb 	.word	0x080092eb
 8008ed8:	20000c50 	.word	0x20000c50

08008edc <stdio_exit_handler>:
 8008edc:	4a02      	ldr	r2, [pc, #8]	; (8008ee8 <stdio_exit_handler+0xc>)
 8008ede:	4903      	ldr	r1, [pc, #12]	; (8008eec <stdio_exit_handler+0x10>)
 8008ee0:	4803      	ldr	r0, [pc, #12]	; (8008ef0 <stdio_exit_handler+0x14>)
 8008ee2:	f000 b869 	b.w	8008fb8 <_fwalk_sglue>
 8008ee6:	bf00      	nop
 8008ee8:	2000076c 	.word	0x2000076c
 8008eec:	08008df9 	.word	0x08008df9
 8008ef0:	20000778 	.word	0x20000778

08008ef4 <cleanup_stdio>:
 8008ef4:	6841      	ldr	r1, [r0, #4]
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <cleanup_stdio+0x34>)
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	b510      	push	{r4, lr}
 8008efc:	4604      	mov	r4, r0
 8008efe:	d001      	beq.n	8008f04 <cleanup_stdio+0x10>
 8008f00:	f7ff ff7a 	bl	8008df8 <_fflush_r>
 8008f04:	68a1      	ldr	r1, [r4, #8]
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <cleanup_stdio+0x38>)
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	d002      	beq.n	8008f12 <cleanup_stdio+0x1e>
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f7ff ff73 	bl	8008df8 <_fflush_r>
 8008f12:	68e1      	ldr	r1, [r4, #12]
 8008f14:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <cleanup_stdio+0x3c>)
 8008f16:	4299      	cmp	r1, r3
 8008f18:	d004      	beq.n	8008f24 <cleanup_stdio+0x30>
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f20:	f7ff bf6a 	b.w	8008df8 <_fflush_r>
 8008f24:	bd10      	pop	{r4, pc}
 8008f26:	bf00      	nop
 8008f28:	20000c50 	.word	0x20000c50
 8008f2c:	20000cb8 	.word	0x20000cb8
 8008f30:	20000d20 	.word	0x20000d20

08008f34 <global_stdio_init.part.0>:
 8008f34:	b510      	push	{r4, lr}
 8008f36:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <global_stdio_init.part.0+0x30>)
 8008f38:	4c0b      	ldr	r4, [pc, #44]	; (8008f68 <global_stdio_init.part.0+0x34>)
 8008f3a:	4a0c      	ldr	r2, [pc, #48]	; (8008f6c <global_stdio_init.part.0+0x38>)
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	2200      	movs	r2, #0
 8008f42:	2104      	movs	r1, #4
 8008f44:	f7ff ff94 	bl	8008e70 <std>
 8008f48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	2109      	movs	r1, #9
 8008f50:	f7ff ff8e 	bl	8008e70 <std>
 8008f54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008f58:	2202      	movs	r2, #2
 8008f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f5e:	2112      	movs	r1, #18
 8008f60:	f7ff bf86 	b.w	8008e70 <std>
 8008f64:	20000d88 	.word	0x20000d88
 8008f68:	20000c50 	.word	0x20000c50
 8008f6c:	08008edd 	.word	0x08008edd

08008f70 <__sfp_lock_acquire>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sfp_lock_acquire+0x8>)
 8008f72:	f000 bae2 	b.w	800953a <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	20000d91 	.word	0x20000d91

08008f7c <__sfp_lock_release>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__sfp_lock_release+0x8>)
 8008f7e:	f000 badd 	b.w	800953c <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	20000d91 	.word	0x20000d91

08008f88 <__sinit>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	f7ff fff0 	bl	8008f70 <__sfp_lock_acquire>
 8008f90:	6a23      	ldr	r3, [r4, #32]
 8008f92:	b11b      	cbz	r3, 8008f9c <__sinit+0x14>
 8008f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f98:	f7ff bff0 	b.w	8008f7c <__sfp_lock_release>
 8008f9c:	4b04      	ldr	r3, [pc, #16]	; (8008fb0 <__sinit+0x28>)
 8008f9e:	6223      	str	r3, [r4, #32]
 8008fa0:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <__sinit+0x2c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1f5      	bne.n	8008f94 <__sinit+0xc>
 8008fa8:	f7ff ffc4 	bl	8008f34 <global_stdio_init.part.0>
 8008fac:	e7f2      	b.n	8008f94 <__sinit+0xc>
 8008fae:	bf00      	nop
 8008fb0:	08008ef5 	.word	0x08008ef5
 8008fb4:	20000d88 	.word	0x20000d88

08008fb8 <_fwalk_sglue>:
 8008fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	4688      	mov	r8, r1
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8008fcc:	d505      	bpl.n	8008fda <_fwalk_sglue+0x22>
 8008fce:	6824      	ldr	r4, [r4, #0]
 8008fd0:	2c00      	cmp	r4, #0
 8008fd2:	d1f7      	bne.n	8008fc4 <_fwalk_sglue+0xc>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d907      	bls.n	8008ff0 <_fwalk_sglue+0x38>
 8008fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	d003      	beq.n	8008ff0 <_fwalk_sglue+0x38>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4638      	mov	r0, r7
 8008fec:	47c0      	blx	r8
 8008fee:	4306      	orrs	r6, r0
 8008ff0:	3568      	adds	r5, #104	; 0x68
 8008ff2:	e7e9      	b.n	8008fc8 <_fwalk_sglue+0x10>

08008ff4 <iprintf>:
 8008ff4:	b40f      	push	{r0, r1, r2, r3}
 8008ff6:	b507      	push	{r0, r1, r2, lr}
 8008ff8:	4906      	ldr	r1, [pc, #24]	; (8009014 <iprintf+0x20>)
 8008ffa:	ab04      	add	r3, sp, #16
 8008ffc:	6808      	ldr	r0, [r1, #0]
 8008ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009002:	6881      	ldr	r1, [r0, #8]
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	f001 ff13 	bl	800ae30 <_vfiprintf_r>
 800900a:	b003      	add	sp, #12
 800900c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009010:	b004      	add	sp, #16
 8009012:	4770      	bx	lr
 8009014:	200007c4 	.word	0x200007c4

08009018 <_puts_r>:
 8009018:	6a03      	ldr	r3, [r0, #32]
 800901a:	b570      	push	{r4, r5, r6, lr}
 800901c:	6884      	ldr	r4, [r0, #8]
 800901e:	4605      	mov	r5, r0
 8009020:	460e      	mov	r6, r1
 8009022:	b90b      	cbnz	r3, 8009028 <_puts_r+0x10>
 8009024:	f7ff ffb0 	bl	8008f88 <__sinit>
 8009028:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800902a:	07db      	lsls	r3, r3, #31
 800902c:	d405      	bmi.n	800903a <_puts_r+0x22>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	0598      	lsls	r0, r3, #22
 8009032:	d402      	bmi.n	800903a <_puts_r+0x22>
 8009034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009036:	f000 fa80 	bl	800953a <__retarget_lock_acquire_recursive>
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	0719      	lsls	r1, r3, #28
 800903e:	d513      	bpl.n	8009068 <_puts_r+0x50>
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	b18b      	cbz	r3, 8009068 <_puts_r+0x50>
 8009044:	3e01      	subs	r6, #1
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800904c:	3b01      	subs	r3, #1
 800904e:	60a3      	str	r3, [r4, #8]
 8009050:	b9e9      	cbnz	r1, 800908e <_puts_r+0x76>
 8009052:	2b00      	cmp	r3, #0
 8009054:	da2e      	bge.n	80090b4 <_puts_r+0x9c>
 8009056:	4622      	mov	r2, r4
 8009058:	210a      	movs	r1, #10
 800905a:	4628      	mov	r0, r5
 800905c:	f000 f949 	bl	80092f2 <__swbuf_r>
 8009060:	3001      	adds	r0, #1
 8009062:	d007      	beq.n	8009074 <_puts_r+0x5c>
 8009064:	250a      	movs	r5, #10
 8009066:	e007      	b.n	8009078 <_puts_r+0x60>
 8009068:	4621      	mov	r1, r4
 800906a:	4628      	mov	r0, r5
 800906c:	f000 f97e 	bl	800936c <__swsetup_r>
 8009070:	2800      	cmp	r0, #0
 8009072:	d0e7      	beq.n	8009044 <_puts_r+0x2c>
 8009074:	f04f 35ff 	mov.w	r5, #4294967295
 8009078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800907a:	07da      	lsls	r2, r3, #31
 800907c:	d405      	bmi.n	800908a <_puts_r+0x72>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	059b      	lsls	r3, r3, #22
 8009082:	d402      	bmi.n	800908a <_puts_r+0x72>
 8009084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009086:	f000 fa59 	bl	800953c <__retarget_lock_release_recursive>
 800908a:	4628      	mov	r0, r5
 800908c:	bd70      	pop	{r4, r5, r6, pc}
 800908e:	2b00      	cmp	r3, #0
 8009090:	da04      	bge.n	800909c <_puts_r+0x84>
 8009092:	69a2      	ldr	r2, [r4, #24]
 8009094:	429a      	cmp	r2, r3
 8009096:	dc06      	bgt.n	80090a6 <_puts_r+0x8e>
 8009098:	290a      	cmp	r1, #10
 800909a:	d004      	beq.n	80090a6 <_puts_r+0x8e>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	6022      	str	r2, [r4, #0]
 80090a2:	7019      	strb	r1, [r3, #0]
 80090a4:	e7cf      	b.n	8009046 <_puts_r+0x2e>
 80090a6:	4622      	mov	r2, r4
 80090a8:	4628      	mov	r0, r5
 80090aa:	f000 f922 	bl	80092f2 <__swbuf_r>
 80090ae:	3001      	adds	r0, #1
 80090b0:	d1c9      	bne.n	8009046 <_puts_r+0x2e>
 80090b2:	e7df      	b.n	8009074 <_puts_r+0x5c>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	250a      	movs	r5, #10
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	6022      	str	r2, [r4, #0]
 80090bc:	701d      	strb	r5, [r3, #0]
 80090be:	e7db      	b.n	8009078 <_puts_r+0x60>

080090c0 <puts>:
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <puts+0xc>)
 80090c2:	4601      	mov	r1, r0
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	f7ff bfa7 	b.w	8009018 <_puts_r>
 80090ca:	bf00      	nop
 80090cc:	200007c4 	.word	0x200007c4

080090d0 <setvbuf>:
 80090d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090d4:	461d      	mov	r5, r3
 80090d6:	4b54      	ldr	r3, [pc, #336]	; (8009228 <setvbuf+0x158>)
 80090d8:	681f      	ldr	r7, [r3, #0]
 80090da:	4604      	mov	r4, r0
 80090dc:	460e      	mov	r6, r1
 80090de:	4690      	mov	r8, r2
 80090e0:	b127      	cbz	r7, 80090ec <setvbuf+0x1c>
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	b913      	cbnz	r3, 80090ec <setvbuf+0x1c>
 80090e6:	4638      	mov	r0, r7
 80090e8:	f7ff ff4e 	bl	8008f88 <__sinit>
 80090ec:	f1b8 0f02 	cmp.w	r8, #2
 80090f0:	d006      	beq.n	8009100 <setvbuf+0x30>
 80090f2:	f1b8 0f01 	cmp.w	r8, #1
 80090f6:	f200 8094 	bhi.w	8009222 <setvbuf+0x152>
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	f2c0 8091 	blt.w	8009222 <setvbuf+0x152>
 8009100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009102:	07da      	lsls	r2, r3, #31
 8009104:	d405      	bmi.n	8009112 <setvbuf+0x42>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	059b      	lsls	r3, r3, #22
 800910a:	d402      	bmi.n	8009112 <setvbuf+0x42>
 800910c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800910e:	f000 fa14 	bl	800953a <__retarget_lock_acquire_recursive>
 8009112:	4621      	mov	r1, r4
 8009114:	4638      	mov	r0, r7
 8009116:	f7ff fe6f 	bl	8008df8 <_fflush_r>
 800911a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800911c:	b141      	cbz	r1, 8009130 <setvbuf+0x60>
 800911e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009122:	4299      	cmp	r1, r3
 8009124:	d002      	beq.n	800912c <setvbuf+0x5c>
 8009126:	4638      	mov	r0, r7
 8009128:	f001 f884 	bl	800a234 <_free_r>
 800912c:	2300      	movs	r3, #0
 800912e:	6363      	str	r3, [r4, #52]	; 0x34
 8009130:	2300      	movs	r3, #0
 8009132:	61a3      	str	r3, [r4, #24]
 8009134:	6063      	str	r3, [r4, #4]
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	0618      	lsls	r0, r3, #24
 800913a:	d503      	bpl.n	8009144 <setvbuf+0x74>
 800913c:	6921      	ldr	r1, [r4, #16]
 800913e:	4638      	mov	r0, r7
 8009140:	f001 f878 	bl	800a234 <_free_r>
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800914a:	f023 0303 	bic.w	r3, r3, #3
 800914e:	f1b8 0f02 	cmp.w	r8, #2
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	d05f      	beq.n	8009216 <setvbuf+0x146>
 8009156:	ab01      	add	r3, sp, #4
 8009158:	466a      	mov	r2, sp
 800915a:	4621      	mov	r1, r4
 800915c:	4638      	mov	r0, r7
 800915e:	f001 ff81 	bl	800b064 <__swhatbuf_r>
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	4318      	orrs	r0, r3
 8009166:	81a0      	strh	r0, [r4, #12]
 8009168:	bb2d      	cbnz	r5, 80091b6 <setvbuf+0xe6>
 800916a:	9d00      	ldr	r5, [sp, #0]
 800916c:	4628      	mov	r0, r5
 800916e:	f001 f8ad 	bl	800a2cc <malloc>
 8009172:	4606      	mov	r6, r0
 8009174:	2800      	cmp	r0, #0
 8009176:	d150      	bne.n	800921a <setvbuf+0x14a>
 8009178:	f8dd 9000 	ldr.w	r9, [sp]
 800917c:	45a9      	cmp	r9, r5
 800917e:	d13e      	bne.n	80091fe <setvbuf+0x12e>
 8009180:	f04f 35ff 	mov.w	r5, #4294967295
 8009184:	2200      	movs	r2, #0
 8009186:	60a2      	str	r2, [r4, #8]
 8009188:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800918c:	6022      	str	r2, [r4, #0]
 800918e:	6122      	str	r2, [r4, #16]
 8009190:	2201      	movs	r2, #1
 8009192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009196:	6162      	str	r2, [r4, #20]
 8009198:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800919a:	f043 0302 	orr.w	r3, r3, #2
 800919e:	07d1      	lsls	r1, r2, #31
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	d404      	bmi.n	80091ae <setvbuf+0xde>
 80091a4:	059b      	lsls	r3, r3, #22
 80091a6:	d402      	bmi.n	80091ae <setvbuf+0xde>
 80091a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091aa:	f000 f9c7 	bl	800953c <__retarget_lock_release_recursive>
 80091ae:	4628      	mov	r0, r5
 80091b0:	b003      	add	sp, #12
 80091b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	d0d8      	beq.n	800916c <setvbuf+0x9c>
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	b913      	cbnz	r3, 80091c4 <setvbuf+0xf4>
 80091be:	4638      	mov	r0, r7
 80091c0:	f7ff fee2 	bl	8008f88 <__sinit>
 80091c4:	f1b8 0f01 	cmp.w	r8, #1
 80091c8:	bf08      	it	eq
 80091ca:	89a3      	ldrheq	r3, [r4, #12]
 80091cc:	6026      	str	r6, [r4, #0]
 80091ce:	bf04      	itt	eq
 80091d0:	f043 0301 	orreq.w	r3, r3, #1
 80091d4:	81a3      	strheq	r3, [r4, #12]
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f013 0208 	ands.w	r2, r3, #8
 80091dc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80091e0:	d01d      	beq.n	800921e <setvbuf+0x14e>
 80091e2:	07da      	lsls	r2, r3, #31
 80091e4:	bf41      	itttt	mi
 80091e6:	2200      	movmi	r2, #0
 80091e8:	426d      	negmi	r5, r5
 80091ea:	60a2      	strmi	r2, [r4, #8]
 80091ec:	61a5      	strmi	r5, [r4, #24]
 80091ee:	bf58      	it	pl
 80091f0:	60a5      	strpl	r5, [r4, #8]
 80091f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80091f4:	f015 0501 	ands.w	r5, r5, #1
 80091f8:	d0d4      	beq.n	80091a4 <setvbuf+0xd4>
 80091fa:	2500      	movs	r5, #0
 80091fc:	e7d7      	b.n	80091ae <setvbuf+0xde>
 80091fe:	4648      	mov	r0, r9
 8009200:	f001 f864 	bl	800a2cc <malloc>
 8009204:	4606      	mov	r6, r0
 8009206:	2800      	cmp	r0, #0
 8009208:	d0ba      	beq.n	8009180 <setvbuf+0xb0>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	464d      	mov	r5, r9
 8009214:	e7d1      	b.n	80091ba <setvbuf+0xea>
 8009216:	2500      	movs	r5, #0
 8009218:	e7b4      	b.n	8009184 <setvbuf+0xb4>
 800921a:	46a9      	mov	r9, r5
 800921c:	e7f5      	b.n	800920a <setvbuf+0x13a>
 800921e:	60a2      	str	r2, [r4, #8]
 8009220:	e7e7      	b.n	80091f2 <setvbuf+0x122>
 8009222:	f04f 35ff 	mov.w	r5, #4294967295
 8009226:	e7c2      	b.n	80091ae <setvbuf+0xde>
 8009228:	200007c4 	.word	0x200007c4

0800922c <siprintf>:
 800922c:	b40e      	push	{r1, r2, r3}
 800922e:	b500      	push	{lr}
 8009230:	b09c      	sub	sp, #112	; 0x70
 8009232:	ab1d      	add	r3, sp, #116	; 0x74
 8009234:	9002      	str	r0, [sp, #8]
 8009236:	9006      	str	r0, [sp, #24]
 8009238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800923c:	4809      	ldr	r0, [pc, #36]	; (8009264 <siprintf+0x38>)
 800923e:	9107      	str	r1, [sp, #28]
 8009240:	9104      	str	r1, [sp, #16]
 8009242:	4909      	ldr	r1, [pc, #36]	; (8009268 <siprintf+0x3c>)
 8009244:	f853 2b04 	ldr.w	r2, [r3], #4
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	a902      	add	r1, sp, #8
 8009250:	f001 fcc6 	bl	800abe0 <_svfiprintf_r>
 8009254:	9b02      	ldr	r3, [sp, #8]
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	b01c      	add	sp, #112	; 0x70
 800925c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009260:	b003      	add	sp, #12
 8009262:	4770      	bx	lr
 8009264:	200007c4 	.word	0x200007c4
 8009268:	ffff0208 	.word	0xffff0208

0800926c <__sread>:
 800926c:	b510      	push	{r4, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	f000 f912 	bl	800949c <_read_r>
 8009278:	2800      	cmp	r0, #0
 800927a:	bfab      	itete	ge
 800927c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800927e:	89a3      	ldrhlt	r3, [r4, #12]
 8009280:	181b      	addge	r3, r3, r0
 8009282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009286:	bfac      	ite	ge
 8009288:	6563      	strge	r3, [r4, #84]	; 0x54
 800928a:	81a3      	strhlt	r3, [r4, #12]
 800928c:	bd10      	pop	{r4, pc}

0800928e <__swrite>:
 800928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009292:	461f      	mov	r7, r3
 8009294:	898b      	ldrh	r3, [r1, #12]
 8009296:	05db      	lsls	r3, r3, #23
 8009298:	4605      	mov	r5, r0
 800929a:	460c      	mov	r4, r1
 800929c:	4616      	mov	r6, r2
 800929e:	d505      	bpl.n	80092ac <__swrite+0x1e>
 80092a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a4:	2302      	movs	r3, #2
 80092a6:	2200      	movs	r2, #0
 80092a8:	f000 f8e6 	bl	8009478 <_lseek_r>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	4632      	mov	r2, r6
 80092ba:	463b      	mov	r3, r7
 80092bc:	4628      	mov	r0, r5
 80092be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c2:	f000 b8fd 	b.w	80094c0 <_write_r>

080092c6 <__sseek>:
 80092c6:	b510      	push	{r4, lr}
 80092c8:	460c      	mov	r4, r1
 80092ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ce:	f000 f8d3 	bl	8009478 <_lseek_r>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	bf15      	itete	ne
 80092d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80092da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092e2:	81a3      	strheq	r3, [r4, #12]
 80092e4:	bf18      	it	ne
 80092e6:	81a3      	strhne	r3, [r4, #12]
 80092e8:	bd10      	pop	{r4, pc}

080092ea <__sclose>:
 80092ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ee:	f000 b8b3 	b.w	8009458 <_close_r>

080092f2 <__swbuf_r>:
 80092f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f4:	460e      	mov	r6, r1
 80092f6:	4614      	mov	r4, r2
 80092f8:	4605      	mov	r5, r0
 80092fa:	b118      	cbz	r0, 8009304 <__swbuf_r+0x12>
 80092fc:	6a03      	ldr	r3, [r0, #32]
 80092fe:	b90b      	cbnz	r3, 8009304 <__swbuf_r+0x12>
 8009300:	f7ff fe42 	bl	8008f88 <__sinit>
 8009304:	69a3      	ldr	r3, [r4, #24]
 8009306:	60a3      	str	r3, [r4, #8]
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	071a      	lsls	r2, r3, #28
 800930c:	d525      	bpl.n	800935a <__swbuf_r+0x68>
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	b31b      	cbz	r3, 800935a <__swbuf_r+0x68>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	1a98      	subs	r0, r3, r2
 8009318:	6963      	ldr	r3, [r4, #20]
 800931a:	b2f6      	uxtb	r6, r6
 800931c:	4283      	cmp	r3, r0
 800931e:	4637      	mov	r7, r6
 8009320:	dc04      	bgt.n	800932c <__swbuf_r+0x3a>
 8009322:	4621      	mov	r1, r4
 8009324:	4628      	mov	r0, r5
 8009326:	f7ff fd67 	bl	8008df8 <_fflush_r>
 800932a:	b9e0      	cbnz	r0, 8009366 <__swbuf_r+0x74>
 800932c:	68a3      	ldr	r3, [r4, #8]
 800932e:	3b01      	subs	r3, #1
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	6022      	str	r2, [r4, #0]
 8009338:	701e      	strb	r6, [r3, #0]
 800933a:	6962      	ldr	r2, [r4, #20]
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	429a      	cmp	r2, r3
 8009340:	d004      	beq.n	800934c <__swbuf_r+0x5a>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	07db      	lsls	r3, r3, #31
 8009346:	d506      	bpl.n	8009356 <__swbuf_r+0x64>
 8009348:	2e0a      	cmp	r6, #10
 800934a:	d104      	bne.n	8009356 <__swbuf_r+0x64>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f7ff fd52 	bl	8008df8 <_fflush_r>
 8009354:	b938      	cbnz	r0, 8009366 <__swbuf_r+0x74>
 8009356:	4638      	mov	r0, r7
 8009358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f805 	bl	800936c <__swsetup_r>
 8009362:	2800      	cmp	r0, #0
 8009364:	d0d5      	beq.n	8009312 <__swbuf_r+0x20>
 8009366:	f04f 37ff 	mov.w	r7, #4294967295
 800936a:	e7f4      	b.n	8009356 <__swbuf_r+0x64>

0800936c <__swsetup_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4b2a      	ldr	r3, [pc, #168]	; (8009418 <__swsetup_r+0xac>)
 8009370:	4605      	mov	r5, r0
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	460c      	mov	r4, r1
 8009376:	b118      	cbz	r0, 8009380 <__swsetup_r+0x14>
 8009378:	6a03      	ldr	r3, [r0, #32]
 800937a:	b90b      	cbnz	r3, 8009380 <__swsetup_r+0x14>
 800937c:	f7ff fe04 	bl	8008f88 <__sinit>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009386:	0718      	lsls	r0, r3, #28
 8009388:	d422      	bmi.n	80093d0 <__swsetup_r+0x64>
 800938a:	06d9      	lsls	r1, r3, #27
 800938c:	d407      	bmi.n	800939e <__swsetup_r+0x32>
 800938e:	2309      	movs	r3, #9
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	f04f 30ff 	mov.w	r0, #4294967295
 800939c:	e034      	b.n	8009408 <__swsetup_r+0x9c>
 800939e:	0758      	lsls	r0, r3, #29
 80093a0:	d512      	bpl.n	80093c8 <__swsetup_r+0x5c>
 80093a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a4:	b141      	cbz	r1, 80093b8 <__swsetup_r+0x4c>
 80093a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093aa:	4299      	cmp	r1, r3
 80093ac:	d002      	beq.n	80093b4 <__swsetup_r+0x48>
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 ff40 	bl	800a234 <_free_r>
 80093b4:	2300      	movs	r3, #0
 80093b6:	6363      	str	r3, [r4, #52]	; 0x34
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093be:	81a3      	strh	r3, [r4, #12]
 80093c0:	2300      	movs	r3, #0
 80093c2:	6063      	str	r3, [r4, #4]
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f043 0308 	orr.w	r3, r3, #8
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	b94b      	cbnz	r3, 80093e8 <__swsetup_r+0x7c>
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093de:	d003      	beq.n	80093e8 <__swsetup_r+0x7c>
 80093e0:	4621      	mov	r1, r4
 80093e2:	4628      	mov	r0, r5
 80093e4:	f001 fe64 	bl	800b0b0 <__smakebuf_r>
 80093e8:	89a0      	ldrh	r0, [r4, #12]
 80093ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ee:	f010 0301 	ands.w	r3, r0, #1
 80093f2:	d00a      	beq.n	800940a <__swsetup_r+0x9e>
 80093f4:	2300      	movs	r3, #0
 80093f6:	60a3      	str	r3, [r4, #8]
 80093f8:	6963      	ldr	r3, [r4, #20]
 80093fa:	425b      	negs	r3, r3
 80093fc:	61a3      	str	r3, [r4, #24]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	b943      	cbnz	r3, 8009414 <__swsetup_r+0xa8>
 8009402:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009406:	d1c4      	bne.n	8009392 <__swsetup_r+0x26>
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	0781      	lsls	r1, r0, #30
 800940c:	bf58      	it	pl
 800940e:	6963      	ldrpl	r3, [r4, #20]
 8009410:	60a3      	str	r3, [r4, #8]
 8009412:	e7f4      	b.n	80093fe <__swsetup_r+0x92>
 8009414:	2000      	movs	r0, #0
 8009416:	e7f7      	b.n	8009408 <__swsetup_r+0x9c>
 8009418:	200007c4 	.word	0x200007c4

0800941c <memset>:
 800941c:	4402      	add	r2, r0
 800941e:	4603      	mov	r3, r0
 8009420:	4293      	cmp	r3, r2
 8009422:	d100      	bne.n	8009426 <memset+0xa>
 8009424:	4770      	bx	lr
 8009426:	f803 1b01 	strb.w	r1, [r3], #1
 800942a:	e7f9      	b.n	8009420 <memset+0x4>

0800942c <strncmp>:
 800942c:	b510      	push	{r4, lr}
 800942e:	b16a      	cbz	r2, 800944c <strncmp+0x20>
 8009430:	3901      	subs	r1, #1
 8009432:	1884      	adds	r4, r0, r2
 8009434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009438:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800943c:	429a      	cmp	r2, r3
 800943e:	d103      	bne.n	8009448 <strncmp+0x1c>
 8009440:	42a0      	cmp	r0, r4
 8009442:	d001      	beq.n	8009448 <strncmp+0x1c>
 8009444:	2a00      	cmp	r2, #0
 8009446:	d1f5      	bne.n	8009434 <strncmp+0x8>
 8009448:	1ad0      	subs	r0, r2, r3
 800944a:	bd10      	pop	{r4, pc}
 800944c:	4610      	mov	r0, r2
 800944e:	e7fc      	b.n	800944a <strncmp+0x1e>

08009450 <_localeconv_r>:
 8009450:	4800      	ldr	r0, [pc, #0]	; (8009454 <_localeconv_r+0x4>)
 8009452:	4770      	bx	lr
 8009454:	200008b8 	.word	0x200008b8

08009458 <_close_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4d06      	ldr	r5, [pc, #24]	; (8009474 <_close_r+0x1c>)
 800945c:	2300      	movs	r3, #0
 800945e:	4604      	mov	r4, r0
 8009460:	4608      	mov	r0, r1
 8009462:	602b      	str	r3, [r5, #0]
 8009464:	f7f9 f8ab 	bl	80025be <_close>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d102      	bne.n	8009472 <_close_r+0x1a>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	b103      	cbz	r3, 8009472 <_close_r+0x1a>
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	20000d8c 	.word	0x20000d8c

08009478 <_lseek_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d07      	ldr	r5, [pc, #28]	; (8009498 <_lseek_r+0x20>)
 800947c:	4604      	mov	r4, r0
 800947e:	4608      	mov	r0, r1
 8009480:	4611      	mov	r1, r2
 8009482:	2200      	movs	r2, #0
 8009484:	602a      	str	r2, [r5, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	f7f9 f8c0 	bl	800260c <_lseek>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_lseek_r+0x1e>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b103      	cbz	r3, 8009496 <_lseek_r+0x1e>
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20000d8c 	.word	0x20000d8c

0800949c <_read_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d07      	ldr	r5, [pc, #28]	; (80094bc <_read_r+0x20>)
 80094a0:	4604      	mov	r4, r0
 80094a2:	4608      	mov	r0, r1
 80094a4:	4611      	mov	r1, r2
 80094a6:	2200      	movs	r2, #0
 80094a8:	602a      	str	r2, [r5, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f7f9 f86a 	bl	8002584 <_read>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_read_r+0x1e>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_read_r+0x1e>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20000d8c 	.word	0x20000d8c

080094c0 <_write_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d07      	ldr	r5, [pc, #28]	; (80094e0 <_write_r+0x20>)
 80094c4:	4604      	mov	r4, r0
 80094c6:	4608      	mov	r0, r1
 80094c8:	4611      	mov	r1, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	602a      	str	r2, [r5, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	f7f8 f83e 	bl	8001550 <_write>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d102      	bne.n	80094de <_write_r+0x1e>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b103      	cbz	r3, 80094de <_write_r+0x1e>
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	20000d8c 	.word	0x20000d8c

080094e4 <__errno>:
 80094e4:	4b01      	ldr	r3, [pc, #4]	; (80094ec <__errno+0x8>)
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	200007c4 	.word	0x200007c4

080094f0 <__libc_init_array>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	4d0d      	ldr	r5, [pc, #52]	; (8009528 <__libc_init_array+0x38>)
 80094f4:	4c0d      	ldr	r4, [pc, #52]	; (800952c <__libc_init_array+0x3c>)
 80094f6:	1b64      	subs	r4, r4, r5
 80094f8:	10a4      	asrs	r4, r4, #2
 80094fa:	2600      	movs	r6, #0
 80094fc:	42a6      	cmp	r6, r4
 80094fe:	d109      	bne.n	8009514 <__libc_init_array+0x24>
 8009500:	4d0b      	ldr	r5, [pc, #44]	; (8009530 <__libc_init_array+0x40>)
 8009502:	4c0c      	ldr	r4, [pc, #48]	; (8009534 <__libc_init_array+0x44>)
 8009504:	f001 ff52 	bl	800b3ac <_init>
 8009508:	1b64      	subs	r4, r4, r5
 800950a:	10a4      	asrs	r4, r4, #2
 800950c:	2600      	movs	r6, #0
 800950e:	42a6      	cmp	r6, r4
 8009510:	d105      	bne.n	800951e <__libc_init_array+0x2e>
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	f855 3b04 	ldr.w	r3, [r5], #4
 8009518:	4798      	blx	r3
 800951a:	3601      	adds	r6, #1
 800951c:	e7ee      	b.n	80094fc <__libc_init_array+0xc>
 800951e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009522:	4798      	blx	r3
 8009524:	3601      	adds	r6, #1
 8009526:	e7f2      	b.n	800950e <__libc_init_array+0x1e>
 8009528:	0800bdb4 	.word	0x0800bdb4
 800952c:	0800bdb4 	.word	0x0800bdb4
 8009530:	0800bdb4 	.word	0x0800bdb4
 8009534:	0800bdb8 	.word	0x0800bdb8

08009538 <__retarget_lock_init_recursive>:
 8009538:	4770      	bx	lr

0800953a <__retarget_lock_acquire_recursive>:
 800953a:	4770      	bx	lr

0800953c <__retarget_lock_release_recursive>:
 800953c:	4770      	bx	lr

0800953e <quorem>:
 800953e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009542:	6903      	ldr	r3, [r0, #16]
 8009544:	690c      	ldr	r4, [r1, #16]
 8009546:	42a3      	cmp	r3, r4
 8009548:	4607      	mov	r7, r0
 800954a:	db7e      	blt.n	800964a <quorem+0x10c>
 800954c:	3c01      	subs	r4, #1
 800954e:	f101 0814 	add.w	r8, r1, #20
 8009552:	f100 0514 	add.w	r5, r0, #20
 8009556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009560:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009564:	3301      	adds	r3, #1
 8009566:	429a      	cmp	r2, r3
 8009568:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800956c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009570:	fbb2 f6f3 	udiv	r6, r2, r3
 8009574:	d331      	bcc.n	80095da <quorem+0x9c>
 8009576:	f04f 0e00 	mov.w	lr, #0
 800957a:	4640      	mov	r0, r8
 800957c:	46ac      	mov	ip, r5
 800957e:	46f2      	mov	sl, lr
 8009580:	f850 2b04 	ldr.w	r2, [r0], #4
 8009584:	b293      	uxth	r3, r2
 8009586:	fb06 e303 	mla	r3, r6, r3, lr
 800958a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800958e:	0c1a      	lsrs	r2, r3, #16
 8009590:	b29b      	uxth	r3, r3
 8009592:	ebaa 0303 	sub.w	r3, sl, r3
 8009596:	f8dc a000 	ldr.w	sl, [ip]
 800959a:	fa13 f38a 	uxtah	r3, r3, sl
 800959e:	fb06 220e 	mla	r2, r6, lr, r2
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095aa:	b292      	uxth	r2, r2
 80095ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80095b8:	4581      	cmp	r9, r0
 80095ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095be:	f84c 3b04 	str.w	r3, [ip], #4
 80095c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095c6:	d2db      	bcs.n	8009580 <quorem+0x42>
 80095c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80095cc:	b92b      	cbnz	r3, 80095da <quorem+0x9c>
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	3b04      	subs	r3, #4
 80095d2:	429d      	cmp	r5, r3
 80095d4:	461a      	mov	r2, r3
 80095d6:	d32c      	bcc.n	8009632 <quorem+0xf4>
 80095d8:	613c      	str	r4, [r7, #16]
 80095da:	4638      	mov	r0, r7
 80095dc:	f001 f9a6 	bl	800a92c <__mcmp>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	db22      	blt.n	800962a <quorem+0xec>
 80095e4:	3601      	adds	r6, #1
 80095e6:	4629      	mov	r1, r5
 80095e8:	2000      	movs	r0, #0
 80095ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80095ee:	f8d1 c000 	ldr.w	ip, [r1]
 80095f2:	b293      	uxth	r3, r2
 80095f4:	1ac3      	subs	r3, r0, r3
 80095f6:	0c12      	lsrs	r2, r2, #16
 80095f8:	fa13 f38c 	uxtah	r3, r3, ip
 80095fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009604:	b29b      	uxth	r3, r3
 8009606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800960a:	45c1      	cmp	r9, r8
 800960c:	f841 3b04 	str.w	r3, [r1], #4
 8009610:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009614:	d2e9      	bcs.n	80095ea <quorem+0xac>
 8009616:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800961a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800961e:	b922      	cbnz	r2, 800962a <quorem+0xec>
 8009620:	3b04      	subs	r3, #4
 8009622:	429d      	cmp	r5, r3
 8009624:	461a      	mov	r2, r3
 8009626:	d30a      	bcc.n	800963e <quorem+0x100>
 8009628:	613c      	str	r4, [r7, #16]
 800962a:	4630      	mov	r0, r6
 800962c:	b003      	add	sp, #12
 800962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	3b04      	subs	r3, #4
 8009636:	2a00      	cmp	r2, #0
 8009638:	d1ce      	bne.n	80095d8 <quorem+0x9a>
 800963a:	3c01      	subs	r4, #1
 800963c:	e7c9      	b.n	80095d2 <quorem+0x94>
 800963e:	6812      	ldr	r2, [r2, #0]
 8009640:	3b04      	subs	r3, #4
 8009642:	2a00      	cmp	r2, #0
 8009644:	d1f0      	bne.n	8009628 <quorem+0xea>
 8009646:	3c01      	subs	r4, #1
 8009648:	e7eb      	b.n	8009622 <quorem+0xe4>
 800964a:	2000      	movs	r0, #0
 800964c:	e7ee      	b.n	800962c <quorem+0xee>
	...

08009650 <_dtoa_r>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	ed2d 8b04 	vpush	{d8-d9}
 8009658:	69c5      	ldr	r5, [r0, #28]
 800965a:	b093      	sub	sp, #76	; 0x4c
 800965c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009660:	ec57 6b10 	vmov	r6, r7, d0
 8009664:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009668:	9107      	str	r1, [sp, #28]
 800966a:	4604      	mov	r4, r0
 800966c:	920a      	str	r2, [sp, #40]	; 0x28
 800966e:	930d      	str	r3, [sp, #52]	; 0x34
 8009670:	b975      	cbnz	r5, 8009690 <_dtoa_r+0x40>
 8009672:	2010      	movs	r0, #16
 8009674:	f000 fe2a 	bl	800a2cc <malloc>
 8009678:	4602      	mov	r2, r0
 800967a:	61e0      	str	r0, [r4, #28]
 800967c:	b920      	cbnz	r0, 8009688 <_dtoa_r+0x38>
 800967e:	4bae      	ldr	r3, [pc, #696]	; (8009938 <_dtoa_r+0x2e8>)
 8009680:	21ef      	movs	r1, #239	; 0xef
 8009682:	48ae      	ldr	r0, [pc, #696]	; (800993c <_dtoa_r+0x2ec>)
 8009684:	f001 fdaa 	bl	800b1dc <__assert_func>
 8009688:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800968c:	6005      	str	r5, [r0, #0]
 800968e:	60c5      	str	r5, [r0, #12]
 8009690:	69e3      	ldr	r3, [r4, #28]
 8009692:	6819      	ldr	r1, [r3, #0]
 8009694:	b151      	cbz	r1, 80096ac <_dtoa_r+0x5c>
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	604a      	str	r2, [r1, #4]
 800969a:	2301      	movs	r3, #1
 800969c:	4093      	lsls	r3, r2
 800969e:	608b      	str	r3, [r1, #8]
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 ff07 	bl	800a4b4 <_Bfree>
 80096a6:	69e3      	ldr	r3, [r4, #28]
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	1e3b      	subs	r3, r7, #0
 80096ae:	bfbb      	ittet	lt
 80096b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80096b4:	9303      	strlt	r3, [sp, #12]
 80096b6:	2300      	movge	r3, #0
 80096b8:	2201      	movlt	r2, #1
 80096ba:	bfac      	ite	ge
 80096bc:	f8c8 3000 	strge.w	r3, [r8]
 80096c0:	f8c8 2000 	strlt.w	r2, [r8]
 80096c4:	4b9e      	ldr	r3, [pc, #632]	; (8009940 <_dtoa_r+0x2f0>)
 80096c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80096ca:	ea33 0308 	bics.w	r3, r3, r8
 80096ce:	d11b      	bne.n	8009708 <_dtoa_r+0xb8>
 80096d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80096dc:	4333      	orrs	r3, r6
 80096de:	f000 8593 	beq.w	800a208 <_dtoa_r+0xbb8>
 80096e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e4:	b963      	cbnz	r3, 8009700 <_dtoa_r+0xb0>
 80096e6:	4b97      	ldr	r3, [pc, #604]	; (8009944 <_dtoa_r+0x2f4>)
 80096e8:	e027      	b.n	800973a <_dtoa_r+0xea>
 80096ea:	4b97      	ldr	r3, [pc, #604]	; (8009948 <_dtoa_r+0x2f8>)
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	9800      	ldr	r0, [sp, #0]
 80096f6:	b013      	add	sp, #76	; 0x4c
 80096f8:	ecbd 8b04 	vpop	{d8-d9}
 80096fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009700:	4b90      	ldr	r3, [pc, #576]	; (8009944 <_dtoa_r+0x2f4>)
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	3303      	adds	r3, #3
 8009706:	e7f3      	b.n	80096f0 <_dtoa_r+0xa0>
 8009708:	ed9d 7b02 	vldr	d7, [sp, #8]
 800970c:	2200      	movs	r2, #0
 800970e:	ec51 0b17 	vmov	r0, r1, d7
 8009712:	eeb0 8a47 	vmov.f32	s16, s14
 8009716:	eef0 8a67 	vmov.f32	s17, s15
 800971a:	2300      	movs	r3, #0
 800971c:	f7f7 f9e4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009720:	4681      	mov	r9, r0
 8009722:	b160      	cbz	r0, 800973e <_dtoa_r+0xee>
 8009724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009726:	2301      	movs	r3, #1
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8568 	beq.w	800a202 <_dtoa_r+0xbb2>
 8009732:	4b86      	ldr	r3, [pc, #536]	; (800994c <_dtoa_r+0x2fc>)
 8009734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	3b01      	subs	r3, #1
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	e7da      	b.n	80096f4 <_dtoa_r+0xa4>
 800973e:	aa10      	add	r2, sp, #64	; 0x40
 8009740:	a911      	add	r1, sp, #68	; 0x44
 8009742:	4620      	mov	r0, r4
 8009744:	eeb0 0a48 	vmov.f32	s0, s16
 8009748:	eef0 0a68 	vmov.f32	s1, s17
 800974c:	f001 f994 	bl	800aa78 <__d2b>
 8009750:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009754:	4682      	mov	sl, r0
 8009756:	2d00      	cmp	r5, #0
 8009758:	d07f      	beq.n	800985a <_dtoa_r+0x20a>
 800975a:	ee18 3a90 	vmov	r3, s17
 800975e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009762:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009766:	ec51 0b18 	vmov	r0, r1, d8
 800976a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800976e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009772:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009776:	4619      	mov	r1, r3
 8009778:	2200      	movs	r2, #0
 800977a:	4b75      	ldr	r3, [pc, #468]	; (8009950 <_dtoa_r+0x300>)
 800977c:	f7f6 fd94 	bl	80002a8 <__aeabi_dsub>
 8009780:	a367      	add	r3, pc, #412	; (adr r3, 8009920 <_dtoa_r+0x2d0>)
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f7f6 ff47 	bl	8000618 <__aeabi_dmul>
 800978a:	a367      	add	r3, pc, #412	; (adr r3, 8009928 <_dtoa_r+0x2d8>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f7f6 fd8c 	bl	80002ac <__adddf3>
 8009794:	4606      	mov	r6, r0
 8009796:	4628      	mov	r0, r5
 8009798:	460f      	mov	r7, r1
 800979a:	f7f6 fed3 	bl	8000544 <__aeabi_i2d>
 800979e:	a364      	add	r3, pc, #400	; (adr r3, 8009930 <_dtoa_r+0x2e0>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f6 ff38 	bl	8000618 <__aeabi_dmul>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4630      	mov	r0, r6
 80097ae:	4639      	mov	r1, r7
 80097b0:	f7f6 fd7c 	bl	80002ac <__adddf3>
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	f7f7 f9de 	bl	8000b78 <__aeabi_d2iz>
 80097bc:	2200      	movs	r2, #0
 80097be:	4683      	mov	fp, r0
 80097c0:	2300      	movs	r3, #0
 80097c2:	4630      	mov	r0, r6
 80097c4:	4639      	mov	r1, r7
 80097c6:	f7f7 f999 	bl	8000afc <__aeabi_dcmplt>
 80097ca:	b148      	cbz	r0, 80097e0 <_dtoa_r+0x190>
 80097cc:	4658      	mov	r0, fp
 80097ce:	f7f6 feb9 	bl	8000544 <__aeabi_i2d>
 80097d2:	4632      	mov	r2, r6
 80097d4:	463b      	mov	r3, r7
 80097d6:	f7f7 f987 	bl	8000ae8 <__aeabi_dcmpeq>
 80097da:	b908      	cbnz	r0, 80097e0 <_dtoa_r+0x190>
 80097dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097e0:	f1bb 0f16 	cmp.w	fp, #22
 80097e4:	d857      	bhi.n	8009896 <_dtoa_r+0x246>
 80097e6:	4b5b      	ldr	r3, [pc, #364]	; (8009954 <_dtoa_r+0x304>)
 80097e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	ec51 0b18 	vmov	r0, r1, d8
 80097f4:	f7f7 f982 	bl	8000afc <__aeabi_dcmplt>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d04e      	beq.n	800989a <_dtoa_r+0x24a>
 80097fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009800:	2300      	movs	r3, #0
 8009802:	930c      	str	r3, [sp, #48]	; 0x30
 8009804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009806:	1b5b      	subs	r3, r3, r5
 8009808:	1e5a      	subs	r2, r3, #1
 800980a:	bf45      	ittet	mi
 800980c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009810:	9305      	strmi	r3, [sp, #20]
 8009812:	2300      	movpl	r3, #0
 8009814:	2300      	movmi	r3, #0
 8009816:	9206      	str	r2, [sp, #24]
 8009818:	bf54      	ite	pl
 800981a:	9305      	strpl	r3, [sp, #20]
 800981c:	9306      	strmi	r3, [sp, #24]
 800981e:	f1bb 0f00 	cmp.w	fp, #0
 8009822:	db3c      	blt.n	800989e <_dtoa_r+0x24e>
 8009824:	9b06      	ldr	r3, [sp, #24]
 8009826:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800982a:	445b      	add	r3, fp
 800982c:	9306      	str	r3, [sp, #24]
 800982e:	2300      	movs	r3, #0
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	9b07      	ldr	r3, [sp, #28]
 8009834:	2b09      	cmp	r3, #9
 8009836:	d868      	bhi.n	800990a <_dtoa_r+0x2ba>
 8009838:	2b05      	cmp	r3, #5
 800983a:	bfc4      	itt	gt
 800983c:	3b04      	subgt	r3, #4
 800983e:	9307      	strgt	r3, [sp, #28]
 8009840:	9b07      	ldr	r3, [sp, #28]
 8009842:	f1a3 0302 	sub.w	r3, r3, #2
 8009846:	bfcc      	ite	gt
 8009848:	2500      	movgt	r5, #0
 800984a:	2501      	movle	r5, #1
 800984c:	2b03      	cmp	r3, #3
 800984e:	f200 8085 	bhi.w	800995c <_dtoa_r+0x30c>
 8009852:	e8df f003 	tbb	[pc, r3]
 8009856:	3b2e      	.short	0x3b2e
 8009858:	5839      	.short	0x5839
 800985a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800985e:	441d      	add	r5, r3
 8009860:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009864:	2b20      	cmp	r3, #32
 8009866:	bfc1      	itttt	gt
 8009868:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800986c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009870:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009874:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009878:	bfd6      	itet	le
 800987a:	f1c3 0320 	rsble	r3, r3, #32
 800987e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009882:	fa06 f003 	lslle.w	r0, r6, r3
 8009886:	f7f6 fe4d 	bl	8000524 <__aeabi_ui2d>
 800988a:	2201      	movs	r2, #1
 800988c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009890:	3d01      	subs	r5, #1
 8009892:	920e      	str	r2, [sp, #56]	; 0x38
 8009894:	e76f      	b.n	8009776 <_dtoa_r+0x126>
 8009896:	2301      	movs	r3, #1
 8009898:	e7b3      	b.n	8009802 <_dtoa_r+0x1b2>
 800989a:	900c      	str	r0, [sp, #48]	; 0x30
 800989c:	e7b2      	b.n	8009804 <_dtoa_r+0x1b4>
 800989e:	9b05      	ldr	r3, [sp, #20]
 80098a0:	eba3 030b 	sub.w	r3, r3, fp
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	f1cb 0300 	rsb	r3, fp, #0
 80098aa:	9308      	str	r3, [sp, #32]
 80098ac:	2300      	movs	r3, #0
 80098ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80098b0:	e7bf      	b.n	8009832 <_dtoa_r+0x1e2>
 80098b2:	2300      	movs	r3, #0
 80098b4:	9309      	str	r3, [sp, #36]	; 0x24
 80098b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dc52      	bgt.n	8009962 <_dtoa_r+0x312>
 80098bc:	2301      	movs	r3, #1
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	461a      	mov	r2, r3
 80098c4:	920a      	str	r2, [sp, #40]	; 0x28
 80098c6:	e00b      	b.n	80098e0 <_dtoa_r+0x290>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e7f3      	b.n	80098b4 <_dtoa_r+0x264>
 80098cc:	2300      	movs	r3, #0
 80098ce:	9309      	str	r3, [sp, #36]	; 0x24
 80098d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d2:	445b      	add	r3, fp
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	3301      	adds	r3, #1
 80098d8:	2b01      	cmp	r3, #1
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	bfb8      	it	lt
 80098de:	2301      	movlt	r3, #1
 80098e0:	69e0      	ldr	r0, [r4, #28]
 80098e2:	2100      	movs	r1, #0
 80098e4:	2204      	movs	r2, #4
 80098e6:	f102 0614 	add.w	r6, r2, #20
 80098ea:	429e      	cmp	r6, r3
 80098ec:	d93d      	bls.n	800996a <_dtoa_r+0x31a>
 80098ee:	6041      	str	r1, [r0, #4]
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fd9f 	bl	800a434 <_Balloc>
 80098f6:	9000      	str	r0, [sp, #0]
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d139      	bne.n	8009970 <_dtoa_r+0x320>
 80098fc:	4b16      	ldr	r3, [pc, #88]	; (8009958 <_dtoa_r+0x308>)
 80098fe:	4602      	mov	r2, r0
 8009900:	f240 11af 	movw	r1, #431	; 0x1af
 8009904:	e6bd      	b.n	8009682 <_dtoa_r+0x32>
 8009906:	2301      	movs	r3, #1
 8009908:	e7e1      	b.n	80098ce <_dtoa_r+0x27e>
 800990a:	2501      	movs	r5, #1
 800990c:	2300      	movs	r3, #0
 800990e:	9307      	str	r3, [sp, #28]
 8009910:	9509      	str	r5, [sp, #36]	; 0x24
 8009912:	f04f 33ff 	mov.w	r3, #4294967295
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	9304      	str	r3, [sp, #16]
 800991a:	2200      	movs	r2, #0
 800991c:	2312      	movs	r3, #18
 800991e:	e7d1      	b.n	80098c4 <_dtoa_r+0x274>
 8009920:	636f4361 	.word	0x636f4361
 8009924:	3fd287a7 	.word	0x3fd287a7
 8009928:	8b60c8b3 	.word	0x8b60c8b3
 800992c:	3fc68a28 	.word	0x3fc68a28
 8009930:	509f79fb 	.word	0x509f79fb
 8009934:	3fd34413 	.word	0x3fd34413
 8009938:	0800bb86 	.word	0x0800bb86
 800993c:	0800bb9d 	.word	0x0800bb9d
 8009940:	7ff00000 	.word	0x7ff00000
 8009944:	0800bb82 	.word	0x0800bb82
 8009948:	0800bb79 	.word	0x0800bb79
 800994c:	0800bb56 	.word	0x0800bb56
 8009950:	3ff80000 	.word	0x3ff80000
 8009954:	0800bc88 	.word	0x0800bc88
 8009958:	0800bbf5 	.word	0x0800bbf5
 800995c:	2301      	movs	r3, #1
 800995e:	9309      	str	r3, [sp, #36]	; 0x24
 8009960:	e7d7      	b.n	8009912 <_dtoa_r+0x2c2>
 8009962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	9304      	str	r3, [sp, #16]
 8009968:	e7ba      	b.n	80098e0 <_dtoa_r+0x290>
 800996a:	3101      	adds	r1, #1
 800996c:	0052      	lsls	r2, r2, #1
 800996e:	e7ba      	b.n	80098e6 <_dtoa_r+0x296>
 8009970:	69e3      	ldr	r3, [r4, #28]
 8009972:	9a00      	ldr	r2, [sp, #0]
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	9b04      	ldr	r3, [sp, #16]
 8009978:	2b0e      	cmp	r3, #14
 800997a:	f200 80a8 	bhi.w	8009ace <_dtoa_r+0x47e>
 800997e:	2d00      	cmp	r5, #0
 8009980:	f000 80a5 	beq.w	8009ace <_dtoa_r+0x47e>
 8009984:	f1bb 0f00 	cmp.w	fp, #0
 8009988:	dd38      	ble.n	80099fc <_dtoa_r+0x3ac>
 800998a:	4bc0      	ldr	r3, [pc, #768]	; (8009c8c <_dtoa_r+0x63c>)
 800998c:	f00b 020f 	and.w	r2, fp, #15
 8009990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009994:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009998:	e9d3 6700 	ldrd	r6, r7, [r3]
 800999c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80099a0:	d019      	beq.n	80099d6 <_dtoa_r+0x386>
 80099a2:	4bbb      	ldr	r3, [pc, #748]	; (8009c90 <_dtoa_r+0x640>)
 80099a4:	ec51 0b18 	vmov	r0, r1, d8
 80099a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099ac:	f7f6 ff5e 	bl	800086c <__aeabi_ddiv>
 80099b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099b4:	f008 080f 	and.w	r8, r8, #15
 80099b8:	2503      	movs	r5, #3
 80099ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009c90 <_dtoa_r+0x640>
 80099be:	f1b8 0f00 	cmp.w	r8, #0
 80099c2:	d10a      	bne.n	80099da <_dtoa_r+0x38a>
 80099c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c8:	4632      	mov	r2, r6
 80099ca:	463b      	mov	r3, r7
 80099cc:	f7f6 ff4e 	bl	800086c <__aeabi_ddiv>
 80099d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099d4:	e02b      	b.n	8009a2e <_dtoa_r+0x3de>
 80099d6:	2502      	movs	r5, #2
 80099d8:	e7ef      	b.n	80099ba <_dtoa_r+0x36a>
 80099da:	f018 0f01 	tst.w	r8, #1
 80099de:	d008      	beq.n	80099f2 <_dtoa_r+0x3a2>
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80099e8:	f7f6 fe16 	bl	8000618 <__aeabi_dmul>
 80099ec:	3501      	adds	r5, #1
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80099f6:	f109 0908 	add.w	r9, r9, #8
 80099fa:	e7e0      	b.n	80099be <_dtoa_r+0x36e>
 80099fc:	f000 809f 	beq.w	8009b3e <_dtoa_r+0x4ee>
 8009a00:	f1cb 0600 	rsb	r6, fp, #0
 8009a04:	4ba1      	ldr	r3, [pc, #644]	; (8009c8c <_dtoa_r+0x63c>)
 8009a06:	4fa2      	ldr	r7, [pc, #648]	; (8009c90 <_dtoa_r+0x640>)
 8009a08:	f006 020f 	and.w	r2, r6, #15
 8009a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	ec51 0b18 	vmov	r0, r1, d8
 8009a18:	f7f6 fdfe 	bl	8000618 <__aeabi_dmul>
 8009a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a20:	1136      	asrs	r6, r6, #4
 8009a22:	2300      	movs	r3, #0
 8009a24:	2502      	movs	r5, #2
 8009a26:	2e00      	cmp	r6, #0
 8009a28:	d17e      	bne.n	8009b28 <_dtoa_r+0x4d8>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1d0      	bne.n	80099d0 <_dtoa_r+0x380>
 8009a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8084 	beq.w	8009b42 <_dtoa_r+0x4f2>
 8009a3a:	4b96      	ldr	r3, [pc, #600]	; (8009c94 <_dtoa_r+0x644>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4640      	mov	r0, r8
 8009a40:	4649      	mov	r1, r9
 8009a42:	f7f7 f85b 	bl	8000afc <__aeabi_dcmplt>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d07b      	beq.n	8009b42 <_dtoa_r+0x4f2>
 8009a4a:	9b04      	ldr	r3, [sp, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d078      	beq.n	8009b42 <_dtoa_r+0x4f2>
 8009a50:	9b01      	ldr	r3, [sp, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dd39      	ble.n	8009aca <_dtoa_r+0x47a>
 8009a56:	4b90      	ldr	r3, [pc, #576]	; (8009c98 <_dtoa_r+0x648>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	f7f6 fddb 	bl	8000618 <__aeabi_dmul>
 8009a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a66:	9e01      	ldr	r6, [sp, #4]
 8009a68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7f6 fd66 	bl	8000544 <__aeabi_i2d>
 8009a78:	4642      	mov	r2, r8
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	f7f6 fdcc 	bl	8000618 <__aeabi_dmul>
 8009a80:	4b86      	ldr	r3, [pc, #536]	; (8009c9c <_dtoa_r+0x64c>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	f7f6 fc12 	bl	80002ac <__adddf3>
 8009a88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	d158      	bne.n	8009b48 <_dtoa_r+0x4f8>
 8009a96:	4b82      	ldr	r3, [pc, #520]	; (8009ca0 <_dtoa_r+0x650>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	f7f6 fc03 	bl	80002a8 <__aeabi_dsub>
 8009aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	4689      	mov	r9, r1
 8009aaa:	f7f7 f845 	bl	8000b38 <__aeabi_dcmpgt>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f040 8296 	bne.w	8009fe0 <_dtoa_r+0x990>
 8009ab4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009ab8:	4640      	mov	r0, r8
 8009aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009abe:	4649      	mov	r1, r9
 8009ac0:	f7f7 f81c 	bl	8000afc <__aeabi_dcmplt>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	f040 8289 	bne.w	8009fdc <_dtoa_r+0x98c>
 8009aca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f2c0 814e 	blt.w	8009d72 <_dtoa_r+0x722>
 8009ad6:	f1bb 0f0e 	cmp.w	fp, #14
 8009ada:	f300 814a 	bgt.w	8009d72 <_dtoa_r+0x722>
 8009ade:	4b6b      	ldr	r3, [pc, #428]	; (8009c8c <_dtoa_r+0x63c>)
 8009ae0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f280 80dc 	bge.w	8009ca8 <_dtoa_r+0x658>
 8009af0:	9b04      	ldr	r3, [sp, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f300 80d8 	bgt.w	8009ca8 <_dtoa_r+0x658>
 8009af8:	f040 826f 	bne.w	8009fda <_dtoa_r+0x98a>
 8009afc:	4b68      	ldr	r3, [pc, #416]	; (8009ca0 <_dtoa_r+0x650>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	4640      	mov	r0, r8
 8009b02:	4649      	mov	r1, r9
 8009b04:	f7f6 fd88 	bl	8000618 <__aeabi_dmul>
 8009b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b0c:	f7f7 f80a 	bl	8000b24 <__aeabi_dcmpge>
 8009b10:	9e04      	ldr	r6, [sp, #16]
 8009b12:	4637      	mov	r7, r6
 8009b14:	2800      	cmp	r0, #0
 8009b16:	f040 8245 	bne.w	8009fa4 <_dtoa_r+0x954>
 8009b1a:	9d00      	ldr	r5, [sp, #0]
 8009b1c:	2331      	movs	r3, #49	; 0x31
 8009b1e:	f805 3b01 	strb.w	r3, [r5], #1
 8009b22:	f10b 0b01 	add.w	fp, fp, #1
 8009b26:	e241      	b.n	8009fac <_dtoa_r+0x95c>
 8009b28:	07f2      	lsls	r2, r6, #31
 8009b2a:	d505      	bpl.n	8009b38 <_dtoa_r+0x4e8>
 8009b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b30:	f7f6 fd72 	bl	8000618 <__aeabi_dmul>
 8009b34:	3501      	adds	r5, #1
 8009b36:	2301      	movs	r3, #1
 8009b38:	1076      	asrs	r6, r6, #1
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	e773      	b.n	8009a26 <_dtoa_r+0x3d6>
 8009b3e:	2502      	movs	r5, #2
 8009b40:	e775      	b.n	8009a2e <_dtoa_r+0x3de>
 8009b42:	9e04      	ldr	r6, [sp, #16]
 8009b44:	465f      	mov	r7, fp
 8009b46:	e792      	b.n	8009a6e <_dtoa_r+0x41e>
 8009b48:	9900      	ldr	r1, [sp, #0]
 8009b4a:	4b50      	ldr	r3, [pc, #320]	; (8009c8c <_dtoa_r+0x63c>)
 8009b4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b50:	4431      	add	r1, r6
 8009b52:	9102      	str	r1, [sp, #8]
 8009b54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b56:	eeb0 9a47 	vmov.f32	s18, s14
 8009b5a:	eef0 9a67 	vmov.f32	s19, s15
 8009b5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b66:	2900      	cmp	r1, #0
 8009b68:	d044      	beq.n	8009bf4 <_dtoa_r+0x5a4>
 8009b6a:	494e      	ldr	r1, [pc, #312]	; (8009ca4 <_dtoa_r+0x654>)
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f7f6 fe7d 	bl	800086c <__aeabi_ddiv>
 8009b72:	ec53 2b19 	vmov	r2, r3, d9
 8009b76:	f7f6 fb97 	bl	80002a8 <__aeabi_dsub>
 8009b7a:	9d00      	ldr	r5, [sp, #0]
 8009b7c:	ec41 0b19 	vmov	d9, r0, r1
 8009b80:	4649      	mov	r1, r9
 8009b82:	4640      	mov	r0, r8
 8009b84:	f7f6 fff8 	bl	8000b78 <__aeabi_d2iz>
 8009b88:	4606      	mov	r6, r0
 8009b8a:	f7f6 fcdb 	bl	8000544 <__aeabi_i2d>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4640      	mov	r0, r8
 8009b94:	4649      	mov	r1, r9
 8009b96:	f7f6 fb87 	bl	80002a8 <__aeabi_dsub>
 8009b9a:	3630      	adds	r6, #48	; 0x30
 8009b9c:	f805 6b01 	strb.w	r6, [r5], #1
 8009ba0:	ec53 2b19 	vmov	r2, r3, d9
 8009ba4:	4680      	mov	r8, r0
 8009ba6:	4689      	mov	r9, r1
 8009ba8:	f7f6 ffa8 	bl	8000afc <__aeabi_dcmplt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d164      	bne.n	8009c7a <_dtoa_r+0x62a>
 8009bb0:	4642      	mov	r2, r8
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	4937      	ldr	r1, [pc, #220]	; (8009c94 <_dtoa_r+0x644>)
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	f7f6 fb76 	bl	80002a8 <__aeabi_dsub>
 8009bbc:	ec53 2b19 	vmov	r2, r3, d9
 8009bc0:	f7f6 ff9c 	bl	8000afc <__aeabi_dcmplt>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f040 80b6 	bne.w	8009d36 <_dtoa_r+0x6e6>
 8009bca:	9b02      	ldr	r3, [sp, #8]
 8009bcc:	429d      	cmp	r5, r3
 8009bce:	f43f af7c 	beq.w	8009aca <_dtoa_r+0x47a>
 8009bd2:	4b31      	ldr	r3, [pc, #196]	; (8009c98 <_dtoa_r+0x648>)
 8009bd4:	ec51 0b19 	vmov	r0, r1, d9
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f7f6 fd1d 	bl	8000618 <__aeabi_dmul>
 8009bde:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <_dtoa_r+0x648>)
 8009be0:	ec41 0b19 	vmov	d9, r0, r1
 8009be4:	2200      	movs	r2, #0
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f7f6 fd15 	bl	8000618 <__aeabi_dmul>
 8009bee:	4680      	mov	r8, r0
 8009bf0:	4689      	mov	r9, r1
 8009bf2:	e7c5      	b.n	8009b80 <_dtoa_r+0x530>
 8009bf4:	ec51 0b17 	vmov	r0, r1, d7
 8009bf8:	f7f6 fd0e 	bl	8000618 <__aeabi_dmul>
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	9d00      	ldr	r5, [sp, #0]
 8009c00:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c02:	ec41 0b19 	vmov	d9, r0, r1
 8009c06:	4649      	mov	r1, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	f7f6 ffb5 	bl	8000b78 <__aeabi_d2iz>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	f7f6 fc98 	bl	8000544 <__aeabi_i2d>
 8009c14:	3630      	adds	r6, #48	; 0x30
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	f7f6 fb43 	bl	80002a8 <__aeabi_dsub>
 8009c22:	f805 6b01 	strb.w	r6, [r5], #1
 8009c26:	9b02      	ldr	r3, [sp, #8]
 8009c28:	429d      	cmp	r5, r3
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	4689      	mov	r9, r1
 8009c2e:	f04f 0200 	mov.w	r2, #0
 8009c32:	d124      	bne.n	8009c7e <_dtoa_r+0x62e>
 8009c34:	4b1b      	ldr	r3, [pc, #108]	; (8009ca4 <_dtoa_r+0x654>)
 8009c36:	ec51 0b19 	vmov	r0, r1, d9
 8009c3a:	f7f6 fb37 	bl	80002ac <__adddf3>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4640      	mov	r0, r8
 8009c44:	4649      	mov	r1, r9
 8009c46:	f7f6 ff77 	bl	8000b38 <__aeabi_dcmpgt>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d173      	bne.n	8009d36 <_dtoa_r+0x6e6>
 8009c4e:	ec53 2b19 	vmov	r2, r3, d9
 8009c52:	4914      	ldr	r1, [pc, #80]	; (8009ca4 <_dtoa_r+0x654>)
 8009c54:	2000      	movs	r0, #0
 8009c56:	f7f6 fb27 	bl	80002a8 <__aeabi_dsub>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4640      	mov	r0, r8
 8009c60:	4649      	mov	r1, r9
 8009c62:	f7f6 ff4b 	bl	8000afc <__aeabi_dcmplt>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f af2f 	beq.w	8009aca <_dtoa_r+0x47a>
 8009c6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c6e:	1e6b      	subs	r3, r5, #1
 8009c70:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c76:	2b30      	cmp	r3, #48	; 0x30
 8009c78:	d0f8      	beq.n	8009c6c <_dtoa_r+0x61c>
 8009c7a:	46bb      	mov	fp, r7
 8009c7c:	e04a      	b.n	8009d14 <_dtoa_r+0x6c4>
 8009c7e:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <_dtoa_r+0x648>)
 8009c80:	f7f6 fcca 	bl	8000618 <__aeabi_dmul>
 8009c84:	4680      	mov	r8, r0
 8009c86:	4689      	mov	r9, r1
 8009c88:	e7bd      	b.n	8009c06 <_dtoa_r+0x5b6>
 8009c8a:	bf00      	nop
 8009c8c:	0800bc88 	.word	0x0800bc88
 8009c90:	0800bc60 	.word	0x0800bc60
 8009c94:	3ff00000 	.word	0x3ff00000
 8009c98:	40240000 	.word	0x40240000
 8009c9c:	401c0000 	.word	0x401c0000
 8009ca0:	40140000 	.word	0x40140000
 8009ca4:	3fe00000 	.word	0x3fe00000
 8009ca8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009cac:	9d00      	ldr	r5, [sp, #0]
 8009cae:	4642      	mov	r2, r8
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	f7f6 fdd9 	bl	800086c <__aeabi_ddiv>
 8009cba:	f7f6 ff5d 	bl	8000b78 <__aeabi_d2iz>
 8009cbe:	9001      	str	r0, [sp, #4]
 8009cc0:	f7f6 fc40 	bl	8000544 <__aeabi_i2d>
 8009cc4:	4642      	mov	r2, r8
 8009cc6:	464b      	mov	r3, r9
 8009cc8:	f7f6 fca6 	bl	8000618 <__aeabi_dmul>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	f7f6 fae8 	bl	80002a8 <__aeabi_dsub>
 8009cd8:	9e01      	ldr	r6, [sp, #4]
 8009cda:	9f04      	ldr	r7, [sp, #16]
 8009cdc:	3630      	adds	r6, #48	; 0x30
 8009cde:	f805 6b01 	strb.w	r6, [r5], #1
 8009ce2:	9e00      	ldr	r6, [sp, #0]
 8009ce4:	1bae      	subs	r6, r5, r6
 8009ce6:	42b7      	cmp	r7, r6
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	d134      	bne.n	8009d58 <_dtoa_r+0x708>
 8009cee:	f7f6 fadd 	bl	80002ac <__adddf3>
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	460f      	mov	r7, r1
 8009cfa:	f7f6 ff1d 	bl	8000b38 <__aeabi_dcmpgt>
 8009cfe:	b9c8      	cbnz	r0, 8009d34 <_dtoa_r+0x6e4>
 8009d00:	4642      	mov	r2, r8
 8009d02:	464b      	mov	r3, r9
 8009d04:	4630      	mov	r0, r6
 8009d06:	4639      	mov	r1, r7
 8009d08:	f7f6 feee 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d0c:	b110      	cbz	r0, 8009d14 <_dtoa_r+0x6c4>
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	07db      	lsls	r3, r3, #31
 8009d12:	d40f      	bmi.n	8009d34 <_dtoa_r+0x6e4>
 8009d14:	4651      	mov	r1, sl
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 fbcc 	bl	800a4b4 <_Bfree>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d20:	702b      	strb	r3, [r5, #0]
 8009d22:	f10b 0301 	add.w	r3, fp, #1
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f43f ace2 	beq.w	80096f4 <_dtoa_r+0xa4>
 8009d30:	601d      	str	r5, [r3, #0]
 8009d32:	e4df      	b.n	80096f4 <_dtoa_r+0xa4>
 8009d34:	465f      	mov	r7, fp
 8009d36:	462b      	mov	r3, r5
 8009d38:	461d      	mov	r5, r3
 8009d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d3e:	2a39      	cmp	r2, #57	; 0x39
 8009d40:	d106      	bne.n	8009d50 <_dtoa_r+0x700>
 8009d42:	9a00      	ldr	r2, [sp, #0]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d1f7      	bne.n	8009d38 <_dtoa_r+0x6e8>
 8009d48:	9900      	ldr	r1, [sp, #0]
 8009d4a:	2230      	movs	r2, #48	; 0x30
 8009d4c:	3701      	adds	r7, #1
 8009d4e:	700a      	strb	r2, [r1, #0]
 8009d50:	781a      	ldrb	r2, [r3, #0]
 8009d52:	3201      	adds	r2, #1
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	e790      	b.n	8009c7a <_dtoa_r+0x62a>
 8009d58:	4ba3      	ldr	r3, [pc, #652]	; (8009fe8 <_dtoa_r+0x998>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f7f6 fc5c 	bl	8000618 <__aeabi_dmul>
 8009d60:	2200      	movs	r2, #0
 8009d62:	2300      	movs	r3, #0
 8009d64:	4606      	mov	r6, r0
 8009d66:	460f      	mov	r7, r1
 8009d68:	f7f6 febe 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d09e      	beq.n	8009cae <_dtoa_r+0x65e>
 8009d70:	e7d0      	b.n	8009d14 <_dtoa_r+0x6c4>
 8009d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d74:	2a00      	cmp	r2, #0
 8009d76:	f000 80ca 	beq.w	8009f0e <_dtoa_r+0x8be>
 8009d7a:	9a07      	ldr	r2, [sp, #28]
 8009d7c:	2a01      	cmp	r2, #1
 8009d7e:	f300 80ad 	bgt.w	8009edc <_dtoa_r+0x88c>
 8009d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	f000 80a5 	beq.w	8009ed4 <_dtoa_r+0x884>
 8009d8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d8e:	9e08      	ldr	r6, [sp, #32]
 8009d90:	9d05      	ldr	r5, [sp, #20]
 8009d92:	9a05      	ldr	r2, [sp, #20]
 8009d94:	441a      	add	r2, r3
 8009d96:	9205      	str	r2, [sp, #20]
 8009d98:	9a06      	ldr	r2, [sp, #24]
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	441a      	add	r2, r3
 8009d9e:	4620      	mov	r0, r4
 8009da0:	9206      	str	r2, [sp, #24]
 8009da2:	f000 fc3d 	bl	800a620 <__i2b>
 8009da6:	4607      	mov	r7, r0
 8009da8:	b165      	cbz	r5, 8009dc4 <_dtoa_r+0x774>
 8009daa:	9b06      	ldr	r3, [sp, #24]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	dd09      	ble.n	8009dc4 <_dtoa_r+0x774>
 8009db0:	42ab      	cmp	r3, r5
 8009db2:	9a05      	ldr	r2, [sp, #20]
 8009db4:	bfa8      	it	ge
 8009db6:	462b      	movge	r3, r5
 8009db8:	1ad2      	subs	r2, r2, r3
 8009dba:	9205      	str	r2, [sp, #20]
 8009dbc:	9a06      	ldr	r2, [sp, #24]
 8009dbe:	1aed      	subs	r5, r5, r3
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	9306      	str	r3, [sp, #24]
 8009dc4:	9b08      	ldr	r3, [sp, #32]
 8009dc6:	b1f3      	cbz	r3, 8009e06 <_dtoa_r+0x7b6>
 8009dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 80a3 	beq.w	8009f16 <_dtoa_r+0x8c6>
 8009dd0:	2e00      	cmp	r6, #0
 8009dd2:	dd10      	ble.n	8009df6 <_dtoa_r+0x7a6>
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 fce1 	bl	800a7a0 <__pow5mult>
 8009dde:	4652      	mov	r2, sl
 8009de0:	4601      	mov	r1, r0
 8009de2:	4607      	mov	r7, r0
 8009de4:	4620      	mov	r0, r4
 8009de6:	f000 fc31 	bl	800a64c <__multiply>
 8009dea:	4651      	mov	r1, sl
 8009dec:	4680      	mov	r8, r0
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 fb60 	bl	800a4b4 <_Bfree>
 8009df4:	46c2      	mov	sl, r8
 8009df6:	9b08      	ldr	r3, [sp, #32]
 8009df8:	1b9a      	subs	r2, r3, r6
 8009dfa:	d004      	beq.n	8009e06 <_dtoa_r+0x7b6>
 8009dfc:	4651      	mov	r1, sl
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 fcce 	bl	800a7a0 <__pow5mult>
 8009e04:	4682      	mov	sl, r0
 8009e06:	2101      	movs	r1, #1
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 fc09 	bl	800a620 <__i2b>
 8009e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	4606      	mov	r6, r0
 8009e14:	f340 8081 	ble.w	8009f1a <_dtoa_r+0x8ca>
 8009e18:	461a      	mov	r2, r3
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fcbf 	bl	800a7a0 <__pow5mult>
 8009e22:	9b07      	ldr	r3, [sp, #28]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	4606      	mov	r6, r0
 8009e28:	dd7a      	ble.n	8009f20 <_dtoa_r+0x8d0>
 8009e2a:	f04f 0800 	mov.w	r8, #0
 8009e2e:	6933      	ldr	r3, [r6, #16]
 8009e30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e34:	6918      	ldr	r0, [r3, #16]
 8009e36:	f000 fba5 	bl	800a584 <__hi0bits>
 8009e3a:	f1c0 0020 	rsb	r0, r0, #32
 8009e3e:	9b06      	ldr	r3, [sp, #24]
 8009e40:	4418      	add	r0, r3
 8009e42:	f010 001f 	ands.w	r0, r0, #31
 8009e46:	f000 8094 	beq.w	8009f72 <_dtoa_r+0x922>
 8009e4a:	f1c0 0320 	rsb	r3, r0, #32
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	f340 8085 	ble.w	8009f5e <_dtoa_r+0x90e>
 8009e54:	9b05      	ldr	r3, [sp, #20]
 8009e56:	f1c0 001c 	rsb	r0, r0, #28
 8009e5a:	4403      	add	r3, r0
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	9b06      	ldr	r3, [sp, #24]
 8009e60:	4403      	add	r3, r0
 8009e62:	4405      	add	r5, r0
 8009e64:	9306      	str	r3, [sp, #24]
 8009e66:	9b05      	ldr	r3, [sp, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	dd05      	ble.n	8009e78 <_dtoa_r+0x828>
 8009e6c:	4651      	mov	r1, sl
 8009e6e:	461a      	mov	r2, r3
 8009e70:	4620      	mov	r0, r4
 8009e72:	f000 fcef 	bl	800a854 <__lshift>
 8009e76:	4682      	mov	sl, r0
 8009e78:	9b06      	ldr	r3, [sp, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dd05      	ble.n	8009e8a <_dtoa_r+0x83a>
 8009e7e:	4631      	mov	r1, r6
 8009e80:	461a      	mov	r2, r3
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 fce6 	bl	800a854 <__lshift>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d072      	beq.n	8009f76 <_dtoa_r+0x926>
 8009e90:	4631      	mov	r1, r6
 8009e92:	4650      	mov	r0, sl
 8009e94:	f000 fd4a 	bl	800a92c <__mcmp>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	da6c      	bge.n	8009f76 <_dtoa_r+0x926>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4651      	mov	r1, sl
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fb28 	bl	800a4f8 <__multadd>
 8009ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009eae:	4682      	mov	sl, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 81b0 	beq.w	800a216 <_dtoa_r+0xbc6>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4639      	mov	r1, r7
 8009eba:	220a      	movs	r2, #10
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 fb1b 	bl	800a4f8 <__multadd>
 8009ec2:	9b01      	ldr	r3, [sp, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	f300 8096 	bgt.w	8009ff8 <_dtoa_r+0x9a8>
 8009ecc:	9b07      	ldr	r3, [sp, #28]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	dc59      	bgt.n	8009f86 <_dtoa_r+0x936>
 8009ed2:	e091      	b.n	8009ff8 <_dtoa_r+0x9a8>
 8009ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ed6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009eda:	e758      	b.n	8009d8e <_dtoa_r+0x73e>
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	1e5e      	subs	r6, r3, #1
 8009ee0:	9b08      	ldr	r3, [sp, #32]
 8009ee2:	42b3      	cmp	r3, r6
 8009ee4:	bfbf      	itttt	lt
 8009ee6:	9b08      	ldrlt	r3, [sp, #32]
 8009ee8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009eea:	9608      	strlt	r6, [sp, #32]
 8009eec:	1af3      	sublt	r3, r6, r3
 8009eee:	bfb4      	ite	lt
 8009ef0:	18d2      	addlt	r2, r2, r3
 8009ef2:	1b9e      	subge	r6, r3, r6
 8009ef4:	9b04      	ldr	r3, [sp, #16]
 8009ef6:	bfbc      	itt	lt
 8009ef8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009efa:	2600      	movlt	r6, #0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	bfb7      	itett	lt
 8009f00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009f04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009f08:	1a9d      	sublt	r5, r3, r2
 8009f0a:	2300      	movlt	r3, #0
 8009f0c:	e741      	b.n	8009d92 <_dtoa_r+0x742>
 8009f0e:	9e08      	ldr	r6, [sp, #32]
 8009f10:	9d05      	ldr	r5, [sp, #20]
 8009f12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009f14:	e748      	b.n	8009da8 <_dtoa_r+0x758>
 8009f16:	9a08      	ldr	r2, [sp, #32]
 8009f18:	e770      	b.n	8009dfc <_dtoa_r+0x7ac>
 8009f1a:	9b07      	ldr	r3, [sp, #28]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	dc19      	bgt.n	8009f54 <_dtoa_r+0x904>
 8009f20:	9b02      	ldr	r3, [sp, #8]
 8009f22:	b9bb      	cbnz	r3, 8009f54 <_dtoa_r+0x904>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f2a:	b99b      	cbnz	r3, 8009f54 <_dtoa_r+0x904>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f32:	0d1b      	lsrs	r3, r3, #20
 8009f34:	051b      	lsls	r3, r3, #20
 8009f36:	b183      	cbz	r3, 8009f5a <_dtoa_r+0x90a>
 8009f38:	9b05      	ldr	r3, [sp, #20]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	9305      	str	r3, [sp, #20]
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	3301      	adds	r3, #1
 8009f42:	9306      	str	r3, [sp, #24]
 8009f44:	f04f 0801 	mov.w	r8, #1
 8009f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f47f af6f 	bne.w	8009e2e <_dtoa_r+0x7de>
 8009f50:	2001      	movs	r0, #1
 8009f52:	e774      	b.n	8009e3e <_dtoa_r+0x7ee>
 8009f54:	f04f 0800 	mov.w	r8, #0
 8009f58:	e7f6      	b.n	8009f48 <_dtoa_r+0x8f8>
 8009f5a:	4698      	mov	r8, r3
 8009f5c:	e7f4      	b.n	8009f48 <_dtoa_r+0x8f8>
 8009f5e:	d082      	beq.n	8009e66 <_dtoa_r+0x816>
 8009f60:	9a05      	ldr	r2, [sp, #20]
 8009f62:	331c      	adds	r3, #28
 8009f64:	441a      	add	r2, r3
 8009f66:	9205      	str	r2, [sp, #20]
 8009f68:	9a06      	ldr	r2, [sp, #24]
 8009f6a:	441a      	add	r2, r3
 8009f6c:	441d      	add	r5, r3
 8009f6e:	9206      	str	r2, [sp, #24]
 8009f70:	e779      	b.n	8009e66 <_dtoa_r+0x816>
 8009f72:	4603      	mov	r3, r0
 8009f74:	e7f4      	b.n	8009f60 <_dtoa_r+0x910>
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	dc37      	bgt.n	8009fec <_dtoa_r+0x99c>
 8009f7c:	9b07      	ldr	r3, [sp, #28]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	dd34      	ble.n	8009fec <_dtoa_r+0x99c>
 8009f82:	9b04      	ldr	r3, [sp, #16]
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	b963      	cbnz	r3, 8009fa4 <_dtoa_r+0x954>
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	2205      	movs	r2, #5
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fab2 	bl	800a4f8 <__multadd>
 8009f94:	4601      	mov	r1, r0
 8009f96:	4606      	mov	r6, r0
 8009f98:	4650      	mov	r0, sl
 8009f9a:	f000 fcc7 	bl	800a92c <__mcmp>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f73f adbb 	bgt.w	8009b1a <_dtoa_r+0x4ca>
 8009fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa6:	9d00      	ldr	r5, [sp, #0]
 8009fa8:	ea6f 0b03 	mvn.w	fp, r3
 8009fac:	f04f 0800 	mov.w	r8, #0
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 fa7e 	bl	800a4b4 <_Bfree>
 8009fb8:	2f00      	cmp	r7, #0
 8009fba:	f43f aeab 	beq.w	8009d14 <_dtoa_r+0x6c4>
 8009fbe:	f1b8 0f00 	cmp.w	r8, #0
 8009fc2:	d005      	beq.n	8009fd0 <_dtoa_r+0x980>
 8009fc4:	45b8      	cmp	r8, r7
 8009fc6:	d003      	beq.n	8009fd0 <_dtoa_r+0x980>
 8009fc8:	4641      	mov	r1, r8
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 fa72 	bl	800a4b4 <_Bfree>
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 fa6e 	bl	800a4b4 <_Bfree>
 8009fd8:	e69c      	b.n	8009d14 <_dtoa_r+0x6c4>
 8009fda:	2600      	movs	r6, #0
 8009fdc:	4637      	mov	r7, r6
 8009fde:	e7e1      	b.n	8009fa4 <_dtoa_r+0x954>
 8009fe0:	46bb      	mov	fp, r7
 8009fe2:	4637      	mov	r7, r6
 8009fe4:	e599      	b.n	8009b1a <_dtoa_r+0x4ca>
 8009fe6:	bf00      	nop
 8009fe8:	40240000 	.word	0x40240000
 8009fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 80c8 	beq.w	800a184 <_dtoa_r+0xb34>
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	dd05      	ble.n	800a008 <_dtoa_r+0x9b8>
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	462a      	mov	r2, r5
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fc27 	bl	800a854 <__lshift>
 800a006:	4607      	mov	r7, r0
 800a008:	f1b8 0f00 	cmp.w	r8, #0
 800a00c:	d05b      	beq.n	800a0c6 <_dtoa_r+0xa76>
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	4620      	mov	r0, r4
 800a012:	f000 fa0f 	bl	800a434 <_Balloc>
 800a016:	4605      	mov	r5, r0
 800a018:	b928      	cbnz	r0, 800a026 <_dtoa_r+0x9d6>
 800a01a:	4b83      	ldr	r3, [pc, #524]	; (800a228 <_dtoa_r+0xbd8>)
 800a01c:	4602      	mov	r2, r0
 800a01e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a022:	f7ff bb2e 	b.w	8009682 <_dtoa_r+0x32>
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	3202      	adds	r2, #2
 800a02a:	0092      	lsls	r2, r2, #2
 800a02c:	f107 010c 	add.w	r1, r7, #12
 800a030:	300c      	adds	r0, #12
 800a032:	f001 f8c5 	bl	800b1c0 <memcpy>
 800a036:	2201      	movs	r2, #1
 800a038:	4629      	mov	r1, r5
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 fc0a 	bl	800a854 <__lshift>
 800a040:	9b00      	ldr	r3, [sp, #0]
 800a042:	3301      	adds	r3, #1
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a04a:	4413      	add	r3, r2
 800a04c:	9308      	str	r3, [sp, #32]
 800a04e:	9b02      	ldr	r3, [sp, #8]
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	46b8      	mov	r8, r7
 800a056:	9306      	str	r3, [sp, #24]
 800a058:	4607      	mov	r7, r0
 800a05a:	9b04      	ldr	r3, [sp, #16]
 800a05c:	4631      	mov	r1, r6
 800a05e:	3b01      	subs	r3, #1
 800a060:	4650      	mov	r0, sl
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	f7ff fa6b 	bl	800953e <quorem>
 800a068:	4641      	mov	r1, r8
 800a06a:	9002      	str	r0, [sp, #8]
 800a06c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a070:	4650      	mov	r0, sl
 800a072:	f000 fc5b 	bl	800a92c <__mcmp>
 800a076:	463a      	mov	r2, r7
 800a078:	9005      	str	r0, [sp, #20]
 800a07a:	4631      	mov	r1, r6
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 fc71 	bl	800a964 <__mdiff>
 800a082:	68c2      	ldr	r2, [r0, #12]
 800a084:	4605      	mov	r5, r0
 800a086:	bb02      	cbnz	r2, 800a0ca <_dtoa_r+0xa7a>
 800a088:	4601      	mov	r1, r0
 800a08a:	4650      	mov	r0, sl
 800a08c:	f000 fc4e 	bl	800a92c <__mcmp>
 800a090:	4602      	mov	r2, r0
 800a092:	4629      	mov	r1, r5
 800a094:	4620      	mov	r0, r4
 800a096:	9209      	str	r2, [sp, #36]	; 0x24
 800a098:	f000 fa0c 	bl	800a4b4 <_Bfree>
 800a09c:	9b07      	ldr	r3, [sp, #28]
 800a09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a0:	9d04      	ldr	r5, [sp, #16]
 800a0a2:	ea43 0102 	orr.w	r1, r3, r2
 800a0a6:	9b06      	ldr	r3, [sp, #24]
 800a0a8:	4319      	orrs	r1, r3
 800a0aa:	d110      	bne.n	800a0ce <_dtoa_r+0xa7e>
 800a0ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0b0:	d029      	beq.n	800a106 <_dtoa_r+0xab6>
 800a0b2:	9b05      	ldr	r3, [sp, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dd02      	ble.n	800a0be <_dtoa_r+0xa6e>
 800a0b8:	9b02      	ldr	r3, [sp, #8]
 800a0ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a0be:	9b01      	ldr	r3, [sp, #4]
 800a0c0:	f883 9000 	strb.w	r9, [r3]
 800a0c4:	e774      	b.n	8009fb0 <_dtoa_r+0x960>
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	e7ba      	b.n	800a040 <_dtoa_r+0x9f0>
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	e7e1      	b.n	800a092 <_dtoa_r+0xa42>
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	db04      	blt.n	800a0de <_dtoa_r+0xa8e>
 800a0d4:	9907      	ldr	r1, [sp, #28]
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	9906      	ldr	r1, [sp, #24]
 800a0da:	430b      	orrs	r3, r1
 800a0dc:	d120      	bne.n	800a120 <_dtoa_r+0xad0>
 800a0de:	2a00      	cmp	r2, #0
 800a0e0:	dded      	ble.n	800a0be <_dtoa_r+0xa6e>
 800a0e2:	4651      	mov	r1, sl
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f000 fbb4 	bl	800a854 <__lshift>
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4682      	mov	sl, r0
 800a0f0:	f000 fc1c 	bl	800a92c <__mcmp>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	dc03      	bgt.n	800a100 <_dtoa_r+0xab0>
 800a0f8:	d1e1      	bne.n	800a0be <_dtoa_r+0xa6e>
 800a0fa:	f019 0f01 	tst.w	r9, #1
 800a0fe:	d0de      	beq.n	800a0be <_dtoa_r+0xa6e>
 800a100:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a104:	d1d8      	bne.n	800a0b8 <_dtoa_r+0xa68>
 800a106:	9a01      	ldr	r2, [sp, #4]
 800a108:	2339      	movs	r3, #57	; 0x39
 800a10a:	7013      	strb	r3, [r2, #0]
 800a10c:	462b      	mov	r3, r5
 800a10e:	461d      	mov	r5, r3
 800a110:	3b01      	subs	r3, #1
 800a112:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a116:	2a39      	cmp	r2, #57	; 0x39
 800a118:	d06c      	beq.n	800a1f4 <_dtoa_r+0xba4>
 800a11a:	3201      	adds	r2, #1
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	e747      	b.n	8009fb0 <_dtoa_r+0x960>
 800a120:	2a00      	cmp	r2, #0
 800a122:	dd07      	ble.n	800a134 <_dtoa_r+0xae4>
 800a124:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a128:	d0ed      	beq.n	800a106 <_dtoa_r+0xab6>
 800a12a:	9a01      	ldr	r2, [sp, #4]
 800a12c:	f109 0301 	add.w	r3, r9, #1
 800a130:	7013      	strb	r3, [r2, #0]
 800a132:	e73d      	b.n	8009fb0 <_dtoa_r+0x960>
 800a134:	9b04      	ldr	r3, [sp, #16]
 800a136:	9a08      	ldr	r2, [sp, #32]
 800a138:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d043      	beq.n	800a1c8 <_dtoa_r+0xb78>
 800a140:	4651      	mov	r1, sl
 800a142:	2300      	movs	r3, #0
 800a144:	220a      	movs	r2, #10
 800a146:	4620      	mov	r0, r4
 800a148:	f000 f9d6 	bl	800a4f8 <__multadd>
 800a14c:	45b8      	cmp	r8, r7
 800a14e:	4682      	mov	sl, r0
 800a150:	f04f 0300 	mov.w	r3, #0
 800a154:	f04f 020a 	mov.w	r2, #10
 800a158:	4641      	mov	r1, r8
 800a15a:	4620      	mov	r0, r4
 800a15c:	d107      	bne.n	800a16e <_dtoa_r+0xb1e>
 800a15e:	f000 f9cb 	bl	800a4f8 <__multadd>
 800a162:	4680      	mov	r8, r0
 800a164:	4607      	mov	r7, r0
 800a166:	9b04      	ldr	r3, [sp, #16]
 800a168:	3301      	adds	r3, #1
 800a16a:	9304      	str	r3, [sp, #16]
 800a16c:	e775      	b.n	800a05a <_dtoa_r+0xa0a>
 800a16e:	f000 f9c3 	bl	800a4f8 <__multadd>
 800a172:	4639      	mov	r1, r7
 800a174:	4680      	mov	r8, r0
 800a176:	2300      	movs	r3, #0
 800a178:	220a      	movs	r2, #10
 800a17a:	4620      	mov	r0, r4
 800a17c:	f000 f9bc 	bl	800a4f8 <__multadd>
 800a180:	4607      	mov	r7, r0
 800a182:	e7f0      	b.n	800a166 <_dtoa_r+0xb16>
 800a184:	9b04      	ldr	r3, [sp, #16]
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	9d00      	ldr	r5, [sp, #0]
 800a18a:	4631      	mov	r1, r6
 800a18c:	4650      	mov	r0, sl
 800a18e:	f7ff f9d6 	bl	800953e <quorem>
 800a192:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a196:	9b00      	ldr	r3, [sp, #0]
 800a198:	f805 9b01 	strb.w	r9, [r5], #1
 800a19c:	1aea      	subs	r2, r5, r3
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	dd07      	ble.n	800a1b4 <_dtoa_r+0xb64>
 800a1a4:	4651      	mov	r1, sl
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 f9a4 	bl	800a4f8 <__multadd>
 800a1b0:	4682      	mov	sl, r0
 800a1b2:	e7ea      	b.n	800a18a <_dtoa_r+0xb3a>
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bfc8      	it	gt
 800a1ba:	461d      	movgt	r5, r3
 800a1bc:	9b00      	ldr	r3, [sp, #0]
 800a1be:	bfd8      	it	le
 800a1c0:	2501      	movle	r5, #1
 800a1c2:	441d      	add	r5, r3
 800a1c4:	f04f 0800 	mov.w	r8, #0
 800a1c8:	4651      	mov	r1, sl
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fb41 	bl	800a854 <__lshift>
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4682      	mov	sl, r0
 800a1d6:	f000 fba9 	bl	800a92c <__mcmp>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	dc96      	bgt.n	800a10c <_dtoa_r+0xabc>
 800a1de:	d102      	bne.n	800a1e6 <_dtoa_r+0xb96>
 800a1e0:	f019 0f01 	tst.w	r9, #1
 800a1e4:	d192      	bne.n	800a10c <_dtoa_r+0xabc>
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	461d      	mov	r5, r3
 800a1ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1ee:	2a30      	cmp	r2, #48	; 0x30
 800a1f0:	d0fa      	beq.n	800a1e8 <_dtoa_r+0xb98>
 800a1f2:	e6dd      	b.n	8009fb0 <_dtoa_r+0x960>
 800a1f4:	9a00      	ldr	r2, [sp, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d189      	bne.n	800a10e <_dtoa_r+0xabe>
 800a1fa:	f10b 0b01 	add.w	fp, fp, #1
 800a1fe:	2331      	movs	r3, #49	; 0x31
 800a200:	e796      	b.n	800a130 <_dtoa_r+0xae0>
 800a202:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <_dtoa_r+0xbdc>)
 800a204:	f7ff ba99 	b.w	800973a <_dtoa_r+0xea>
 800a208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f47f aa6d 	bne.w	80096ea <_dtoa_r+0x9a>
 800a210:	4b07      	ldr	r3, [pc, #28]	; (800a230 <_dtoa_r+0xbe0>)
 800a212:	f7ff ba92 	b.w	800973a <_dtoa_r+0xea>
 800a216:	9b01      	ldr	r3, [sp, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dcb5      	bgt.n	800a188 <_dtoa_r+0xb38>
 800a21c:	9b07      	ldr	r3, [sp, #28]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	f73f aeb1 	bgt.w	8009f86 <_dtoa_r+0x936>
 800a224:	e7b0      	b.n	800a188 <_dtoa_r+0xb38>
 800a226:	bf00      	nop
 800a228:	0800bbf5 	.word	0x0800bbf5
 800a22c:	0800bb55 	.word	0x0800bb55
 800a230:	0800bb79 	.word	0x0800bb79

0800a234 <_free_r>:
 800a234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a236:	2900      	cmp	r1, #0
 800a238:	d044      	beq.n	800a2c4 <_free_r+0x90>
 800a23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a23e:	9001      	str	r0, [sp, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	f1a1 0404 	sub.w	r4, r1, #4
 800a246:	bfb8      	it	lt
 800a248:	18e4      	addlt	r4, r4, r3
 800a24a:	f000 f8e7 	bl	800a41c <__malloc_lock>
 800a24e:	4a1e      	ldr	r2, [pc, #120]	; (800a2c8 <_free_r+0x94>)
 800a250:	9801      	ldr	r0, [sp, #4]
 800a252:	6813      	ldr	r3, [r2, #0]
 800a254:	b933      	cbnz	r3, 800a264 <_free_r+0x30>
 800a256:	6063      	str	r3, [r4, #4]
 800a258:	6014      	str	r4, [r2, #0]
 800a25a:	b003      	add	sp, #12
 800a25c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a260:	f000 b8e2 	b.w	800a428 <__malloc_unlock>
 800a264:	42a3      	cmp	r3, r4
 800a266:	d908      	bls.n	800a27a <_free_r+0x46>
 800a268:	6825      	ldr	r5, [r4, #0]
 800a26a:	1961      	adds	r1, r4, r5
 800a26c:	428b      	cmp	r3, r1
 800a26e:	bf01      	itttt	eq
 800a270:	6819      	ldreq	r1, [r3, #0]
 800a272:	685b      	ldreq	r3, [r3, #4]
 800a274:	1949      	addeq	r1, r1, r5
 800a276:	6021      	streq	r1, [r4, #0]
 800a278:	e7ed      	b.n	800a256 <_free_r+0x22>
 800a27a:	461a      	mov	r2, r3
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	b10b      	cbz	r3, 800a284 <_free_r+0x50>
 800a280:	42a3      	cmp	r3, r4
 800a282:	d9fa      	bls.n	800a27a <_free_r+0x46>
 800a284:	6811      	ldr	r1, [r2, #0]
 800a286:	1855      	adds	r5, r2, r1
 800a288:	42a5      	cmp	r5, r4
 800a28a:	d10b      	bne.n	800a2a4 <_free_r+0x70>
 800a28c:	6824      	ldr	r4, [r4, #0]
 800a28e:	4421      	add	r1, r4
 800a290:	1854      	adds	r4, r2, r1
 800a292:	42a3      	cmp	r3, r4
 800a294:	6011      	str	r1, [r2, #0]
 800a296:	d1e0      	bne.n	800a25a <_free_r+0x26>
 800a298:	681c      	ldr	r4, [r3, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	6053      	str	r3, [r2, #4]
 800a29e:	440c      	add	r4, r1
 800a2a0:	6014      	str	r4, [r2, #0]
 800a2a2:	e7da      	b.n	800a25a <_free_r+0x26>
 800a2a4:	d902      	bls.n	800a2ac <_free_r+0x78>
 800a2a6:	230c      	movs	r3, #12
 800a2a8:	6003      	str	r3, [r0, #0]
 800a2aa:	e7d6      	b.n	800a25a <_free_r+0x26>
 800a2ac:	6825      	ldr	r5, [r4, #0]
 800a2ae:	1961      	adds	r1, r4, r5
 800a2b0:	428b      	cmp	r3, r1
 800a2b2:	bf04      	itt	eq
 800a2b4:	6819      	ldreq	r1, [r3, #0]
 800a2b6:	685b      	ldreq	r3, [r3, #4]
 800a2b8:	6063      	str	r3, [r4, #4]
 800a2ba:	bf04      	itt	eq
 800a2bc:	1949      	addeq	r1, r1, r5
 800a2be:	6021      	streq	r1, [r4, #0]
 800a2c0:	6054      	str	r4, [r2, #4]
 800a2c2:	e7ca      	b.n	800a25a <_free_r+0x26>
 800a2c4:	b003      	add	sp, #12
 800a2c6:	bd30      	pop	{r4, r5, pc}
 800a2c8:	20000d94 	.word	0x20000d94

0800a2cc <malloc>:
 800a2cc:	4b02      	ldr	r3, [pc, #8]	; (800a2d8 <malloc+0xc>)
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	f000 b823 	b.w	800a31c <_malloc_r>
 800a2d6:	bf00      	nop
 800a2d8:	200007c4 	.word	0x200007c4

0800a2dc <sbrk_aligned>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	4e0e      	ldr	r6, [pc, #56]	; (800a318 <sbrk_aligned+0x3c>)
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	6831      	ldr	r1, [r6, #0]
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	b911      	cbnz	r1, 800a2ee <sbrk_aligned+0x12>
 800a2e8:	f000 ff5a 	bl	800b1a0 <_sbrk_r>
 800a2ec:	6030      	str	r0, [r6, #0]
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f000 ff55 	bl	800b1a0 <_sbrk_r>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d00a      	beq.n	800a310 <sbrk_aligned+0x34>
 800a2fa:	1cc4      	adds	r4, r0, #3
 800a2fc:	f024 0403 	bic.w	r4, r4, #3
 800a300:	42a0      	cmp	r0, r4
 800a302:	d007      	beq.n	800a314 <sbrk_aligned+0x38>
 800a304:	1a21      	subs	r1, r4, r0
 800a306:	4628      	mov	r0, r5
 800a308:	f000 ff4a 	bl	800b1a0 <_sbrk_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	d101      	bne.n	800a314 <sbrk_aligned+0x38>
 800a310:	f04f 34ff 	mov.w	r4, #4294967295
 800a314:	4620      	mov	r0, r4
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	20000d98 	.word	0x20000d98

0800a31c <_malloc_r>:
 800a31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a320:	1ccd      	adds	r5, r1, #3
 800a322:	f025 0503 	bic.w	r5, r5, #3
 800a326:	3508      	adds	r5, #8
 800a328:	2d0c      	cmp	r5, #12
 800a32a:	bf38      	it	cc
 800a32c:	250c      	movcc	r5, #12
 800a32e:	2d00      	cmp	r5, #0
 800a330:	4607      	mov	r7, r0
 800a332:	db01      	blt.n	800a338 <_malloc_r+0x1c>
 800a334:	42a9      	cmp	r1, r5
 800a336:	d905      	bls.n	800a344 <_malloc_r+0x28>
 800a338:	230c      	movs	r3, #12
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	2600      	movs	r6, #0
 800a33e:	4630      	mov	r0, r6
 800a340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a344:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a418 <_malloc_r+0xfc>
 800a348:	f000 f868 	bl	800a41c <__malloc_lock>
 800a34c:	f8d8 3000 	ldr.w	r3, [r8]
 800a350:	461c      	mov	r4, r3
 800a352:	bb5c      	cbnz	r4, 800a3ac <_malloc_r+0x90>
 800a354:	4629      	mov	r1, r5
 800a356:	4638      	mov	r0, r7
 800a358:	f7ff ffc0 	bl	800a2dc <sbrk_aligned>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	4604      	mov	r4, r0
 800a360:	d155      	bne.n	800a40e <_malloc_r+0xf2>
 800a362:	f8d8 4000 	ldr.w	r4, [r8]
 800a366:	4626      	mov	r6, r4
 800a368:	2e00      	cmp	r6, #0
 800a36a:	d145      	bne.n	800a3f8 <_malloc_r+0xdc>
 800a36c:	2c00      	cmp	r4, #0
 800a36e:	d048      	beq.n	800a402 <_malloc_r+0xe6>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	4631      	mov	r1, r6
 800a374:	4638      	mov	r0, r7
 800a376:	eb04 0903 	add.w	r9, r4, r3
 800a37a:	f000 ff11 	bl	800b1a0 <_sbrk_r>
 800a37e:	4581      	cmp	r9, r0
 800a380:	d13f      	bne.n	800a402 <_malloc_r+0xe6>
 800a382:	6821      	ldr	r1, [r4, #0]
 800a384:	1a6d      	subs	r5, r5, r1
 800a386:	4629      	mov	r1, r5
 800a388:	4638      	mov	r0, r7
 800a38a:	f7ff ffa7 	bl	800a2dc <sbrk_aligned>
 800a38e:	3001      	adds	r0, #1
 800a390:	d037      	beq.n	800a402 <_malloc_r+0xe6>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	442b      	add	r3, r5
 800a396:	6023      	str	r3, [r4, #0]
 800a398:	f8d8 3000 	ldr.w	r3, [r8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d038      	beq.n	800a412 <_malloc_r+0xf6>
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	42a2      	cmp	r2, r4
 800a3a4:	d12b      	bne.n	800a3fe <_malloc_r+0xe2>
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	605a      	str	r2, [r3, #4]
 800a3aa:	e00f      	b.n	800a3cc <_malloc_r+0xb0>
 800a3ac:	6822      	ldr	r2, [r4, #0]
 800a3ae:	1b52      	subs	r2, r2, r5
 800a3b0:	d41f      	bmi.n	800a3f2 <_malloc_r+0xd6>
 800a3b2:	2a0b      	cmp	r2, #11
 800a3b4:	d917      	bls.n	800a3e6 <_malloc_r+0xca>
 800a3b6:	1961      	adds	r1, r4, r5
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	6025      	str	r5, [r4, #0]
 800a3bc:	bf18      	it	ne
 800a3be:	6059      	strne	r1, [r3, #4]
 800a3c0:	6863      	ldr	r3, [r4, #4]
 800a3c2:	bf08      	it	eq
 800a3c4:	f8c8 1000 	streq.w	r1, [r8]
 800a3c8:	5162      	str	r2, [r4, r5]
 800a3ca:	604b      	str	r3, [r1, #4]
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	f104 060b 	add.w	r6, r4, #11
 800a3d2:	f000 f829 	bl	800a428 <__malloc_unlock>
 800a3d6:	f026 0607 	bic.w	r6, r6, #7
 800a3da:	1d23      	adds	r3, r4, #4
 800a3dc:	1af2      	subs	r2, r6, r3
 800a3de:	d0ae      	beq.n	800a33e <_malloc_r+0x22>
 800a3e0:	1b9b      	subs	r3, r3, r6
 800a3e2:	50a3      	str	r3, [r4, r2]
 800a3e4:	e7ab      	b.n	800a33e <_malloc_r+0x22>
 800a3e6:	42a3      	cmp	r3, r4
 800a3e8:	6862      	ldr	r2, [r4, #4]
 800a3ea:	d1dd      	bne.n	800a3a8 <_malloc_r+0x8c>
 800a3ec:	f8c8 2000 	str.w	r2, [r8]
 800a3f0:	e7ec      	b.n	800a3cc <_malloc_r+0xb0>
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	6864      	ldr	r4, [r4, #4]
 800a3f6:	e7ac      	b.n	800a352 <_malloc_r+0x36>
 800a3f8:	4634      	mov	r4, r6
 800a3fa:	6876      	ldr	r6, [r6, #4]
 800a3fc:	e7b4      	b.n	800a368 <_malloc_r+0x4c>
 800a3fe:	4613      	mov	r3, r2
 800a400:	e7cc      	b.n	800a39c <_malloc_r+0x80>
 800a402:	230c      	movs	r3, #12
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	4638      	mov	r0, r7
 800a408:	f000 f80e 	bl	800a428 <__malloc_unlock>
 800a40c:	e797      	b.n	800a33e <_malloc_r+0x22>
 800a40e:	6025      	str	r5, [r4, #0]
 800a410:	e7dc      	b.n	800a3cc <_malloc_r+0xb0>
 800a412:	605b      	str	r3, [r3, #4]
 800a414:	deff      	udf	#255	; 0xff
 800a416:	bf00      	nop
 800a418:	20000d94 	.word	0x20000d94

0800a41c <__malloc_lock>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__malloc_lock+0x8>)
 800a41e:	f7ff b88c 	b.w	800953a <__retarget_lock_acquire_recursive>
 800a422:	bf00      	nop
 800a424:	20000d90 	.word	0x20000d90

0800a428 <__malloc_unlock>:
 800a428:	4801      	ldr	r0, [pc, #4]	; (800a430 <__malloc_unlock+0x8>)
 800a42a:	f7ff b887 	b.w	800953c <__retarget_lock_release_recursive>
 800a42e:	bf00      	nop
 800a430:	20000d90 	.word	0x20000d90

0800a434 <_Balloc>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	69c6      	ldr	r6, [r0, #28]
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	b976      	cbnz	r6, 800a45c <_Balloc+0x28>
 800a43e:	2010      	movs	r0, #16
 800a440:	f7ff ff44 	bl	800a2cc <malloc>
 800a444:	4602      	mov	r2, r0
 800a446:	61e0      	str	r0, [r4, #28]
 800a448:	b920      	cbnz	r0, 800a454 <_Balloc+0x20>
 800a44a:	4b18      	ldr	r3, [pc, #96]	; (800a4ac <_Balloc+0x78>)
 800a44c:	4818      	ldr	r0, [pc, #96]	; (800a4b0 <_Balloc+0x7c>)
 800a44e:	216b      	movs	r1, #107	; 0x6b
 800a450:	f000 fec4 	bl	800b1dc <__assert_func>
 800a454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a458:	6006      	str	r6, [r0, #0]
 800a45a:	60c6      	str	r6, [r0, #12]
 800a45c:	69e6      	ldr	r6, [r4, #28]
 800a45e:	68f3      	ldr	r3, [r6, #12]
 800a460:	b183      	cbz	r3, 800a484 <_Balloc+0x50>
 800a462:	69e3      	ldr	r3, [r4, #28]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a46a:	b9b8      	cbnz	r0, 800a49c <_Balloc+0x68>
 800a46c:	2101      	movs	r1, #1
 800a46e:	fa01 f605 	lsl.w	r6, r1, r5
 800a472:	1d72      	adds	r2, r6, #5
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fece 	bl	800b218 <_calloc_r>
 800a47c:	b160      	cbz	r0, 800a498 <_Balloc+0x64>
 800a47e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a482:	e00e      	b.n	800a4a2 <_Balloc+0x6e>
 800a484:	2221      	movs	r2, #33	; 0x21
 800a486:	2104      	movs	r1, #4
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fec5 	bl	800b218 <_calloc_r>
 800a48e:	69e3      	ldr	r3, [r4, #28]
 800a490:	60f0      	str	r0, [r6, #12]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e4      	bne.n	800a462 <_Balloc+0x2e>
 800a498:	2000      	movs	r0, #0
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	6802      	ldr	r2, [r0, #0]
 800a49e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4a8:	e7f7      	b.n	800a49a <_Balloc+0x66>
 800a4aa:	bf00      	nop
 800a4ac:	0800bb86 	.word	0x0800bb86
 800a4b0:	0800bc06 	.word	0x0800bc06

0800a4b4 <_Bfree>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	69c6      	ldr	r6, [r0, #28]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b976      	cbnz	r6, 800a4dc <_Bfree+0x28>
 800a4be:	2010      	movs	r0, #16
 800a4c0:	f7ff ff04 	bl	800a2cc <malloc>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	61e8      	str	r0, [r5, #28]
 800a4c8:	b920      	cbnz	r0, 800a4d4 <_Bfree+0x20>
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <_Bfree+0x3c>)
 800a4cc:	4809      	ldr	r0, [pc, #36]	; (800a4f4 <_Bfree+0x40>)
 800a4ce:	218f      	movs	r1, #143	; 0x8f
 800a4d0:	f000 fe84 	bl	800b1dc <__assert_func>
 800a4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4d8:	6006      	str	r6, [r0, #0]
 800a4da:	60c6      	str	r6, [r0, #12]
 800a4dc:	b13c      	cbz	r4, 800a4ee <_Bfree+0x3a>
 800a4de:	69eb      	ldr	r3, [r5, #28]
 800a4e0:	6862      	ldr	r2, [r4, #4]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4e8:	6021      	str	r1, [r4, #0]
 800a4ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	0800bb86 	.word	0x0800bb86
 800a4f4:	0800bc06 	.word	0x0800bc06

0800a4f8 <__multadd>:
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	690d      	ldr	r5, [r1, #16]
 800a4fe:	4607      	mov	r7, r0
 800a500:	460c      	mov	r4, r1
 800a502:	461e      	mov	r6, r3
 800a504:	f101 0c14 	add.w	ip, r1, #20
 800a508:	2000      	movs	r0, #0
 800a50a:	f8dc 3000 	ldr.w	r3, [ip]
 800a50e:	b299      	uxth	r1, r3
 800a510:	fb02 6101 	mla	r1, r2, r1, r6
 800a514:	0c1e      	lsrs	r6, r3, #16
 800a516:	0c0b      	lsrs	r3, r1, #16
 800a518:	fb02 3306 	mla	r3, r2, r6, r3
 800a51c:	b289      	uxth	r1, r1
 800a51e:	3001      	adds	r0, #1
 800a520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a524:	4285      	cmp	r5, r0
 800a526:	f84c 1b04 	str.w	r1, [ip], #4
 800a52a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a52e:	dcec      	bgt.n	800a50a <__multadd+0x12>
 800a530:	b30e      	cbz	r6, 800a576 <__multadd+0x7e>
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	42ab      	cmp	r3, r5
 800a536:	dc19      	bgt.n	800a56c <__multadd+0x74>
 800a538:	6861      	ldr	r1, [r4, #4]
 800a53a:	4638      	mov	r0, r7
 800a53c:	3101      	adds	r1, #1
 800a53e:	f7ff ff79 	bl	800a434 <_Balloc>
 800a542:	4680      	mov	r8, r0
 800a544:	b928      	cbnz	r0, 800a552 <__multadd+0x5a>
 800a546:	4602      	mov	r2, r0
 800a548:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <__multadd+0x84>)
 800a54a:	480d      	ldr	r0, [pc, #52]	; (800a580 <__multadd+0x88>)
 800a54c:	21ba      	movs	r1, #186	; 0xba
 800a54e:	f000 fe45 	bl	800b1dc <__assert_func>
 800a552:	6922      	ldr	r2, [r4, #16]
 800a554:	3202      	adds	r2, #2
 800a556:	f104 010c 	add.w	r1, r4, #12
 800a55a:	0092      	lsls	r2, r2, #2
 800a55c:	300c      	adds	r0, #12
 800a55e:	f000 fe2f 	bl	800b1c0 <memcpy>
 800a562:	4621      	mov	r1, r4
 800a564:	4638      	mov	r0, r7
 800a566:	f7ff ffa5 	bl	800a4b4 <_Bfree>
 800a56a:	4644      	mov	r4, r8
 800a56c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a570:	3501      	adds	r5, #1
 800a572:	615e      	str	r6, [r3, #20]
 800a574:	6125      	str	r5, [r4, #16]
 800a576:	4620      	mov	r0, r4
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	0800bbf5 	.word	0x0800bbf5
 800a580:	0800bc06 	.word	0x0800bc06

0800a584 <__hi0bits>:
 800a584:	0c03      	lsrs	r3, r0, #16
 800a586:	041b      	lsls	r3, r3, #16
 800a588:	b9d3      	cbnz	r3, 800a5c0 <__hi0bits+0x3c>
 800a58a:	0400      	lsls	r0, r0, #16
 800a58c:	2310      	movs	r3, #16
 800a58e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a592:	bf04      	itt	eq
 800a594:	0200      	lsleq	r0, r0, #8
 800a596:	3308      	addeq	r3, #8
 800a598:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a59c:	bf04      	itt	eq
 800a59e:	0100      	lsleq	r0, r0, #4
 800a5a0:	3304      	addeq	r3, #4
 800a5a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5a6:	bf04      	itt	eq
 800a5a8:	0080      	lsleq	r0, r0, #2
 800a5aa:	3302      	addeq	r3, #2
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	db05      	blt.n	800a5bc <__hi0bits+0x38>
 800a5b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5b4:	f103 0301 	add.w	r3, r3, #1
 800a5b8:	bf08      	it	eq
 800a5ba:	2320      	moveq	r3, #32
 800a5bc:	4618      	mov	r0, r3
 800a5be:	4770      	bx	lr
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e7e4      	b.n	800a58e <__hi0bits+0xa>

0800a5c4 <__lo0bits>:
 800a5c4:	6803      	ldr	r3, [r0, #0]
 800a5c6:	f013 0207 	ands.w	r2, r3, #7
 800a5ca:	d00c      	beq.n	800a5e6 <__lo0bits+0x22>
 800a5cc:	07d9      	lsls	r1, r3, #31
 800a5ce:	d422      	bmi.n	800a616 <__lo0bits+0x52>
 800a5d0:	079a      	lsls	r2, r3, #30
 800a5d2:	bf49      	itett	mi
 800a5d4:	085b      	lsrmi	r3, r3, #1
 800a5d6:	089b      	lsrpl	r3, r3, #2
 800a5d8:	6003      	strmi	r3, [r0, #0]
 800a5da:	2201      	movmi	r2, #1
 800a5dc:	bf5c      	itt	pl
 800a5de:	6003      	strpl	r3, [r0, #0]
 800a5e0:	2202      	movpl	r2, #2
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	4770      	bx	lr
 800a5e6:	b299      	uxth	r1, r3
 800a5e8:	b909      	cbnz	r1, 800a5ee <__lo0bits+0x2a>
 800a5ea:	0c1b      	lsrs	r3, r3, #16
 800a5ec:	2210      	movs	r2, #16
 800a5ee:	b2d9      	uxtb	r1, r3
 800a5f0:	b909      	cbnz	r1, 800a5f6 <__lo0bits+0x32>
 800a5f2:	3208      	adds	r2, #8
 800a5f4:	0a1b      	lsrs	r3, r3, #8
 800a5f6:	0719      	lsls	r1, r3, #28
 800a5f8:	bf04      	itt	eq
 800a5fa:	091b      	lsreq	r3, r3, #4
 800a5fc:	3204      	addeq	r2, #4
 800a5fe:	0799      	lsls	r1, r3, #30
 800a600:	bf04      	itt	eq
 800a602:	089b      	lsreq	r3, r3, #2
 800a604:	3202      	addeq	r2, #2
 800a606:	07d9      	lsls	r1, r3, #31
 800a608:	d403      	bmi.n	800a612 <__lo0bits+0x4e>
 800a60a:	085b      	lsrs	r3, r3, #1
 800a60c:	f102 0201 	add.w	r2, r2, #1
 800a610:	d003      	beq.n	800a61a <__lo0bits+0x56>
 800a612:	6003      	str	r3, [r0, #0]
 800a614:	e7e5      	b.n	800a5e2 <__lo0bits+0x1e>
 800a616:	2200      	movs	r2, #0
 800a618:	e7e3      	b.n	800a5e2 <__lo0bits+0x1e>
 800a61a:	2220      	movs	r2, #32
 800a61c:	e7e1      	b.n	800a5e2 <__lo0bits+0x1e>
	...

0800a620 <__i2b>:
 800a620:	b510      	push	{r4, lr}
 800a622:	460c      	mov	r4, r1
 800a624:	2101      	movs	r1, #1
 800a626:	f7ff ff05 	bl	800a434 <_Balloc>
 800a62a:	4602      	mov	r2, r0
 800a62c:	b928      	cbnz	r0, 800a63a <__i2b+0x1a>
 800a62e:	4b05      	ldr	r3, [pc, #20]	; (800a644 <__i2b+0x24>)
 800a630:	4805      	ldr	r0, [pc, #20]	; (800a648 <__i2b+0x28>)
 800a632:	f240 1145 	movw	r1, #325	; 0x145
 800a636:	f000 fdd1 	bl	800b1dc <__assert_func>
 800a63a:	2301      	movs	r3, #1
 800a63c:	6144      	str	r4, [r0, #20]
 800a63e:	6103      	str	r3, [r0, #16]
 800a640:	bd10      	pop	{r4, pc}
 800a642:	bf00      	nop
 800a644:	0800bbf5 	.word	0x0800bbf5
 800a648:	0800bc06 	.word	0x0800bc06

0800a64c <__multiply>:
 800a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	4691      	mov	r9, r2
 800a652:	690a      	ldr	r2, [r1, #16]
 800a654:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a658:	429a      	cmp	r2, r3
 800a65a:	bfb8      	it	lt
 800a65c:	460b      	movlt	r3, r1
 800a65e:	460c      	mov	r4, r1
 800a660:	bfbc      	itt	lt
 800a662:	464c      	movlt	r4, r9
 800a664:	4699      	movlt	r9, r3
 800a666:	6927      	ldr	r7, [r4, #16]
 800a668:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a66c:	68a3      	ldr	r3, [r4, #8]
 800a66e:	6861      	ldr	r1, [r4, #4]
 800a670:	eb07 060a 	add.w	r6, r7, sl
 800a674:	42b3      	cmp	r3, r6
 800a676:	b085      	sub	sp, #20
 800a678:	bfb8      	it	lt
 800a67a:	3101      	addlt	r1, #1
 800a67c:	f7ff feda 	bl	800a434 <_Balloc>
 800a680:	b930      	cbnz	r0, 800a690 <__multiply+0x44>
 800a682:	4602      	mov	r2, r0
 800a684:	4b44      	ldr	r3, [pc, #272]	; (800a798 <__multiply+0x14c>)
 800a686:	4845      	ldr	r0, [pc, #276]	; (800a79c <__multiply+0x150>)
 800a688:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a68c:	f000 fda6 	bl	800b1dc <__assert_func>
 800a690:	f100 0514 	add.w	r5, r0, #20
 800a694:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a698:	462b      	mov	r3, r5
 800a69a:	2200      	movs	r2, #0
 800a69c:	4543      	cmp	r3, r8
 800a69e:	d321      	bcc.n	800a6e4 <__multiply+0x98>
 800a6a0:	f104 0314 	add.w	r3, r4, #20
 800a6a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6a8:	f109 0314 	add.w	r3, r9, #20
 800a6ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6b0:	9202      	str	r2, [sp, #8]
 800a6b2:	1b3a      	subs	r2, r7, r4
 800a6b4:	3a15      	subs	r2, #21
 800a6b6:	f022 0203 	bic.w	r2, r2, #3
 800a6ba:	3204      	adds	r2, #4
 800a6bc:	f104 0115 	add.w	r1, r4, #21
 800a6c0:	428f      	cmp	r7, r1
 800a6c2:	bf38      	it	cc
 800a6c4:	2204      	movcc	r2, #4
 800a6c6:	9201      	str	r2, [sp, #4]
 800a6c8:	9a02      	ldr	r2, [sp, #8]
 800a6ca:	9303      	str	r3, [sp, #12]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d80c      	bhi.n	800a6ea <__multiply+0x9e>
 800a6d0:	2e00      	cmp	r6, #0
 800a6d2:	dd03      	ble.n	800a6dc <__multiply+0x90>
 800a6d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d05b      	beq.n	800a794 <__multiply+0x148>
 800a6dc:	6106      	str	r6, [r0, #16]
 800a6de:	b005      	add	sp, #20
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	f843 2b04 	str.w	r2, [r3], #4
 800a6e8:	e7d8      	b.n	800a69c <__multiply+0x50>
 800a6ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6ee:	f1ba 0f00 	cmp.w	sl, #0
 800a6f2:	d024      	beq.n	800a73e <__multiply+0xf2>
 800a6f4:	f104 0e14 	add.w	lr, r4, #20
 800a6f8:	46a9      	mov	r9, r5
 800a6fa:	f04f 0c00 	mov.w	ip, #0
 800a6fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a702:	f8d9 1000 	ldr.w	r1, [r9]
 800a706:	fa1f fb82 	uxth.w	fp, r2
 800a70a:	b289      	uxth	r1, r1
 800a70c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a710:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a714:	f8d9 2000 	ldr.w	r2, [r9]
 800a718:	4461      	add	r1, ip
 800a71a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a71e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a722:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a726:	b289      	uxth	r1, r1
 800a728:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a72c:	4577      	cmp	r7, lr
 800a72e:	f849 1b04 	str.w	r1, [r9], #4
 800a732:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a736:	d8e2      	bhi.n	800a6fe <__multiply+0xb2>
 800a738:	9a01      	ldr	r2, [sp, #4]
 800a73a:	f845 c002 	str.w	ip, [r5, r2]
 800a73e:	9a03      	ldr	r2, [sp, #12]
 800a740:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a744:	3304      	adds	r3, #4
 800a746:	f1b9 0f00 	cmp.w	r9, #0
 800a74a:	d021      	beq.n	800a790 <__multiply+0x144>
 800a74c:	6829      	ldr	r1, [r5, #0]
 800a74e:	f104 0c14 	add.w	ip, r4, #20
 800a752:	46ae      	mov	lr, r5
 800a754:	f04f 0a00 	mov.w	sl, #0
 800a758:	f8bc b000 	ldrh.w	fp, [ip]
 800a75c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a760:	fb09 220b 	mla	r2, r9, fp, r2
 800a764:	4452      	add	r2, sl
 800a766:	b289      	uxth	r1, r1
 800a768:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a76c:	f84e 1b04 	str.w	r1, [lr], #4
 800a770:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a774:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a778:	f8be 1000 	ldrh.w	r1, [lr]
 800a77c:	fb09 110a 	mla	r1, r9, sl, r1
 800a780:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a784:	4567      	cmp	r7, ip
 800a786:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a78a:	d8e5      	bhi.n	800a758 <__multiply+0x10c>
 800a78c:	9a01      	ldr	r2, [sp, #4]
 800a78e:	50a9      	str	r1, [r5, r2]
 800a790:	3504      	adds	r5, #4
 800a792:	e799      	b.n	800a6c8 <__multiply+0x7c>
 800a794:	3e01      	subs	r6, #1
 800a796:	e79b      	b.n	800a6d0 <__multiply+0x84>
 800a798:	0800bbf5 	.word	0x0800bbf5
 800a79c:	0800bc06 	.word	0x0800bc06

0800a7a0 <__pow5mult>:
 800a7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	f012 0203 	ands.w	r2, r2, #3
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	d007      	beq.n	800a7c0 <__pow5mult+0x20>
 800a7b0:	4c25      	ldr	r4, [pc, #148]	; (800a848 <__pow5mult+0xa8>)
 800a7b2:	3a01      	subs	r2, #1
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ba:	f7ff fe9d 	bl	800a4f8 <__multadd>
 800a7be:	4607      	mov	r7, r0
 800a7c0:	10ad      	asrs	r5, r5, #2
 800a7c2:	d03d      	beq.n	800a840 <__pow5mult+0xa0>
 800a7c4:	69f4      	ldr	r4, [r6, #28]
 800a7c6:	b97c      	cbnz	r4, 800a7e8 <__pow5mult+0x48>
 800a7c8:	2010      	movs	r0, #16
 800a7ca:	f7ff fd7f 	bl	800a2cc <malloc>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	61f0      	str	r0, [r6, #28]
 800a7d2:	b928      	cbnz	r0, 800a7e0 <__pow5mult+0x40>
 800a7d4:	4b1d      	ldr	r3, [pc, #116]	; (800a84c <__pow5mult+0xac>)
 800a7d6:	481e      	ldr	r0, [pc, #120]	; (800a850 <__pow5mult+0xb0>)
 800a7d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a7dc:	f000 fcfe 	bl	800b1dc <__assert_func>
 800a7e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7e4:	6004      	str	r4, [r0, #0]
 800a7e6:	60c4      	str	r4, [r0, #12]
 800a7e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a7ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7f0:	b94c      	cbnz	r4, 800a806 <__pow5mult+0x66>
 800a7f2:	f240 2171 	movw	r1, #625	; 0x271
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7ff ff12 	bl	800a620 <__i2b>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800a802:	4604      	mov	r4, r0
 800a804:	6003      	str	r3, [r0, #0]
 800a806:	f04f 0900 	mov.w	r9, #0
 800a80a:	07eb      	lsls	r3, r5, #31
 800a80c:	d50a      	bpl.n	800a824 <__pow5mult+0x84>
 800a80e:	4639      	mov	r1, r7
 800a810:	4622      	mov	r2, r4
 800a812:	4630      	mov	r0, r6
 800a814:	f7ff ff1a 	bl	800a64c <__multiply>
 800a818:	4639      	mov	r1, r7
 800a81a:	4680      	mov	r8, r0
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7ff fe49 	bl	800a4b4 <_Bfree>
 800a822:	4647      	mov	r7, r8
 800a824:	106d      	asrs	r5, r5, #1
 800a826:	d00b      	beq.n	800a840 <__pow5mult+0xa0>
 800a828:	6820      	ldr	r0, [r4, #0]
 800a82a:	b938      	cbnz	r0, 800a83c <__pow5mult+0x9c>
 800a82c:	4622      	mov	r2, r4
 800a82e:	4621      	mov	r1, r4
 800a830:	4630      	mov	r0, r6
 800a832:	f7ff ff0b 	bl	800a64c <__multiply>
 800a836:	6020      	str	r0, [r4, #0]
 800a838:	f8c0 9000 	str.w	r9, [r0]
 800a83c:	4604      	mov	r4, r0
 800a83e:	e7e4      	b.n	800a80a <__pow5mult+0x6a>
 800a840:	4638      	mov	r0, r7
 800a842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a846:	bf00      	nop
 800a848:	0800bd50 	.word	0x0800bd50
 800a84c:	0800bb86 	.word	0x0800bb86
 800a850:	0800bc06 	.word	0x0800bc06

0800a854 <__lshift>:
 800a854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a858:	460c      	mov	r4, r1
 800a85a:	6849      	ldr	r1, [r1, #4]
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a862:	68a3      	ldr	r3, [r4, #8]
 800a864:	4607      	mov	r7, r0
 800a866:	4691      	mov	r9, r2
 800a868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a86c:	f108 0601 	add.w	r6, r8, #1
 800a870:	42b3      	cmp	r3, r6
 800a872:	db0b      	blt.n	800a88c <__lshift+0x38>
 800a874:	4638      	mov	r0, r7
 800a876:	f7ff fddd 	bl	800a434 <_Balloc>
 800a87a:	4605      	mov	r5, r0
 800a87c:	b948      	cbnz	r0, 800a892 <__lshift+0x3e>
 800a87e:	4602      	mov	r2, r0
 800a880:	4b28      	ldr	r3, [pc, #160]	; (800a924 <__lshift+0xd0>)
 800a882:	4829      	ldr	r0, [pc, #164]	; (800a928 <__lshift+0xd4>)
 800a884:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a888:	f000 fca8 	bl	800b1dc <__assert_func>
 800a88c:	3101      	adds	r1, #1
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	e7ee      	b.n	800a870 <__lshift+0x1c>
 800a892:	2300      	movs	r3, #0
 800a894:	f100 0114 	add.w	r1, r0, #20
 800a898:	f100 0210 	add.w	r2, r0, #16
 800a89c:	4618      	mov	r0, r3
 800a89e:	4553      	cmp	r3, sl
 800a8a0:	db33      	blt.n	800a90a <__lshift+0xb6>
 800a8a2:	6920      	ldr	r0, [r4, #16]
 800a8a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8a8:	f104 0314 	add.w	r3, r4, #20
 800a8ac:	f019 091f 	ands.w	r9, r9, #31
 800a8b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8b8:	d02b      	beq.n	800a912 <__lshift+0xbe>
 800a8ba:	f1c9 0e20 	rsb	lr, r9, #32
 800a8be:	468a      	mov	sl, r1
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	fa00 f009 	lsl.w	r0, r0, r9
 800a8c8:	4310      	orrs	r0, r2
 800a8ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a8ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d2:	459c      	cmp	ip, r3
 800a8d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8d8:	d8f3      	bhi.n	800a8c2 <__lshift+0x6e>
 800a8da:	ebac 0304 	sub.w	r3, ip, r4
 800a8de:	3b15      	subs	r3, #21
 800a8e0:	f023 0303 	bic.w	r3, r3, #3
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	f104 0015 	add.w	r0, r4, #21
 800a8ea:	4584      	cmp	ip, r0
 800a8ec:	bf38      	it	cc
 800a8ee:	2304      	movcc	r3, #4
 800a8f0:	50ca      	str	r2, [r1, r3]
 800a8f2:	b10a      	cbz	r2, 800a8f8 <__lshift+0xa4>
 800a8f4:	f108 0602 	add.w	r6, r8, #2
 800a8f8:	3e01      	subs	r6, #1
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	612e      	str	r6, [r5, #16]
 800a8fe:	4621      	mov	r1, r4
 800a900:	f7ff fdd8 	bl	800a4b4 <_Bfree>
 800a904:	4628      	mov	r0, r5
 800a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a90e:	3301      	adds	r3, #1
 800a910:	e7c5      	b.n	800a89e <__lshift+0x4a>
 800a912:	3904      	subs	r1, #4
 800a914:	f853 2b04 	ldr.w	r2, [r3], #4
 800a918:	f841 2f04 	str.w	r2, [r1, #4]!
 800a91c:	459c      	cmp	ip, r3
 800a91e:	d8f9      	bhi.n	800a914 <__lshift+0xc0>
 800a920:	e7ea      	b.n	800a8f8 <__lshift+0xa4>
 800a922:	bf00      	nop
 800a924:	0800bbf5 	.word	0x0800bbf5
 800a928:	0800bc06 	.word	0x0800bc06

0800a92c <__mcmp>:
 800a92c:	b530      	push	{r4, r5, lr}
 800a92e:	6902      	ldr	r2, [r0, #16]
 800a930:	690c      	ldr	r4, [r1, #16]
 800a932:	1b12      	subs	r2, r2, r4
 800a934:	d10e      	bne.n	800a954 <__mcmp+0x28>
 800a936:	f100 0314 	add.w	r3, r0, #20
 800a93a:	3114      	adds	r1, #20
 800a93c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a940:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a944:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a948:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a94c:	42a5      	cmp	r5, r4
 800a94e:	d003      	beq.n	800a958 <__mcmp+0x2c>
 800a950:	d305      	bcc.n	800a95e <__mcmp+0x32>
 800a952:	2201      	movs	r2, #1
 800a954:	4610      	mov	r0, r2
 800a956:	bd30      	pop	{r4, r5, pc}
 800a958:	4283      	cmp	r3, r0
 800a95a:	d3f3      	bcc.n	800a944 <__mcmp+0x18>
 800a95c:	e7fa      	b.n	800a954 <__mcmp+0x28>
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295
 800a962:	e7f7      	b.n	800a954 <__mcmp+0x28>

0800a964 <__mdiff>:
 800a964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	460c      	mov	r4, r1
 800a96a:	4606      	mov	r6, r0
 800a96c:	4611      	mov	r1, r2
 800a96e:	4620      	mov	r0, r4
 800a970:	4690      	mov	r8, r2
 800a972:	f7ff ffdb 	bl	800a92c <__mcmp>
 800a976:	1e05      	subs	r5, r0, #0
 800a978:	d110      	bne.n	800a99c <__mdiff+0x38>
 800a97a:	4629      	mov	r1, r5
 800a97c:	4630      	mov	r0, r6
 800a97e:	f7ff fd59 	bl	800a434 <_Balloc>
 800a982:	b930      	cbnz	r0, 800a992 <__mdiff+0x2e>
 800a984:	4b3a      	ldr	r3, [pc, #232]	; (800aa70 <__mdiff+0x10c>)
 800a986:	4602      	mov	r2, r0
 800a988:	f240 2137 	movw	r1, #567	; 0x237
 800a98c:	4839      	ldr	r0, [pc, #228]	; (800aa74 <__mdiff+0x110>)
 800a98e:	f000 fc25 	bl	800b1dc <__assert_func>
 800a992:	2301      	movs	r3, #1
 800a994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99c:	bfa4      	itt	ge
 800a99e:	4643      	movge	r3, r8
 800a9a0:	46a0      	movge	r8, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9a8:	bfa6      	itte	ge
 800a9aa:	461c      	movge	r4, r3
 800a9ac:	2500      	movge	r5, #0
 800a9ae:	2501      	movlt	r5, #1
 800a9b0:	f7ff fd40 	bl	800a434 <_Balloc>
 800a9b4:	b920      	cbnz	r0, 800a9c0 <__mdiff+0x5c>
 800a9b6:	4b2e      	ldr	r3, [pc, #184]	; (800aa70 <__mdiff+0x10c>)
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	f240 2145 	movw	r1, #581	; 0x245
 800a9be:	e7e5      	b.n	800a98c <__mdiff+0x28>
 800a9c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9c4:	6926      	ldr	r6, [r4, #16]
 800a9c6:	60c5      	str	r5, [r0, #12]
 800a9c8:	f104 0914 	add.w	r9, r4, #20
 800a9cc:	f108 0514 	add.w	r5, r8, #20
 800a9d0:	f100 0e14 	add.w	lr, r0, #20
 800a9d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9dc:	f108 0210 	add.w	r2, r8, #16
 800a9e0:	46f2      	mov	sl, lr
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9ec:	fa11 f88b 	uxtah	r8, r1, fp
 800a9f0:	b299      	uxth	r1, r3
 800a9f2:	0c1b      	lsrs	r3, r3, #16
 800a9f4:	eba8 0801 	sub.w	r8, r8, r1
 800a9f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa00:	fa1f f888 	uxth.w	r8, r8
 800aa04:	1419      	asrs	r1, r3, #16
 800aa06:	454e      	cmp	r6, r9
 800aa08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa0c:	f84a 3b04 	str.w	r3, [sl], #4
 800aa10:	d8e8      	bhi.n	800a9e4 <__mdiff+0x80>
 800aa12:	1b33      	subs	r3, r6, r4
 800aa14:	3b15      	subs	r3, #21
 800aa16:	f023 0303 	bic.w	r3, r3, #3
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	3415      	adds	r4, #21
 800aa1e:	42a6      	cmp	r6, r4
 800aa20:	bf38      	it	cc
 800aa22:	2304      	movcc	r3, #4
 800aa24:	441d      	add	r5, r3
 800aa26:	4473      	add	r3, lr
 800aa28:	469e      	mov	lr, r3
 800aa2a:	462e      	mov	r6, r5
 800aa2c:	4566      	cmp	r6, ip
 800aa2e:	d30e      	bcc.n	800aa4e <__mdiff+0xea>
 800aa30:	f10c 0203 	add.w	r2, ip, #3
 800aa34:	1b52      	subs	r2, r2, r5
 800aa36:	f022 0203 	bic.w	r2, r2, #3
 800aa3a:	3d03      	subs	r5, #3
 800aa3c:	45ac      	cmp	ip, r5
 800aa3e:	bf38      	it	cc
 800aa40:	2200      	movcc	r2, #0
 800aa42:	4413      	add	r3, r2
 800aa44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aa48:	b17a      	cbz	r2, 800aa6a <__mdiff+0x106>
 800aa4a:	6107      	str	r7, [r0, #16]
 800aa4c:	e7a4      	b.n	800a998 <__mdiff+0x34>
 800aa4e:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa52:	fa11 f288 	uxtah	r2, r1, r8
 800aa56:	1414      	asrs	r4, r2, #16
 800aa58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa5c:	b292      	uxth	r2, r2
 800aa5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa62:	f84e 2b04 	str.w	r2, [lr], #4
 800aa66:	1421      	asrs	r1, r4, #16
 800aa68:	e7e0      	b.n	800aa2c <__mdiff+0xc8>
 800aa6a:	3f01      	subs	r7, #1
 800aa6c:	e7ea      	b.n	800aa44 <__mdiff+0xe0>
 800aa6e:	bf00      	nop
 800aa70:	0800bbf5 	.word	0x0800bbf5
 800aa74:	0800bc06 	.word	0x0800bc06

0800aa78 <__d2b>:
 800aa78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	2101      	movs	r1, #1
 800aa80:	ec59 8b10 	vmov	r8, r9, d0
 800aa84:	4616      	mov	r6, r2
 800aa86:	f7ff fcd5 	bl	800a434 <_Balloc>
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	b930      	cbnz	r0, 800aa9c <__d2b+0x24>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	4b24      	ldr	r3, [pc, #144]	; (800ab24 <__d2b+0xac>)
 800aa92:	4825      	ldr	r0, [pc, #148]	; (800ab28 <__d2b+0xb0>)
 800aa94:	f240 310f 	movw	r1, #783	; 0x30f
 800aa98:	f000 fba0 	bl	800b1dc <__assert_func>
 800aa9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aaa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaa4:	bb2d      	cbnz	r5, 800aaf2 <__d2b+0x7a>
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	f1b8 0300 	subs.w	r3, r8, #0
 800aaac:	d026      	beq.n	800aafc <__d2b+0x84>
 800aaae:	4668      	mov	r0, sp
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	f7ff fd87 	bl	800a5c4 <__lo0bits>
 800aab6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaba:	b1e8      	cbz	r0, 800aaf8 <__d2b+0x80>
 800aabc:	f1c0 0320 	rsb	r3, r0, #32
 800aac0:	fa02 f303 	lsl.w	r3, r2, r3
 800aac4:	430b      	orrs	r3, r1
 800aac6:	40c2      	lsrs	r2, r0
 800aac8:	6163      	str	r3, [r4, #20]
 800aaca:	9201      	str	r2, [sp, #4]
 800aacc:	9b01      	ldr	r3, [sp, #4]
 800aace:	61a3      	str	r3, [r4, #24]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	bf14      	ite	ne
 800aad4:	2202      	movne	r2, #2
 800aad6:	2201      	moveq	r2, #1
 800aad8:	6122      	str	r2, [r4, #16]
 800aada:	b1bd      	cbz	r5, 800ab0c <__d2b+0x94>
 800aadc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aae0:	4405      	add	r5, r0
 800aae2:	603d      	str	r5, [r7, #0]
 800aae4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aae8:	6030      	str	r0, [r6, #0]
 800aaea:	4620      	mov	r0, r4
 800aaec:	b003      	add	sp, #12
 800aaee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaf6:	e7d6      	b.n	800aaa6 <__d2b+0x2e>
 800aaf8:	6161      	str	r1, [r4, #20]
 800aafa:	e7e7      	b.n	800aacc <__d2b+0x54>
 800aafc:	a801      	add	r0, sp, #4
 800aafe:	f7ff fd61 	bl	800a5c4 <__lo0bits>
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	6163      	str	r3, [r4, #20]
 800ab06:	3020      	adds	r0, #32
 800ab08:	2201      	movs	r2, #1
 800ab0a:	e7e5      	b.n	800aad8 <__d2b+0x60>
 800ab0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab14:	6038      	str	r0, [r7, #0]
 800ab16:	6918      	ldr	r0, [r3, #16]
 800ab18:	f7ff fd34 	bl	800a584 <__hi0bits>
 800ab1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab20:	e7e2      	b.n	800aae8 <__d2b+0x70>
 800ab22:	bf00      	nop
 800ab24:	0800bbf5 	.word	0x0800bbf5
 800ab28:	0800bc06 	.word	0x0800bc06

0800ab2c <__ssputs_r>:
 800ab2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab30:	688e      	ldr	r6, [r1, #8]
 800ab32:	461f      	mov	r7, r3
 800ab34:	42be      	cmp	r6, r7
 800ab36:	680b      	ldr	r3, [r1, #0]
 800ab38:	4682      	mov	sl, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	4690      	mov	r8, r2
 800ab3e:	d82c      	bhi.n	800ab9a <__ssputs_r+0x6e>
 800ab40:	898a      	ldrh	r2, [r1, #12]
 800ab42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab46:	d026      	beq.n	800ab96 <__ssputs_r+0x6a>
 800ab48:	6965      	ldr	r5, [r4, #20]
 800ab4a:	6909      	ldr	r1, [r1, #16]
 800ab4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab50:	eba3 0901 	sub.w	r9, r3, r1
 800ab54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab58:	1c7b      	adds	r3, r7, #1
 800ab5a:	444b      	add	r3, r9
 800ab5c:	106d      	asrs	r5, r5, #1
 800ab5e:	429d      	cmp	r5, r3
 800ab60:	bf38      	it	cc
 800ab62:	461d      	movcc	r5, r3
 800ab64:	0553      	lsls	r3, r2, #21
 800ab66:	d527      	bpl.n	800abb8 <__ssputs_r+0x8c>
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7ff fbd7 	bl	800a31c <_malloc_r>
 800ab6e:	4606      	mov	r6, r0
 800ab70:	b360      	cbz	r0, 800abcc <__ssputs_r+0xa0>
 800ab72:	6921      	ldr	r1, [r4, #16]
 800ab74:	464a      	mov	r2, r9
 800ab76:	f000 fb23 	bl	800b1c0 <memcpy>
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab84:	81a3      	strh	r3, [r4, #12]
 800ab86:	6126      	str	r6, [r4, #16]
 800ab88:	6165      	str	r5, [r4, #20]
 800ab8a:	444e      	add	r6, r9
 800ab8c:	eba5 0509 	sub.w	r5, r5, r9
 800ab90:	6026      	str	r6, [r4, #0]
 800ab92:	60a5      	str	r5, [r4, #8]
 800ab94:	463e      	mov	r6, r7
 800ab96:	42be      	cmp	r6, r7
 800ab98:	d900      	bls.n	800ab9c <__ssputs_r+0x70>
 800ab9a:	463e      	mov	r6, r7
 800ab9c:	6820      	ldr	r0, [r4, #0]
 800ab9e:	4632      	mov	r2, r6
 800aba0:	4641      	mov	r1, r8
 800aba2:	f000 fac1 	bl	800b128 <memmove>
 800aba6:	68a3      	ldr	r3, [r4, #8]
 800aba8:	1b9b      	subs	r3, r3, r6
 800abaa:	60a3      	str	r3, [r4, #8]
 800abac:	6823      	ldr	r3, [r4, #0]
 800abae:	4433      	add	r3, r6
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	2000      	movs	r0, #0
 800abb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb8:	462a      	mov	r2, r5
 800abba:	f000 fb55 	bl	800b268 <_realloc_r>
 800abbe:	4606      	mov	r6, r0
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d1e0      	bne.n	800ab86 <__ssputs_r+0x5a>
 800abc4:	6921      	ldr	r1, [r4, #16]
 800abc6:	4650      	mov	r0, sl
 800abc8:	f7ff fb34 	bl	800a234 <_free_r>
 800abcc:	230c      	movs	r3, #12
 800abce:	f8ca 3000 	str.w	r3, [sl]
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	f04f 30ff 	mov.w	r0, #4294967295
 800abde:	e7e9      	b.n	800abb4 <__ssputs_r+0x88>

0800abe0 <_svfiprintf_r>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	4698      	mov	r8, r3
 800abe6:	898b      	ldrh	r3, [r1, #12]
 800abe8:	061b      	lsls	r3, r3, #24
 800abea:	b09d      	sub	sp, #116	; 0x74
 800abec:	4607      	mov	r7, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	4614      	mov	r4, r2
 800abf2:	d50e      	bpl.n	800ac12 <_svfiprintf_r+0x32>
 800abf4:	690b      	ldr	r3, [r1, #16]
 800abf6:	b963      	cbnz	r3, 800ac12 <_svfiprintf_r+0x32>
 800abf8:	2140      	movs	r1, #64	; 0x40
 800abfa:	f7ff fb8f 	bl	800a31c <_malloc_r>
 800abfe:	6028      	str	r0, [r5, #0]
 800ac00:	6128      	str	r0, [r5, #16]
 800ac02:	b920      	cbnz	r0, 800ac0e <_svfiprintf_r+0x2e>
 800ac04:	230c      	movs	r3, #12
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0c:	e0d0      	b.n	800adb0 <_svfiprintf_r+0x1d0>
 800ac0e:	2340      	movs	r3, #64	; 0x40
 800ac10:	616b      	str	r3, [r5, #20]
 800ac12:	2300      	movs	r3, #0
 800ac14:	9309      	str	r3, [sp, #36]	; 0x24
 800ac16:	2320      	movs	r3, #32
 800ac18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac20:	2330      	movs	r3, #48	; 0x30
 800ac22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800adc8 <_svfiprintf_r+0x1e8>
 800ac26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac2a:	f04f 0901 	mov.w	r9, #1
 800ac2e:	4623      	mov	r3, r4
 800ac30:	469a      	mov	sl, r3
 800ac32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac36:	b10a      	cbz	r2, 800ac3c <_svfiprintf_r+0x5c>
 800ac38:	2a25      	cmp	r2, #37	; 0x25
 800ac3a:	d1f9      	bne.n	800ac30 <_svfiprintf_r+0x50>
 800ac3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac40:	d00b      	beq.n	800ac5a <_svfiprintf_r+0x7a>
 800ac42:	465b      	mov	r3, fp
 800ac44:	4622      	mov	r2, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff ff6f 	bl	800ab2c <__ssputs_r>
 800ac4e:	3001      	adds	r0, #1
 800ac50:	f000 80a9 	beq.w	800ada6 <_svfiprintf_r+0x1c6>
 800ac54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac56:	445a      	add	r2, fp
 800ac58:	9209      	str	r2, [sp, #36]	; 0x24
 800ac5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 80a1 	beq.w	800ada6 <_svfiprintf_r+0x1c6>
 800ac64:	2300      	movs	r3, #0
 800ac66:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac6e:	f10a 0a01 	add.w	sl, sl, #1
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	9307      	str	r3, [sp, #28]
 800ac76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac7c:	4654      	mov	r4, sl
 800ac7e:	2205      	movs	r2, #5
 800ac80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac84:	4850      	ldr	r0, [pc, #320]	; (800adc8 <_svfiprintf_r+0x1e8>)
 800ac86:	f7f5 fab3 	bl	80001f0 <memchr>
 800ac8a:	9a04      	ldr	r2, [sp, #16]
 800ac8c:	b9d8      	cbnz	r0, 800acc6 <_svfiprintf_r+0xe6>
 800ac8e:	06d0      	lsls	r0, r2, #27
 800ac90:	bf44      	itt	mi
 800ac92:	2320      	movmi	r3, #32
 800ac94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac98:	0711      	lsls	r1, r2, #28
 800ac9a:	bf44      	itt	mi
 800ac9c:	232b      	movmi	r3, #43	; 0x2b
 800ac9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca2:	f89a 3000 	ldrb.w	r3, [sl]
 800aca6:	2b2a      	cmp	r3, #42	; 0x2a
 800aca8:	d015      	beq.n	800acd6 <_svfiprintf_r+0xf6>
 800acaa:	9a07      	ldr	r2, [sp, #28]
 800acac:	4654      	mov	r4, sl
 800acae:	2000      	movs	r0, #0
 800acb0:	f04f 0c0a 	mov.w	ip, #10
 800acb4:	4621      	mov	r1, r4
 800acb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acba:	3b30      	subs	r3, #48	; 0x30
 800acbc:	2b09      	cmp	r3, #9
 800acbe:	d94d      	bls.n	800ad5c <_svfiprintf_r+0x17c>
 800acc0:	b1b0      	cbz	r0, 800acf0 <_svfiprintf_r+0x110>
 800acc2:	9207      	str	r2, [sp, #28]
 800acc4:	e014      	b.n	800acf0 <_svfiprintf_r+0x110>
 800acc6:	eba0 0308 	sub.w	r3, r0, r8
 800acca:	fa09 f303 	lsl.w	r3, r9, r3
 800acce:	4313      	orrs	r3, r2
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	46a2      	mov	sl, r4
 800acd4:	e7d2      	b.n	800ac7c <_svfiprintf_r+0x9c>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	1d19      	adds	r1, r3, #4
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	9103      	str	r1, [sp, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	bfbb      	ittet	lt
 800ace2:	425b      	neglt	r3, r3
 800ace4:	f042 0202 	orrlt.w	r2, r2, #2
 800ace8:	9307      	strge	r3, [sp, #28]
 800acea:	9307      	strlt	r3, [sp, #28]
 800acec:	bfb8      	it	lt
 800acee:	9204      	strlt	r2, [sp, #16]
 800acf0:	7823      	ldrb	r3, [r4, #0]
 800acf2:	2b2e      	cmp	r3, #46	; 0x2e
 800acf4:	d10c      	bne.n	800ad10 <_svfiprintf_r+0x130>
 800acf6:	7863      	ldrb	r3, [r4, #1]
 800acf8:	2b2a      	cmp	r3, #42	; 0x2a
 800acfa:	d134      	bne.n	800ad66 <_svfiprintf_r+0x186>
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	9203      	str	r2, [sp, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bfb8      	it	lt
 800ad08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad0c:	3402      	adds	r4, #2
 800ad0e:	9305      	str	r3, [sp, #20]
 800ad10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800add8 <_svfiprintf_r+0x1f8>
 800ad14:	7821      	ldrb	r1, [r4, #0]
 800ad16:	2203      	movs	r2, #3
 800ad18:	4650      	mov	r0, sl
 800ad1a:	f7f5 fa69 	bl	80001f0 <memchr>
 800ad1e:	b138      	cbz	r0, 800ad30 <_svfiprintf_r+0x150>
 800ad20:	9b04      	ldr	r3, [sp, #16]
 800ad22:	eba0 000a 	sub.w	r0, r0, sl
 800ad26:	2240      	movs	r2, #64	; 0x40
 800ad28:	4082      	lsls	r2, r0
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	3401      	adds	r4, #1
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad34:	4825      	ldr	r0, [pc, #148]	; (800adcc <_svfiprintf_r+0x1ec>)
 800ad36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad3a:	2206      	movs	r2, #6
 800ad3c:	f7f5 fa58 	bl	80001f0 <memchr>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d038      	beq.n	800adb6 <_svfiprintf_r+0x1d6>
 800ad44:	4b22      	ldr	r3, [pc, #136]	; (800add0 <_svfiprintf_r+0x1f0>)
 800ad46:	bb1b      	cbnz	r3, 800ad90 <_svfiprintf_r+0x1b0>
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	3307      	adds	r3, #7
 800ad4c:	f023 0307 	bic.w	r3, r3, #7
 800ad50:	3308      	adds	r3, #8
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad56:	4433      	add	r3, r6
 800ad58:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5a:	e768      	b.n	800ac2e <_svfiprintf_r+0x4e>
 800ad5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad60:	460c      	mov	r4, r1
 800ad62:	2001      	movs	r0, #1
 800ad64:	e7a6      	b.n	800acb4 <_svfiprintf_r+0xd4>
 800ad66:	2300      	movs	r3, #0
 800ad68:	3401      	adds	r4, #1
 800ad6a:	9305      	str	r3, [sp, #20]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	f04f 0c0a 	mov.w	ip, #10
 800ad72:	4620      	mov	r0, r4
 800ad74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad78:	3a30      	subs	r2, #48	; 0x30
 800ad7a:	2a09      	cmp	r2, #9
 800ad7c:	d903      	bls.n	800ad86 <_svfiprintf_r+0x1a6>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0c6      	beq.n	800ad10 <_svfiprintf_r+0x130>
 800ad82:	9105      	str	r1, [sp, #20]
 800ad84:	e7c4      	b.n	800ad10 <_svfiprintf_r+0x130>
 800ad86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e7f0      	b.n	800ad72 <_svfiprintf_r+0x192>
 800ad90:	ab03      	add	r3, sp, #12
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	462a      	mov	r2, r5
 800ad96:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <_svfiprintf_r+0x1f4>)
 800ad98:	a904      	add	r1, sp, #16
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f7fd fbe0 	bl	8008560 <_printf_float>
 800ada0:	1c42      	adds	r2, r0, #1
 800ada2:	4606      	mov	r6, r0
 800ada4:	d1d6      	bne.n	800ad54 <_svfiprintf_r+0x174>
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	065b      	lsls	r3, r3, #25
 800adaa:	f53f af2d 	bmi.w	800ac08 <_svfiprintf_r+0x28>
 800adae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adb0:	b01d      	add	sp, #116	; 0x74
 800adb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb6:	ab03      	add	r3, sp, #12
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	462a      	mov	r2, r5
 800adbc:	4b05      	ldr	r3, [pc, #20]	; (800add4 <_svfiprintf_r+0x1f4>)
 800adbe:	a904      	add	r1, sp, #16
 800adc0:	4638      	mov	r0, r7
 800adc2:	f7fd fe71 	bl	8008aa8 <_printf_i>
 800adc6:	e7eb      	b.n	800ada0 <_svfiprintf_r+0x1c0>
 800adc8:	0800bd5c 	.word	0x0800bd5c
 800adcc:	0800bd66 	.word	0x0800bd66
 800add0:	08008561 	.word	0x08008561
 800add4:	0800ab2d 	.word	0x0800ab2d
 800add8:	0800bd62 	.word	0x0800bd62

0800addc <__sfputc_r>:
 800addc:	6893      	ldr	r3, [r2, #8]
 800adde:	3b01      	subs	r3, #1
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	b410      	push	{r4}
 800ade4:	6093      	str	r3, [r2, #8]
 800ade6:	da08      	bge.n	800adfa <__sfputc_r+0x1e>
 800ade8:	6994      	ldr	r4, [r2, #24]
 800adea:	42a3      	cmp	r3, r4
 800adec:	db01      	blt.n	800adf2 <__sfputc_r+0x16>
 800adee:	290a      	cmp	r1, #10
 800adf0:	d103      	bne.n	800adfa <__sfputc_r+0x1e>
 800adf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf6:	f7fe ba7c 	b.w	80092f2 <__swbuf_r>
 800adfa:	6813      	ldr	r3, [r2, #0]
 800adfc:	1c58      	adds	r0, r3, #1
 800adfe:	6010      	str	r0, [r2, #0]
 800ae00:	7019      	strb	r1, [r3, #0]
 800ae02:	4608      	mov	r0, r1
 800ae04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <__sfputs_r>:
 800ae0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	460f      	mov	r7, r1
 800ae10:	4614      	mov	r4, r2
 800ae12:	18d5      	adds	r5, r2, r3
 800ae14:	42ac      	cmp	r4, r5
 800ae16:	d101      	bne.n	800ae1c <__sfputs_r+0x12>
 800ae18:	2000      	movs	r0, #0
 800ae1a:	e007      	b.n	800ae2c <__sfputs_r+0x22>
 800ae1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae20:	463a      	mov	r2, r7
 800ae22:	4630      	mov	r0, r6
 800ae24:	f7ff ffda 	bl	800addc <__sfputc_r>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d1f3      	bne.n	800ae14 <__sfputs_r+0xa>
 800ae2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae30 <_vfiprintf_r>:
 800ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae34:	460d      	mov	r5, r1
 800ae36:	b09d      	sub	sp, #116	; 0x74
 800ae38:	4614      	mov	r4, r2
 800ae3a:	4698      	mov	r8, r3
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	b118      	cbz	r0, 800ae48 <_vfiprintf_r+0x18>
 800ae40:	6a03      	ldr	r3, [r0, #32]
 800ae42:	b90b      	cbnz	r3, 800ae48 <_vfiprintf_r+0x18>
 800ae44:	f7fe f8a0 	bl	8008f88 <__sinit>
 800ae48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae4a:	07d9      	lsls	r1, r3, #31
 800ae4c:	d405      	bmi.n	800ae5a <_vfiprintf_r+0x2a>
 800ae4e:	89ab      	ldrh	r3, [r5, #12]
 800ae50:	059a      	lsls	r2, r3, #22
 800ae52:	d402      	bmi.n	800ae5a <_vfiprintf_r+0x2a>
 800ae54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae56:	f7fe fb70 	bl	800953a <__retarget_lock_acquire_recursive>
 800ae5a:	89ab      	ldrh	r3, [r5, #12]
 800ae5c:	071b      	lsls	r3, r3, #28
 800ae5e:	d501      	bpl.n	800ae64 <_vfiprintf_r+0x34>
 800ae60:	692b      	ldr	r3, [r5, #16]
 800ae62:	b99b      	cbnz	r3, 800ae8c <_vfiprintf_r+0x5c>
 800ae64:	4629      	mov	r1, r5
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7fe fa80 	bl	800936c <__swsetup_r>
 800ae6c:	b170      	cbz	r0, 800ae8c <_vfiprintf_r+0x5c>
 800ae6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae70:	07dc      	lsls	r4, r3, #31
 800ae72:	d504      	bpl.n	800ae7e <_vfiprintf_r+0x4e>
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	b01d      	add	sp, #116	; 0x74
 800ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7e:	89ab      	ldrh	r3, [r5, #12]
 800ae80:	0598      	lsls	r0, r3, #22
 800ae82:	d4f7      	bmi.n	800ae74 <_vfiprintf_r+0x44>
 800ae84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae86:	f7fe fb59 	bl	800953c <__retarget_lock_release_recursive>
 800ae8a:	e7f3      	b.n	800ae74 <_vfiprintf_r+0x44>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae90:	2320      	movs	r3, #32
 800ae92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae9a:	2330      	movs	r3, #48	; 0x30
 800ae9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b050 <_vfiprintf_r+0x220>
 800aea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aea4:	f04f 0901 	mov.w	r9, #1
 800aea8:	4623      	mov	r3, r4
 800aeaa:	469a      	mov	sl, r3
 800aeac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeb0:	b10a      	cbz	r2, 800aeb6 <_vfiprintf_r+0x86>
 800aeb2:	2a25      	cmp	r2, #37	; 0x25
 800aeb4:	d1f9      	bne.n	800aeaa <_vfiprintf_r+0x7a>
 800aeb6:	ebba 0b04 	subs.w	fp, sl, r4
 800aeba:	d00b      	beq.n	800aed4 <_vfiprintf_r+0xa4>
 800aebc:	465b      	mov	r3, fp
 800aebe:	4622      	mov	r2, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	4630      	mov	r0, r6
 800aec4:	f7ff ffa1 	bl	800ae0a <__sfputs_r>
 800aec8:	3001      	adds	r0, #1
 800aeca:	f000 80a9 	beq.w	800b020 <_vfiprintf_r+0x1f0>
 800aece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed0:	445a      	add	r2, fp
 800aed2:	9209      	str	r2, [sp, #36]	; 0x24
 800aed4:	f89a 3000 	ldrb.w	r3, [sl]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 80a1 	beq.w	800b020 <_vfiprintf_r+0x1f0>
 800aede:	2300      	movs	r3, #0
 800aee0:	f04f 32ff 	mov.w	r2, #4294967295
 800aee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aee8:	f10a 0a01 	add.w	sl, sl, #1
 800aeec:	9304      	str	r3, [sp, #16]
 800aeee:	9307      	str	r3, [sp, #28]
 800aef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aef4:	931a      	str	r3, [sp, #104]	; 0x68
 800aef6:	4654      	mov	r4, sl
 800aef8:	2205      	movs	r2, #5
 800aefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefe:	4854      	ldr	r0, [pc, #336]	; (800b050 <_vfiprintf_r+0x220>)
 800af00:	f7f5 f976 	bl	80001f0 <memchr>
 800af04:	9a04      	ldr	r2, [sp, #16]
 800af06:	b9d8      	cbnz	r0, 800af40 <_vfiprintf_r+0x110>
 800af08:	06d1      	lsls	r1, r2, #27
 800af0a:	bf44      	itt	mi
 800af0c:	2320      	movmi	r3, #32
 800af0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af12:	0713      	lsls	r3, r2, #28
 800af14:	bf44      	itt	mi
 800af16:	232b      	movmi	r3, #43	; 0x2b
 800af18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af1c:	f89a 3000 	ldrb.w	r3, [sl]
 800af20:	2b2a      	cmp	r3, #42	; 0x2a
 800af22:	d015      	beq.n	800af50 <_vfiprintf_r+0x120>
 800af24:	9a07      	ldr	r2, [sp, #28]
 800af26:	4654      	mov	r4, sl
 800af28:	2000      	movs	r0, #0
 800af2a:	f04f 0c0a 	mov.w	ip, #10
 800af2e:	4621      	mov	r1, r4
 800af30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af34:	3b30      	subs	r3, #48	; 0x30
 800af36:	2b09      	cmp	r3, #9
 800af38:	d94d      	bls.n	800afd6 <_vfiprintf_r+0x1a6>
 800af3a:	b1b0      	cbz	r0, 800af6a <_vfiprintf_r+0x13a>
 800af3c:	9207      	str	r2, [sp, #28]
 800af3e:	e014      	b.n	800af6a <_vfiprintf_r+0x13a>
 800af40:	eba0 0308 	sub.w	r3, r0, r8
 800af44:	fa09 f303 	lsl.w	r3, r9, r3
 800af48:	4313      	orrs	r3, r2
 800af4a:	9304      	str	r3, [sp, #16]
 800af4c:	46a2      	mov	sl, r4
 800af4e:	e7d2      	b.n	800aef6 <_vfiprintf_r+0xc6>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	1d19      	adds	r1, r3, #4
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	9103      	str	r1, [sp, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bfbb      	ittet	lt
 800af5c:	425b      	neglt	r3, r3
 800af5e:	f042 0202 	orrlt.w	r2, r2, #2
 800af62:	9307      	strge	r3, [sp, #28]
 800af64:	9307      	strlt	r3, [sp, #28]
 800af66:	bfb8      	it	lt
 800af68:	9204      	strlt	r2, [sp, #16]
 800af6a:	7823      	ldrb	r3, [r4, #0]
 800af6c:	2b2e      	cmp	r3, #46	; 0x2e
 800af6e:	d10c      	bne.n	800af8a <_vfiprintf_r+0x15a>
 800af70:	7863      	ldrb	r3, [r4, #1]
 800af72:	2b2a      	cmp	r3, #42	; 0x2a
 800af74:	d134      	bne.n	800afe0 <_vfiprintf_r+0x1b0>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	1d1a      	adds	r2, r3, #4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	9203      	str	r2, [sp, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfb8      	it	lt
 800af82:	f04f 33ff 	movlt.w	r3, #4294967295
 800af86:	3402      	adds	r4, #2
 800af88:	9305      	str	r3, [sp, #20]
 800af8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b060 <_vfiprintf_r+0x230>
 800af8e:	7821      	ldrb	r1, [r4, #0]
 800af90:	2203      	movs	r2, #3
 800af92:	4650      	mov	r0, sl
 800af94:	f7f5 f92c 	bl	80001f0 <memchr>
 800af98:	b138      	cbz	r0, 800afaa <_vfiprintf_r+0x17a>
 800af9a:	9b04      	ldr	r3, [sp, #16]
 800af9c:	eba0 000a 	sub.w	r0, r0, sl
 800afa0:	2240      	movs	r2, #64	; 0x40
 800afa2:	4082      	lsls	r2, r0
 800afa4:	4313      	orrs	r3, r2
 800afa6:	3401      	adds	r4, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afae:	4829      	ldr	r0, [pc, #164]	; (800b054 <_vfiprintf_r+0x224>)
 800afb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afb4:	2206      	movs	r2, #6
 800afb6:	f7f5 f91b 	bl	80001f0 <memchr>
 800afba:	2800      	cmp	r0, #0
 800afbc:	d03f      	beq.n	800b03e <_vfiprintf_r+0x20e>
 800afbe:	4b26      	ldr	r3, [pc, #152]	; (800b058 <_vfiprintf_r+0x228>)
 800afc0:	bb1b      	cbnz	r3, 800b00a <_vfiprintf_r+0x1da>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	3307      	adds	r3, #7
 800afc6:	f023 0307 	bic.w	r3, r3, #7
 800afca:	3308      	adds	r3, #8
 800afcc:	9303      	str	r3, [sp, #12]
 800afce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd0:	443b      	add	r3, r7
 800afd2:	9309      	str	r3, [sp, #36]	; 0x24
 800afd4:	e768      	b.n	800aea8 <_vfiprintf_r+0x78>
 800afd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800afda:	460c      	mov	r4, r1
 800afdc:	2001      	movs	r0, #1
 800afde:	e7a6      	b.n	800af2e <_vfiprintf_r+0xfe>
 800afe0:	2300      	movs	r3, #0
 800afe2:	3401      	adds	r4, #1
 800afe4:	9305      	str	r3, [sp, #20]
 800afe6:	4619      	mov	r1, r3
 800afe8:	f04f 0c0a 	mov.w	ip, #10
 800afec:	4620      	mov	r0, r4
 800afee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff2:	3a30      	subs	r2, #48	; 0x30
 800aff4:	2a09      	cmp	r2, #9
 800aff6:	d903      	bls.n	800b000 <_vfiprintf_r+0x1d0>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0c6      	beq.n	800af8a <_vfiprintf_r+0x15a>
 800affc:	9105      	str	r1, [sp, #20]
 800affe:	e7c4      	b.n	800af8a <_vfiprintf_r+0x15a>
 800b000:	fb0c 2101 	mla	r1, ip, r1, r2
 800b004:	4604      	mov	r4, r0
 800b006:	2301      	movs	r3, #1
 800b008:	e7f0      	b.n	800afec <_vfiprintf_r+0x1bc>
 800b00a:	ab03      	add	r3, sp, #12
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	462a      	mov	r2, r5
 800b010:	4b12      	ldr	r3, [pc, #72]	; (800b05c <_vfiprintf_r+0x22c>)
 800b012:	a904      	add	r1, sp, #16
 800b014:	4630      	mov	r0, r6
 800b016:	f7fd faa3 	bl	8008560 <_printf_float>
 800b01a:	4607      	mov	r7, r0
 800b01c:	1c78      	adds	r0, r7, #1
 800b01e:	d1d6      	bne.n	800afce <_vfiprintf_r+0x19e>
 800b020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b022:	07d9      	lsls	r1, r3, #31
 800b024:	d405      	bmi.n	800b032 <_vfiprintf_r+0x202>
 800b026:	89ab      	ldrh	r3, [r5, #12]
 800b028:	059a      	lsls	r2, r3, #22
 800b02a:	d402      	bmi.n	800b032 <_vfiprintf_r+0x202>
 800b02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b02e:	f7fe fa85 	bl	800953c <__retarget_lock_release_recursive>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	065b      	lsls	r3, r3, #25
 800b036:	f53f af1d 	bmi.w	800ae74 <_vfiprintf_r+0x44>
 800b03a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b03c:	e71c      	b.n	800ae78 <_vfiprintf_r+0x48>
 800b03e:	ab03      	add	r3, sp, #12
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	462a      	mov	r2, r5
 800b044:	4b05      	ldr	r3, [pc, #20]	; (800b05c <_vfiprintf_r+0x22c>)
 800b046:	a904      	add	r1, sp, #16
 800b048:	4630      	mov	r0, r6
 800b04a:	f7fd fd2d 	bl	8008aa8 <_printf_i>
 800b04e:	e7e4      	b.n	800b01a <_vfiprintf_r+0x1ea>
 800b050:	0800bd5c 	.word	0x0800bd5c
 800b054:	0800bd66 	.word	0x0800bd66
 800b058:	08008561 	.word	0x08008561
 800b05c:	0800ae0b 	.word	0x0800ae0b
 800b060:	0800bd62 	.word	0x0800bd62

0800b064 <__swhatbuf_r>:
 800b064:	b570      	push	{r4, r5, r6, lr}
 800b066:	460c      	mov	r4, r1
 800b068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06c:	2900      	cmp	r1, #0
 800b06e:	b096      	sub	sp, #88	; 0x58
 800b070:	4615      	mov	r5, r2
 800b072:	461e      	mov	r6, r3
 800b074:	da0d      	bge.n	800b092 <__swhatbuf_r+0x2e>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b07c:	f04f 0100 	mov.w	r1, #0
 800b080:	bf0c      	ite	eq
 800b082:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b086:	2340      	movne	r3, #64	; 0x40
 800b088:	2000      	movs	r0, #0
 800b08a:	6031      	str	r1, [r6, #0]
 800b08c:	602b      	str	r3, [r5, #0]
 800b08e:	b016      	add	sp, #88	; 0x58
 800b090:	bd70      	pop	{r4, r5, r6, pc}
 800b092:	466a      	mov	r2, sp
 800b094:	f000 f862 	bl	800b15c <_fstat_r>
 800b098:	2800      	cmp	r0, #0
 800b09a:	dbec      	blt.n	800b076 <__swhatbuf_r+0x12>
 800b09c:	9901      	ldr	r1, [sp, #4]
 800b09e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0a6:	4259      	negs	r1, r3
 800b0a8:	4159      	adcs	r1, r3
 800b0aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ae:	e7eb      	b.n	800b088 <__swhatbuf_r+0x24>

0800b0b0 <__smakebuf_r>:
 800b0b0:	898b      	ldrh	r3, [r1, #12]
 800b0b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0b4:	079d      	lsls	r5, r3, #30
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	d507      	bpl.n	800b0cc <__smakebuf_r+0x1c>
 800b0bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	6123      	str	r3, [r4, #16]
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	6163      	str	r3, [r4, #20]
 800b0c8:	b002      	add	sp, #8
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	ab01      	add	r3, sp, #4
 800b0ce:	466a      	mov	r2, sp
 800b0d0:	f7ff ffc8 	bl	800b064 <__swhatbuf_r>
 800b0d4:	9900      	ldr	r1, [sp, #0]
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7ff f91f 	bl	800a31c <_malloc_r>
 800b0de:	b948      	cbnz	r0, 800b0f4 <__smakebuf_r+0x44>
 800b0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e4:	059a      	lsls	r2, r3, #22
 800b0e6:	d4ef      	bmi.n	800b0c8 <__smakebuf_r+0x18>
 800b0e8:	f023 0303 	bic.w	r3, r3, #3
 800b0ec:	f043 0302 	orr.w	r3, r3, #2
 800b0f0:	81a3      	strh	r3, [r4, #12]
 800b0f2:	e7e3      	b.n	800b0bc <__smakebuf_r+0xc>
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	6020      	str	r0, [r4, #0]
 800b0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0fc:	81a3      	strh	r3, [r4, #12]
 800b0fe:	9b00      	ldr	r3, [sp, #0]
 800b100:	6163      	str	r3, [r4, #20]
 800b102:	9b01      	ldr	r3, [sp, #4]
 800b104:	6120      	str	r0, [r4, #16]
 800b106:	b15b      	cbz	r3, 800b120 <__smakebuf_r+0x70>
 800b108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b10c:	4630      	mov	r0, r6
 800b10e:	f000 f837 	bl	800b180 <_isatty_r>
 800b112:	b128      	cbz	r0, 800b120 <__smakebuf_r+0x70>
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	f023 0303 	bic.w	r3, r3, #3
 800b11a:	f043 0301 	orr.w	r3, r3, #1
 800b11e:	81a3      	strh	r3, [r4, #12]
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	431d      	orrs	r5, r3
 800b124:	81a5      	strh	r5, [r4, #12]
 800b126:	e7cf      	b.n	800b0c8 <__smakebuf_r+0x18>

0800b128 <memmove>:
 800b128:	4288      	cmp	r0, r1
 800b12a:	b510      	push	{r4, lr}
 800b12c:	eb01 0402 	add.w	r4, r1, r2
 800b130:	d902      	bls.n	800b138 <memmove+0x10>
 800b132:	4284      	cmp	r4, r0
 800b134:	4623      	mov	r3, r4
 800b136:	d807      	bhi.n	800b148 <memmove+0x20>
 800b138:	1e43      	subs	r3, r0, #1
 800b13a:	42a1      	cmp	r1, r4
 800b13c:	d008      	beq.n	800b150 <memmove+0x28>
 800b13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b142:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b146:	e7f8      	b.n	800b13a <memmove+0x12>
 800b148:	4402      	add	r2, r0
 800b14a:	4601      	mov	r1, r0
 800b14c:	428a      	cmp	r2, r1
 800b14e:	d100      	bne.n	800b152 <memmove+0x2a>
 800b150:	bd10      	pop	{r4, pc}
 800b152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b15a:	e7f7      	b.n	800b14c <memmove+0x24>

0800b15c <_fstat_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d07      	ldr	r5, [pc, #28]	; (800b17c <_fstat_r+0x20>)
 800b160:	2300      	movs	r3, #0
 800b162:	4604      	mov	r4, r0
 800b164:	4608      	mov	r0, r1
 800b166:	4611      	mov	r1, r2
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	f7f7 fa34 	bl	80025d6 <_fstat>
 800b16e:	1c43      	adds	r3, r0, #1
 800b170:	d102      	bne.n	800b178 <_fstat_r+0x1c>
 800b172:	682b      	ldr	r3, [r5, #0]
 800b174:	b103      	cbz	r3, 800b178 <_fstat_r+0x1c>
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	bd38      	pop	{r3, r4, r5, pc}
 800b17a:	bf00      	nop
 800b17c:	20000d8c 	.word	0x20000d8c

0800b180 <_isatty_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d06      	ldr	r5, [pc, #24]	; (800b19c <_isatty_r+0x1c>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	602b      	str	r3, [r5, #0]
 800b18c:	f7f7 fa33 	bl	80025f6 <_isatty>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_isatty_r+0x1a>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_isatty_r+0x1a>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	20000d8c 	.word	0x20000d8c

0800b1a0 <_sbrk_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d06      	ldr	r5, [pc, #24]	; (800b1bc <_sbrk_r+0x1c>)
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	4608      	mov	r0, r1
 800b1aa:	602b      	str	r3, [r5, #0]
 800b1ac:	f7f7 fa3c 	bl	8002628 <_sbrk>
 800b1b0:	1c43      	adds	r3, r0, #1
 800b1b2:	d102      	bne.n	800b1ba <_sbrk_r+0x1a>
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	b103      	cbz	r3, 800b1ba <_sbrk_r+0x1a>
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	20000d8c 	.word	0x20000d8c

0800b1c0 <memcpy>:
 800b1c0:	440a      	add	r2, r1
 800b1c2:	4291      	cmp	r1, r2
 800b1c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1c8:	d100      	bne.n	800b1cc <memcpy+0xc>
 800b1ca:	4770      	bx	lr
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1d6:	4291      	cmp	r1, r2
 800b1d8:	d1f9      	bne.n	800b1ce <memcpy+0xe>
 800b1da:	bd10      	pop	{r4, pc}

0800b1dc <__assert_func>:
 800b1dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1de:	4614      	mov	r4, r2
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4b09      	ldr	r3, [pc, #36]	; (800b208 <__assert_func+0x2c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	68d8      	ldr	r0, [r3, #12]
 800b1ea:	b14c      	cbz	r4, 800b200 <__assert_func+0x24>
 800b1ec:	4b07      	ldr	r3, [pc, #28]	; (800b20c <__assert_func+0x30>)
 800b1ee:	9100      	str	r1, [sp, #0]
 800b1f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1f4:	4906      	ldr	r1, [pc, #24]	; (800b210 <__assert_func+0x34>)
 800b1f6:	462b      	mov	r3, r5
 800b1f8:	f000 f872 	bl	800b2e0 <fiprintf>
 800b1fc:	f000 f882 	bl	800b304 <abort>
 800b200:	4b04      	ldr	r3, [pc, #16]	; (800b214 <__assert_func+0x38>)
 800b202:	461c      	mov	r4, r3
 800b204:	e7f3      	b.n	800b1ee <__assert_func+0x12>
 800b206:	bf00      	nop
 800b208:	200007c4 	.word	0x200007c4
 800b20c:	0800bd77 	.word	0x0800bd77
 800b210:	0800bd84 	.word	0x0800bd84
 800b214:	0800bdb2 	.word	0x0800bdb2

0800b218 <_calloc_r>:
 800b218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b21a:	fba1 2402 	umull	r2, r4, r1, r2
 800b21e:	b94c      	cbnz	r4, 800b234 <_calloc_r+0x1c>
 800b220:	4611      	mov	r1, r2
 800b222:	9201      	str	r2, [sp, #4]
 800b224:	f7ff f87a 	bl	800a31c <_malloc_r>
 800b228:	9a01      	ldr	r2, [sp, #4]
 800b22a:	4605      	mov	r5, r0
 800b22c:	b930      	cbnz	r0, 800b23c <_calloc_r+0x24>
 800b22e:	4628      	mov	r0, r5
 800b230:	b003      	add	sp, #12
 800b232:	bd30      	pop	{r4, r5, pc}
 800b234:	220c      	movs	r2, #12
 800b236:	6002      	str	r2, [r0, #0]
 800b238:	2500      	movs	r5, #0
 800b23a:	e7f8      	b.n	800b22e <_calloc_r+0x16>
 800b23c:	4621      	mov	r1, r4
 800b23e:	f7fe f8ed 	bl	800941c <memset>
 800b242:	e7f4      	b.n	800b22e <_calloc_r+0x16>

0800b244 <__ascii_mbtowc>:
 800b244:	b082      	sub	sp, #8
 800b246:	b901      	cbnz	r1, 800b24a <__ascii_mbtowc+0x6>
 800b248:	a901      	add	r1, sp, #4
 800b24a:	b142      	cbz	r2, 800b25e <__ascii_mbtowc+0x1a>
 800b24c:	b14b      	cbz	r3, 800b262 <__ascii_mbtowc+0x1e>
 800b24e:	7813      	ldrb	r3, [r2, #0]
 800b250:	600b      	str	r3, [r1, #0]
 800b252:	7812      	ldrb	r2, [r2, #0]
 800b254:	1e10      	subs	r0, r2, #0
 800b256:	bf18      	it	ne
 800b258:	2001      	movne	r0, #1
 800b25a:	b002      	add	sp, #8
 800b25c:	4770      	bx	lr
 800b25e:	4610      	mov	r0, r2
 800b260:	e7fb      	b.n	800b25a <__ascii_mbtowc+0x16>
 800b262:	f06f 0001 	mvn.w	r0, #1
 800b266:	e7f8      	b.n	800b25a <__ascii_mbtowc+0x16>

0800b268 <_realloc_r>:
 800b268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b26c:	4680      	mov	r8, r0
 800b26e:	4614      	mov	r4, r2
 800b270:	460e      	mov	r6, r1
 800b272:	b921      	cbnz	r1, 800b27e <_realloc_r+0x16>
 800b274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b278:	4611      	mov	r1, r2
 800b27a:	f7ff b84f 	b.w	800a31c <_malloc_r>
 800b27e:	b92a      	cbnz	r2, 800b28c <_realloc_r+0x24>
 800b280:	f7fe ffd8 	bl	800a234 <_free_r>
 800b284:	4625      	mov	r5, r4
 800b286:	4628      	mov	r0, r5
 800b288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b28c:	f000 f841 	bl	800b312 <_malloc_usable_size_r>
 800b290:	4284      	cmp	r4, r0
 800b292:	4607      	mov	r7, r0
 800b294:	d802      	bhi.n	800b29c <_realloc_r+0x34>
 800b296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b29a:	d812      	bhi.n	800b2c2 <_realloc_r+0x5a>
 800b29c:	4621      	mov	r1, r4
 800b29e:	4640      	mov	r0, r8
 800b2a0:	f7ff f83c 	bl	800a31c <_malloc_r>
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d0ed      	beq.n	800b286 <_realloc_r+0x1e>
 800b2aa:	42bc      	cmp	r4, r7
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	bf28      	it	cs
 800b2b2:	463a      	movcs	r2, r7
 800b2b4:	f7ff ff84 	bl	800b1c0 <memcpy>
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	f7fe ffba 	bl	800a234 <_free_r>
 800b2c0:	e7e1      	b.n	800b286 <_realloc_r+0x1e>
 800b2c2:	4635      	mov	r5, r6
 800b2c4:	e7df      	b.n	800b286 <_realloc_r+0x1e>

0800b2c6 <__ascii_wctomb>:
 800b2c6:	b149      	cbz	r1, 800b2dc <__ascii_wctomb+0x16>
 800b2c8:	2aff      	cmp	r2, #255	; 0xff
 800b2ca:	bf85      	ittet	hi
 800b2cc:	238a      	movhi	r3, #138	; 0x8a
 800b2ce:	6003      	strhi	r3, [r0, #0]
 800b2d0:	700a      	strbls	r2, [r1, #0]
 800b2d2:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2d6:	bf98      	it	ls
 800b2d8:	2001      	movls	r0, #1
 800b2da:	4770      	bx	lr
 800b2dc:	4608      	mov	r0, r1
 800b2de:	4770      	bx	lr

0800b2e0 <fiprintf>:
 800b2e0:	b40e      	push	{r1, r2, r3}
 800b2e2:	b503      	push	{r0, r1, lr}
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	ab03      	add	r3, sp, #12
 800b2e8:	4805      	ldr	r0, [pc, #20]	; (800b300 <fiprintf+0x20>)
 800b2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ee:	6800      	ldr	r0, [r0, #0]
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	f7ff fd9d 	bl	800ae30 <_vfiprintf_r>
 800b2f6:	b002      	add	sp, #8
 800b2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2fc:	b003      	add	sp, #12
 800b2fe:	4770      	bx	lr
 800b300:	200007c4 	.word	0x200007c4

0800b304 <abort>:
 800b304:	b508      	push	{r3, lr}
 800b306:	2006      	movs	r0, #6
 800b308:	f000 f834 	bl	800b374 <raise>
 800b30c:	2001      	movs	r0, #1
 800b30e:	f7f7 f92f 	bl	8002570 <_exit>

0800b312 <_malloc_usable_size_r>:
 800b312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b316:	1f18      	subs	r0, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bfbc      	itt	lt
 800b31c:	580b      	ldrlt	r3, [r1, r0]
 800b31e:	18c0      	addlt	r0, r0, r3
 800b320:	4770      	bx	lr

0800b322 <_raise_r>:
 800b322:	291f      	cmp	r1, #31
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4604      	mov	r4, r0
 800b328:	460d      	mov	r5, r1
 800b32a:	d904      	bls.n	800b336 <_raise_r+0x14>
 800b32c:	2316      	movs	r3, #22
 800b32e:	6003      	str	r3, [r0, #0]
 800b330:	f04f 30ff 	mov.w	r0, #4294967295
 800b334:	bd38      	pop	{r3, r4, r5, pc}
 800b336:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b338:	b112      	cbz	r2, 800b340 <_raise_r+0x1e>
 800b33a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b33e:	b94b      	cbnz	r3, 800b354 <_raise_r+0x32>
 800b340:	4620      	mov	r0, r4
 800b342:	f000 f831 	bl	800b3a8 <_getpid_r>
 800b346:	462a      	mov	r2, r5
 800b348:	4601      	mov	r1, r0
 800b34a:	4620      	mov	r0, r4
 800b34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b350:	f000 b818 	b.w	800b384 <_kill_r>
 800b354:	2b01      	cmp	r3, #1
 800b356:	d00a      	beq.n	800b36e <_raise_r+0x4c>
 800b358:	1c59      	adds	r1, r3, #1
 800b35a:	d103      	bne.n	800b364 <_raise_r+0x42>
 800b35c:	2316      	movs	r3, #22
 800b35e:	6003      	str	r3, [r0, #0]
 800b360:	2001      	movs	r0, #1
 800b362:	e7e7      	b.n	800b334 <_raise_r+0x12>
 800b364:	2400      	movs	r4, #0
 800b366:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b36a:	4628      	mov	r0, r5
 800b36c:	4798      	blx	r3
 800b36e:	2000      	movs	r0, #0
 800b370:	e7e0      	b.n	800b334 <_raise_r+0x12>
	...

0800b374 <raise>:
 800b374:	4b02      	ldr	r3, [pc, #8]	; (800b380 <raise+0xc>)
 800b376:	4601      	mov	r1, r0
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f7ff bfd2 	b.w	800b322 <_raise_r>
 800b37e:	bf00      	nop
 800b380:	200007c4 	.word	0x200007c4

0800b384 <_kill_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4d07      	ldr	r5, [pc, #28]	; (800b3a4 <_kill_r+0x20>)
 800b388:	2300      	movs	r3, #0
 800b38a:	4604      	mov	r4, r0
 800b38c:	4608      	mov	r0, r1
 800b38e:	4611      	mov	r1, r2
 800b390:	602b      	str	r3, [r5, #0]
 800b392:	f7f7 f8dd 	bl	8002550 <_kill>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	d102      	bne.n	800b3a0 <_kill_r+0x1c>
 800b39a:	682b      	ldr	r3, [r5, #0]
 800b39c:	b103      	cbz	r3, 800b3a0 <_kill_r+0x1c>
 800b39e:	6023      	str	r3, [r4, #0]
 800b3a0:	bd38      	pop	{r3, r4, r5, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000d8c 	.word	0x20000d8c

0800b3a8 <_getpid_r>:
 800b3a8:	f7f7 b8ca 	b.w	8002540 <_getpid>

0800b3ac <_init>:
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	bf00      	nop
 800b3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b2:	bc08      	pop	{r3}
 800b3b4:	469e      	mov	lr, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <_fini>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	bf00      	nop
 800b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3be:	bc08      	pop	{r3}
 800b3c0:	469e      	mov	lr, r3
 800b3c2:	4770      	bx	lr
