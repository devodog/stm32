
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  0800ad28  0800ad28  0001ad28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b634  0800b634  00020534  2**0
                  CONTENTS
  4 .ARM          00000000  0800b634  0800b634  00020534  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b634  0800b634  00020534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b634  0800b634  0001b634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b638  0800b638  0001b638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000534  20000000  0800b63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000534  0800bb70  00020534  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800bb70  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020534  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020564  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016aba  00000000  00000000  000205a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f20  00000000  00000000  00037061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00039f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb2  00000000  00000000  0003b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e641  00000000  00000000  0003c0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d6e  00000000  00000000  0005a71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0222  00000000  00000000  00073489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006034  00000000  00000000  001236ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001296e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000534 	.word	0x20000534
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad0c 	.word	0x0800ad0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000538 	.word	0x20000538
 80001cc:	0800ad0c 	.word	0x0800ad0c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};
///////////////////////////////////////////////////
// Define cmd-line Command support functions below.
void LED(char* paramStr, int* paramValues) {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4939      	ldr	r1, [pc, #228]	; (8000cbc <LED+0xf4>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f008 fa80 	bl	80090dc <strncmp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d111      	bne.n	8000c06 <LED+0x3e>
		printf("\r\nLED ON");
 8000be2:	4837      	ldr	r0, [pc, #220]	; (8000cc0 <LED+0xf8>)
 8000be4:	f008 f87e 	bl	8008ce4 <iprintf>
		paramValues[0] = 1;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
      led2 = ON;
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <LED+0xfc>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 8000c04:	e055      	b.n	8000cb2 <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 8000c06:	2203      	movs	r2, #3
 8000c08:	492f      	ldr	r1, [pc, #188]	; (8000cc8 <LED+0x100>)
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f008 fa66 	bl	80090dc <strncmp>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d111      	bne.n	8000c3a <LED+0x72>
		printf("\r\nLED OFF");
 8000c16:	482d      	ldr	r0, [pc, #180]	; (8000ccc <LED+0x104>)
 8000c18:	f008 f864 	bl	8008ce4 <iprintf>
		paramValues[0] = 0;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <LED+0xfc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
}
 8000c38:	e03b      	b.n	8000cb2 <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	4924      	ldr	r1, [pc, #144]	; (8000cd0 <LED+0x108>)
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f008 fa4c 	bl	80090dc <strncmp>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d130      	bne.n	8000cac <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3306      	adds	r3, #6
 8000c4e:	4921      	ldr	r1, [pc, #132]	; (8000cd4 <LED+0x10c>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fabd 	bl	80001d0 <strcmp>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01c      	beq.n	8000c96 <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	1d9a      	adds	r2, r3, #6
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f103 0408 	add.w	r4, r3, #8
 8000c66:	4610      	mov	r0, r2
 8000c68:	f007 f9c2 	bl	8007ff0 <atoi>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3306      	adds	r3, #6
 8000c74:	4618      	mov	r0, r3
 8000c76:	f007 f9bb 	bl	8007ff0 <atoi>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <LED+0x110>)
 8000c7e:	6013      	str	r3, [r2, #0]
         paramValues[0] = 0;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
         paramValues[1] = 0;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
         led2 = BLINKING;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <LED+0xfc>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e003      	b.n	8000c9e <LED+0xd6>
			paramValues[2] = 0;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3308      	adds	r3, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <LED+0x110>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LED+0x114>)
 8000ca6:	f008 f81d 	bl	8008ce4 <iprintf>
}
 8000caa:	e002      	b.n	8000cb2 <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LED+0x118>)
 8000cae:	f008 f819 	bl	8008ce4 <iprintf>
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800ad28 	.word	0x0800ad28
 8000cc0:	0800ad2c 	.word	0x0800ad2c
 8000cc4:	20000774 	.word	0x20000774
 8000cc8:	0800ad38 	.word	0x0800ad38
 8000ccc:	0800ad3c 	.word	0x0800ad3c
 8000cd0:	0800ad48 	.word	0x0800ad48
 8000cd4:	0800ad50 	.word	0x0800ad50
 8000cd8:	20000554 	.word	0x20000554
 8000cdc:	0800ad54 	.word	0x0800ad54
 8000ce0:	0800ad64 	.word	0x0800ad64

08000ce4 <ADC>:

void ADC(char* paramStr, int* paramValues){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "RO", 2) == 0) {
 8000cee:	2202      	movs	r2, #2
 8000cf0:	491c      	ldr	r1, [pc, #112]	; (8000d64 <ADC+0x80>)
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f008 f9f2 	bl	80090dc <strncmp>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d11b      	bne.n	8000d36 <ADC+0x52>
      printf("\r\nADC READ ONCE");
 8000cfe:	481a      	ldr	r0, [pc, #104]	; (8000d68 <ADC+0x84>)
 8000d00:	f007 fff0 	bl	8008ce4 <iprintf>
      // Start ADC Conversion
      HAL_ADC_Start(&hadc1);
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <ADC+0x88>)
 8000d06:	f001 fb41 	bl	800238c <HAL_ADC_Start>
      HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4817      	ldr	r0, [pc, #92]	; (8000d6c <ADC+0x88>)
 8000d0e:	f001 fc76 	bl	80025fe <HAL_ADCEx_Calibration_Start>

      // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	4815      	ldr	r0, [pc, #84]	; (8000d6c <ADC+0x88>)
 8000d16:	f001 fba7 	bl	8002468 <HAL_ADC_PollForConversion>
      // Read The ADC Conversion Result - using 3300 + 400 offset to
      // calculate the analog value
      printf("\r\nAA Battery voltage: %ld mV", 3700*HAL_ADC_GetValue(&hadc1)/4096);
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <ADC+0x88>)
 8000d1c:	f001 fc62 	bl	80025e4 <HAL_ADC_GetValue>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f640 6274 	movw	r2, #3700	; 0xe74
 8000d26:	fb02 f303 	mul.w	r3, r2, r3
 8000d2a:	0b1b      	lsrs	r3, r3, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <ADC+0x8c>)
 8000d30:	f007 ffd8 	bl	8008ce4 <iprintf>
            "AVRAGE (not implemented)\r\nPOLL (not implemented)\r\nHELP = this printout.");
   }
   else {
      printf("\r\nUNKNOWN ADC COMMAND");
   }
}
 8000d34:	e011      	b.n	8000d5a <ADC+0x76>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000d36:	2202      	movs	r2, #2
 8000d38:	490e      	ldr	r1, [pc, #56]	; (8000d74 <ADC+0x90>)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f008 f9ce 	bl	80090dc <strncmp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d106      	bne.n	8000d54 <ADC+0x70>
      printf("\r\nThe ADC command takes the following parameters\r\n");
 8000d46:	480c      	ldr	r0, [pc, #48]	; (8000d78 <ADC+0x94>)
 8000d48:	f008 f832 	bl	8008db0 <puts>
      printf("RO = Read Once\r\n" \
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <ADC+0x98>)
 8000d4e:	f007 ffc9 	bl	8008ce4 <iprintf>
}
 8000d52:	e002      	b.n	8000d5a <ADC+0x76>
      printf("\r\nUNKNOWN ADC COMMAND");
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <ADC+0x9c>)
 8000d56:	f007 ffc5 	bl	8008ce4 <iprintf>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	0800ad7c 	.word	0x0800ad7c
 8000d68:	0800ad80 	.word	0x0800ad80
 8000d6c:	20000558 	.word	0x20000558
 8000d70:	0800ad90 	.word	0x0800ad90
 8000d74:	0800adb0 	.word	0x0800adb0
 8000d78:	0800adb8 	.word	0x0800adb8
 8000d7c:	0800adec 	.word	0x0800adec
 8000d80:	0800ae44 	.word	0x0800ae44

08000d84 <TIM>:

void TIM(char* paramStr, int* paramValues) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "OS", 2) == 0) {      
 8000d8e:	2202      	movs	r2, #2
 8000d90:	493b      	ldr	r1, [pc, #236]	; (8000e80 <TIM+0xfc>)
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f008 f9a2 	bl	80090dc <strncmp>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11b      	bne.n	8000dd6 <TIM+0x52>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[3]));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3303      	adds	r3, #3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 f924 	bl	8007ff0 <atoi>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <TIM+0x100>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3303      	adds	r3, #3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 f91b 	bl	8007ff0 <atoi>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <TIM+0x100>)
 8000dc0:	60da      	str	r2, [r3, #12]
      printf("\r\nOne Shot timer with period: %d", (int)htim2.Init.Period);
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <TIM+0x100>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <TIM+0x104>)
 8000dca:	f007 ff8b 	bl	8008ce4 <iprintf>
      // The timer2 struct is updated accordingly to the __HAL_TIM_SET_AUTORELOAD() function.
      
      HAL_TIM_Base_Start_IT(&htim2);
 8000dce:	482d      	ldr	r0, [pc, #180]	; (8000e84 <TIM+0x100>)
 8000dd0:	f004 fd28 	bl	8005824 <HAL_TIM_Base_Start_IT>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
   }
   else {
      printf("\r\nUNKNOWN TCD COMMAND");
   }
}
 8000dd4:	e04f      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "PERIOD", 6) == 0) {
 8000dd6:	2206      	movs	r2, #6
 8000dd8:	492c      	ldr	r1, [pc, #176]	; (8000e8c <TIM+0x108>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f008 f97e 	bl	80090dc <strncmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d118      	bne.n	8000e18 <TIM+0x94>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[7]));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3307      	adds	r3, #7
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 f900 	bl	8007ff0 <atoi>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <TIM+0x100>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3307      	adds	r3, #7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 f8f7 	bl	8007ff0 <atoi>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <TIM+0x100>)
 8000e08:	60da      	str	r2, [r3, #12]
      printf("\r\nAuto-reload period: %d", (int)htim2.Init.Period);
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <TIM+0x100>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481f      	ldr	r0, [pc, #124]	; (8000e90 <TIM+0x10c>)
 8000e12:	f007 ff67 	bl	8008ce4 <iprintf>
}
 8000e16:	e02e      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "REPEAT", 6) == 0) {
 8000e18:	2206      	movs	r2, #6
 8000e1a:	491e      	ldr	r1, [pc, #120]	; (8000e94 <TIM+0x110>)
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f008 f95d 	bl	80090dc <strncmp>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d117      	bne.n	8000e58 <TIM+0xd4>
      timRepeat = atoi(&paramStr[7]);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3307      	adds	r3, #7
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f8df 	bl	8007ff0 <atoi>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <TIM+0x114>)
 8000e36:	6013      	str	r3, [r2, #0]
      timRepeatCount = 0;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <TIM+0x118>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim2);
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <TIM+0x100>)
 8000e40:	f004 fcf0 	bl	8005824 <HAL_TIM_Base_Start_IT>
      timMode = REPEAT;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <TIM+0x11c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
      printf("\r\nAuto-reload repeat % times", timRepeat);
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <TIM+0x114>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <TIM+0x120>)
 8000e52:	f007 ff47 	bl	8008ce4 <iprintf>
}
 8000e56:	e00e      	b.n	8000e76 <TIM+0xf2>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <TIM+0x124>)
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f008 f93d 	bl	80090dc <strncmp>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d103      	bne.n	8000e70 <TIM+0xec>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
 8000e68:	4810      	ldr	r0, [pc, #64]	; (8000eac <TIM+0x128>)
 8000e6a:	f007 ff3b 	bl	8008ce4 <iprintf>
}
 8000e6e:	e002      	b.n	8000e76 <TIM+0xf2>
      printf("\r\nUNKNOWN TCD COMMAND");
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <TIM+0x12c>)
 8000e72:	f007 ff37 	bl	8008ce4 <iprintf>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800ae5c 	.word	0x0800ae5c
 8000e84:	200005fc 	.word	0x200005fc
 8000e88:	0800ae60 	.word	0x0800ae60
 8000e8c:	0800ae84 	.word	0x0800ae84
 8000e90:	0800ae8c 	.word	0x0800ae8c
 8000e94:	0800aea8 	.word	0x0800aea8
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000550 	.word	0x20000550
 8000ea0:	20000775 	.word	0x20000775
 8000ea4:	0800aeb0 	.word	0x0800aeb0
 8000ea8:	0800adb0 	.word	0x0800adb0
 8000eac:	0800aed0 	.word	0x0800aed0
 8000eb0:	0800af14 	.word	0x0800af14

08000eb4 <SYS>:

void SYS(char* paramStr, int* paramValues){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "BN", 2) == 0) {
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4914      	ldr	r1, [pc, #80]	; (8000f14 <SYS+0x60>)
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f008 f90a 	bl	80090dc <strncmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d104      	bne.n	8000ed8 <SYS+0x24>
      printf("\r\nBuild no.:%d", BUILD);
 8000ece:	21a7      	movs	r1, #167	; 0xa7
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <SYS+0x64>)
 8000ed2:	f007 ff07 	bl	8008ce4 <iprintf>
   }
   else if (strncmp(paramStr, "VER", 2) == 0) {
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
   }

}
 8000ed6:	e019      	b.n	8000f0c <SYS+0x58>
   else if (strncmp(paramStr, "BD", 2) == 0) {
 8000ed8:	2202      	movs	r2, #2
 8000eda:	4910      	ldr	r1, [pc, #64]	; (8000f1c <SYS+0x68>)
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f008 f8fd 	bl	80090dc <strncmp>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d104      	bne.n	8000ef2 <SYS+0x3e>
      printf("\r\nBuild date: %s", BUILD_DATE_AND_TIME);
 8000ee8:	490d      	ldr	r1, [pc, #52]	; (8000f20 <SYS+0x6c>)
 8000eea:	480e      	ldr	r0, [pc, #56]	; (8000f24 <SYS+0x70>)
 8000eec:	f007 fefa 	bl	8008ce4 <iprintf>
}
 8000ef0:	e00c      	b.n	8000f0c <SYS+0x58>
   else if (strncmp(paramStr, "VER", 2) == 0) {
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <SYS+0x74>)
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f008 f8f0 	bl	80090dc <strncmp>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d104      	bne.n	8000f0c <SYS+0x58>
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	4809      	ldr	r0, [pc, #36]	; (8000f2c <SYS+0x78>)
 8000f08:	f007 feec 	bl	8008ce4 <iprintf>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	0800af2c 	.word	0x0800af2c
 8000f18:	0800af30 	.word	0x0800af30
 8000f1c:	0800af40 	.word	0x0800af40
 8000f20:	0800af44 	.word	0x0800af44
 8000f24:	0800af60 	.word	0x0800af60
 8000f28:	0800af74 	.word	0x0800af74
 8000f2c:	0800af78 	.word	0x0800af78

08000f30 <CO2>:

void CO2(char* paramStr, int* paramValues) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "START", 5) == 0) {
 8000f3a:	2205      	movs	r2, #5
 8000f3c:	4941      	ldr	r1, [pc, #260]	; (8001044 <CO2+0x114>)
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f008 f8cc 	bl	80090dc <strncmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d103      	bne.n	8000f52 <CO2+0x22>
      ContinuousMeasurement(0);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 fcc2 	bl	80018d4 <ContinuousMeasurement>
   *************/

   else {
      printf("\r\nUNKNOWN TCD COMMAND");
   }
}
 8000f50:	e073      	b.n	800103a <CO2+0x10a>
   else if (strncmp(paramStr, "STOP", 4) == 0) {
 8000f52:	2204      	movs	r2, #4
 8000f54:	493c      	ldr	r1, [pc, #240]	; (8001048 <CO2+0x118>)
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f008 f8c0 	bl	80090dc <strncmp>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <CO2+0x38>
      StopContinuousMeasurement();
 8000f62:	f000 fced 	bl	8001940 <StopContinuousMeasurement>
}
 8000f66:	e068      	b.n	800103a <CO2+0x10a>
   else if (strncmp(paramStr, "VERSION", 7) == 0) {
 8000f68:	2207      	movs	r2, #7
 8000f6a:	4938      	ldr	r1, [pc, #224]	; (800104c <CO2+0x11c>)
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f008 f8b5 	bl	80090dc <strncmp>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <CO2+0x4e>
      ReadFirmwareVersion();
 8000f78:	f000 fc74 	bl	8001864 <ReadFirmwareVersion>
}
 8000f7c:	e05d      	b.n	800103a <CO2+0x10a>
   else if (strncmp(paramStr, "INTERVAL", sizeof("INTERVAL")) == 0){
 8000f7e:	4934      	ldr	r1, [pc, #208]	; (8001050 <CO2+0x120>)
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff f925 	bl	80001d0 <strcmp>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d103      	bne.n	8000f94 <CO2+0x64>
      SetMeasurementInterval(2); // will probably only work with 2 sec interval since the crc is pre-calculated for this value.
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f000 fcfb 	bl	8001988 <SetMeasurementInterval>
}
 8000f92:	e052      	b.n	800103a <CO2+0x10a>
   else if (strncmp(paramStr, "READ", 4) == 0) {
 8000f94:	2204      	movs	r2, #4
 8000f96:	492f      	ldr	r1, [pc, #188]	; (8001054 <CO2+0x124>)
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f008 f89f 	bl	80090dc <strncmp>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d13b      	bne.n	800101c <CO2+0xec>
      if (1 == ReadMeasurement(data, sizeof(data))) {
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2114      	movs	r1, #20
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fd22 	bl	80019f4 <ReadMeasurement>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d12e      	bne.n	8001014 <CO2+0xe4>
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 8000fb6:	7b3b      	ldrb	r3, [r7, #12]
 8000fb8:	061a      	lsls	r2, r3, #24
         (((unsigned int)data[1]) << 16) |
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	041b      	lsls	r3, r3, #16
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 8000fbe:	431a      	orrs	r2, r3
         (((unsigned int)data[3]) << 8) |
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	021b      	lsls	r3, r3, #8
         (((unsigned int)data[1]) << 16) |
 8000fc4:	4313      	orrs	r3, r2
         ((unsigned int)data[4]));
 8000fc6:	7c3a      	ldrb	r2, [r7, #16]
         tempU32 = (unsigned int)((((unsigned int)data[0]) << 24) |
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
         co2Concentration = *(float*)&tempU32; // co2Concentration = 439.09f
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 8000fd4:	7cbb      	ldrb	r3, [r7, #18]
 8000fd6:	061a      	lsls	r2, r3, #24
         (((unsigned int)data[7]) << 16) |
 8000fd8:	7cfb      	ldrb	r3, [r7, #19]
 8000fda:	041b      	lsls	r3, r3, #16
         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 8000fdc:	431a      	orrs	r2, r3
         (((unsigned int)data[9]) << 8) |
 8000fde:	7d7b      	ldrb	r3, [r7, #21]
 8000fe0:	021b      	lsls	r3, r3, #8
         (((unsigned int)data[7]) << 16) |
 8000fe2:	4313      	orrs	r3, r2
         ((unsigned int)data[10]));
 8000fe4:	7dba      	ldrb	r2, [r7, #22]
         tempU32 = (unsigned int)((((unsigned int)data[6]) << 24) |
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
         temperature = *(float*)&tempU32; // co2Concentration = 439.09f
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	623b      	str	r3, [r7, #32]
         printf("\r\nco2Concentration = %f", co2Concentration);
 8000ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ff4:	f7ff fab8 	bl	8000568 <__aeabi_f2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <CO2+0x128>)
 8000ffe:	f007 fe71 	bl	8008ce4 <iprintf>
         printf("\r\ntemperature = %f", temperature);
 8001002:	6a38      	ldr	r0, [r7, #32]
 8001004:	f7ff fab0 	bl	8000568 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <CO2+0x12c>)
 800100e:	f007 fe69 	bl	8008ce4 <iprintf>
}
 8001012:	e012      	b.n	800103a <CO2+0x10a>
         printf("\r\nReading sensor-data failed!");
 8001014:	4812      	ldr	r0, [pc, #72]	; (8001060 <CO2+0x130>)
 8001016:	f007 fe65 	bl	8008ce4 <iprintf>
}
 800101a:	e00e      	b.n	800103a <CO2+0x10a>
   else if (strncmp(paramStr, "HELP", 4) == 0){
 800101c:	2204      	movs	r2, #4
 800101e:	4911      	ldr	r1, [pc, #68]	; (8001064 <CO2+0x134>)
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f008 f85b 	bl	80090dc <strncmp>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <CO2+0x104>
      printf("\r\nSome help text for the CO2 Measurement command-set here...");
 800102c:	480e      	ldr	r0, [pc, #56]	; (8001068 <CO2+0x138>)
 800102e:	f007 fe59 	bl	8008ce4 <iprintf>
}
 8001032:	e002      	b.n	800103a <CO2+0x10a>
      printf("\r\nUNKNOWN TCD COMMAND");
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <CO2+0x13c>)
 8001036:	f007 fe55 	bl	8008ce4 <iprintf>
}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	0800af88 	.word	0x0800af88
 8001048:	0800af90 	.word	0x0800af90
 800104c:	0800af98 	.word	0x0800af98
 8001050:	0800afa0 	.word	0x0800afa0
 8001054:	0800afac 	.word	0x0800afac
 8001058:	0800afb4 	.word	0x0800afb4
 800105c:	0800afcc 	.word	0x0800afcc
 8001060:	0800afe0 	.word	0x0800afe0
 8001064:	0800adb0 	.word	0x0800adb0
 8001068:	0800b000 	.word	0x0800b000
 800106c:	0800af14 	.word	0x0800af14

08001070 <promt>:
  {"TCD", 4, 7, {"OS", "PERIOD", "REPEAT", "HELP"}, {0, 500, 10, 0}, &TIM},
  {"CO2", 4, 7, {"READ", "VERSION", "INTERVAL", "HELP"}, {0, 1000, 60, 0}, &CO2},
  {"SYS", 3, 4, {"BN", "BD", "VER"}, {0, 0, 0}, &SYS}
};

void promt() {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <promt+0x1c>)
 8001076:	f007 fe35 	bl	8008ce4 <iprintf>
   fflush(stdout);
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <promt+0x20>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4618      	mov	r0, r3
 8001082:	f007 fd59 	bl	8008b38 <fflush>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	0800b040 	.word	0x0800b040
 8001090:	200003c4 	.word	0x200003c4

08001094 <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
   int i = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 80010a2:	2305      	movs	r3, #5
 80010a4:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 80010a6:	e03d      	b.n	8001124 <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	22ac      	movs	r2, #172	; 0xac
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <executeCmd+0xbc>)
 80010b2:	189c      	adds	r4, r3, r2
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	22ac      	movs	r2, #172	; 0xac
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	4a24      	ldr	r2, [pc, #144]	; (8001150 <executeCmd+0xbc>)
 80010be:	4413      	add	r3, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f8e5 	bl	8000290 <strlen>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4620      	mov	r0, r4
 80010ce:	f008 f805 	bl	80090dc <strncmp>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d122      	bne.n	800111e <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <executeCmd+0xbc>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	21ac      	movs	r1, #172	; 0xac
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	33a8      	adds	r3, #168	; 0xa8
 80010e6:	681c      	ldr	r4, [r3, #0]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	22ac      	movs	r2, #172	; 0xac
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <executeCmd+0xbc>)
 80010f2:	4413      	add	r3, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f8cb 	bl	8000290 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	3301      	adds	r3, #1
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	441a      	add	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	21ac      	movs	r1, #172	; 0xac
 8001106:	fb01 f303 	mul.w	r3, r1, r3
 800110a:	3380      	adds	r3, #128	; 0x80
 800110c:	4910      	ldr	r1, [pc, #64]	; (8001150 <executeCmd+0xbc>)
 800110e:	440b      	add	r3, r1
 8001110:	4619      	mov	r1, r3
 8001112:	4610      	mov	r0, r2
 8001114:	47a0      	blx	r4
       /*** for test only...
 		 printf("\r\nparamValues[0]: %d, paramValues[1]: %d, paramValues[2]: %d",
               mcuCmds[i].paramValues[0],mcuCmds[i].paramValues[1],mcuCmds[i].paramValues[2]);
               ***/
 		 promt();
 8001116:	f7ff ffab 	bl	8001070 <promt>
     	 return 0;
 800111a:	2300      	movs	r3, #0
 800111c:	e014      	b.n	8001148 <executeCmd+0xb4>
   for (; i < numberOfCommands; i++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8bd      	bhi.n	80010a8 <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	429a      	cmp	r2, r3
 8001132:	d808      	bhi.n	8001146 <executeCmd+0xb2>
      printf("\r\nThe command: %s[%d], is not recognized", termInput, numberOfCommands);
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <executeCmd+0xc0>)
 800113a:	f007 fdd3 	bl	8008ce4 <iprintf>
      promt();
 800113e:	f7ff ff97 	bl	8001070 <promt>
      return -1;
 8001142:	23ff      	movs	r3, #255	; 0xff
 8001144:	e000      	b.n	8001148 <executeCmd+0xb4>
   }
   else {
	  return -2;
 8001146:	23fe      	movs	r3, #254	; 0xfe
   }
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	20000004 	.word	0x20000004
 8001154:	0800b04c 	.word	0x0800b04c

08001158 <_write>:
static void MX_TIM2_Init(void);
static void MX_TIM17_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	b29a      	uxth	r2, r3
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <_write+0x28>)
 8001170:	f005 fd66 	bl	8006c40 <HAL_UART_Transmit>
	return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000694 	.word	0x20000694

08001184 <HAL_UART_RxCpltCallback>:
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
uint8_t timMode = ONE_SHOT;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_UART_RxCpltCallback+0x90>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b0d      	cmp	r3, #13
 8001192:	d126      	bne.n	80011e2 <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_UART_RxCpltCallback+0x94>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd1a      	ble.n	80011d2 <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	481e      	ldr	r0, [pc, #120]	; (800121c <HAL_UART_RxCpltCallback+0x98>)
 80011a4:	f002 f914 	bl	80033d0 <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_UART_RxCpltCallback+0x94>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <HAL_UART_RxCpltCallback+0x9c>)
 80011b0:	f7ff ff70 	bl	8001094 <executeCmd>
			bytesReceived = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_UART_RxCpltCallback+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80011ba:	2250      	movs	r2, #80	; 0x50
 80011bc:	2100      	movs	r1, #0
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <HAL_UART_RxCpltCallback+0x9c>)
 80011c0:	f007 ff84 	bl	80090cc <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <HAL_UART_RxCpltCallback+0x98>)
 80011cc:	f002 f900 	bl	80033d0 <HAL_GPIO_WritePin>
 80011d0:	e001      	b.n	80011d6 <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 80011d2:	f7ff ff4d 	bl	8001070 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	490e      	ldr	r1, [pc, #56]	; (8001214 <HAL_UART_RxCpltCallback+0x90>)
 80011da:	4812      	ldr	r0, [pc, #72]	; (8001224 <HAL_UART_RxCpltCallback+0xa0>)
 80011dc:	f005 fdba 	bl	8006d54 <HAL_UART_Receive_IT>
		return;
 80011e0:	e015      	b.n	800120e <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 80011e2:	2364      	movs	r3, #100	; 0x64
 80011e4:	2201      	movs	r2, #1
 80011e6:	490b      	ldr	r1, [pc, #44]	; (8001214 <HAL_UART_RxCpltCallback+0x90>)
 80011e8:	480e      	ldr	r0, [pc, #56]	; (8001224 <HAL_UART_RxCpltCallback+0xa0>)
 80011ea:	f005 fd29 	bl	8006c40 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_UART_RxCpltCallback+0x94>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_UART_RxCpltCallback+0x90>)
 80011f4:	7811      	ldrb	r1, [r2, #0]
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_UART_RxCpltCallback+0x9c>)
 80011f8:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_UART_RxCpltCallback+0x94>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <HAL_UART_RxCpltCallback+0x94>)
 8001202:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	4903      	ldr	r1, [pc, #12]	; (8001214 <HAL_UART_RxCpltCallback+0x90>)
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <HAL_UART_RxCpltCallback+0xa0>)
 800120a:	f005 fda3 	bl	8006d54 <HAL_UART_Receive_IT>
}
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000071c 	.word	0x2000071c
 8001218:	20000770 	.word	0x20000770
 800121c:	48000400 	.word	0x48000400
 8001220:	20000720 	.word	0x20000720
 8001224:	20000694 	.word	0x20000694

08001228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
   if (timMode == ONE_SHOT) {
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x22>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800123e:	f002 f8df 	bl	8003400 <HAL_GPIO_TogglePin>
      HAL_TIM_Base_Stop_IT(&htim2);
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001244:	f004 fb42 	bl	80058cc <HAL_TIM_Base_Stop_IT>
         HAL_TIM_Base_Stop_IT(&htim2);
      }
   }
   //printf("\r\nHAL_TIM_PeriodElapsedCallback");
   //promt();
}
 8001248:	e010      	b.n	800126c <HAL_TIM_PeriodElapsedCallback+0x44>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800124a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001250:	f002 f8d6 	bl	8003400 <HAL_GPIO_TogglePin>
      if (timRepeatCount++ > timRepeat) {
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	4909      	ldr	r1, [pc, #36]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800125c:	600a      	str	r2, [r1, #0]
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	4293      	cmp	r3, r2
 8001264:	dd02      	ble.n	800126c <HAL_TIM_PeriodElapsedCallback+0x44>
         HAL_TIM_Base_Stop_IT(&htim2);
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001268:	f004 fb30 	bl	80058cc <HAL_TIM_Base_Stop_IT>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000775 	.word	0x20000775
 8001278:	48000400 	.word	0x48000400
 800127c:	200005fc 	.word	0x200005fc
 8001280:	20000550 	.word	0x20000550
 8001284:	20000000 	.word	0x20000000

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  setvbuf(stdout, NULL, _IONBF, 0);
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <main+0x108>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6898      	ldr	r0, [r3, #8]
 8001294:	2300      	movs	r3, #0
 8001296:	2202      	movs	r2, #2
 8001298:	2100      	movs	r1, #0
 800129a:	f007 fd91 	bl	8008dc0 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f000 fe65 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f889 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 fa8b 	bl	80017c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012aa:	f000 fa59 	bl	8001760 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80012ae:	f000 f8d9 	bl	8001464 <MX_ADC1_Init>
  MX_TIM2_Init();
 80012b2:	f000 f98d 	bl	80015d0 <MX_TIM2_Init>
  MX_TIM17_Init();
 80012b6:	f000 f9db 	bl	8001670 <MX_TIM17_Init>
  MX_I2C1_Init();
 80012ba:	f000 f949 	bl	8001550 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80012be:	2201      	movs	r2, #1
 80012c0:	4934      	ldr	r1, [pc, #208]	; (8001394 <main+0x10c>)
 80012c2:	4835      	ldr	r0, [pc, #212]	; (8001398 <main+0x110>)
 80012c4:	f005 fd46 	bl	8006d54 <HAL_UART_Receive_IT>

  //HAL_TIM_Base_Start_IT(&htim2);

  uint8_t ledState = OFF;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
  printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 80012cc:	4833      	ldr	r0, [pc, #204]	; (800139c <main+0x114>)
 80012ce:	f007 fd09 	bl	8008ce4 <iprintf>
  printf("\r\nBuild No. %d", BUILD);
 80012d2:	21a7      	movs	r1, #167	; 0xa7
 80012d4:	4832      	ldr	r0, [pc, #200]	; (80013a0 <main+0x118>)
 80012d6:	f007 fd05 	bl	8008ce4 <iprintf>
  // Check if a I2C device is connected.
  ReadFirmwareVersion(); // NOT OBVIOUS THAT THIS IS A I2C SENSOR....
 80012da:	f000 fac3 	bl	8001864 <ReadFirmwareVersion>

  promt();
 80012de:	f7ff fec7 	bl	8001070 <promt>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80012e2:	2100      	movs	r1, #0
 80012e4:	482f      	ldr	r0, [pc, #188]	; (80013a4 <main+0x11c>)
 80012e6:	f004 fb81 	bl	80059ec <HAL_TIM_PWM_Start>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <main+0x120>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d013      	beq.n	800131c <main+0x94>
			ledState = led2;
 80012f4:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <main+0x120>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	73fb      	strb	r3, [r7, #15]
			if (led2 == ON) {
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <main+0x120>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <main+0x88>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001308:	4828      	ldr	r0, [pc, #160]	; (80013ac <main+0x124>)
 800130a:	f002 f861 	bl	80033d0 <HAL_GPIO_WritePin>
 800130e:	e005      	b.n	800131c <main+0x94>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4825      	ldr	r0, [pc, #148]	; (80013ac <main+0x124>)
 8001318:	f002 f85a 	bl	80033d0 <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <main+0x120>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d116      	bne.n	8001352 <main+0xca>
		   if (msValue > 0) {
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <main+0x128>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	dd0a      	ble.n	8001342 <main+0xba>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	481e      	ldr	r0, [pc, #120]	; (80013ac <main+0x124>)
 8001332:	f002 f865 	bl	8003400 <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <main+0x128>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fe7c 	bl	8002038 <HAL_Delay>
 8001340:	e007      	b.n	8001352 <main+0xca>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	4818      	ldr	r0, [pc, #96]	; (80013ac <main+0x124>)
 800134a:	f002 f841 	bl	80033d0 <HAL_GPIO_WritePin>
			   ledState = OFF;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
			}
		}

		// PWM range from 0% to 100%
      for(int i=0; i<=100; i++){
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	e008      	b.n	800136a <main+0xe2>
         TIM17->CCR1 = i;
 8001358:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <main+0x12c>)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	6353      	str	r3, [r2, #52]	; 0x34
         HAL_Delay(5);
 800135e:	2005      	movs	r0, #5
 8001360:	f000 fe6a 	bl	8002038 <HAL_Delay>
      for(int i=0; i<=100; i++){
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	ddf3      	ble.n	8001358 <main+0xd0>
      }

      // PWM range from 100% to 0%
      for(int i=100; i>=0; i--){
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	e008      	b.n	8001388 <main+0x100>
         TIM17->CCR1 = i;
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <main+0x12c>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6353      	str	r3, [r2, #52]	; 0x34
         HAL_Delay(15);
 800137c:	200f      	movs	r0, #15
 800137e:	f000 fe5b 	bl	8002038 <HAL_Delay>
      for(int i=100; i>=0; i--){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3b01      	subs	r3, #1
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	daf3      	bge.n	8001376 <main+0xee>
		if (led2 != ledState) {
 800138e:	e7ac      	b.n	80012ea <main+0x62>
 8001390:	200003c4 	.word	0x200003c4
 8001394:	2000071c 	.word	0x2000071c
 8001398:	20000694 	.word	0x20000694
 800139c:	0800b078 	.word	0x0800b078
 80013a0:	0800b0b4 	.word	0x0800b0b4
 80013a4:	20000648 	.word	0x20000648
 80013a8:	20000774 	.word	0x20000774
 80013ac:	48000400 	.word	0x48000400
 80013b0:	20000554 	.word	0x20000554
 80013b4:	40014800 	.word	0x40014800

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09c      	sub	sp, #112	; 0x70
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c2:	2228      	movs	r2, #40	; 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f007 fe80 	bl	80090cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2234      	movs	r2, #52	; 0x34
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f007 fe72 	bl	80090cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fdb3 	bl	8003f68 <HAL_RCC_OscConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001408:	f000 fa26 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140c:	230f      	movs	r3, #15
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001410:	2300      	movs	r3, #0
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001420:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fddc 	bl	8004fe4 <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001432:	f000 fa11 	bl	8001858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <SystemClock_Config+0xa8>)
 8001438:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4618      	mov	r0, r3
 800144a:	f004 f801 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001454:	f000 fa00 	bl	8001858 <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3770      	adds	r7, #112	; 0x70
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	00100021 	.word	0x00100021

08001464 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <MX_ADC1_Init+0xe8>)
 800147c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001480:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <MX_ADC1_Init+0xe8>)
 8001484:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001488:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <MX_ADC1_Init+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <MX_ADC1_Init+0xe8>)
 8001492:	2201      	movs	r2, #1
 8001494:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MX_ADC1_Init+0xe8>)
 8001498:	2201      	movs	r2, #1
 800149a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <MX_ADC1_Init+0xe8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a4:	4b29      	ldr	r3, [pc, #164]	; (800154c <MX_ADC1_Init+0xe8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <MX_ADC1_Init+0xe8>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <MX_ADC1_Init+0xe8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <MX_ADC1_Init+0xe8>)
 80014b8:	2203      	movs	r2, #3
 80014ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <MX_ADC1_Init+0xe8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <MX_ADC1_Init+0xe8>)
 80014c6:	2208      	movs	r2, #8
 80014c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <MX_ADC1_Init+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_ADC1_Init+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014d6:	481d      	ldr	r0, [pc, #116]	; (800154c <MX_ADC1_Init+0xe8>)
 80014d8:	f000 fdd2 	bl	8002080 <HAL_ADC_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 80014e2:	f000 f9b9 	bl	8001858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80014e6:	230f      	movs	r3, #15
 80014e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <MX_ADC1_Init+0xe8>)
 8001504:	f001 f8ee 	bl	80026e4 <HAL_ADC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800150e:	f000 f9a3 	bl	8001858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001512:	2302      	movs	r3, #2
 8001514:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	4619      	mov	r1, r3
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_ADC1_Init+0xe8>)
 800151c:	f001 f8e2 	bl	80026e4 <HAL_ADC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001526:	f000 f997 	bl	8001858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800152a:	2303      	movs	r3, #3
 800152c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152e:	463b      	mov	r3, r7
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <MX_ADC1_Init+0xe8>)
 8001534:	f001 f8d6 	bl	80026e4 <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800153e:	f000 f98b 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000558 	.word	0x20000558

08001550 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_I2C1_Init+0x74>)
 8001556:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <MX_I2C1_Init+0x78>)
 8001558:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_I2C1_Init+0x74>)
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <MX_I2C1_Init+0x7c>)
 800155e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_I2C1_Init+0x74>)
 8001568:	2201      	movs	r2, #1
 800156a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_I2C1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_I2C1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_I2C1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_I2C1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_I2C1_Init+0x74>)
 8001586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800158a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <MX_I2C1_Init+0x74>)
 800158e:	f001 ff51 	bl	8003434 <HAL_I2C_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001598:	f000 f95e 	bl	8001858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159c:	2100      	movs	r1, #0
 800159e:	4809      	ldr	r0, [pc, #36]	; (80015c4 <MX_I2C1_Init+0x74>)
 80015a0:	f002 fc4a 	bl	8003e38 <HAL_I2CEx_ConfigAnalogFilter>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015aa:	f000 f955 	bl	8001858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015ae:	2100      	movs	r1, #0
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_I2C1_Init+0x74>)
 80015b2:	f002 fc8c 	bl	8003ece <HAL_I2CEx_ConfigDigitalFilter>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80015bc:	f000 f94c 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200005a8 	.word	0x200005a8
 80015c8:	40005400 	.word	0x40005400
 80015cc:	2000090e 	.word	0x2000090e

080015d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <MX_TIM2_Init+0x9c>)
 80015f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_TIM2_Init+0x9c>)
 80015f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_TIM2_Init+0x9c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000;
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_TIM2_Init+0x9c>)
 8001606:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800160a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_TIM2_Init+0x9c>)
 800160e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_TIM2_Init+0x9c>)
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800161a:	4814      	ldr	r0, [pc, #80]	; (800166c <MX_TIM2_Init+0x9c>)
 800161c:	f004 f8aa 	bl	8005774 <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001626:	f000 f917 	bl	8001858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_TIM2_Init+0x9c>)
 8001638:	f004 fcf2 	bl	8006020 <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001642:	f000 f909 	bl	8001858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <MX_TIM2_Init+0x9c>)
 8001654:	f005 f9aa 	bl	80069ac <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800165e:	f000 f8fb 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200005fc 	.word	0x200005fc

08001670 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b092      	sub	sp, #72	; 0x48
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	615a      	str	r2, [r3, #20]
 8001688:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	222c      	movs	r2, #44	; 0x2c
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f007 fd1b 	bl	80090cc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <MX_TIM17_Init+0xe8>)
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <MX_TIM17_Init+0xec>)
 800169a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 80-1;
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_TIM17_Init+0xe8>)
 800169e:	224f      	movs	r2, #79	; 0x4f
 80016a0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <MX_TIM17_Init+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100-1;
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_TIM17_Init+0xe8>)
 80016aa:	2263      	movs	r2, #99	; 0x63
 80016ac:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <MX_TIM17_Init+0xe8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_TIM17_Init+0xe8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_TIM17_Init+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80016c0:	4825      	ldr	r0, [pc, #148]	; (8001758 <MX_TIM17_Init+0xe8>)
 80016c2:	f004 f857 	bl	8005774 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80016cc:	f000 f8c4 	bl	8001858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80016d0:	4821      	ldr	r0, [pc, #132]	; (8001758 <MX_TIM17_Init+0xe8>)
 80016d2:	f004 f92a 	bl	800592a <HAL_TIM_PWM_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80016dc:	f000 f8bc 	bl	8001858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	; 0x60
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_TIM17_Init+0xe8>)
 8001706:	f004 fb77 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8001710:	f000 f8a2 	bl	8001858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_TIM17_Init+0xe8>)
 800173c:	f005 f99c 	bl	8006a78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8001746:	f000 f887 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_TIM17_Init+0xe8>)
 800174c:	f000 fa66 	bl	8001c1c <HAL_TIM_MspPostInit>

}
 8001750:	bf00      	nop
 8001752:	3748      	adds	r7, #72	; 0x48
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000648 	.word	0x20000648
 800175c:	40014800 	.word	0x40014800

08001760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 8001768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 800176c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 80017a4:	f005 f9fe 	bl	8006ba4 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017ae:	f000 f853 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000694 	.word	0x20000694
 80017bc:	40013800 	.word	0x40013800

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_GPIO_Init+0x90>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <MX_GPIO_Init+0x90>)
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_GPIO_Init+0x90>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_GPIO_Init+0x90>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <MX_GPIO_Init+0x90>)
 80017f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017f8:	6153      	str	r3, [r2, #20]
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_GPIO_Init+0x90>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_GPIO_Init+0x90>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <MX_GPIO_Init+0x90>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6153      	str	r3, [r2, #20]
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_GPIO_Init+0x90>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <MX_GPIO_Init+0x94>)
 8001826:	f001 fdd3 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800182a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4619      	mov	r1, r3
 8001842:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_GPIO_Init+0x94>)
 8001844:	f001 fc52 	bl	80030ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	48000400 	.word	0x48000400

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <ReadFirmwareVersion>:
#define GET_DATA_READY_STATUS 0x0202
#define READ_MEASURMENT 0x0300

extern I2C_HandleTypeDef hi2c1;

void ReadFirmwareVersion() {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af04      	add	r7, sp, #16
   uint8_t firmwareVersion[4] = {0xd1,0,0,0};
 800186a:	23d1      	movs	r3, #209	; 0xd1
 800186c:	603b      	str	r3, [r7, #0]
   uint16_t firmware = 0xD100;
 800186e:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8001872:	80fb      	strh	r3, [r7, #6]

   // Send a specific command to the Sensiron I2C slave... the command is a two byte register address...
   HAL_I2C_Master_Transmit(&hi2c1, SENSIRION_ADDRESS, firmwareVersion, 2, 1000);
 8001874:	463a      	mov	r2, r7
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2302      	movs	r3, #2
 800187e:	21c2      	movs	r1, #194	; 0xc2
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <ReadFirmwareVersion+0x64>)
 8001882:	f001 fe67 	bl	8003554 <HAL_I2C_Master_Transmit>

   if (HAL_I2C_Mem_Read(&hi2c1, SENSIRION_ADDRESS, firmware, I2C_MEMADD_SIZE_16BIT, &firmwareVersion[0], 3, 1000) != HAL_OK) {
 8001886:	88fa      	ldrh	r2, [r7, #6]
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2303      	movs	r3, #3
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	463b      	mov	r3, r7
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2302      	movs	r3, #2
 8001898:	21c2      	movs	r1, #194	; 0xc2
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <ReadFirmwareVersion+0x64>)
 800189c:	f001 ff4e 	bl	800373c <HAL_I2C_Mem_Read>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <ReadFirmwareVersion+0x4a>
      printf("\r\nHAL_I2C_Mem_Read() FAILED!");
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <ReadFirmwareVersion+0x68>)
 80018a8:	f007 fa1c 	bl	8008ce4 <iprintf>
   }
   else {
      printf("\r\nSensiron SCD30 Ver.:0x%02x.0x%02x crc=0x%02x", firmwareVersion[0],firmwareVersion[1], firmwareVersion[2]);
   }
}
 80018ac:	e007      	b.n	80018be <ReadFirmwareVersion+0x5a>
      printf("\r\nSensiron SCD30 Ver.:0x%02x.0x%02x crc=0x%02x", firmwareVersion[0],firmwareVersion[1], firmwareVersion[2]);
 80018ae:	783b      	ldrb	r3, [r7, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	787b      	ldrb	r3, [r7, #1]
 80018b4:	461a      	mov	r2, r3
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <ReadFirmwareVersion+0x6c>)
 80018ba:	f007 fa13 	bl	8008ce4 <iprintf>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200005a8 	.word	0x200005a8
 80018cc:	0800b0c4 	.word	0x0800b0c4
 80018d0:	0800b0e4 	.word	0x0800b0e4

080018d4 <ContinuousMeasurement>:

void ContinuousMeasurement(uint16_t AmbientPressureCompensation) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
   uint8_t cm[5] = {0, 0x10, 0, 0, 0x81};
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <ContinuousMeasurement+0x5c>)
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e8:	6018      	str	r0, [r3, #0]
 80018ea:	3304      	adds	r3, #4
 80018ec:	7019      	strb	r1, [r3, #0]
   cm[2] = (AmbientPressureCompensation>>8) & 0xff;
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	72bb      	strb	r3, [r7, #10]
   cm[3] = AmbientPressureCompensation & 0xff;
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	72fb      	strb	r3, [r7, #11]

   if (HAL_I2C_Master_Transmit(&hi2c1, SENSIRION_ADDRESS, cm, 5, 1000)!= HAL_OK) {
 80018fe:	f107 0208 	add.w	r2, r7, #8
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2305      	movs	r3, #5
 800190a:	21c2      	movs	r1, #194	; 0xc2
 800190c:	4809      	ldr	r0, [pc, #36]	; (8001934 <ContinuousMeasurement+0x60>)
 800190e:	f001 fe21 	bl	8003554 <HAL_I2C_Master_Transmit>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <ContinuousMeasurement+0x4c>
      printf("\r\nStarting Continuous Measurement FAILED!");
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <ContinuousMeasurement+0x64>)
 800191a:	f007 f9e3 	bl	8008ce4 <iprintf>
   }
   else {
      printf("\r\nContinuous Measurement started.");
   }
}
 800191e:	e002      	b.n	8001926 <ContinuousMeasurement+0x52>
      printf("\r\nContinuous Measurement started.");
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <ContinuousMeasurement+0x68>)
 8001922:	f007 f9df 	bl	8008ce4 <iprintf>
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	0800b164 	.word	0x0800b164
 8001934:	200005a8 	.word	0x200005a8
 8001938:	0800b114 	.word	0x0800b114
 800193c:	0800b140 	.word	0x0800b140

08001940 <StopContinuousMeasurement>:

void StopContinuousMeasurement() {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af02      	add	r7, sp, #8
   uint8_t cm[2] = {0x01, 0x04};
 8001946:	f240 4301 	movw	r3, #1025	; 0x401
 800194a:	80bb      	strh	r3, [r7, #4]
   if (HAL_I2C_Master_Transmit(&hi2c1, SENSIRION_ADDRESS, cm, 2, 1000)!= HAL_OK) {
 800194c:	1d3a      	adds	r2, r7, #4
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2302      	movs	r3, #2
 8001956:	21c2      	movs	r1, #194	; 0xc2
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <StopContinuousMeasurement+0x3c>)
 800195a:	f001 fdfb 	bl	8003554 <HAL_I2C_Master_Transmit>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <StopContinuousMeasurement+0x2c>
      printf("\r\nStopping Continuous Measurement FAILED!");
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <StopContinuousMeasurement+0x40>)
 8001966:	f007 f9bd 	bl	8008ce4 <iprintf>
   }
   else {
      printf("\r\nContinuous Measurement stopped.");
   }
}
 800196a:	e002      	b.n	8001972 <StopContinuousMeasurement+0x32>
      printf("\r\nContinuous Measurement stopped.");
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <StopContinuousMeasurement+0x44>)
 800196e:	f007 f9b9 	bl	8008ce4 <iprintf>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200005a8 	.word	0x200005a8
 8001980:	0800b16c 	.word	0x0800b16c
 8001984:	0800b198 	.word	0x0800b198

08001988 <SetMeasurementInterval>:

void SetMeasurementInterval(uint16_t interval) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
   uint8_t cm[5] = {0x46, 0x00, 0x00, 0x02, 0xE3};
 8001992:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <SetMeasurementInterval+0x5c>)
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199c:	6018      	str	r0, [r3, #0]
 800199e:	3304      	adds	r3, #4
 80019a0:	7019      	strb	r1, [r3, #0]
   cm[2] = (interval>>8) & 0xff;
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	72bb      	strb	r3, [r7, #10]
   cm[3] = interval & 0xff;
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	72fb      	strb	r3, [r7, #11]

   if (HAL_I2C_Master_Transmit(&hi2c1, SENSIRION_ADDRESS, cm, 5, 1000)!= HAL_OK) {
 80019b2:	f107 0208 	add.w	r2, r7, #8
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2305      	movs	r3, #5
 80019be:	21c2      	movs	r1, #194	; 0xc2
 80019c0:	4809      	ldr	r0, [pc, #36]	; (80019e8 <SetMeasurementInterval+0x60>)
 80019c2:	f001 fdc7 	bl	8003554 <HAL_I2C_Master_Transmit>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <SetMeasurementInterval+0x4c>
      printf("\r\nSetting Measurement Interval FAILED!");
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <SetMeasurementInterval+0x64>)
 80019ce:	f007 f989 	bl	8008ce4 <iprintf>
   }
   else {
      printf("\r\nMeasurement Interval is set.");
   }
}
 80019d2:	e002      	b.n	80019da <SetMeasurementInterval+0x52>
      printf("\r\nMeasurement Interval is set.");
 80019d4:	4806      	ldr	r0, [pc, #24]	; (80019f0 <SetMeasurementInterval+0x68>)
 80019d6:	f007 f985 	bl	8008ce4 <iprintf>
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	0800b204 	.word	0x0800b204
 80019e8:	200005a8 	.word	0x200005a8
 80019ec:	0800b1bc 	.word	0x0800b1bc
 80019f0:	0800b1e4 	.word	0x0800b1e4

080019f4 <ReadMeasurement>:
      else
         return 0;
   }
}

int ReadMeasurement(uint8_t* data, uint8_t len) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af04      	add	r7, sp, #16
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
   uint8_t cm[2] = {0x03, 0x00};
 8001a00:	2303      	movs	r3, #3
 8001a02:	81bb      	strh	r3, [r7, #12]

   if (HAL_I2C_Master_Transmit(&hi2c1, SENSIRION_ADDRESS, cm, 2, 1000)!= HAL_OK) {
 8001a04:	f107 020c 	add.w	r2, r7, #12
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2302      	movs	r3, #2
 8001a10:	21c2      	movs	r1, #194	; 0xc2
 8001a12:	4811      	ldr	r0, [pc, #68]	; (8001a58 <ReadMeasurement+0x64>)
 8001a14:	f001 fd9e 	bl	8003554 <HAL_I2C_Master_Transmit>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <ReadMeasurement+0x36>
      printf("\r\nRead Measurement FAILED!");
 8001a1e:	480f      	ldr	r0, [pc, #60]	; (8001a5c <ReadMeasurement+0x68>)
 8001a20:	f007 f960 	bl	8008ce4 <iprintf>
      return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
 8001a28:	e012      	b.n	8001a50 <ReadMeasurement+0x5c>
   }
   else {
      //HAL_Delay(3); // Should we use the GetDataReadyStatus() prior to this?
      HAL_I2C_Mem_Read(&hi2c1, SENSIRION_ADDRESS, GET_DATA_READY_STATUS, I2C_MEMADD_SIZE_16BIT, data, len, 1000);
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a32:	9202      	str	r2, [sp, #8]
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f240 2202 	movw	r2, #514	; 0x202
 8001a40:	21c2      	movs	r1, #194	; 0xc2
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <ReadMeasurement+0x64>)
 8001a44:	f001 fe7a 	bl	800373c <HAL_I2C_Mem_Read>
      printf("\r\nMeasurement read.");
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <ReadMeasurement+0x6c>)
 8001a4a:	f007 f94b 	bl	8008ce4 <iprintf>
      return 1;
 8001a4e:	2301      	movs	r3, #1
   }
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200005a8 	.word	0x200005a8
 8001a5c:	0800b258 	.word	0x0800b258
 8001a60:	0800b274 	.word	0x0800b274

08001a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_MspInit+0x44>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001acc:	d124      	bne.n	8001b18 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_ADC_MspInit+0x74>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <HAL_ADC_MspInit+0x74>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6153      	str	r3, [r2, #20]
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_ADC_MspInit+0x74>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_ADC_MspInit+0x74>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_ADC_MspInit+0x74>)
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	6153      	str	r3, [r2, #20]
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_ADC_MspInit+0x74>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b02:	2303      	movs	r3, #3
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f001 faea 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_I2C_MspInit+0x80>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d129      	bne.n	8001b9a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	6153      	str	r3, [r2, #20]
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b64:	2312      	movs	r3, #18
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b70:	2304      	movs	r3, #4
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f001 fab5 	bl	80030ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbc:	d114      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	201c      	movs	r0, #28
 8001bdc:	f001 f9d9 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be0:	201c      	movs	r0, #28
 8001be2:	f001 f9f2 	bl	8002fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001be6:	e010      	b.n	8001c0a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_TIM_Base_MspInit+0x6c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10b      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_TIM_Base_MspInit+0x68>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40014800 	.word	0x40014800

08001c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_TIM_MspPostInit+0x64>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d11b      	bne.n	8001c76 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_TIM_MspPostInit+0x68>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_TIM_MspPostInit+0x68>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6153      	str	r3, [r2, #20]
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_TIM_MspPostInit+0x68>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB5     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c56:	2320      	movs	r3, #32
 8001c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001c66:	230a      	movs	r3, #10
 8001c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_TIM_MspPostInit+0x6c>)
 8001c72:	f001 fa3b 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40014800 	.word	0x40014800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000400 	.word	0x48000400

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_UART_MspInit+0x8c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d12f      	bne.n	8001d0e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_UART_MspInit+0x90>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_UART_MspInit+0x90>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6193      	str	r3, [r2, #24]
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_UART_MspInit+0x90>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_UART_MspInit+0x90>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <HAL_UART_MspInit+0x90>)
 8001ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cd0:	6153      	str	r3, [r2, #20]
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_UART_MspInit+0x90>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cde:	2330      	movs	r3, #48	; 0x30
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <HAL_UART_MspInit+0x94>)
 8001cfa:	f001 f9f7 	bl	80030ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2025      	movs	r0, #37	; 0x25
 8001d04:	f001 f945 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d08:	2025      	movs	r0, #37	; 0x25
 8001d0a:	f001 f95e 	bl	8002fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	48000800 	.word	0x48000800

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <NMI_Handler+0x4>

08001d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <MemManage_Handler+0x4>

08001d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d70:	f000 f942 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM2_IRQHandler+0x10>)
 8001d7e:	f003 ff1b 	bl	8005bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200005fc 	.word	0x200005fc

08001d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <USART1_IRQHandler+0x10>)
 8001d92:	f005 f823 	bl	8006ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000694 	.word	0x20000694

08001da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
	return 1;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_kill>:

int _kill(int pid, int sig)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dba:	f007 f9eb 	bl	8009194 <__errno>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2216      	movs	r2, #22
 8001dc2:	601a      	str	r2, [r3, #0]
	return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_exit>:

void _exit (int status)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ffe7 	bl	8001db0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001de2:	e7fe      	b.n	8001de2 <_exit+0x12>

08001de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e00a      	b.n	8001e0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001df6:	f3af 8000 	nop.w
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf0      	blt.n	8001df6 <_read+0x12>
	}

return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	return -1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e46:	605a      	str	r2, [r3, #4]
	return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_isatty>:

int _isatty(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
	return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f007 f96c 	bl	8009194 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20004000 	.word	0x20004000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20000778 	.word	0x20000778
 8001ef0:	200008d0 	.word	0x200008d0

08001ef4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <SystemInit+0x20>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <SystemInit+0x20>)
 8001f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f50 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f1c:	f7ff ffea 	bl	8001ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f20:	480c      	ldr	r0, [pc, #48]	; (8001f54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f22:	490d      	ldr	r1, [pc, #52]	; (8001f58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <LoopForever+0xe>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f38:	4c0a      	ldr	r4, [pc, #40]	; (8001f64 <LoopForever+0x16>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f46:	f007 f92b 	bl	80091a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f4a:	f7ff f99d 	bl	8001288 <main>

08001f4e <LoopForever>:

LoopForever:
    b LoopForever
 8001f4e:	e7fe      	b.n	8001f4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f58:	20000534 	.word	0x20000534
  ldr r2, =_sidata
 8001f5c:	0800b63c 	.word	0x0800b63c
  ldr r2, =_sbss
 8001f60:	20000534 	.word	0x20000534
  ldr r4, =_ebss
 8001f64:	200008cc 	.word	0x200008cc

08001f68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC1_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_Init+0x28>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_Init+0x28>)
 8001f76:	f043 0310 	orr.w	r3, r3, #16
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f000 fffd 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f82:	200f      	movs	r0, #15
 8001f84:	f000 f808 	bl	8001f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f88:	f7ff fd6c 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_InitTick+0x54>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_InitTick+0x58>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f815 	bl	8002fe6 <HAL_SYSTICK_Config>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00e      	b.n	8001fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	d80a      	bhi.n	8001fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f000 ffdd 	bl	8002f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <HAL_InitTick+0x5c>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000360 	.word	0x20000360
 8001ff0:	20000368 	.word	0x20000368
 8001ff4:	20000364 	.word	0x20000364

08001ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x20>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x24>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_IncTick+0x24>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000368 	.word	0x20000368
 800201c:	2000077c 	.word	0x2000077c

08002020 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;  
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <HAL_GetTick+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	2000077c 	.word	0x2000077c

08002038 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff ffee 	bl	8002020 <HAL_GetTick>
 8002044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d005      	beq.n	800205e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_Delay+0x44>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800205e:	bf00      	nop
 8002060:	f7ff ffde 	bl	8002020 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d8f7      	bhi.n	8002060 <HAL_Delay+0x28>
  {
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000368 	.word	0x20000368

08002080 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b09a      	sub	sp, #104	; 0x68
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e169      	b.n	8002374 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d176      	bne.n	80021a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d152      	bne.n	8002160 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fce9 	bl	8001aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d13b      	bne.n	8002160 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fe11 	bl	8002d10 <ADC_Disable>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12f      	bne.n	8002160 <HAL_ADC_Init+0xe0>
 8002100:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002104:	2b00      	cmp	r3, #0
 8002106:	d12b      	bne.n	8002160 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002110:	f023 0302 	bic.w	r3, r3, #2
 8002114:	f043 0202 	orr.w	r2, r3, #2
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800212a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800213a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800213c:	4b8f      	ldr	r3, [pc, #572]	; (800237c <HAL_ADC_Init+0x2fc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a8f      	ldr	r2, [pc, #572]	; (8002380 <HAL_ADC_Init+0x300>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0c9a      	lsrs	r2, r3, #18
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002152:	e002      	b.n	800215a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3b01      	subs	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f9      	bne.n	8002154 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800217c:	d110      	bne.n	80021a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f023 0312 	bic.w	r3, r3, #18
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 80d6 	bne.w	800235a <HAL_ADC_Init+0x2da>
 80021ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 80d1 	bne.w	800235a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 80c9 	bne.w	800235a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021d0:	f043 0202 	orr.w	r2, r3, #2
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_ADC_Init+0x304>)
 80021da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <HAL_ADC_Init+0x180>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_Init+0x180>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_ADC_Init+0x182>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11c      	bne.n	8002240 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002206:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	d010      	beq.n	800222e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d107      	bne.n	8002228 <HAL_ADC_Init+0x1a8>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_ADC_Init+0x1a8>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_ADC_Init+0x1aa>
 8002228:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800222e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	431a      	orrs	r2, r3
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e5b      	ldrb	r3, [r3, #25]
 8002244:	035b      	lsls	r3, r3, #13
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800224a:	2a01      	cmp	r2, #1
 800224c:	d002      	beq.n	8002254 <HAL_ADC_Init+0x1d4>
 800224e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002252:	e000      	b.n	8002256 <HAL_ADC_Init+0x1d6>
 8002254:	2200      	movs	r2, #0
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4313      	orrs	r3, r2
 8002264:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002266:	4313      	orrs	r3, r2
 8002268:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d11b      	bne.n	80022ac <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7e5b      	ldrb	r3, [r3, #25]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	3b01      	subs	r3, #1
 8002282:	045a      	lsls	r2, r3, #17
 8002284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002286:	4313      	orrs	r3, r2
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
 800228e:	e00d      	b.n	80022ac <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d007      	beq.n	80022c4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	4313      	orrs	r3, r2
 80022be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022c0:	4313      	orrs	r3, r2
 80022c2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d114      	bne.n	80022fc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022e0:	f023 0302 	bic.w	r3, r3, #2
 80022e4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7e1b      	ldrb	r3, [r3, #24]
 80022ea:	039a      	lsls	r2, r3, #14
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4313      	orrs	r3, r2
 80022f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022f8:	4313      	orrs	r3, r2
 80022fa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_ADC_Init+0x308>)
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800230c:	430b      	orrs	r3, r1
 800230e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10c      	bne.n	8002332 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f023 010f 	bic.w	r1, r3, #15
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	1e5a      	subs	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
 8002330:	e007      	b.n	8002342 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 020f 	bic.w	r2, r2, #15
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f023 0303 	bic.w	r3, r3, #3
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
 8002358:	e00a      	b.n	8002370 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f023 0312 	bic.w	r3, r3, #18
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800236a:	2301      	movs	r3, #1
 800236c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002374:	4618      	mov	r0, r3
 8002376:	3768      	adds	r7, #104	; 0x68
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000360 	.word	0x20000360
 8002380:	431bde83 	.word	0x431bde83
 8002384:	50000300 	.word	0x50000300
 8002388:	fff0c007 	.word	0xfff0c007

0800238c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d158      	bne.n	8002458 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_Start+0x28>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e054      	b.n	800245e <HAL_ADC_Start+0xd2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fc43 	bl	8002c48 <ADC_Enable>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d140      	bne.n	800244e <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002402:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002416:	d106      	bne.n	8002426 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f023 0206 	bic.w	r2, r3, #6
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
 8002424:	e002      	b.n	800242c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	221c      	movs	r2, #28
 800243a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0204 	orr.w	r2, r2, #4
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	e006      	b.n	800245c <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002456:	e001      	b.n	800245c <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002458:	2302      	movs	r3, #2
 800245a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b08      	cmp	r3, #8
 800247c:	d102      	bne.n	8002484 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800247e:	2308      	movs	r3, #8
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e02e      	b.n	80024e2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002484:	4b56      	ldr	r3, [pc, #344]	; (80025e0 <HAL_ADC_PollForConversion+0x178>)
 8002486:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2b00      	cmp	r3, #0
 8002492:	d112      	bne.n	80024ba <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d11d      	bne.n	80024de <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e08d      	b.n	80025d6 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e07b      	b.n	80025d6 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80024de:	230c      	movs	r3, #12
 80024e0:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80024ea:	f7ff fd99 	bl	8002020 <HAL_GetTick>
 80024ee:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024f0:	e021      	b.n	8002536 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d01d      	beq.n	8002536 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_ADC_PollForConversion+0xa8>
 8002500:	f7ff fd8e 	bl	8002020 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d212      	bcs.n	8002536 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10b      	bne.n	8002536 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f043 0204 	orr.w	r2, r3, #4
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e04f      	b.n	80025d6 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0d6      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800255a:	2b00      	cmp	r3, #0
 800255c:	d131      	bne.n	80025c2 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002564:	2b00      	cmp	r3, #0
 8002566:	d12c      	bne.n	80025c2 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b08      	cmp	r3, #8
 8002574:	d125      	bne.n	80025c2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d112      	bne.n	80025aa <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d112      	bne.n	80025c2 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
 80025a8:	e00b      	b.n	80025c2 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	50000300 	.word	0x50000300

080025e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_ADCEx_Calibration_Start+0x1c>
 8002616:	2302      	movs	r3, #2
 8002618:	e05f      	b.n	80026da <HAL_ADCEx_Calibration_Start+0xdc>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fb74 	bl	8002d10 <ADC_Disable>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d14e      	bne.n	80026d0 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002646:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800265c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800266c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800266e:	f7ff fcd7 	bl	8002020 <HAL_GetTick>
 8002672:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002674:	e01c      	b.n	80026b0 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002676:	f7ff fcd3 	bl	8002020 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b0a      	cmp	r3, #10
 8002682:	d915      	bls.n	80026b0 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800268e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002692:	d10d      	bne.n	80026b0 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f023 0312 	bic.w	r3, r3, #18
 800269c:	f043 0210 	orr.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e014      	b.n	80026da <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026be:	d0da      	beq.n	8002676 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f023 0303 	bic.w	r3, r3, #3
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b09b      	sub	sp, #108	; 0x6c
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x22>
 8002702:	2302      	movs	r3, #2
 8002704:	e295      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x54e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 8279 	bne.w	8002c10 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b04      	cmp	r3, #4
 8002724:	d81c      	bhi.n	8002760 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	461a      	mov	r2, r3
 800273a:	231f      	movs	r3, #31
 800273c:	4093      	lsls	r3, r2
 800273e:	43db      	mvns	r3, r3
 8002740:	4019      	ands	r1, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
 800275e:	e063      	b.n	8002828 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b09      	cmp	r3, #9
 8002766:	d81e      	bhi.n	80027a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	3b1e      	subs	r3, #30
 800277c:	221f      	movs	r2, #31
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	4019      	ands	r1, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	3b1e      	subs	r3, #30
 8002798:	fa00 f203 	lsl.w	r2, r0, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34
 80027a4:	e040      	b.n	8002828 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b0e      	cmp	r3, #14
 80027ac:	d81e      	bhi.n	80027ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	3b3c      	subs	r3, #60	; 0x3c
 80027c2:	221f      	movs	r2, #31
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	4019      	ands	r1, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	3b3c      	subs	r3, #60	; 0x3c
 80027de:	fa00 f203 	lsl.w	r2, r0, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
 80027ea:	e01d      	b.n	8002828 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	3b5a      	subs	r3, #90	; 0x5a
 8002800:	221f      	movs	r2, #31
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	4019      	ands	r1, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	3b5a      	subs	r3, #90	; 0x5a
 800281c:	fa00 f203 	lsl.w	r2, r0, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80e5 	bne.w	8002a02 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b09      	cmp	r3, #9
 800283e:	d91c      	bls.n	800287a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6999      	ldr	r1, [r3, #24]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	3b1e      	subs	r3, #30
 8002852:	2207      	movs	r2, #7
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	4019      	ands	r1, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6898      	ldr	r0, [r3, #8]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	3b1e      	subs	r3, #30
 800286c:	fa00 f203 	lsl.w	r2, r0, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	619a      	str	r2, [r3, #24]
 8002878:	e019      	b.n	80028ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6959      	ldr	r1, [r3, #20]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	2207      	movs	r2, #7
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	4019      	ands	r1, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6898      	ldr	r0, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	fa00 f203 	lsl.w	r2, r0, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d84f      	bhi.n	8002970 <HAL_ADC_ConfigChannel+0x28c>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	080028e9 	.word	0x080028e9
 80028dc:	0800290b 	.word	0x0800290b
 80028e0:	0800292d 	.word	0x0800292d
 80028e4:	0800294f 	.word	0x0800294f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ee:	4b97      	ldr	r3, [pc, #604]	; (8002b4c <HAL_ADC_ConfigChannel+0x468>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	0691      	lsls	r1, r2, #26
 80028f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028fa:	430a      	orrs	r2, r1
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002908:	e07b      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002910:	4b8e      	ldr	r3, [pc, #568]	; (8002b4c <HAL_ADC_ConfigChannel+0x468>)
 8002912:	4013      	ands	r3, r2
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	0691      	lsls	r1, r2, #26
 800291a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800291c:	430a      	orrs	r2, r1
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002928:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800292a:	e06a      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002932:	4b86      	ldr	r3, [pc, #536]	; (8002b4c <HAL_ADC_ConfigChannel+0x468>)
 8002934:	4013      	ands	r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	0691      	lsls	r1, r2, #26
 800293c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800293e:	430a      	orrs	r2, r1
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800294a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800294c:	e059      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002954:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <HAL_ADC_ConfigChannel+0x468>)
 8002956:	4013      	ands	r3, r2
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	0691      	lsls	r1, r2, #26
 800295e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002960:	430a      	orrs	r2, r1
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800296c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800296e:	e048      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002992:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	069b      	lsls	r3, r3, #26
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d107      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	069b      	lsls	r3, r3, #26
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	069b      	lsls	r3, r3, #26
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002a00:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x33e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x33e>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x340>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f040 80fe 	bne.w	8002c26 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00f      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43da      	mvns	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a50:	e049      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	409a      	lsls	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	d91c      	bls.n	8002aae <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6999      	ldr	r1, [r3, #24]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	3b1b      	subs	r3, #27
 8002a86:	2207      	movs	r2, #7
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	4019      	ands	r1, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6898      	ldr	r0, [r3, #8]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b1b      	subs	r3, #27
 8002aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	619a      	str	r2, [r3, #24]
 8002aac:	e01b      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6959      	ldr	r1, [r3, #20]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	4019      	ands	r1, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6898      	ldr	r0, [r3, #8]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	fa00 f203 	lsl.w	r2, r0, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_ADC_ConfigChannel+0x46c>)
 8002ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d105      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d014      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b02:	2b11      	cmp	r3, #17
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b16:	2b12      	cmp	r3, #18
 8002b18:	f040 8085 	bne.w	8002c26 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d17e      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10c      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x470>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x470>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e004      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x472>
 8002b4c:	83fff000 	.word	0x83fff000
 8002b50:	50000300 	.word	0x50000300
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d150      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d010      	beq.n	8002b82 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x498>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x498>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x49a>
 8002b7c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d13c      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d11d      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x4e2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b92:	d118      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba0:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_ADC_ConfigChannel+0x55c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_ADC_ConfigChannel+0x560>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0c9a      	lsrs	r2, r3, #18
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bc4:	e02e      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b11      	cmp	r3, #17
 8002bcc:	d10b      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x502>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd6:	d106      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002be4:	e01e      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b12      	cmp	r3, #18
 8002bec:	d11a      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bfa:	e013      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c0e:	e00a      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c22:	e000      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c24:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	376c      	adds	r7, #108	; 0x6c
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000360 	.word	0x20000360
 8002c44:	431bde83 	.word	0x431bde83

08002c48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <ADC_Enable+0x2c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <ADC_Enable+0x2c>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <ADC_Enable+0x2e>
 8002c74:	2300      	movs	r3, #0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d143      	bne.n	8002d02 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <ADC_Enable+0xc4>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00d      	beq.n	8002ca4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f043 0210 	orr.w	r2, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e02f      	b.n	8002d04 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002cb4:	f7ff f9b4 	bl	8002020 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cba:	e01b      	b.n	8002cf4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cbc:	f7ff f9b0 	bl	8002020 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d914      	bls.n	8002cf4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d00d      	beq.n	8002cf4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f043 0210 	orr.w	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e007      	b.n	8002d04 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d1dc      	bne.n	8002cbc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	8000003f 	.word	0x8000003f

08002d10 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <ADC_Disable+0x2c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <ADC_Disable+0x2c>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <ADC_Disable+0x2e>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d047      	beq.n	8002dd2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030d 	and.w	r3, r3, #13
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10f      	bne.n	8002d70 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0202 	orr.w	r2, r2, #2
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2203      	movs	r2, #3
 8002d66:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d68:	f7ff f95a 	bl	8002020 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d6e:	e029      	b.n	8002dc4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0210 	orr.w	r2, r3, #16
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e023      	b.n	8002dd4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d8c:	f7ff f948 	bl	8002020 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d914      	bls.n	8002dc4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10d      	bne.n	8002dc4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0210 	orr.w	r2, r3, #16
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e007      	b.n	8002dd4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d0dc      	beq.n	8002d8c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <__NVIC_EnableIRQ+0x38>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0a      	blt.n	8002ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	490c      	ldr	r1, [pc, #48]	; (8002ec8 <__NVIC_SetPriority+0x4c>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	0112      	lsls	r2, r2, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea4:	e00a      	b.n	8002ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4908      	ldr	r1, [pc, #32]	; (8002ecc <__NVIC_SetPriority+0x50>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	440b      	add	r3, r1
 8002eba:	761a      	strb	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf28      	it	cs
 8002eee:	2304      	movcs	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d902      	bls.n	8002f00 <NVIC_EncodePriority+0x30>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3b03      	subs	r3, #3
 8002efe:	e000      	b.n	8002f02 <NVIC_EncodePriority+0x32>
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	4313      	orrs	r3, r2
         );
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f48:	d301      	bcc.n	8002f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00f      	b.n	8002f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <SysTick_Config+0x40>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f56:	210f      	movs	r1, #15
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f7ff ff8e 	bl	8002e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SysTick_Config+0x40>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <SysTick_Config+0x40>)
 8002f68:	2207      	movs	r2, #7
 8002f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	e000e010 	.word	0xe000e010

08002f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff29 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa4:	f7ff ff3e 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff ff8e 	bl	8002ed0 <NVIC_EncodePriority>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <__NVIC_SetPriority>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff31 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ffa2 	bl	8002f38 <SysTick_Config>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800300c:	2b02      	cmp	r3, #2
 800300e:	d008      	beq.n	8003022 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2204      	movs	r2, #4
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e020      	b.n	8003064 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 020e 	bic.w	r2, r2, #14
 8003030:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003082:	2b02      	cmp	r3, #2
 8003084:	d005      	beq.n	8003092 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2204      	movs	r2, #4
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e027      	b.n	80030e2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 020e 	bic.w	r2, r2, #14
 80030a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
    } 
  }
  return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e14e      	b.n	800339a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8140 	beq.w	8003394 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d005      	beq.n	800312c <HAL_GPIO_Init+0x40>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d130      	bne.n	800318e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003162:	2201      	movs	r2, #1
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0201 	and.w	r2, r3, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b03      	cmp	r3, #3
 8003198:	d017      	beq.n	80031ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d123      	bne.n	800321e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	220f      	movs	r2, #15
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	6939      	ldr	r1, [r7, #16]
 800321a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 809a 	beq.w	8003394 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003260:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <HAL_GPIO_Init+0x2cc>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4a54      	ldr	r2, [pc, #336]	; (80033b8 <HAL_GPIO_Init+0x2cc>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6193      	str	r3, [r2, #24]
 800326c:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <HAL_GPIO_Init+0x2cc>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003278:	4a50      	ldr	r2, [pc, #320]	; (80033bc <HAL_GPIO_Init+0x2d0>)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	220f      	movs	r2, #15
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032a2:	d013      	beq.n	80032cc <HAL_GPIO_Init+0x1e0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a46      	ldr	r2, [pc, #280]	; (80033c0 <HAL_GPIO_Init+0x2d4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00d      	beq.n	80032c8 <HAL_GPIO_Init+0x1dc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a45      	ldr	r2, [pc, #276]	; (80033c4 <HAL_GPIO_Init+0x2d8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <HAL_GPIO_Init+0x1d8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a44      	ldr	r2, [pc, #272]	; (80033c8 <HAL_GPIO_Init+0x2dc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <HAL_GPIO_Init+0x1d4>
 80032bc:	2303      	movs	r3, #3
 80032be:	e006      	b.n	80032ce <HAL_GPIO_Init+0x1e2>
 80032c0:	2305      	movs	r3, #5
 80032c2:	e004      	b.n	80032ce <HAL_GPIO_Init+0x1e2>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e002      	b.n	80032ce <HAL_GPIO_Init+0x1e2>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_GPIO_Init+0x1e2>
 80032cc:	2300      	movs	r3, #0
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	f002 0203 	and.w	r2, r2, #3
 80032d4:	0092      	lsls	r2, r2, #2
 80032d6:	4093      	lsls	r3, r2
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032de:	4937      	ldr	r1, [pc, #220]	; (80033bc <HAL_GPIO_Init+0x2d0>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ec:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003310:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003316:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800333a:	4a24      	ldr	r2, [pc, #144]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003340:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003364:	4a19      	ldr	r2, [pc, #100]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336a:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <HAL_GPIO_Init+0x2e0>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f aea9 	bne.w	80030fc <HAL_GPIO_Init+0x10>
  }
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010000 	.word	0x40010000
 80033c0:	48000400 	.word	0x48000400
 80033c4:	48000800 	.word	0x48000800
 80033c8:	48000c00 	.word	0x48000c00
 80033cc:	40010400 	.word	0x40010400

080033d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e0:	787b      	ldrb	r3, [r7, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033ec:	e002      	b.n	80033f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	041a      	lsls	r2, r3, #16
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43d9      	mvns	r1, r3
 800341e:	887b      	ldrh	r3, [r7, #2]
 8003420:	400b      	ands	r3, r1
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e081      	b.n	800354a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe fb62 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	; 0x24
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003484:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003494:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d107      	bne.n	80034ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	e006      	b.n	80034bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d104      	bne.n	80034ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69d9      	ldr	r1, [r3, #28]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	461a      	mov	r2, r3
 8003560:	460b      	mov	r3, r1
 8003562:	817b      	strh	r3, [r7, #10]
 8003564:	4613      	mov	r3, r2
 8003566:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b20      	cmp	r3, #32
 8003572:	f040 80da 	bne.w	800372a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_I2C_Master_Transmit+0x30>
 8003580:	2302      	movs	r3, #2
 8003582:	e0d3      	b.n	800372c <HAL_I2C_Master_Transmit+0x1d8>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800358c:	f7fe fd48 	bl	8002020 <HAL_GetTick>
 8003590:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2319      	movs	r3, #25
 8003598:	2201      	movs	r2, #1
 800359a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fa5e 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0be      	b.n	800372c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2221      	movs	r2, #33	; 0x21
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2210      	movs	r2, #16
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	893a      	ldrh	r2, [r7, #8]
 80035ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2bff      	cmp	r3, #255	; 0xff
 80035de:	d90e      	bls.n	80035fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	22ff      	movs	r2, #255	; 0xff
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	8979      	ldrh	r1, [r7, #10]
 80035ee:	4b51      	ldr	r3, [pc, #324]	; (8003734 <HAL_I2C_Master_Transmit+0x1e0>)
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fbec 	bl	8003dd4 <I2C_TransferConfig>
 80035fc:	e06c      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	b2da      	uxtb	r2, r3
 800360e:	8979      	ldrh	r1, [r7, #10]
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_I2C_Master_Transmit+0x1e0>)
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fbdb 	bl	8003dd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800361e:	e05b      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	6a39      	ldr	r1, [r7, #32]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fa6a 	bl	8003afe <I2C_WaitOnTXISFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e07b      	b.n	800372c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d034      	beq.n	80036d8 <HAL_I2C_Master_Transmit+0x184>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d130      	bne.n	80036d8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2200      	movs	r2, #0
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f9ed 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e04d      	b.n	800372c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2bff      	cmp	r3, #255	; 0xff
 8003698:	d90e      	bls.n	80036b8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	22ff      	movs	r2, #255	; 0xff
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	8979      	ldrh	r1, [r7, #10]
 80036a8:	2300      	movs	r3, #0
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fb8f 	bl	8003dd4 <I2C_TransferConfig>
 80036b6:	e00f      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	8979      	ldrh	r1, [r7, #10]
 80036ca:	2300      	movs	r3, #0
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fb7e 	bl	8003dd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d19e      	bne.n	8003620 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fa50 	bl	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e01a      	b.n	800372c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2220      	movs	r2, #32
 80036fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_I2C_Master_Transmit+0x1e4>)
 800370a:	400b      	ands	r3, r1
 800370c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	80002000 	.word	0x80002000
 8003738:	fe00e800 	.word	0xfe00e800

0800373c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	460b      	mov	r3, r1
 8003750:	813b      	strh	r3, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	f040 80fd 	bne.w	800395e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_I2C_Mem_Read+0x34>
 800376a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0f1      	b.n	8003960 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_I2C_Mem_Read+0x4e>
 8003786:	2302      	movs	r3, #2
 8003788:	e0ea      	b.n	8003960 <HAL_I2C_Mem_Read+0x224>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003792:	f7fe fc45 	bl	8002020 <HAL_GetTick>
 8003796:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2319      	movs	r3, #25
 800379e:	2201      	movs	r2, #1
 80037a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f95b 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0d5      	b.n	8003960 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2222      	movs	r2, #34	; 0x22
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037dc:	88f8      	ldrh	r0, [r7, #6]
 80037de:	893a      	ldrh	r2, [r7, #8]
 80037e0:	8979      	ldrh	r1, [r7, #10]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	4603      	mov	r3, r0
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f8bf 	bl	8003970 <I2C_RequestMemoryRead>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0ad      	b.n	8003960 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2bff      	cmp	r3, #255	; 0xff
 800380c:	d90e      	bls.n	800382c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	b2da      	uxtb	r2, r3
 800381a:	8979      	ldrh	r1, [r7, #10]
 800381c:	4b52      	ldr	r3, [pc, #328]	; (8003968 <HAL_I2C_Mem_Read+0x22c>)
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fad5 	bl	8003dd4 <I2C_TransferConfig>
 800382a:	e00f      	b.n	800384c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	b2da      	uxtb	r2, r3
 800383c:	8979      	ldrh	r1, [r7, #10]
 800383e:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_I2C_Mem_Read+0x22c>)
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 fac4 	bl	8003dd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	2200      	movs	r2, #0
 8003854:	2104      	movs	r1, #4
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f902 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e07c      	b.n	8003960 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d034      	beq.n	800390c <HAL_I2C_Mem_Read+0x1d0>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d130      	bne.n	800390c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f8d3 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e04d      	b.n	8003960 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2bff      	cmp	r3, #255	; 0xff
 80038cc:	d90e      	bls.n	80038ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	22ff      	movs	r2, #255	; 0xff
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	8979      	ldrh	r1, [r7, #10]
 80038dc:	2300      	movs	r3, #0
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fa75 	bl	8003dd4 <I2C_TransferConfig>
 80038ea:	e00f      	b.n	800390c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	8979      	ldrh	r1, [r7, #10]
 80038fe:	2300      	movs	r3, #0
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa64 	bl	8003dd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d19a      	bne.n	800384c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f936 	bl	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e01a      	b.n	8003960 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2220      	movs	r2, #32
 8003930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_I2C_Mem_Read+0x230>)
 800393e:	400b      	ands	r3, r1
 8003940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	80002400 	.word	0x80002400
 800396c:	fe00e800 	.word	0xfe00e800

08003970 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	461a      	mov	r2, r3
 800397e:	4603      	mov	r3, r0
 8003980:	817b      	strh	r3, [r7, #10]
 8003982:	460b      	mov	r3, r1
 8003984:	813b      	strh	r3, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	8979      	ldrh	r1, [r7, #10]
 8003990:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <I2C_RequestMemoryRead+0xa4>)
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2300      	movs	r3, #0
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fa1c 	bl	8003dd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f8ac 	bl	8003afe <I2C_WaitOnTXISFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e02c      	b.n	8003a0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d105      	bne.n	80039c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039b6:	893b      	ldrh	r3, [r7, #8]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28
 80039c0:	e015      	b.n	80039ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039c2:	893b      	ldrh	r3, [r7, #8]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f892 	bl	8003afe <I2C_WaitOnTXISFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e012      	b.n	8003a0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039e4:	893b      	ldrh	r3, [r7, #8]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f831 	bl	8003a60 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	80002000 	.word	0x80002000

08003a18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d103      	bne.n	8003a36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d007      	beq.n	8003a54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	619a      	str	r2, [r3, #24]
  }
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a70:	e031      	b.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d02d      	beq.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fe fad1 	bl	8002020 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d122      	bne.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d113      	bne.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00f      	b.n	8003af6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d0be      	beq.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b0a:	e033      	b.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f87f 	bl	8003c14 <I2C_IsErrorOccurred>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e031      	b.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d025      	beq.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b28:	f7fe fa7a 	bl	8002020 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11a      	bne.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d013      	beq.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e007      	b.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d1c4      	bne.n	8003b0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b98:	e02f      	b.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f838 	bl	8003c14 <I2C_IsErrorOccurred>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e02d      	b.n	8003c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fe fa37 	bl	8002020 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11a      	bne.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d013      	beq.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f043 0220 	orr.w	r2, r3, #32
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e007      	b.n	8003c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d1c8      	bne.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d068      	beq.n	8003d12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2210      	movs	r2, #16
 8003c46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c48:	e049      	b.n	8003cde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d045      	beq.n	8003cde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7fe f9e5 	bl	8002020 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <I2C_IsErrorOccurred+0x54>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13a      	bne.n	8003cde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d121      	bne.n	8003cd0 <I2C_IsErrorOccurred+0xbc>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c92:	d01d      	beq.n	8003cd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d01a      	beq.n	8003cd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003caa:	f7fe f9b9 	bl	8002020 <HAL_GetTick>
 8003cae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cb0:	e00e      	b.n	8003cd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cb2:	f7fe f9b5 	bl	8002020 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b19      	cmp	r3, #25
 8003cbe:	d907      	bls.n	8003cd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f043 0320 	orr.w	r3, r3, #32
 8003cc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003cce:	e006      	b.n	8003cde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d1e9      	bne.n	8003cb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d003      	beq.n	8003cf4 <I2C_IsErrorOccurred+0xe0>
 8003cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0aa      	beq.n	8003c4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d103      	bne.n	8003d04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2220      	movs	r2, #32
 8003d02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f043 0304 	orr.w	r3, r3, #4
 8003d0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f043 0308 	orr.w	r3, r3, #8
 8003d4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01c      	beq.n	8003dc2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff fe45 	bl	8003a18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <I2C_IsErrorOccurred+0x1bc>)
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3728      	adds	r7, #40	; 0x28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	fe00e800 	.word	0xfe00e800

08003dd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	460b      	mov	r3, r1
 8003de0:	817b      	strh	r3, [r7, #10]
 8003de2:	4613      	mov	r3, r2
 8003de4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003de6:	897b      	ldrh	r3, [r7, #10]
 8003de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dec:	7a7b      	ldrb	r3, [r7, #9]
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	0d5b      	lsrs	r3, r3, #21
 8003e0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <I2C_TransferConfig+0x60>)
 8003e14:	430b      	orrs	r3, r1
 8003e16:	43db      	mvns	r3, r3
 8003e18:	ea02 0103 	and.w	r1, r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	03ff63ff 	.word	0x03ff63ff

08003e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d138      	bne.n	8003ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e032      	b.n	8003ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d139      	bne.n	8003f58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e033      	b.n	8003f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2224      	movs	r2, #36	; 0x24
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f001 b823 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 817d 	beq.w	800429e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fa4:	4bbc      	ldr	r3, [pc, #752]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d00c      	beq.n	8003fca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fb0:	4bb9      	ldr	r3, [pc, #740]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d15c      	bne.n	8004076 <HAL_RCC_OscConfig+0x10e>
 8003fbc:	4bb6      	ldr	r3, [pc, #728]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d155      	bne.n	8004076 <HAL_RCC_OscConfig+0x10e>
 8003fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d102      	bne.n	8003ffc <HAL_RCC_OscConfig+0x94>
 8003ff6:	4ba8      	ldr	r3, [pc, #672]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	e015      	b.n	8004028 <HAL_RCC_OscConfig+0xc0>
 8003ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004000:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004008:	fa93 f3a3 	rbit	r3, r3
 800400c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004014:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004018:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004024:	4b9c      	ldr	r3, [pc, #624]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800402c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004030:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004034:	fa92 f2a2 	rbit	r2, r2
 8004038:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800403c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004040:	fab2 f282 	clz	r2, r2
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	f042 0220 	orr.w	r2, r2, #32
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	f002 021f 	and.w	r2, r2, #31
 8004050:	2101      	movs	r1, #1
 8004052:	fa01 f202 	lsl.w	r2, r1, r2
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 811f 	beq.w	800429c <HAL_RCC_OscConfig+0x334>
 800405e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	f040 8116 	bne.w	800429c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f000 bfaf 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x12e>
 8004088:	4b83      	ldr	r3, [pc, #524]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a82      	ldr	r2, [pc, #520]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800408e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	e036      	b.n	8004104 <HAL_RCC_OscConfig+0x19c>
 8004096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x158>
 80040a6:	4b7c      	ldr	r3, [pc, #496]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7b      	ldr	r2, [pc, #492]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b79      	ldr	r3, [pc, #484]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a78      	ldr	r2, [pc, #480]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e021      	b.n	8004104 <HAL_RCC_OscConfig+0x19c>
 80040c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0x184>
 80040d2:	4b71      	ldr	r3, [pc, #452]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a70      	ldr	r2, [pc, #448]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4b6e      	ldr	r3, [pc, #440]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6d      	ldr	r2, [pc, #436]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0x19c>
 80040ec:	4b6a      	ldr	r3, [pc, #424]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a69      	ldr	r2, [pc, #420]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b67      	ldr	r3, [pc, #412]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a66      	ldr	r2, [pc, #408]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80040fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004102:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004104:	4b64      	ldr	r3, [pc, #400]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	f023 020f 	bic.w	r2, r3, #15
 800410c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	495f      	ldr	r1, [pc, #380]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800411a:	4313      	orrs	r3, r2
 800411c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800411e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d059      	beq.n	80041e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fd ff77 	bl	8002020 <HAL_GetTick>
 8004132:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	e00a      	b.n	800414e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd ff72 	bl	8002020 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b64      	cmp	r3, #100	; 0x64
 8004146:	d902      	bls.n	800414e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	f000 bf43 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>
 800414e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004152:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004162:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <HAL_RCC_OscConfig+0x218>
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	e015      	b.n	80041ac <HAL_RCC_OscConfig+0x244>
 8004180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004184:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004194:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004198:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800419c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80041a8:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80041b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80041b8:	fa92 f2a2 	rbit	r2, r2
 80041bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80041c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80041c4:	fab2 f282 	clz	r2, r2
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	f042 0220 	orr.w	r2, r2, #32
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	f002 021f 	and.w	r2, r2, #31
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f202 	lsl.w	r2, r1, r2
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ab      	beq.n	8004138 <HAL_RCC_OscConfig+0x1d0>
 80041e0:	e05d      	b.n	800429e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e2:	f7fd ff1d 	bl	8002020 <HAL_GetTick>
 80041e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ec:	f7fd ff18 	bl	8002020 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b64      	cmp	r3, #100	; 0x64
 80041fa:	d902      	bls.n	8004202 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	f000 bee9 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>
 8004202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004206:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004216:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d102      	bne.n	8004234 <HAL_RCC_OscConfig+0x2cc>
 800422e:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	e015      	b.n	8004260 <HAL_RCC_OscConfig+0x2f8>
 8004234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004238:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800424c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004250:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <HAL_RCC_OscConfig+0x330>)
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004264:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004268:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800426c:	fa92 f2a2 	rbit	r2, r2
 8004270:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004274:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004278:	fab2 f282 	clz	r2, r2
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	f042 0220 	orr.w	r2, r2, #32
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	f002 021f 	and.w	r2, r2, #31
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f202 	lsl.w	r2, r1, r2
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ab      	bne.n	80041ec <HAL_RCC_OscConfig+0x284>
 8004294:	e003      	b.n	800429e <HAL_RCC_OscConfig+0x336>
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 817d 	beq.w	80045ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042b4:	4ba6      	ldr	r3, [pc, #664]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00b      	beq.n	80042d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042c0:	4ba3      	ldr	r3, [pc, #652]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d172      	bne.n	80043b2 <HAL_RCC_OscConfig+0x44a>
 80042cc:	4ba0      	ldr	r3, [pc, #640]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d16c      	bne.n	80043b2 <HAL_RCC_OscConfig+0x44a>
 80042d8:	2302      	movs	r3, #2
 80042da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80042ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_RCC_OscConfig+0x3a0>
 8004302:	4b93      	ldr	r3, [pc, #588]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	e013      	b.n	8004330 <HAL_RCC_OscConfig+0x3c8>
 8004308:	2302      	movs	r3, #2
 800430a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800431a:	2302      	movs	r3, #2
 800431c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004320:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800432c:	4b88      	ldr	r3, [pc, #544]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	2202      	movs	r2, #2
 8004332:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004336:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800433a:	fa92 f2a2 	rbit	r2, r2
 800433e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004342:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004346:	fab2 f282 	clz	r2, r2
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	f042 0220 	orr.w	r2, r2, #32
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	f002 021f 	and.w	r2, r2, #31
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f202 	lsl.w	r2, r1, r2
 800435c:	4013      	ands	r3, r2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCC_OscConfig+0x410>
 8004362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d002      	beq.n	8004378 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f000 be2e 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004378:	4b75      	ldr	r3, [pc, #468]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004384:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	21f8      	movs	r1, #248	; 0xf8
 800438e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004396:	fa91 f1a1 	rbit	r1, r1
 800439a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800439e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80043a2:	fab1 f181 	clz	r1, r1
 80043a6:	b2c9      	uxtb	r1, r1
 80043a8:	408b      	lsls	r3, r1
 80043aa:	4969      	ldr	r1, [pc, #420]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b0:	e0fd      	b.n	80045ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8088 	beq.w	80044d4 <HAL_RCC_OscConfig+0x56c>
 80043c4:	2301      	movs	r3, #1
 80043c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80043ce:	fa93 f3a3 	rbit	r3, r3
 80043d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80043d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	2301      	movs	r3, #1
 80043ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fd fe16 	bl	8002020 <HAL_GetTick>
 80043f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fd fe11 	bl	8002020 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d902      	bls.n	8004410 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	f000 bde2 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>
 8004410:	2302      	movs	r3, #2
 8004412:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004422:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d102      	bne.n	8004440 <HAL_RCC_OscConfig+0x4d8>
 800443a:	4b45      	ldr	r3, [pc, #276]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	e013      	b.n	8004468 <HAL_RCC_OscConfig+0x500>
 8004440:	2302      	movs	r3, #2
 8004442:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004452:	2302      	movs	r3, #2
 8004454:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004458:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004464:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2202      	movs	r2, #2
 800446a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800446e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004472:	fa92 f2a2 	rbit	r2, r2
 8004476:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800447a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800447e:	fab2 f282 	clz	r2, r2
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	f042 0220 	orr.w	r2, r2, #32
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	f002 021f 	and.w	r2, r2, #31
 800448e:	2101      	movs	r1, #1
 8004490:	fa01 f202 	lsl.w	r2, r1, r2
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0af      	beq.n	80043fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449a:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	21f8      	movs	r1, #248	; 0xf8
 80044b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044b8:	fa91 f1a1 	rbit	r1, r1
 80044bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80044c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80044c4:	fab1 f181 	clz	r1, r1
 80044c8:	b2c9      	uxtb	r1, r1
 80044ca:	408b      	lsls	r3, r1
 80044cc:	4920      	ldr	r1, [pc, #128]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]
 80044d2:	e06c      	b.n	80045ae <HAL_RCC_OscConfig+0x646>
 80044d4:	2301      	movs	r3, #1
 80044d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80044e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	461a      	mov	r2, r3
 80044fc:	2300      	movs	r3, #0
 80044fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fd fd8e 	bl	8002020 <HAL_GetTick>
 8004504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004508:	e00a      	b.n	8004520 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450a:	f7fd fd89 	bl	8002020 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d902      	bls.n	8004520 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	f000 bd5a 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>
 8004520:	2302      	movs	r3, #2
 8004522:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	fab3 f383 	clz	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d104      	bne.n	8004554 <HAL_RCC_OscConfig+0x5ec>
 800454a:	4b01      	ldr	r3, [pc, #4]	; (8004550 <HAL_RCC_OscConfig+0x5e8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	e015      	b.n	800457c <HAL_RCC_OscConfig+0x614>
 8004550:	40021000 	.word	0x40021000
 8004554:	2302      	movs	r3, #2
 8004556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004566:	2302      	movs	r3, #2
 8004568:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800456c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004578:	4bc8      	ldr	r3, [pc, #800]	; (800489c <HAL_RCC_OscConfig+0x934>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2202      	movs	r2, #2
 800457e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004582:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004586:	fa92 f2a2 	rbit	r2, r2
 800458a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800458e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004592:	fab2 f282 	clz	r2, r2
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f042 0220 	orr.w	r2, r2, #32
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	f002 021f 	and.w	r2, r2, #31
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1ad      	bne.n	800450a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8110 	beq.w	80047e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d079      	beq.n	80046c8 <HAL_RCC_OscConfig+0x760>
 80045d4:	2301      	movs	r3, #1
 80045d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80045e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	4bab      	ldr	r3, [pc, #684]	; (80048a0 <HAL_RCC_OscConfig+0x938>)
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	461a      	mov	r2, r3
 80045fa:	2301      	movs	r3, #1
 80045fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fe:	f7fd fd0f 	bl	8002020 <HAL_GetTick>
 8004602:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004606:	e00a      	b.n	800461e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004608:	f7fd fd0a 	bl	8002020 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d902      	bls.n	800461e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	f000 bcdb 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>
 800461e:	2302      	movs	r3, #2
 8004620:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004628:	fa93 f3a3 	rbit	r3, r3
 800462c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004634:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004638:	2202      	movs	r2, #2
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004640:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	fa93 f2a3 	rbit	r2, r3
 800464a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465c:	2202      	movs	r2, #2
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	fa93 f2a3 	rbit	r2, r3
 800466e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004672:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004676:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004678:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCC_OscConfig+0x934>)
 800467a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800467c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004680:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004684:	2102      	movs	r1, #2
 8004686:	6019      	str	r1, [r3, #0]
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	fa93 f1a3 	rbit	r1, r3
 8004696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800469e:	6019      	str	r1, [r3, #0]
  return result;
 80046a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	2101      	movs	r1, #1
 80046bc:	fa01 f303 	lsl.w	r3, r1, r3
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0a0      	beq.n	8004608 <HAL_RCC_OscConfig+0x6a0>
 80046c6:	e08d      	b.n	80047e4 <HAL_RCC_OscConfig+0x87c>
 80046c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f2a3 	rbit	r2, r3
 80046e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046ea:	601a      	str	r2, [r3, #0]
  return result;
 80046ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b68      	ldr	r3, [pc, #416]	; (80048a0 <HAL_RCC_OscConfig+0x938>)
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	461a      	mov	r2, r3
 8004706:	2300      	movs	r3, #0
 8004708:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470a:	f7fd fc89 	bl	8002020 <HAL_GetTick>
 800470e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004712:	e00a      	b.n	800472a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004714:	f7fd fc84 	bl	8002020 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d902      	bls.n	800472a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	f000 bc55 	b.w	8004fd4 <HAL_RCC_OscConfig+0x106c>
 800472a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004732:	2202      	movs	r2, #2
 8004734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	fa93 f2a3 	rbit	r2, r3
 8004744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004748:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004756:	2202      	movs	r2, #2
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	fa93 f2a3 	rbit	r2, r3
 8004768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477a:	2202      	movs	r2, #2
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	fa93 f2a3 	rbit	r2, r3
 800478c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004790:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004794:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004796:	4b41      	ldr	r3, [pc, #260]	; (800489c <HAL_RCC_OscConfig+0x934>)
 8004798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800479a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047a2:	2102      	movs	r1, #2
 80047a4:	6019      	str	r1, [r3, #0]
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	fa93 f1a3 	rbit	r1, r3
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047bc:	6019      	str	r1, [r3, #0]
  return result;
 80047be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d197      	bne.n	8004714 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 81a1 	beq.w	8004b3c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004800:	4b26      	ldr	r3, [pc, #152]	; (800489c <HAL_RCC_OscConfig+0x934>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d116      	bne.n	800483a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480c:	4b23      	ldr	r3, [pc, #140]	; (800489c <HAL_RCC_OscConfig+0x934>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4a22      	ldr	r2, [pc, #136]	; (800489c <HAL_RCC_OscConfig+0x934>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	61d3      	str	r3, [r2, #28]
 8004818:	4b20      	ldr	r3, [pc, #128]	; (800489c <HAL_RCC_OscConfig+0x934>)
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004824:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004832:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483a:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <HAL_RCC_OscConfig+0x93c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d11a      	bne.n	800487c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004846:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <HAL_RCC_OscConfig+0x93c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <HAL_RCC_OscConfig+0x93c>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004852:	f7fd fbe5 	bl	8002020 <HAL_GetTick>
 8004856:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485a:	e009      	b.n	8004870 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485c:	f7fd fbe0 	bl	8002020 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	; 0x64
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e3b1      	b.n	8004fd4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <HAL_RCC_OscConfig+0x93c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ef      	beq.n	800485c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d10d      	bne.n	80048a8 <HAL_RCC_OscConfig+0x940>
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <HAL_RCC_OscConfig+0x934>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a02      	ldr	r2, [pc, #8]	; (800489c <HAL_RCC_OscConfig+0x934>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6213      	str	r3, [r2, #32]
 8004898:	e03c      	b.n	8004914 <HAL_RCC_OscConfig+0x9ac>
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
 80048a0:	10908120 	.word	0x10908120
 80048a4:	40007000 	.word	0x40007000
 80048a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10c      	bne.n	80048d2 <HAL_RCC_OscConfig+0x96a>
 80048b8:	4bc1      	ldr	r3, [pc, #772]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	4ac0      	ldr	r2, [pc, #768]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	6213      	str	r3, [r2, #32]
 80048c4:	4bbe      	ldr	r3, [pc, #760]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	4abd      	ldr	r2, [pc, #756]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048ca:	f023 0304 	bic.w	r3, r3, #4
 80048ce:	6213      	str	r3, [r2, #32]
 80048d0:	e020      	b.n	8004914 <HAL_RCC_OscConfig+0x9ac>
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x994>
 80048e2:	4bb7      	ldr	r3, [pc, #732]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4ab6      	ldr	r2, [pc, #728]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6213      	str	r3, [r2, #32]
 80048ee:	4bb4      	ldr	r3, [pc, #720]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4ab3      	ldr	r2, [pc, #716]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6213      	str	r3, [r2, #32]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0x9ac>
 80048fc:	4bb0      	ldr	r3, [pc, #704]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	4aaf      	ldr	r2, [pc, #700]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6213      	str	r3, [r2, #32]
 8004908:	4bad      	ldr	r3, [pc, #692]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	4aac      	ldr	r2, [pc, #688]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 800490e:	f023 0304 	bic.w	r3, r3, #4
 8004912:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8081 	beq.w	8004a28 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004926:	f7fd fb7b 	bl	8002020 <HAL_GetTick>
 800492a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fd fb76 	bl	8002020 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e345      	b.n	8004fd4 <HAL_RCC_OscConfig+0x106c>
 8004948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004950:	2202      	movs	r2, #2
 8004952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004958:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	fa93 f2a3 	rbit	r2, r3
 8004962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004966:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004970:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004974:	2202      	movs	r2, #2
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	fa93 f2a3 	rbit	r2, r3
 8004986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800498e:	601a      	str	r2, [r3, #0]
  return result;
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004998:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f043 0302 	orr.w	r3, r3, #2
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d102      	bne.n	80049b4 <HAL_RCC_OscConfig+0xa4c>
 80049ae:	4b84      	ldr	r3, [pc, #528]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	e013      	b.n	80049dc <HAL_RCC_OscConfig+0xa74>
 80049b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049bc:	2202      	movs	r2, #2
 80049be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	fa93 f2a3 	rbit	r2, r3
 80049ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	4b79      	ldr	r3, [pc, #484]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80049e4:	2102      	movs	r1, #2
 80049e6:	6011      	str	r1, [r2, #0]
 80049e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	fa92 f1a2 	rbit	r1, r2
 80049f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80049fe:	6011      	str	r1, [r2, #0]
  return result;
 8004a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a04:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	fab2 f282 	clz	r2, r2
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	f002 021f 	and.w	r2, r2, #31
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d084      	beq.n	8004930 <HAL_RCC_OscConfig+0x9c8>
 8004a26:	e07f      	b.n	8004b28 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a28:	f7fd fafa 	bl	8002020 <HAL_GetTick>
 8004a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	e00b      	b.n	8004a4a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fd faf5 	bl	8002020 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e2c4      	b.n	8004fd4 <HAL_RCC_OscConfig+0x106c>
 8004a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a52:	2202      	movs	r2, #2
 8004a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	fa93 f2a3 	rbit	r2, r3
 8004a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a68:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a76:	2202      	movs	r2, #2
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	fa93 f2a3 	rbit	r2, r3
 8004a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a90:	601a      	str	r2, [r3, #0]
  return result;
 8004a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a96:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f043 0302 	orr.w	r3, r3, #2
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d102      	bne.n	8004ab6 <HAL_RCC_OscConfig+0xb4e>
 8004ab0:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	e013      	b.n	8004ade <HAL_RCC_OscConfig+0xb76>
 8004ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004abe:	2202      	movs	r2, #2
 8004ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	fa93 f2a3 	rbit	r2, r3
 8004ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	4b39      	ldr	r3, [pc, #228]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ae2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	6011      	str	r1, [r2, #0]
 8004aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004aee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	fa92 f1a2 	rbit	r1, r2
 8004af8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004afc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b00:	6011      	str	r1, [r2, #0]
  return result;
 8004b02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b06:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	fab2 f282 	clz	r2, r2
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	f002 021f 	and.w	r2, r2, #31
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d184      	bne.n	8004a32 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b28:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b30:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8242 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b4e:	4b1c      	ldr	r3, [pc, #112]	; (8004bc0 <HAL_RCC_OscConfig+0xc58>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	f000 8213 	beq.w	8004f82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	f040 8162 	bne.w	8004e32 <HAL_RCC_OscConfig+0xeca>
 8004b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b72:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b80:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	fa93 f2a3 	rbit	r2, r3
 8004b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b92:	601a      	str	r2, [r3, #0]
  return result;
 8004b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b98:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fa34 	bl	8002020 <HAL_GetTick>
 8004bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bbc:	e00c      	b.n	8004bd8 <HAL_RCC_OscConfig+0xc70>
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fd fa2c 	bl	8002020 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e1fd      	b.n	8004fd4 <HAL_RCC_OscConfig+0x106c>
 8004bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bdc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004be0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	fa93 f2a3 	rbit	r2, r3
 8004bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004bfc:	601a      	str	r2, [r3, #0]
  return result;
 8004bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d102      	bne.n	8004c22 <HAL_RCC_OscConfig+0xcba>
 8004c1c:	4bb0      	ldr	r3, [pc, #704]	; (8004ee0 <HAL_RCC_OscConfig+0xf78>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	e027      	b.n	8004c72 <HAL_RCC_OscConfig+0xd0a>
 8004c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	fa93 f2a3 	rbit	r2, r3
 8004c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c42:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	fa93 f2a3 	rbit	r2, r3
 8004c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c68:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	4b9c      	ldr	r3, [pc, #624]	; (8004ee0 <HAL_RCC_OscConfig+0xf78>)
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c76:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c7e:	6011      	str	r1, [r2, #0]
 8004c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c84:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	fa92 f1a2 	rbit	r1, r2
 8004c8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c92:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c96:	6011      	str	r1, [r2, #0]
  return result;
 8004c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	fab2 f282 	clz	r2, r2
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	f042 0220 	orr.w	r2, r2, #32
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	f002 021f 	and.w	r2, r2, #31
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d182      	bne.n	8004bc4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cbe:	4b88      	ldr	r3, [pc, #544]	; (8004ee0 <HAL_RCC_OscConfig+0xf78>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	497f      	ldr	r1, [pc, #508]	; (8004ee0 <HAL_RCC_OscConfig+0xf78>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
 8004ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004cee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	fa93 f2a3 	rbit	r2, r3
 8004d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d0a:	601a      	str	r2, [r3, #0]
  return result;
 8004d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d14:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	461a      	mov	r2, r3
 8004d28:	2301      	movs	r3, #1
 8004d2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fd f978 	bl	8002020 <HAL_GetTick>
 8004d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d34:	e009      	b.n	8004d4a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d36:	f7fd f973 	bl	8002020 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e144      	b.n	8004fd4 <HAL_RCC_OscConfig+0x106c>
 8004d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	fa93 f2a3 	rbit	r2, r3
 8004d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d6e:	601a      	str	r2, [r3, #0]
  return result;
 8004d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <HAL_RCC_OscConfig+0xe2c>
 8004d8e:	4b54      	ldr	r3, [pc, #336]	; (8004ee0 <HAL_RCC_OscConfig+0xf78>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	e027      	b.n	8004de4 <HAL_RCC_OscConfig+0xe7c>
 8004d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	fa93 f2a3 	rbit	r2, r3
 8004db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	fa93 f2a3 	rbit	r2, r3
 8004dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dda:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	4b3f      	ldr	r3, [pc, #252]	; (8004ee0 <HAL_RCC_OscConfig+0xf78>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004de8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004dec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004df0:	6011      	str	r1, [r2, #0]
 8004df2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004df6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	fa92 f1a2 	rbit	r1, r2
 8004e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e08:	6011      	str	r1, [r2, #0]
  return result;
 8004e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	fab2 f282 	clz	r2, r2
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	f042 0220 	orr.w	r2, r2, #32
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	f002 021f 	and.w	r2, r2, #31
 8004e24:	2101      	movs	r1, #1
 8004e26:	fa01 f202 	lsl.w	r2, r1, r2
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d082      	beq.n	8004d36 <HAL_RCC_OscConfig+0xdce>
 8004e30:	e0cf      	b.n	8004fd2 <HAL_RCC_OscConfig+0x106a>
 8004e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e36:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	fa93 f2a3 	rbit	r2, r3
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e56:	601a      	str	r2, [r3, #0]
  return result;
 8004e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	461a      	mov	r2, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd f8d2 	bl	8002020 <HAL_GetTick>
 8004e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e80:	e009      	b.n	8004e96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e82:	f7fd f8cd 	bl	8002020 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e09e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x106c>
 8004e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	fa93 f2a3 	rbit	r2, r3
 8004eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004eba:	601a      	str	r2, [r3, #0]
  return result;
 8004ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ec4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec6:	fab3 f383 	clz	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d104      	bne.n	8004ee4 <HAL_RCC_OscConfig+0xf7c>
 8004eda:	4b01      	ldr	r3, [pc, #4]	; (8004ee0 <HAL_RCC_OscConfig+0xf78>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	e029      	b.n	8004f34 <HAL_RCC_OscConfig+0xfcc>
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	fa93 f2a3 	rbit	r2, r3
 8004f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	fa93 f2a3 	rbit	r2, r3
 8004f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_RCC_OscConfig+0x1078>)
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f40:	6011      	str	r1, [r2, #0]
 8004f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	fa92 f1a2 	rbit	r1, r2
 8004f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f58:	6011      	str	r1, [r2, #0]
  return result;
 8004f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	fab2 f282 	clz	r2, r2
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	f042 0220 	orr.w	r2, r2, #32
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	f002 021f 	and.w	r2, r2, #31
 8004f74:	2101      	movs	r1, #1
 8004f76:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d180      	bne.n	8004e82 <HAL_RCC_OscConfig+0xf1a>
 8004f80:	e027      	b.n	8004fd2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e01e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_RCC_OscConfig+0x1078>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fa2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d10b      	bne.n	8004fce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004fb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000

08004fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b09e      	sub	sp, #120	; 0x78
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e162      	b.n	80052c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b90      	ldr	r3, [pc, #576]	; (8005240 <HAL_RCC_ClockConfig+0x25c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d910      	bls.n	800502c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b8d      	ldr	r3, [pc, #564]	; (8005240 <HAL_RCC_ClockConfig+0x25c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 0207 	bic.w	r2, r3, #7
 8005012:	498b      	ldr	r1, [pc, #556]	; (8005240 <HAL_RCC_ClockConfig+0x25c>)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b89      	ldr	r3, [pc, #548]	; (8005240 <HAL_RCC_ClockConfig+0x25c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e14a      	b.n	80052c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005038:	4b82      	ldr	r3, [pc, #520]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	497f      	ldr	r1, [pc, #508]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 8005046:	4313      	orrs	r3, r2
 8005048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80dc 	beq.w	8005210 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d13c      	bne.n	80050da <HAL_RCC_ClockConfig+0xf6>
 8005060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005064:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005068:	fa93 f3a3 	rbit	r3, r3
 800506c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800506e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005070:	fab3 f383 	clz	r3, r3
 8005074:	b2db      	uxtb	r3, r3
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	d102      	bne.n	800508a <HAL_RCC_ClockConfig+0xa6>
 8005084:	4b6f      	ldr	r3, [pc, #444]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	e00f      	b.n	80050aa <HAL_RCC_ClockConfig+0xc6>
 800508a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800508e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	667b      	str	r3, [r7, #100]	; 0x64
 8005098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800509c:	663b      	str	r3, [r7, #96]	; 0x60
 800509e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050a0:	fa93 f3a3 	rbit	r3, r3
 80050a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a6:	4b67      	ldr	r3, [pc, #412]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80050b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050b2:	fa92 f2a2 	rbit	r2, r2
 80050b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80050b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ba:	fab2 f282 	clz	r2, r2
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	f042 0220 	orr.w	r2, r2, #32
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	f002 021f 	and.w	r2, r2, #31
 80050ca:	2101      	movs	r1, #1
 80050cc:	fa01 f202 	lsl.w	r2, r1, r2
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d17b      	bne.n	80051ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0f3      	b.n	80052c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d13c      	bne.n	800515c <HAL_RCC_ClockConfig+0x178>
 80050e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f2:	fab3 f383 	clz	r3, r3
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b01      	cmp	r3, #1
 8005104:	d102      	bne.n	800510c <HAL_RCC_ClockConfig+0x128>
 8005106:	4b4f      	ldr	r3, [pc, #316]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	e00f      	b.n	800512c <HAL_RCC_ClockConfig+0x148>
 800510c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005110:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005114:	fa93 f3a3 	rbit	r3, r3
 8005118:	647b      	str	r3, [r7, #68]	; 0x44
 800511a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800511e:	643b      	str	r3, [r7, #64]	; 0x40
 8005120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005122:	fa93 f3a3 	rbit	r3, r3
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005128:	4b46      	ldr	r3, [pc, #280]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005130:	63ba      	str	r2, [r7, #56]	; 0x38
 8005132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005134:	fa92 f2a2 	rbit	r2, r2
 8005138:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800513a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800513c:	fab2 f282 	clz	r2, r2
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	f042 0220 	orr.w	r2, r2, #32
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	f002 021f 	and.w	r2, r2, #31
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f202 	lsl.w	r2, r1, r2
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d13a      	bne.n	80051ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0b2      	b.n	80052c2 <HAL_RCC_ClockConfig+0x2de>
 800515c:	2302      	movs	r3, #2
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	fa93 f3a3 	rbit	r3, r3
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516a:	fab3 f383 	clz	r3, r3
 800516e:	b2db      	uxtb	r3, r3
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	d102      	bne.n	8005184 <HAL_RCC_ClockConfig+0x1a0>
 800517e:	4b31      	ldr	r3, [pc, #196]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	e00d      	b.n	80051a0 <HAL_RCC_ClockConfig+0x1bc>
 8005184:	2302      	movs	r3, #2
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	fa93 f3a3 	rbit	r3, r3
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
 8005190:	2302      	movs	r3, #2
 8005192:	623b      	str	r3, [r7, #32]
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	fa93 f3a3 	rbit	r3, r3
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	4b29      	ldr	r3, [pc, #164]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2202      	movs	r2, #2
 80051a2:	61ba      	str	r2, [r7, #24]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	fa92 f2a2 	rbit	r2, r2
 80051aa:	617a      	str	r2, [r7, #20]
  return result;
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	fab2 f282 	clz	r2, r2
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	f042 0220 	orr.w	r2, r2, #32
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	f002 021f 	and.w	r2, r2, #31
 80051be:	2101      	movs	r1, #1
 80051c0:	fa01 f202 	lsl.w	r2, r1, r2
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e079      	b.n	80052c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f023 0203 	bic.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	491a      	ldr	r1, [pc, #104]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e0:	f7fc ff1e 	bl	8002020 <HAL_GetTick>
 80051e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e6:	e00a      	b.n	80051fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e8:	f7fc ff1a 	bl	8002020 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e061      	b.n	80052c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fe:	4b11      	ldr	r3, [pc, #68]	; (8005244 <HAL_RCC_ClockConfig+0x260>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 020c 	and.w	r2, r3, #12
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	429a      	cmp	r2, r3
 800520e:	d1eb      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_RCC_ClockConfig+0x25c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d214      	bcs.n	8005248 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	4b08      	ldr	r3, [pc, #32]	; (8005240 <HAL_RCC_ClockConfig+0x25c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 0207 	bic.w	r2, r3, #7
 8005226:	4906      	ldr	r1, [pc, #24]	; (8005240 <HAL_RCC_ClockConfig+0x25c>)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522e:	4b04      	ldr	r3, [pc, #16]	; (8005240 <HAL_RCC_ClockConfig+0x25c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d005      	beq.n	8005248 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e040      	b.n	80052c2 <HAL_RCC_ClockConfig+0x2de>
 8005240:	40022000 	.word	0x40022000
 8005244:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_RCC_ClockConfig+0x2e8>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	491a      	ldr	r1, [pc, #104]	; (80052cc <HAL_RCC_ClockConfig+0x2e8>)
 8005262:	4313      	orrs	r3, r2
 8005264:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005272:	4b16      	ldr	r3, [pc, #88]	; (80052cc <HAL_RCC_ClockConfig+0x2e8>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4912      	ldr	r1, [pc, #72]	; (80052cc <HAL_RCC_ClockConfig+0x2e8>)
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005286:	f000 f829 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 800528a:	4601      	mov	r1, r0
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <HAL_RCC_ClockConfig+0x2e8>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005294:	22f0      	movs	r2, #240	; 0xf0
 8005296:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	fa92 f2a2 	rbit	r2, r2
 800529e:	60fa      	str	r2, [r7, #12]
  return result;
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	fab2 f282 	clz	r2, r2
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	40d3      	lsrs	r3, r2
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <HAL_RCC_ClockConfig+0x2ec>)
 80052ac:	5cd3      	ldrb	r3, [r2, r3]
 80052ae:	fa21 f303 	lsr.w	r3, r1, r3
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <HAL_RCC_ClockConfig+0x2f0>)
 80052b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_RCC_ClockConfig+0x2f4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fc fe6c 	bl	8001f98 <HAL_InitTick>
  
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3778      	adds	r7, #120	; 0x78
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	0800b288 	.word	0x0800b288
 80052d4:	20000360 	.word	0x20000360
 80052d8:	20000364 	.word	0x20000364

080052dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	b08b      	sub	sp, #44	; 0x2c
 80052e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	2300      	movs	r3, #0
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80052f6:	4b29      	ldr	r3, [pc, #164]	; (800539c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	2b04      	cmp	r3, #4
 8005304:	d002      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x30>
 8005306:	2b08      	cmp	r3, #8
 8005308:	d003      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0x36>
 800530a:	e03c      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800530e:	623b      	str	r3, [r7, #32]
      break;
 8005310:	e03c      	b.n	800538c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005318:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800531c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	fa92 f2a2 	rbit	r2, r2
 8005324:	607a      	str	r2, [r7, #4]
  return result;
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	fab2 f282 	clz	r2, r2
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	40d3      	lsrs	r3, r2
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005332:	5cd3      	ldrb	r3, [r2, r3]
 8005334:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005336:	4b19      	ldr	r3, [pc, #100]	; (800539c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	220f      	movs	r2, #15
 8005340:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	fa92 f2a2 	rbit	r2, r2
 8005348:	60fa      	str	r2, [r7, #12]
  return result;
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	fab2 f282 	clz	r2, r2
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	40d3      	lsrs	r3, r2
 8005354:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005356:	5cd3      	ldrb	r3, [r2, r3]
 8005358:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005364:	4a0e      	ldr	r2, [pc, #56]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	fbb2 f2f3 	udiv	r2, r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
 8005374:	e004      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	4a0c      	ldr	r2, [pc, #48]	; (80053ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	623b      	str	r3, [r7, #32]
      break;
 8005384:	e002      	b.n	800538c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005388:	623b      	str	r3, [r7, #32]
      break;
 800538a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538c:	6a3b      	ldr	r3, [r7, #32]
}
 800538e:	4618      	mov	r0, r3
 8005390:	372c      	adds	r7, #44	; 0x2c
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	007a1200 	.word	0x007a1200
 80053a4:	0800b2a0 	.word	0x0800b2a0
 80053a8:	0800b2b0 	.word	0x0800b2b0
 80053ac:	003d0900 	.word	0x003d0900

080053b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b4:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053b6:	681b      	ldr	r3, [r3, #0]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000360 	.word	0x20000360

080053c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053ce:	f7ff ffef 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053d2:	4601      	mov	r1, r0
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	fa92 f2a2 	rbit	r2, r2
 80053e8:	603a      	str	r2, [r7, #0]
  return result;
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	fab2 f282 	clz	r2, r2
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	40d3      	lsrs	r3, r2
 80053f4:	4a04      	ldr	r2, [pc, #16]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x40>)
 80053f6:	5cd3      	ldrb	r3, [r2, r3]
 80053f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40021000 	.word	0x40021000
 8005408:	0800b298 	.word	0x0800b298

0800540c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005412:	f7ff ffcd 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 8005416:	4601      	mov	r1, r0
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005420:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005424:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	fa92 f2a2 	rbit	r2, r2
 800542c:	603a      	str	r2, [r7, #0]
  return result;
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	fab2 f282 	clz	r2, r2
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	40d3      	lsrs	r3, r2
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <HAL_RCC_GetPCLK2Freq+0x40>)
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	0800b298 	.word	0x0800b298

08005450 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b092      	sub	sp, #72	; 0x48
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80d4 	beq.w	800561c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005474:	4b4e      	ldr	r3, [pc, #312]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10e      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005480:	4b4b      	ldr	r3, [pc, #300]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	4a4a      	ldr	r2, [pc, #296]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548a:	61d3      	str	r3, [r2, #28]
 800548c:	4b48      	ldr	r3, [pc, #288]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005498:	2301      	movs	r3, #1
 800549a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549e:	4b45      	ldr	r3, [pc, #276]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d118      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054aa:	4b42      	ldr	r3, [pc, #264]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a41      	ldr	r2, [pc, #260]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b6:	f7fc fdb3 	bl	8002020 <HAL_GetTick>
 80054ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054bc:	e008      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054be:	f7fc fdaf 	bl	8002020 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b64      	cmp	r3, #100	; 0x64
 80054ca:	d901      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e14b      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d0:	4b38      	ldr	r3, [pc, #224]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054dc:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8084 	beq.w	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d07c      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054fc:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800550a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	fa93 f3a3 	rbit	r3, r3
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	4b26      	ldr	r3, [pc, #152]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	461a      	mov	r2, r3
 8005526:	2301      	movs	r3, #1
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800552e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	fa93 f3a3 	rbit	r3, r3
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800553a:	fab3 f383 	clz	r3, r3
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	461a      	mov	r2, r3
 800554a:	2300      	movs	r3, #0
 800554c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800554e:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005552:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d04b      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555e:	f7fc fd5f 	bl	8002020 <HAL_GetTick>
 8005562:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005564:	e00a      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005566:	f7fc fd5b 	bl	8002020 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	f241 3288 	movw	r2, #5000	; 0x1388
 8005574:	4293      	cmp	r3, r2
 8005576:	d901      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0f5      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800557c:	2302      	movs	r3, #2
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
 8005588:	2302      	movs	r3, #2
 800558a:	623b      	str	r3, [r7, #32]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	fa93 f3a3 	rbit	r3, r3
 8005592:	61fb      	str	r3, [r7, #28]
  return result;
 8005594:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005596:	fab3 f383 	clz	r3, r3
 800559a:	b2db      	uxtb	r3, r3
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f043 0302 	orr.w	r3, r3, #2
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d108      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80055aa:	4b01      	ldr	r3, [pc, #4]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	e00d      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80055b0:	40021000 	.word	0x40021000
 80055b4:	40007000 	.word	0x40007000
 80055b8:	10908100 	.word	0x10908100
 80055bc:	2302      	movs	r3, #2
 80055be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	fa93 f3a3 	rbit	r3, r3
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	4b69      	ldr	r3, [pc, #420]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2202      	movs	r2, #2
 80055ce:	613a      	str	r2, [r7, #16]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	fa92 f2a2 	rbit	r2, r2
 80055d6:	60fa      	str	r2, [r7, #12]
  return result;
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	fab2 f282 	clz	r2, r2
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	f002 021f 	and.w	r2, r2, #31
 80055ea:	2101      	movs	r1, #1
 80055ec:	fa01 f202 	lsl.w	r2, r1, r2
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0b7      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80055f6:	4b5e      	ldr	r3, [pc, #376]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	495b      	ldr	r1, [pc, #364]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005604:	4313      	orrs	r3, r2
 8005606:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005608:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800560c:	2b01      	cmp	r3, #1
 800560e:	d105      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005610:	4b57      	ldr	r3, [pc, #348]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	4a56      	ldr	r2, [pc, #344]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005628:	4b51      	ldr	r3, [pc, #324]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	f023 0203 	bic.w	r2, r3, #3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	494e      	ldr	r1, [pc, #312]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005636:	4313      	orrs	r3, r2
 8005638:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005646:	4b4a      	ldr	r3, [pc, #296]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	f023 0210 	bic.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4947      	ldr	r1, [pc, #284]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005654:	4313      	orrs	r3, r2
 8005656:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005664:	4b42      	ldr	r3, [pc, #264]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	493f      	ldr	r1, [pc, #252]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005672:	4313      	orrs	r3, r2
 8005674:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005682:	4b3b      	ldr	r3, [pc, #236]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f023 0220 	bic.w	r2, r3, #32
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	4938      	ldr	r1, [pc, #224]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005690:	4313      	orrs	r3, r2
 8005692:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056a0:	4b33      	ldr	r3, [pc, #204]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	4930      	ldr	r1, [pc, #192]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056be:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	4929      	ldr	r1, [pc, #164]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80056dc:	4b24      	ldr	r3, [pc, #144]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	4921      	ldr	r1, [pc, #132]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	491a      	ldr	r1, [pc, #104]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005708:	4313      	orrs	r3, r2
 800570a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	4912      	ldr	r1, [pc, #72]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005726:	4313      	orrs	r3, r2
 8005728:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005736:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	490b      	ldr	r1, [pc, #44]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005744:	4313      	orrs	r3, r2
 8005746:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	4903      	ldr	r1, [pc, #12]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005762:	4313      	orrs	r3, r2
 8005764:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3748      	adds	r7, #72	; 0x48
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000

08005774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e049      	b.n	800581a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fc fa06 	bl	8001bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 fd26 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d001      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e03b      	b.n	80058b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a19      	ldr	r2, [pc, #100]	; (80058c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_TIM_Base_Start_IT+0x4e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005866:	d004      	beq.n	8005872 <HAL_TIM_Base_Start_IT+0x4e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d115      	bne.n	800589e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800587a:	4013      	ands	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b06      	cmp	r3, #6
 8005882:	d015      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x8c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588a:	d011      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589c:	e008      	b.n	80058b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	e000      	b.n	80058b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40014000 	.word	0x40014000
 80058c8:	00010007 	.word	0x00010007

080058cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10f      	bne.n	8005914 <HAL_TIM_Base_Stop_IT+0x48>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	f240 4344 	movw	r3, #1092	; 0x444
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d107      	bne.n	8005914 <HAL_TIM_Base_Stop_IT+0x48>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0201 	bic.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e049      	b.n	80059d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f841 	bl	80059d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f000 fc4b 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <HAL_TIM_PWM_Start+0x24>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	bf14      	ite	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	2300      	moveq	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	e03c      	b.n	8005a8a <HAL_TIM_PWM_Start+0x9e>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d109      	bne.n	8005a2a <HAL_TIM_PWM_Start+0x3e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	bf14      	ite	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	2300      	moveq	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	e02f      	b.n	8005a8a <HAL_TIM_PWM_Start+0x9e>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d109      	bne.n	8005a44 <HAL_TIM_PWM_Start+0x58>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	e022      	b.n	8005a8a <HAL_TIM_PWM_Start+0x9e>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d109      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x72>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e015      	b.n	8005a8a <HAL_TIM_PWM_Start+0x9e>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d109      	bne.n	8005a78 <HAL_TIM_PWM_Start+0x8c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e008      	b.n	8005a8a <HAL_TIM_PWM_Start+0x9e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e083      	b.n	8005b9a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_PWM_Start+0xb6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa0:	e023      	b.n	8005aea <HAL_TIM_PWM_Start+0xfe>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_PWM_Start+0xc6>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab0:	e01b      	b.n	8005aea <HAL_TIM_PWM_Start+0xfe>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_PWM_Start+0xd6>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac0:	e013      	b.n	8005aea <HAL_TIM_PWM_Start+0xfe>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b0c      	cmp	r3, #12
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_PWM_Start+0xe6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ad0:	e00b      	b.n	8005aea <HAL_TIM_PWM_Start+0xfe>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0xf6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae0:	e003      	b.n	8005aea <HAL_TIM_PWM_Start+0xfe>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2201      	movs	r2, #1
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 ff34 	bl	8006960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <HAL_TIM_PWM_Start+0x1b8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00e      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x134>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <HAL_TIM_PWM_Start+0x1bc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x134>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a26      	ldr	r2, [pc, #152]	; (8005bac <HAL_TIM_PWM_Start+0x1c0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x134>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a25      	ldr	r2, [pc, #148]	; (8005bb0 <HAL_TIM_PWM_Start+0x1c4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_PWM_Start+0x138>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <HAL_TIM_PWM_Start+0x13a>
 8005b24:	2300      	movs	r3, #0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a19      	ldr	r2, [pc, #100]	; (8005ba4 <HAL_TIM_PWM_Start+0x1b8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_TIM_PWM_Start+0x16c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d004      	beq.n	8005b58 <HAL_TIM_PWM_Start+0x16c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <HAL_TIM_PWM_Start+0x1bc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d115      	bne.n	8005b84 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <HAL_TIM_PWM_Start+0x1c8>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d015      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1aa>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d011      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	e008      	b.n	8005b96 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e000      	b.n	8005b98 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800
 8005bb4:	00010007 	.word	0x00010007

08005bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d122      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d11b      	bne.n	8005c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0202 	mvn.w	r2, #2
 8005be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fae3 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005c00:	e005      	b.n	8005c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fad5 	bl	80061b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fae6 	bl	80061da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d122      	bne.n	8005c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d11b      	bne.n	8005c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0204 	mvn.w	r2, #4
 8005c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fab9 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005c54:	e005      	b.n	8005c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 faab 	bl	80061b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fabc 	bl	80061da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d122      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d11b      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0208 	mvn.w	r2, #8
 8005c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2204      	movs	r2, #4
 8005c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa8f 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005ca8:	e005      	b.n	8005cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa81 	bl	80061b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fa92 	bl	80061da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b10      	cmp	r3, #16
 8005cc8:	d122      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d11b      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0210 	mvn.w	r2, #16
 8005ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa65 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e005      	b.n	8005d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa57 	bl	80061b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa68 	bl	80061da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d10e      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d107      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0201 	mvn.w	r2, #1
 8005d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fb fa76 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b80      	cmp	r3, #128	; 0x80
 8005d48:	d10e      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d54:	2b80      	cmp	r3, #128	; 0x80
 8005d56:	d107      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 ff0a 	bl	8006b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d76:	d10e      	bne.n	8005d96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b80      	cmp	r3, #128	; 0x80
 8005d84:	d107      	bne.n	8005d96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fefd 	bl	8006b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d10e      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d107      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fa16 	bl	80061ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d10e      	bne.n	8005dee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d107      	bne.n	8005dee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f06f 0220 	mvn.w	r2, #32
 8005de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 febd 	bl	8006b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e0ff      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b14      	cmp	r3, #20
 8005e22:	f200 80f0 	bhi.w	8006006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e81 	.word	0x08005e81
 8005e30:	08006007 	.word	0x08006007
 8005e34:	08006007 	.word	0x08006007
 8005e38:	08006007 	.word	0x08006007
 8005e3c:	08005ec1 	.word	0x08005ec1
 8005e40:	08006007 	.word	0x08006007
 8005e44:	08006007 	.word	0x08006007
 8005e48:	08006007 	.word	0x08006007
 8005e4c:	08005f03 	.word	0x08005f03
 8005e50:	08006007 	.word	0x08006007
 8005e54:	08006007 	.word	0x08006007
 8005e58:	08006007 	.word	0x08006007
 8005e5c:	08005f43 	.word	0x08005f43
 8005e60:	08006007 	.word	0x08006007
 8005e64:	08006007 	.word	0x08006007
 8005e68:	08006007 	.word	0x08006007
 8005e6c:	08005f85 	.word	0x08005f85
 8005e70:	08006007 	.word	0x08006007
 8005e74:	08006007 	.word	0x08006007
 8005e78:	08006007 	.word	0x08006007
 8005e7c:	08005fc5 	.word	0x08005fc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fa2a 	bl	80062e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0208 	orr.w	r2, r2, #8
 8005e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0204 	bic.w	r2, r2, #4
 8005eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6999      	ldr	r1, [r3, #24]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	619a      	str	r2, [r3, #24]
      break;
 8005ebe:	e0a5      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fa90 	bl	80063ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6999      	ldr	r1, [r3, #24]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	021a      	lsls	r2, r3, #8
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	619a      	str	r2, [r3, #24]
      break;
 8005f00:	e084      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 faef 	bl	80064ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0208 	orr.w	r2, r2, #8
 8005f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0204 	bic.w	r2, r2, #4
 8005f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69d9      	ldr	r1, [r3, #28]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	61da      	str	r2, [r3, #28]
      break;
 8005f40:	e064      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fb4d 	bl	80065e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69d9      	ldr	r1, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	021a      	lsls	r2, r3, #8
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	61da      	str	r2, [r3, #28]
      break;
 8005f82:	e043      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fb90 	bl	80066b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0208 	orr.w	r2, r2, #8
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0204 	bic.w	r2, r2, #4
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fc2:	e023      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fbce 	bl	800676c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	021a      	lsls	r2, r3, #8
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006004:	e002      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
      break;
 800600a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop

08006020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_TIM_ConfigClockSource+0x1c>
 8006038:	2302      	movs	r3, #2
 800603a:	e0b6      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x18a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800605e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006078:	d03e      	beq.n	80060f8 <HAL_TIM_ConfigClockSource+0xd8>
 800607a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607e:	f200 8087 	bhi.w	8006190 <HAL_TIM_ConfigClockSource+0x170>
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	f000 8086 	beq.w	8006196 <HAL_TIM_ConfigClockSource+0x176>
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608e:	d87f      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 8006090:	2b70      	cmp	r3, #112	; 0x70
 8006092:	d01a      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0xaa>
 8006094:	2b70      	cmp	r3, #112	; 0x70
 8006096:	d87b      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 8006098:	2b60      	cmp	r3, #96	; 0x60
 800609a:	d050      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x11e>
 800609c:	2b60      	cmp	r3, #96	; 0x60
 800609e:	d877      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060a0:	2b50      	cmp	r3, #80	; 0x50
 80060a2:	d03c      	beq.n	800611e <HAL_TIM_ConfigClockSource+0xfe>
 80060a4:	2b50      	cmp	r3, #80	; 0x50
 80060a6:	d873      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d058      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x13e>
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d86f      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060b0:	2b30      	cmp	r3, #48	; 0x30
 80060b2:	d064      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x15e>
 80060b4:	2b30      	cmp	r3, #48	; 0x30
 80060b6:	d86b      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d060      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x15e>
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d867      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d05c      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x15e>
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d05a      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x15e>
 80060c8:	e062      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060da:	f000 fc21 	bl	8006920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	609a      	str	r2, [r3, #8]
      break;
 80060f6:	e04f      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006108:	f000 fc0a 	bl	8006920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800611a:	609a      	str	r2, [r3, #8]
      break;
 800611c:	e03c      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800612a:	461a      	mov	r2, r3
 800612c:	f000 fb7e 	bl	800682c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2150      	movs	r1, #80	; 0x50
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fbd7 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 800613c:	e02c      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800614a:	461a      	mov	r2, r3
 800614c:	f000 fb9d 	bl	800688a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2160      	movs	r1, #96	; 0x60
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fbc7 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 800615c:	e01c      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800616a:	461a      	mov	r2, r3
 800616c:	f000 fb5e 	bl	800682c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fbb7 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 800617c:	e00c      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f000 fbae 	bl	80068ea <TIM_ITRx_SetConfig>
      break;
 800618e:	e003      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	73fb      	strb	r3, [r7, #15]
      break;
 8006194:	e000      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
	...

08006204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a2e      	ldr	r2, [pc, #184]	; (80062d0 <TIM_Base_SetConfig+0xcc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_Base_SetConfig+0x20>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d108      	bne.n	8006236 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a25      	ldr	r2, [pc, #148]	; (80062d0 <TIM_Base_SetConfig+0xcc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00f      	beq.n	800625e <TIM_Base_SetConfig+0x5a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006244:	d00b      	beq.n	800625e <TIM_Base_SetConfig+0x5a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <TIM_Base_SetConfig+0xd0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <TIM_Base_SetConfig+0x5a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <TIM_Base_SetConfig+0xd4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_Base_SetConfig+0x5a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a20      	ldr	r2, [pc, #128]	; (80062dc <TIM_Base_SetConfig+0xd8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d108      	bne.n	8006270 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a0e      	ldr	r2, [pc, #56]	; (80062d0 <TIM_Base_SetConfig+0xcc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_Base_SetConfig+0xb0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a0d      	ldr	r2, [pc, #52]	; (80062d4 <TIM_Base_SetConfig+0xd0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_Base_SetConfig+0xb0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a0c      	ldr	r2, [pc, #48]	; (80062d8 <TIM_Base_SetConfig+0xd4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_Base_SetConfig+0xb0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a0b      	ldr	r2, [pc, #44]	; (80062dc <TIM_Base_SetConfig+0xd8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d103      	bne.n	80062bc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	615a      	str	r2, [r3, #20]
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400
 80062dc:	40014800 	.word	0x40014800

080062e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f023 0302 	bic.w	r3, r3, #2
 800632c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a28      	ldr	r2, [pc, #160]	; (80063dc <TIM_OC1_SetConfig+0xfc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_OC1_SetConfig+0x78>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a27      	ldr	r2, [pc, #156]	; (80063e0 <TIM_OC1_SetConfig+0x100>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_OC1_SetConfig+0x78>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a26      	ldr	r2, [pc, #152]	; (80063e4 <TIM_OC1_SetConfig+0x104>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC1_SetConfig+0x78>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <TIM_OC1_SetConfig+0x108>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d10c      	bne.n	8006372 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0308 	bic.w	r3, r3, #8
 800635e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f023 0304 	bic.w	r3, r3, #4
 8006370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a19      	ldr	r2, [pc, #100]	; (80063dc <TIM_OC1_SetConfig+0xfc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00b      	beq.n	8006392 <TIM_OC1_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <TIM_OC1_SetConfig+0x100>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <TIM_OC1_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <TIM_OC1_SetConfig+0x104>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC1_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <TIM_OC1_SetConfig+0x108>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d111      	bne.n	80063b6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	621a      	str	r2, [r3, #32]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40014400 	.word	0x40014400
 80063e8:	40014800 	.word	0x40014800

080063ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f023 0210 	bic.w	r2, r3, #16
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0320 	bic.w	r3, r3, #32
 800643a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a24      	ldr	r2, [pc, #144]	; (80064dc <TIM_OC2_SetConfig+0xf0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d10d      	bne.n	800646c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <TIM_OC2_SetConfig+0xf0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_OC2_SetConfig+0xa0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <TIM_OC2_SetConfig+0xf4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_OC2_SetConfig+0xa0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a19      	ldr	r2, [pc, #100]	; (80064e4 <TIM_OC2_SetConfig+0xf8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC2_SetConfig+0xa0>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <TIM_OC2_SetConfig+0xfc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d113      	bne.n	80064b4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006492:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800649a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800

080064ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	021b      	lsls	r3, r3, #8
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a23      	ldr	r2, [pc, #140]	; (80065d8 <TIM_OC3_SetConfig+0xec>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10d      	bne.n	800656a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006568:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1a      	ldr	r2, [pc, #104]	; (80065d8 <TIM_OC3_SetConfig+0xec>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <TIM_OC3_SetConfig+0x9e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a19      	ldr	r2, [pc, #100]	; (80065dc <TIM_OC3_SetConfig+0xf0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <TIM_OC3_SetConfig+0x9e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <TIM_OC3_SetConfig+0xf4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_OC3_SetConfig+0x9e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a17      	ldr	r2, [pc, #92]	; (80065e4 <TIM_OC3_SetConfig+0xf8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d113      	bne.n	80065b2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	621a      	str	r2, [r3, #32]
}
 80065cc:	bf00      	nop
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800

080065e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a16      	ldr	r2, [pc, #88]	; (80066a0 <TIM_OC4_SetConfig+0xb8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_OC4_SetConfig+0x7c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a15      	ldr	r2, [pc, #84]	; (80066a4 <TIM_OC4_SetConfig+0xbc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_OC4_SetConfig+0x7c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a14      	ldr	r2, [pc, #80]	; (80066a8 <TIM_OC4_SetConfig+0xc0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC4_SetConfig+0x7c>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a13      	ldr	r2, [pc, #76]	; (80066ac <TIM_OC4_SetConfig+0xc4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d109      	bne.n	8006678 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800666a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	019b      	lsls	r3, r3, #6
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800

080066b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	041b      	lsls	r3, r3, #16
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a15      	ldr	r2, [pc, #84]	; (800675c <TIM_OC5_SetConfig+0xac>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00b      	beq.n	8006722 <TIM_OC5_SetConfig+0x72>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a14      	ldr	r2, [pc, #80]	; (8006760 <TIM_OC5_SetConfig+0xb0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_OC5_SetConfig+0x72>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <TIM_OC5_SetConfig+0xb4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_OC5_SetConfig+0x72>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a12      	ldr	r2, [pc, #72]	; (8006768 <TIM_OC5_SetConfig+0xb8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d109      	bne.n	8006736 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006728:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	621a      	str	r2, [r3, #32]
}
 8006750:	bf00      	nop
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800

0800676c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800679a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	051b      	lsls	r3, r3, #20
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a16      	ldr	r2, [pc, #88]	; (800681c <TIM_OC6_SetConfig+0xb0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00b      	beq.n	80067e0 <TIM_OC6_SetConfig+0x74>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a15      	ldr	r2, [pc, #84]	; (8006820 <TIM_OC6_SetConfig+0xb4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d007      	beq.n	80067e0 <TIM_OC6_SetConfig+0x74>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a14      	ldr	r2, [pc, #80]	; (8006824 <TIM_OC6_SetConfig+0xb8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_OC6_SetConfig+0x74>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a13      	ldr	r2, [pc, #76]	; (8006828 <TIM_OC6_SetConfig+0xbc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d109      	bne.n	80067f4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800

0800682c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f023 0201 	bic.w	r2, r3, #1
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f023 030a 	bic.w	r3, r3, #10
 8006868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800688a:	b480      	push	{r7}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f023 0210 	bic.w	r2, r3, #16
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	031b      	lsls	r3, r3, #12
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	f043 0307 	orr.w	r3, r3, #7
 800690c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	609a      	str	r2, [r3, #8]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800693a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	021a      	lsls	r2, r3, #8
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	431a      	orrs	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	609a      	str	r2, [r3, #8]
}
 8006954:	bf00      	nop
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	2201      	movs	r2, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1a      	ldr	r2, [r3, #32]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	43db      	mvns	r3, r3
 8006982:	401a      	ands	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a1a      	ldr	r2, [r3, #32]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	fa01 f303 	lsl.w	r3, r1, r3
 8006998:	431a      	orrs	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
	...

080069ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e04f      	b.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a21      	ldr	r2, [pc, #132]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d108      	bne.n	8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2c:	d004      	beq.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a10      	ldr	r2, [pc, #64]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d10c      	bne.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40014000 	.word	0x40014000

08006a78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e060      	b.n	8006b56 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d115      	bne.n	8006b44 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	051b      	lsls	r3, r3, #20
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40012c00 	.word	0x40012c00

08006b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e040      	b.n	8006c38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fb f860 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2224      	movs	r2, #36	; 0x24
 8006bd0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0201 	bic.w	r2, r2, #1
 8006be0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fc00 	bl	80073e8 <UART_SetConfig>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e022      	b.n	8006c38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fd2a 	bl	8007654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fdb1 	bl	8007798 <UART_CheckIdleState>
 8006c36:	4603      	mov	r3, r0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d178      	bne.n	8006d4a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_UART_Transmit+0x24>
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e071      	b.n	8006d4c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2221      	movs	r2, #33	; 0x21
 8006c74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c76:	f7fb f9d3 	bl	8002020 <HAL_GetTick>
 8006c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c94:	d108      	bne.n	8006ca8 <HAL_UART_Transmit+0x68>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d104      	bne.n	8006ca8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	e003      	b.n	8006cb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cb0:	e030      	b.n	8006d14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2180      	movs	r1, #128	; 0x80
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fe13 	bl	80078e8 <UART_WaitOnFlagUntilTimeout>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d004      	beq.n	8006cd2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e03c      	b.n	8006d4c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	881a      	ldrh	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce4:	b292      	uxth	r2, r2
 8006ce6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	3302      	adds	r3, #2
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	e008      	b.n	8006d02 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	b292      	uxth	r2, r2
 8006cfa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1c8      	bne.n	8006cb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2200      	movs	r2, #0
 8006d28:	2140      	movs	r1, #64	; 0x40
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fddc 	bl	80078e8 <UART_WaitOnFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e005      	b.n	8006d4c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	e000      	b.n	8006d4c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006d4a:	2302      	movs	r3, #2
  }
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d132      	bne.n	8006dd2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_UART_Receive_IT+0x24>
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e02b      	b.n	8006dd4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d018      	beq.n	8006dc2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	69f9      	ldr	r1, [r7, #28]
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e6      	bne.n	8006d90 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fdf5 	bl	80079b8 <UART_Start_Receive_IT>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	e000      	b.n	8006dd4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006dd2:	2302      	movs	r3, #2
  }
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3728      	adds	r7, #40	; 0x28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b0ba      	sub	sp, #232	; 0xe8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e06:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d115      	bne.n	8006e44 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00f      	beq.n	8006e44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 82ab 	beq.w	8007390 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
      }
      return;
 8006e42:	e2a5      	b.n	8007390 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8117 	beq.w	800707c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e5e:	4b85      	ldr	r3, [pc, #532]	; (8007074 <HAL_UART_IRQHandler+0x298>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 810a 	beq.w	800707c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d011      	beq.n	8006e98 <HAL_UART_IRQHandler+0xbc>
 8006e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8e:	f043 0201 	orr.w	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d011      	beq.n	8006ec8 <HAL_UART_IRQHandler+0xec>
 8006ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ebe:	f043 0204 	orr.w	r2, r3, #4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d011      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x11c>
 8006ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eee:	f043 0202 	orr.w	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d017      	beq.n	8006f34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2208      	movs	r2, #8
 8006f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2a:	f043 0208 	orr.w	r2, r3, #8
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <HAL_UART_IRQHandler+0x18a>
 8006f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00c      	beq.n	8006f66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8211 	beq.w	8007394 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d005      	beq.n	8006fbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d04f      	beq.n	800705e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fdc0 	bl	8007b44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b40      	cmp	r3, #64	; 0x40
 8006fd0:	d141      	bne.n	8007056 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800700a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1d9      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007022:	2b00      	cmp	r3, #0
 8007024:	d013      	beq.n	800704e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702a:	4a13      	ldr	r2, [pc, #76]	; (8007078 <HAL_UART_IRQHandler+0x29c>)
 800702c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007032:	4618      	mov	r0, r3
 8007034:	f7fc f81c 	bl	8003070 <HAL_DMA_Abort_IT>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d017      	beq.n	800706e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704c:	e00f      	b.n	800706e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9b4 	bl	80073bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	e00b      	b.n	800706e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9b0 	bl	80073bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705c:	e007      	b.n	800706e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f9ac 	bl	80073bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800706c:	e192      	b.n	8007394 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706e:	bf00      	nop
    return;
 8007070:	e190      	b.n	8007394 <HAL_UART_IRQHandler+0x5b8>
 8007072:	bf00      	nop
 8007074:	04000120 	.word	0x04000120
 8007078:	08007c0d 	.word	0x08007c0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007080:	2b01      	cmp	r3, #1
 8007082:	f040 814b 	bne.w	800731c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708a:	f003 0310 	and.w	r3, r3, #16
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 8144 	beq.w	800731c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 813d 	beq.w	800731c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2210      	movs	r2, #16
 80070a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b4:	2b40      	cmp	r3, #64	; 0x40
 80070b6:	f040 80b5 	bne.w	8007224 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 8164 	beq.w	8007398 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070da:	429a      	cmp	r2, r3
 80070dc:	f080 815c 	bcs.w	8007398 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	f000 8086 	beq.w	8007202 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800710a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800710e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007112:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007120:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007124:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800712c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1da      	bne.n	80070f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007164:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007168:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800716c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e1      	bne.n	8007140 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3308      	adds	r3, #8
 8007182:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800718c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800718e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e3      	bne.n	800717c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d2:	f023 0310 	bic.w	r3, r3, #16
 80071d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80071e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e4      	bne.n	80071c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fb fefe 	bl	8002ffe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007214:	b29b      	uxth	r3, r3
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	b29b      	uxth	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f8d7 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007222:	e0b9      	b.n	8007398 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007230:	b29b      	uxth	r3, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80ab 	beq.w	800739c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 80a6 	beq.w	800739c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800725e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007264:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007272:	647b      	str	r3, [r7, #68]	; 0x44
 8007274:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e4      	bne.n	8007250 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3308      	adds	r3, #8
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	623b      	str	r3, [r7, #32]
   return(result);
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3308      	adds	r3, #8
 80072a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072aa:	633a      	str	r2, [r7, #48]	; 0x30
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e3      	bne.n	8007286 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0310 	bic.w	r3, r3, #16
 80072e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	69b9      	ldr	r1, [r7, #24]
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	617b      	str	r3, [r7, #20]
   return(result);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e4      	bne.n	80072d2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800730e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f85b 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800731a:	e03f      	b.n	800739c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800731c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00e      	beq.n	8007346 <HAL_UART_IRQHandler+0x56a>
 8007328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800732c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800733c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fe4c 	bl	8007fdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007344:	e02d      	b.n	80073a2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00e      	beq.n	8007370 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735a:	2b00      	cmp	r3, #0
 800735c:	d008      	beq.n	8007370 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01c      	beq.n	80073a0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
    }
    return;
 800736e:	e017      	b.n	80073a0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d012      	beq.n	80073a2 <HAL_UART_IRQHandler+0x5c6>
 800737c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00c      	beq.n	80073a2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fc55 	bl	8007c38 <UART_EndTransmit_IT>
    return;
 800738e:	e008      	b.n	80073a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007390:	bf00      	nop
 8007392:	e006      	b.n	80073a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007394:	bf00      	nop
 8007396:	e004      	b.n	80073a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007398:	bf00      	nop
 800739a:	e002      	b.n	80073a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800739c:	bf00      	nop
 800739e:	e000      	b.n	80073a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80073a0:	bf00      	nop
  }

}
 80073a2:	37e8      	adds	r7, #232	; 0xe8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b8a      	ldr	r3, [pc, #552]	; (800763c <UART_SetConfig+0x254>)
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	430b      	orrs	r3, r1
 800741e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	430a      	orrs	r2, r1
 8007458:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a78      	ldr	r2, [pc, #480]	; (8007640 <UART_SetConfig+0x258>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d120      	bne.n	80074a6 <UART_SetConfig+0xbe>
 8007464:	4b77      	ldr	r3, [pc, #476]	; (8007644 <UART_SetConfig+0x25c>)
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	f003 0303 	and.w	r3, r3, #3
 800746c:	2b03      	cmp	r3, #3
 800746e:	d817      	bhi.n	80074a0 <UART_SetConfig+0xb8>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0x90>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	08007489 	.word	0x08007489
 800747c:	08007495 	.word	0x08007495
 8007480:	0800749b 	.word	0x0800749b
 8007484:	0800748f 	.word	0x0800748f
 8007488:	2300      	movs	r3, #0
 800748a:	77fb      	strb	r3, [r7, #31]
 800748c:	e01d      	b.n	80074ca <UART_SetConfig+0xe2>
 800748e:	2302      	movs	r3, #2
 8007490:	77fb      	strb	r3, [r7, #31]
 8007492:	e01a      	b.n	80074ca <UART_SetConfig+0xe2>
 8007494:	2304      	movs	r3, #4
 8007496:	77fb      	strb	r3, [r7, #31]
 8007498:	e017      	b.n	80074ca <UART_SetConfig+0xe2>
 800749a:	2308      	movs	r3, #8
 800749c:	77fb      	strb	r3, [r7, #31]
 800749e:	e014      	b.n	80074ca <UART_SetConfig+0xe2>
 80074a0:	2310      	movs	r3, #16
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e011      	b.n	80074ca <UART_SetConfig+0xe2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a67      	ldr	r2, [pc, #412]	; (8007648 <UART_SetConfig+0x260>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d102      	bne.n	80074b6 <UART_SetConfig+0xce>
 80074b0:	2300      	movs	r3, #0
 80074b2:	77fb      	strb	r3, [r7, #31]
 80074b4:	e009      	b.n	80074ca <UART_SetConfig+0xe2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a64      	ldr	r2, [pc, #400]	; (800764c <UART_SetConfig+0x264>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d102      	bne.n	80074c6 <UART_SetConfig+0xde>
 80074c0:	2300      	movs	r3, #0
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e001      	b.n	80074ca <UART_SetConfig+0xe2>
 80074c6:	2310      	movs	r3, #16
 80074c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d2:	d15a      	bne.n	800758a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80074d4:	7ffb      	ldrb	r3, [r7, #31]
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d827      	bhi.n	800752a <UART_SetConfig+0x142>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0xf8>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007505 	.word	0x08007505
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	08007515 	.word	0x08007515
 80074ec:	0800752b 	.word	0x0800752b
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800752b 	.word	0x0800752b
 80074f8:	0800752b 	.word	0x0800752b
 80074fc:	0800752b 	.word	0x0800752b
 8007500:	08007523 	.word	0x08007523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007504:	f7fd ff60 	bl	80053c8 <HAL_RCC_GetPCLK1Freq>
 8007508:	61b8      	str	r0, [r7, #24]
        break;
 800750a:	e013      	b.n	8007534 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800750c:	f7fd ff7e 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 8007510:	61b8      	str	r0, [r7, #24]
        break;
 8007512:	e00f      	b.n	8007534 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007514:	4b4e      	ldr	r3, [pc, #312]	; (8007650 <UART_SetConfig+0x268>)
 8007516:	61bb      	str	r3, [r7, #24]
        break;
 8007518:	e00c      	b.n	8007534 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800751a:	f7fd fedf 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 800751e:	61b8      	str	r0, [r7, #24]
        break;
 8007520:	e008      	b.n	8007534 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007526:	61bb      	str	r3, [r7, #24]
        break;
 8007528:	e004      	b.n	8007534 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	77bb      	strb	r3, [r7, #30]
        break;
 8007532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d074      	beq.n	8007624 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	005a      	lsls	r2, r3, #1
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	441a      	add	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	fbb2 f3f3 	udiv	r3, r2, r3
 800754e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b0f      	cmp	r3, #15
 8007554:	d916      	bls.n	8007584 <UART_SetConfig+0x19c>
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755c:	d212      	bcs.n	8007584 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f023 030f 	bic.w	r3, r3, #15
 8007566:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	b29b      	uxth	r3, r3
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	b29a      	uxth	r2, r3
 8007574:	89fb      	ldrh	r3, [r7, #14]
 8007576:	4313      	orrs	r3, r2
 8007578:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	89fa      	ldrh	r2, [r7, #14]
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	e04f      	b.n	8007624 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	77bb      	strb	r3, [r7, #30]
 8007588:	e04c      	b.n	8007624 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800758a:	7ffb      	ldrb	r3, [r7, #31]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d828      	bhi.n	80075e2 <UART_SetConfig+0x1fa>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0x1b0>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	080075e3 	.word	0x080075e3
 80075a8:	080075d3 	.word	0x080075d3
 80075ac:	080075e3 	.word	0x080075e3
 80075b0:	080075e3 	.word	0x080075e3
 80075b4:	080075e3 	.word	0x080075e3
 80075b8:	080075db 	.word	0x080075db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075bc:	f7fd ff04 	bl	80053c8 <HAL_RCC_GetPCLK1Freq>
 80075c0:	61b8      	str	r0, [r7, #24]
        break;
 80075c2:	e013      	b.n	80075ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c4:	f7fd ff22 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 80075c8:	61b8      	str	r0, [r7, #24]
        break;
 80075ca:	e00f      	b.n	80075ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075cc:	4b20      	ldr	r3, [pc, #128]	; (8007650 <UART_SetConfig+0x268>)
 80075ce:	61bb      	str	r3, [r7, #24]
        break;
 80075d0:	e00c      	b.n	80075ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075d2:	f7fd fe83 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80075d6:	61b8      	str	r0, [r7, #24]
        break;
 80075d8:	e008      	b.n	80075ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075de:	61bb      	str	r3, [r7, #24]
        break;
 80075e0:	e004      	b.n	80075ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	77bb      	strb	r3, [r7, #30]
        break;
 80075ea:	bf00      	nop
    }

    if (pclk != 0U)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d018      	beq.n	8007624 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	085a      	lsrs	r2, r3, #1
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	441a      	add	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	fbb2 f3f3 	udiv	r3, r2, r3
 8007604:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b0f      	cmp	r3, #15
 800760a:	d909      	bls.n	8007620 <UART_SetConfig+0x238>
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007612:	d205      	bcs.n	8007620 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	b29a      	uxth	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	e001      	b.n	8007624 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007630:	7fbb      	ldrb	r3, [r7, #30]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	efff69f3 	.word	0xefff69f3
 8007640:	40013800 	.word	0x40013800
 8007644:	40021000 	.word	0x40021000
 8007648:	40004400 	.word	0x40004400
 800764c:	40004800 	.word	0x40004800
 8007650:	007a1200 	.word	0x007a1200

08007654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00a      	beq.n	8007706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007730:	2b00      	cmp	r3, #0
 8007732:	d01a      	beq.n	800776a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007752:	d10a      	bne.n	800776a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	605a      	str	r2, [r3, #4]
  }
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b098      	sub	sp, #96	; 0x60
 800779c:	af02      	add	r7, sp, #8
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077a8:	f7fa fc3a 	bl	8002020 <HAL_GetTick>
 80077ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d12e      	bne.n	800781a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077c4:	2200      	movs	r2, #0
 80077c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f88c 	bl	80078e8 <UART_WaitOnFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d021      	beq.n	800781a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ea:	653b      	str	r3, [r7, #80]	; 0x50
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f4:	647b      	str	r3, [r7, #68]	; 0x44
 80077f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e6      	bne.n	80077d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e062      	b.n	80078e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b04      	cmp	r3, #4
 8007826:	d149      	bne.n	80078bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007830:	2200      	movs	r2, #0
 8007832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f856 	bl	80078e8 <UART_WaitOnFlagUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d03c      	beq.n	80078bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	623b      	str	r3, [r7, #32]
   return(result);
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007860:	633b      	str	r3, [r7, #48]	; 0x30
 8007862:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e6      	bne.n	8007842 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3308      	adds	r3, #8
 800787a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60fb      	str	r3, [r7, #12]
   return(result);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0301 	bic.w	r3, r3, #1
 800788a:	64bb      	str	r3, [r7, #72]	; 0x48
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007894:	61fa      	str	r2, [r7, #28]
 8007896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	617b      	str	r3, [r7, #20]
   return(result);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e5      	bne.n	8007874 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e011      	b.n	80078e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3758      	adds	r7, #88	; 0x58
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f8:	e049      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007900:	d045      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007902:	f7fa fb8d 	bl	8002020 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	429a      	cmp	r2, r3
 8007910:	d302      	bcc.n	8007918 <UART_WaitOnFlagUntilTimeout+0x30>
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e048      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d031      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b08      	cmp	r3, #8
 8007936:	d110      	bne.n	800795a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2208      	movs	r2, #8
 800793e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f8ff 	bl	8007b44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2208      	movs	r2, #8
 800794a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e029      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007968:	d111      	bne.n	800798e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f8e5 	bl	8007b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e00f      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4013      	ands	r3, r2
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	429a      	cmp	r2, r3
 800799c:	bf0c      	ite	eq
 800799e:	2301      	moveq	r3, #1
 80079a0:	2300      	movne	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d0a6      	beq.n	80078fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b097      	sub	sp, #92	; 0x5c
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	88fa      	ldrh	r2, [r7, #6]
 80079d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ea:	d10e      	bne.n	8007a0a <UART_Start_Receive_IT+0x52>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <UART_Start_Receive_IT+0x48>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079fe:	e02d      	b.n	8007a5c <UART_Start_Receive_IT+0xa4>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	22ff      	movs	r2, #255	; 0xff
 8007a04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a08:	e028      	b.n	8007a5c <UART_Start_Receive_IT+0xa4>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10d      	bne.n	8007a2e <UART_Start_Receive_IT+0x76>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <UART_Start_Receive_IT+0x6c>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	22ff      	movs	r2, #255	; 0xff
 8007a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a22:	e01b      	b.n	8007a5c <UART_Start_Receive_IT+0xa4>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	227f      	movs	r2, #127	; 0x7f
 8007a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a2c:	e016      	b.n	8007a5c <UART_Start_Receive_IT+0xa4>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a36:	d10d      	bne.n	8007a54 <UART_Start_Receive_IT+0x9c>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <UART_Start_Receive_IT+0x92>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	227f      	movs	r2, #127	; 0x7f
 8007a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a48:	e008      	b.n	8007a5c <UART_Start_Receive_IT+0xa4>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	223f      	movs	r2, #63	; 0x3f
 8007a4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a52:	e003      	b.n	8007a5c <UART_Start_Receive_IT+0xa4>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2222      	movs	r2, #34	; 0x22
 8007a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3308      	adds	r3, #8
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	f043 0301 	orr.w	r3, r3, #1
 8007a82:	657b      	str	r3, [r7, #84]	; 0x54
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e5      	bne.n	8007a6c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa8:	d107      	bne.n	8007aba <UART_Start_Receive_IT+0x102>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d103      	bne.n	8007aba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4a21      	ldr	r2, [pc, #132]	; (8007b3c <UART_Start_Receive_IT+0x184>)
 8007ab6:	669a      	str	r2, [r3, #104]	; 0x68
 8007ab8:	e002      	b.n	8007ac0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a20      	ldr	r2, [pc, #128]	; (8007b40 <UART_Start_Receive_IT+0x188>)
 8007abe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d019      	beq.n	8007afc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e6      	bne.n	8007ac8 <UART_Start_Receive_IT+0x110>
 8007afa:	e018      	b.n	8007b2e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f043 0320 	orr.w	r3, r3, #32
 8007b10:	653b      	str	r3, [r7, #80]	; 0x50
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1a:	623b      	str	r3, [r7, #32]
 8007b1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	69f9      	ldr	r1, [r7, #28]
 8007b20:	6a3a      	ldr	r2, [r7, #32]
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e6      	bne.n	8007afc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	375c      	adds	r7, #92	; 0x5c
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	08007e35 	.word	0x08007e35
 8007b40:	08007c8d 	.word	0x08007c8d

08007b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b095      	sub	sp, #84	; 0x54
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e6      	bne.n	8007b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e5      	bne.n	8007b7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d118      	bne.n	8007bec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f023 0310 	bic.w	r3, r3, #16
 8007bce:	647b      	str	r3, [r7, #68]	; 0x44
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6979      	ldr	r1, [r7, #20]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	e841 2300 	strex	r3, r2, [r1]
 8007be4:	613b      	str	r3, [r7, #16]
   return(result);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e6      	bne.n	8007bba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c00:	bf00      	nop
 8007c02:	3754      	adds	r7, #84	; 0x54
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f7ff fbc6 	bl	80073bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6979      	ldr	r1, [r7, #20]
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e6      	bne.n	8007c40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff fb92 	bl	80073a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c84:	bf00      	nop
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b09c      	sub	sp, #112	; 0x70
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca4:	2b22      	cmp	r3, #34	; 0x22
 8007ca6:	f040 80b9 	bne.w	8007e1c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007cb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007cb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007cb8:	b2d9      	uxtb	r1, r3
 8007cba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc4:	400a      	ands	r2, r1
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f040 809c 	bne.w	8007e2c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e6      	bne.n	8007cf4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	f023 0301 	bic.w	r3, r3, #1
 8007d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d46:	647a      	str	r2, [r7, #68]	; 0x44
 8007d48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d018      	beq.n	8007dae <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	623b      	str	r3, [r7, #32]
   return(result);
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d90:	663b      	str	r3, [r7, #96]	; 0x60
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e6      	bne.n	8007d7c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d12e      	bne.n	8007e14 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 0310 	bic.w	r3, r3, #16
 8007dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dda:	61fb      	str	r3, [r7, #28]
 8007ddc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	69b9      	ldr	r1, [r7, #24]
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	617b      	str	r3, [r7, #20]
   return(result);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e6      	bne.n	8007dbc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d103      	bne.n	8007e04 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2210      	movs	r2, #16
 8007e02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff fadf 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e12:	e00b      	b.n	8007e2c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7f9 f9b5 	bl	8001184 <HAL_UART_RxCpltCallback>
}
 8007e1a:	e007      	b.n	8007e2c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0208 	orr.w	r2, r2, #8
 8007e2a:	619a      	str	r2, [r3, #24]
}
 8007e2c:	bf00      	nop
 8007e2e:	3770      	adds	r7, #112	; 0x70
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b09c      	sub	sp, #112	; 0x70
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e4c:	2b22      	cmp	r3, #34	; 0x22
 8007e4e:	f040 80b9 	bne.w	8007fc4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007e66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e76:	1c9a      	adds	r2, r3, #2
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 809c 	bne.w	8007fd4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eba:	657b      	str	r3, [r7, #84]	; 0x54
 8007ebc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e6      	bne.n	8007e9c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007eee:	643a      	str	r2, [r7, #64]	; 0x40
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ef4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d018      	beq.n	8007f56 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f44:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e6      	bne.n	8007f24 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d12e      	bne.n	8007fbc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f023 0310 	bic.w	r3, r3, #16
 8007f78:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6979      	ldr	r1, [r7, #20]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e6      	bne.n	8007f64 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	f003 0310 	and.w	r3, r3, #16
 8007fa0:	2b10      	cmp	r3, #16
 8007fa2:	d103      	bne.n	8007fac <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2210      	movs	r2, #16
 8007faa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fa0b 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fba:	e00b      	b.n	8007fd4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7f9 f8e1 	bl	8001184 <HAL_UART_RxCpltCallback>
}
 8007fc2:	e007      	b.n	8007fd4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	699a      	ldr	r2, [r3, #24]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0208 	orr.w	r2, r2, #8
 8007fd2:	619a      	str	r2, [r3, #24]
}
 8007fd4:	bf00      	nop
 8007fd6:	3770      	adds	r7, #112	; 0x70
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <atoi>:
 8007ff0:	220a      	movs	r2, #10
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	f000 b882 	b.w	80080fc <strtol>

08007ff8 <_strtol_l.constprop.0>:
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffe:	d001      	beq.n	8008004 <_strtol_l.constprop.0+0xc>
 8008000:	2b24      	cmp	r3, #36	; 0x24
 8008002:	d906      	bls.n	8008012 <_strtol_l.constprop.0+0x1a>
 8008004:	f001 f8c6 	bl	8009194 <__errno>
 8008008:	2316      	movs	r3, #22
 800800a:	6003      	str	r3, [r0, #0]
 800800c:	2000      	movs	r0, #0
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80080f8 <_strtol_l.constprop.0+0x100>
 8008016:	460d      	mov	r5, r1
 8008018:	462e      	mov	r6, r5
 800801a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800801e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008022:	f017 0708 	ands.w	r7, r7, #8
 8008026:	d1f7      	bne.n	8008018 <_strtol_l.constprop.0+0x20>
 8008028:	2c2d      	cmp	r4, #45	; 0x2d
 800802a:	d132      	bne.n	8008092 <_strtol_l.constprop.0+0x9a>
 800802c:	782c      	ldrb	r4, [r5, #0]
 800802e:	2701      	movs	r7, #1
 8008030:	1cb5      	adds	r5, r6, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d05b      	beq.n	80080ee <_strtol_l.constprop.0+0xf6>
 8008036:	2b10      	cmp	r3, #16
 8008038:	d109      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 800803a:	2c30      	cmp	r4, #48	; 0x30
 800803c:	d107      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 800803e:	782c      	ldrb	r4, [r5, #0]
 8008040:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008044:	2c58      	cmp	r4, #88	; 0x58
 8008046:	d14d      	bne.n	80080e4 <_strtol_l.constprop.0+0xec>
 8008048:	786c      	ldrb	r4, [r5, #1]
 800804a:	2310      	movs	r3, #16
 800804c:	3502      	adds	r5, #2
 800804e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008052:	f108 38ff 	add.w	r8, r8, #4294967295
 8008056:	f04f 0e00 	mov.w	lr, #0
 800805a:	fbb8 f9f3 	udiv	r9, r8, r3
 800805e:	4676      	mov	r6, lr
 8008060:	fb03 8a19 	mls	sl, r3, r9, r8
 8008064:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008068:	f1bc 0f09 	cmp.w	ip, #9
 800806c:	d816      	bhi.n	800809c <_strtol_l.constprop.0+0xa4>
 800806e:	4664      	mov	r4, ip
 8008070:	42a3      	cmp	r3, r4
 8008072:	dd24      	ble.n	80080be <_strtol_l.constprop.0+0xc6>
 8008074:	f1be 3fff 	cmp.w	lr, #4294967295
 8008078:	d008      	beq.n	800808c <_strtol_l.constprop.0+0x94>
 800807a:	45b1      	cmp	r9, r6
 800807c:	d31c      	bcc.n	80080b8 <_strtol_l.constprop.0+0xc0>
 800807e:	d101      	bne.n	8008084 <_strtol_l.constprop.0+0x8c>
 8008080:	45a2      	cmp	sl, r4
 8008082:	db19      	blt.n	80080b8 <_strtol_l.constprop.0+0xc0>
 8008084:	fb06 4603 	mla	r6, r6, r3, r4
 8008088:	f04f 0e01 	mov.w	lr, #1
 800808c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008090:	e7e8      	b.n	8008064 <_strtol_l.constprop.0+0x6c>
 8008092:	2c2b      	cmp	r4, #43	; 0x2b
 8008094:	bf04      	itt	eq
 8008096:	782c      	ldrbeq	r4, [r5, #0]
 8008098:	1cb5      	addeq	r5, r6, #2
 800809a:	e7ca      	b.n	8008032 <_strtol_l.constprop.0+0x3a>
 800809c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80080a0:	f1bc 0f19 	cmp.w	ip, #25
 80080a4:	d801      	bhi.n	80080aa <_strtol_l.constprop.0+0xb2>
 80080a6:	3c37      	subs	r4, #55	; 0x37
 80080a8:	e7e2      	b.n	8008070 <_strtol_l.constprop.0+0x78>
 80080aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80080ae:	f1bc 0f19 	cmp.w	ip, #25
 80080b2:	d804      	bhi.n	80080be <_strtol_l.constprop.0+0xc6>
 80080b4:	3c57      	subs	r4, #87	; 0x57
 80080b6:	e7db      	b.n	8008070 <_strtol_l.constprop.0+0x78>
 80080b8:	f04f 3eff 	mov.w	lr, #4294967295
 80080bc:	e7e6      	b.n	800808c <_strtol_l.constprop.0+0x94>
 80080be:	f1be 3fff 	cmp.w	lr, #4294967295
 80080c2:	d105      	bne.n	80080d0 <_strtol_l.constprop.0+0xd8>
 80080c4:	2322      	movs	r3, #34	; 0x22
 80080c6:	6003      	str	r3, [r0, #0]
 80080c8:	4646      	mov	r6, r8
 80080ca:	b942      	cbnz	r2, 80080de <_strtol_l.constprop.0+0xe6>
 80080cc:	4630      	mov	r0, r6
 80080ce:	e79e      	b.n	800800e <_strtol_l.constprop.0+0x16>
 80080d0:	b107      	cbz	r7, 80080d4 <_strtol_l.constprop.0+0xdc>
 80080d2:	4276      	negs	r6, r6
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	d0f9      	beq.n	80080cc <_strtol_l.constprop.0+0xd4>
 80080d8:	f1be 0f00 	cmp.w	lr, #0
 80080dc:	d000      	beq.n	80080e0 <_strtol_l.constprop.0+0xe8>
 80080de:	1e69      	subs	r1, r5, #1
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	e7f3      	b.n	80080cc <_strtol_l.constprop.0+0xd4>
 80080e4:	2430      	movs	r4, #48	; 0x30
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1b1      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 80080ea:	2308      	movs	r3, #8
 80080ec:	e7af      	b.n	800804e <_strtol_l.constprop.0+0x56>
 80080ee:	2c30      	cmp	r4, #48	; 0x30
 80080f0:	d0a5      	beq.n	800803e <_strtol_l.constprop.0+0x46>
 80080f2:	230a      	movs	r3, #10
 80080f4:	e7ab      	b.n	800804e <_strtol_l.constprop.0+0x56>
 80080f6:	bf00      	nop
 80080f8:	0800b2c1 	.word	0x0800b2c1

080080fc <strtol>:
 80080fc:	4613      	mov	r3, r2
 80080fe:	460a      	mov	r2, r1
 8008100:	4601      	mov	r1, r0
 8008102:	4802      	ldr	r0, [pc, #8]	; (800810c <strtol+0x10>)
 8008104:	6800      	ldr	r0, [r0, #0]
 8008106:	f7ff bf77 	b.w	8007ff8 <_strtol_l.constprop.0>
 800810a:	bf00      	nop
 800810c:	200003c4 	.word	0x200003c4

08008110 <__cvt>:
 8008110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	ec55 4b10 	vmov	r4, r5, d0
 8008118:	2d00      	cmp	r5, #0
 800811a:	460e      	mov	r6, r1
 800811c:	4619      	mov	r1, r3
 800811e:	462b      	mov	r3, r5
 8008120:	bfbb      	ittet	lt
 8008122:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008126:	461d      	movlt	r5, r3
 8008128:	2300      	movge	r3, #0
 800812a:	232d      	movlt	r3, #45	; 0x2d
 800812c:	700b      	strb	r3, [r1, #0]
 800812e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008130:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008134:	4691      	mov	r9, r2
 8008136:	f023 0820 	bic.w	r8, r3, #32
 800813a:	bfbc      	itt	lt
 800813c:	4622      	movlt	r2, r4
 800813e:	4614      	movlt	r4, r2
 8008140:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008144:	d005      	beq.n	8008152 <__cvt+0x42>
 8008146:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800814a:	d100      	bne.n	800814e <__cvt+0x3e>
 800814c:	3601      	adds	r6, #1
 800814e:	2102      	movs	r1, #2
 8008150:	e000      	b.n	8008154 <__cvt+0x44>
 8008152:	2103      	movs	r1, #3
 8008154:	ab03      	add	r3, sp, #12
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	ab02      	add	r3, sp, #8
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	ec45 4b10 	vmov	d0, r4, r5
 8008160:	4653      	mov	r3, sl
 8008162:	4632      	mov	r2, r6
 8008164:	f001 f8cc 	bl	8009300 <_dtoa_r>
 8008168:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800816c:	4607      	mov	r7, r0
 800816e:	d102      	bne.n	8008176 <__cvt+0x66>
 8008170:	f019 0f01 	tst.w	r9, #1
 8008174:	d022      	beq.n	80081bc <__cvt+0xac>
 8008176:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800817a:	eb07 0906 	add.w	r9, r7, r6
 800817e:	d110      	bne.n	80081a2 <__cvt+0x92>
 8008180:	783b      	ldrb	r3, [r7, #0]
 8008182:	2b30      	cmp	r3, #48	; 0x30
 8008184:	d10a      	bne.n	800819c <__cvt+0x8c>
 8008186:	2200      	movs	r2, #0
 8008188:	2300      	movs	r3, #0
 800818a:	4620      	mov	r0, r4
 800818c:	4629      	mov	r1, r5
 800818e:	f7f8 fcab 	bl	8000ae8 <__aeabi_dcmpeq>
 8008192:	b918      	cbnz	r0, 800819c <__cvt+0x8c>
 8008194:	f1c6 0601 	rsb	r6, r6, #1
 8008198:	f8ca 6000 	str.w	r6, [sl]
 800819c:	f8da 3000 	ldr.w	r3, [sl]
 80081a0:	4499      	add	r9, r3
 80081a2:	2200      	movs	r2, #0
 80081a4:	2300      	movs	r3, #0
 80081a6:	4620      	mov	r0, r4
 80081a8:	4629      	mov	r1, r5
 80081aa:	f7f8 fc9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ae:	b108      	cbz	r0, 80081b4 <__cvt+0xa4>
 80081b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80081b4:	2230      	movs	r2, #48	; 0x30
 80081b6:	9b03      	ldr	r3, [sp, #12]
 80081b8:	454b      	cmp	r3, r9
 80081ba:	d307      	bcc.n	80081cc <__cvt+0xbc>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081c0:	1bdb      	subs	r3, r3, r7
 80081c2:	4638      	mov	r0, r7
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	b004      	add	sp, #16
 80081c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081cc:	1c59      	adds	r1, r3, #1
 80081ce:	9103      	str	r1, [sp, #12]
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	e7f0      	b.n	80081b6 <__cvt+0xa6>

080081d4 <__exponent>:
 80081d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081d6:	4603      	mov	r3, r0
 80081d8:	2900      	cmp	r1, #0
 80081da:	bfb8      	it	lt
 80081dc:	4249      	neglt	r1, r1
 80081de:	f803 2b02 	strb.w	r2, [r3], #2
 80081e2:	bfb4      	ite	lt
 80081e4:	222d      	movlt	r2, #45	; 0x2d
 80081e6:	222b      	movge	r2, #43	; 0x2b
 80081e8:	2909      	cmp	r1, #9
 80081ea:	7042      	strb	r2, [r0, #1]
 80081ec:	dd2a      	ble.n	8008244 <__exponent+0x70>
 80081ee:	f10d 0207 	add.w	r2, sp, #7
 80081f2:	4617      	mov	r7, r2
 80081f4:	260a      	movs	r6, #10
 80081f6:	4694      	mov	ip, r2
 80081f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80081fc:	fb06 1415 	mls	r4, r6, r5, r1
 8008200:	3430      	adds	r4, #48	; 0x30
 8008202:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008206:	460c      	mov	r4, r1
 8008208:	2c63      	cmp	r4, #99	; 0x63
 800820a:	f102 32ff 	add.w	r2, r2, #4294967295
 800820e:	4629      	mov	r1, r5
 8008210:	dcf1      	bgt.n	80081f6 <__exponent+0x22>
 8008212:	3130      	adds	r1, #48	; 0x30
 8008214:	f1ac 0402 	sub.w	r4, ip, #2
 8008218:	f802 1c01 	strb.w	r1, [r2, #-1]
 800821c:	1c41      	adds	r1, r0, #1
 800821e:	4622      	mov	r2, r4
 8008220:	42ba      	cmp	r2, r7
 8008222:	d30a      	bcc.n	800823a <__exponent+0x66>
 8008224:	f10d 0209 	add.w	r2, sp, #9
 8008228:	eba2 020c 	sub.w	r2, r2, ip
 800822c:	42bc      	cmp	r4, r7
 800822e:	bf88      	it	hi
 8008230:	2200      	movhi	r2, #0
 8008232:	4413      	add	r3, r2
 8008234:	1a18      	subs	r0, r3, r0
 8008236:	b003      	add	sp, #12
 8008238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800823a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800823e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008242:	e7ed      	b.n	8008220 <__exponent+0x4c>
 8008244:	2330      	movs	r3, #48	; 0x30
 8008246:	3130      	adds	r1, #48	; 0x30
 8008248:	7083      	strb	r3, [r0, #2]
 800824a:	70c1      	strb	r1, [r0, #3]
 800824c:	1d03      	adds	r3, r0, #4
 800824e:	e7f1      	b.n	8008234 <__exponent+0x60>

08008250 <_printf_float>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	ed2d 8b02 	vpush	{d8}
 8008258:	b08d      	sub	sp, #52	; 0x34
 800825a:	460c      	mov	r4, r1
 800825c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008260:	4616      	mov	r6, r2
 8008262:	461f      	mov	r7, r3
 8008264:	4605      	mov	r5, r0
 8008266:	f000 ff4b 	bl	8009100 <_localeconv_r>
 800826a:	f8d0 a000 	ldr.w	sl, [r0]
 800826e:	4650      	mov	r0, sl
 8008270:	f7f8 f80e 	bl	8000290 <strlen>
 8008274:	2300      	movs	r3, #0
 8008276:	930a      	str	r3, [sp, #40]	; 0x28
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	f8d8 3000 	ldr.w	r3, [r8]
 8008280:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008284:	3307      	adds	r3, #7
 8008286:	f023 0307 	bic.w	r3, r3, #7
 800828a:	f103 0208 	add.w	r2, r3, #8
 800828e:	f8c8 2000 	str.w	r2, [r8]
 8008292:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008296:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800829a:	9307      	str	r3, [sp, #28]
 800829c:	f8cd 8018 	str.w	r8, [sp, #24]
 80082a0:	ee08 0a10 	vmov	s16, r0
 80082a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80082a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082ac:	4b9e      	ldr	r3, [pc, #632]	; (8008528 <_printf_float+0x2d8>)
 80082ae:	f04f 32ff 	mov.w	r2, #4294967295
 80082b2:	f7f8 fc4b 	bl	8000b4c <__aeabi_dcmpun>
 80082b6:	bb88      	cbnz	r0, 800831c <_printf_float+0xcc>
 80082b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082bc:	4b9a      	ldr	r3, [pc, #616]	; (8008528 <_printf_float+0x2d8>)
 80082be:	f04f 32ff 	mov.w	r2, #4294967295
 80082c2:	f7f8 fc25 	bl	8000b10 <__aeabi_dcmple>
 80082c6:	bb48      	cbnz	r0, 800831c <_printf_float+0xcc>
 80082c8:	2200      	movs	r2, #0
 80082ca:	2300      	movs	r3, #0
 80082cc:	4640      	mov	r0, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 fc14 	bl	8000afc <__aeabi_dcmplt>
 80082d4:	b110      	cbz	r0, 80082dc <_printf_float+0x8c>
 80082d6:	232d      	movs	r3, #45	; 0x2d
 80082d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082dc:	4a93      	ldr	r2, [pc, #588]	; (800852c <_printf_float+0x2dc>)
 80082de:	4b94      	ldr	r3, [pc, #592]	; (8008530 <_printf_float+0x2e0>)
 80082e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082e4:	bf94      	ite	ls
 80082e6:	4690      	movls	r8, r2
 80082e8:	4698      	movhi	r8, r3
 80082ea:	2303      	movs	r3, #3
 80082ec:	6123      	str	r3, [r4, #16]
 80082ee:	9b05      	ldr	r3, [sp, #20]
 80082f0:	f023 0304 	bic.w	r3, r3, #4
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	f04f 0900 	mov.w	r9, #0
 80082fa:	9700      	str	r7, [sp, #0]
 80082fc:	4633      	mov	r3, r6
 80082fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008300:	4621      	mov	r1, r4
 8008302:	4628      	mov	r0, r5
 8008304:	f000 f9da 	bl	80086bc <_printf_common>
 8008308:	3001      	adds	r0, #1
 800830a:	f040 8090 	bne.w	800842e <_printf_float+0x1de>
 800830e:	f04f 30ff 	mov.w	r0, #4294967295
 8008312:	b00d      	add	sp, #52	; 0x34
 8008314:	ecbd 8b02 	vpop	{d8}
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831c:	4642      	mov	r2, r8
 800831e:	464b      	mov	r3, r9
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	f7f8 fc12 	bl	8000b4c <__aeabi_dcmpun>
 8008328:	b140      	cbz	r0, 800833c <_printf_float+0xec>
 800832a:	464b      	mov	r3, r9
 800832c:	2b00      	cmp	r3, #0
 800832e:	bfbc      	itt	lt
 8008330:	232d      	movlt	r3, #45	; 0x2d
 8008332:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008336:	4a7f      	ldr	r2, [pc, #508]	; (8008534 <_printf_float+0x2e4>)
 8008338:	4b7f      	ldr	r3, [pc, #508]	; (8008538 <_printf_float+0x2e8>)
 800833a:	e7d1      	b.n	80082e0 <_printf_float+0x90>
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008342:	9206      	str	r2, [sp, #24]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	d13f      	bne.n	80083c8 <_printf_float+0x178>
 8008348:	2306      	movs	r3, #6
 800834a:	6063      	str	r3, [r4, #4]
 800834c:	9b05      	ldr	r3, [sp, #20]
 800834e:	6861      	ldr	r1, [r4, #4]
 8008350:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008354:	2300      	movs	r3, #0
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	ab0a      	add	r3, sp, #40	; 0x28
 800835a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800835e:	ab09      	add	r3, sp, #36	; 0x24
 8008360:	ec49 8b10 	vmov	d0, r8, r9
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800836c:	4628      	mov	r0, r5
 800836e:	f7ff fecf 	bl	8008110 <__cvt>
 8008372:	9b06      	ldr	r3, [sp, #24]
 8008374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008376:	2b47      	cmp	r3, #71	; 0x47
 8008378:	4680      	mov	r8, r0
 800837a:	d108      	bne.n	800838e <_printf_float+0x13e>
 800837c:	1cc8      	adds	r0, r1, #3
 800837e:	db02      	blt.n	8008386 <_printf_float+0x136>
 8008380:	6863      	ldr	r3, [r4, #4]
 8008382:	4299      	cmp	r1, r3
 8008384:	dd41      	ble.n	800840a <_printf_float+0x1ba>
 8008386:	f1ab 0302 	sub.w	r3, fp, #2
 800838a:	fa5f fb83 	uxtb.w	fp, r3
 800838e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008392:	d820      	bhi.n	80083d6 <_printf_float+0x186>
 8008394:	3901      	subs	r1, #1
 8008396:	465a      	mov	r2, fp
 8008398:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800839c:	9109      	str	r1, [sp, #36]	; 0x24
 800839e:	f7ff ff19 	bl	80081d4 <__exponent>
 80083a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083a4:	1813      	adds	r3, r2, r0
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	4681      	mov	r9, r0
 80083aa:	6123      	str	r3, [r4, #16]
 80083ac:	dc02      	bgt.n	80083b4 <_printf_float+0x164>
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	07d2      	lsls	r2, r2, #31
 80083b2:	d501      	bpl.n	80083b8 <_printf_float+0x168>
 80083b4:	3301      	adds	r3, #1
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d09c      	beq.n	80082fa <_printf_float+0xaa>
 80083c0:	232d      	movs	r3, #45	; 0x2d
 80083c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c6:	e798      	b.n	80082fa <_printf_float+0xaa>
 80083c8:	9a06      	ldr	r2, [sp, #24]
 80083ca:	2a47      	cmp	r2, #71	; 0x47
 80083cc:	d1be      	bne.n	800834c <_printf_float+0xfc>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1bc      	bne.n	800834c <_printf_float+0xfc>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e7b9      	b.n	800834a <_printf_float+0xfa>
 80083d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80083da:	d118      	bne.n	800840e <_printf_float+0x1be>
 80083dc:	2900      	cmp	r1, #0
 80083de:	6863      	ldr	r3, [r4, #4]
 80083e0:	dd0b      	ble.n	80083fa <_printf_float+0x1aa>
 80083e2:	6121      	str	r1, [r4, #16]
 80083e4:	b913      	cbnz	r3, 80083ec <_printf_float+0x19c>
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	07d0      	lsls	r0, r2, #31
 80083ea:	d502      	bpl.n	80083f2 <_printf_float+0x1a2>
 80083ec:	3301      	adds	r3, #1
 80083ee:	440b      	add	r3, r1
 80083f0:	6123      	str	r3, [r4, #16]
 80083f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80083f4:	f04f 0900 	mov.w	r9, #0
 80083f8:	e7de      	b.n	80083b8 <_printf_float+0x168>
 80083fa:	b913      	cbnz	r3, 8008402 <_printf_float+0x1b2>
 80083fc:	6822      	ldr	r2, [r4, #0]
 80083fe:	07d2      	lsls	r2, r2, #31
 8008400:	d501      	bpl.n	8008406 <_printf_float+0x1b6>
 8008402:	3302      	adds	r3, #2
 8008404:	e7f4      	b.n	80083f0 <_printf_float+0x1a0>
 8008406:	2301      	movs	r3, #1
 8008408:	e7f2      	b.n	80083f0 <_printf_float+0x1a0>
 800840a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800840e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008410:	4299      	cmp	r1, r3
 8008412:	db05      	blt.n	8008420 <_printf_float+0x1d0>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	6121      	str	r1, [r4, #16]
 8008418:	07d8      	lsls	r0, r3, #31
 800841a:	d5ea      	bpl.n	80083f2 <_printf_float+0x1a2>
 800841c:	1c4b      	adds	r3, r1, #1
 800841e:	e7e7      	b.n	80083f0 <_printf_float+0x1a0>
 8008420:	2900      	cmp	r1, #0
 8008422:	bfd4      	ite	le
 8008424:	f1c1 0202 	rsble	r2, r1, #2
 8008428:	2201      	movgt	r2, #1
 800842a:	4413      	add	r3, r2
 800842c:	e7e0      	b.n	80083f0 <_printf_float+0x1a0>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	055a      	lsls	r2, r3, #21
 8008432:	d407      	bmi.n	8008444 <_printf_float+0x1f4>
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	4642      	mov	r2, r8
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	d12c      	bne.n	800849c <_printf_float+0x24c>
 8008442:	e764      	b.n	800830e <_printf_float+0xbe>
 8008444:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008448:	f240 80e0 	bls.w	800860c <_printf_float+0x3bc>
 800844c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008450:	2200      	movs	r2, #0
 8008452:	2300      	movs	r3, #0
 8008454:	f7f8 fb48 	bl	8000ae8 <__aeabi_dcmpeq>
 8008458:	2800      	cmp	r0, #0
 800845a:	d034      	beq.n	80084c6 <_printf_float+0x276>
 800845c:	4a37      	ldr	r2, [pc, #220]	; (800853c <_printf_float+0x2ec>)
 800845e:	2301      	movs	r3, #1
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f af51 	beq.w	800830e <_printf_float+0xbe>
 800846c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008470:	429a      	cmp	r2, r3
 8008472:	db02      	blt.n	800847a <_printf_float+0x22a>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	07d8      	lsls	r0, r3, #31
 8008478:	d510      	bpl.n	800849c <_printf_float+0x24c>
 800847a:	ee18 3a10 	vmov	r3, s16
 800847e:	4652      	mov	r2, sl
 8008480:	4631      	mov	r1, r6
 8008482:	4628      	mov	r0, r5
 8008484:	47b8      	blx	r7
 8008486:	3001      	adds	r0, #1
 8008488:	f43f af41 	beq.w	800830e <_printf_float+0xbe>
 800848c:	f04f 0800 	mov.w	r8, #0
 8008490:	f104 091a 	add.w	r9, r4, #26
 8008494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008496:	3b01      	subs	r3, #1
 8008498:	4543      	cmp	r3, r8
 800849a:	dc09      	bgt.n	80084b0 <_printf_float+0x260>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	079b      	lsls	r3, r3, #30
 80084a0:	f100 8107 	bmi.w	80086b2 <_printf_float+0x462>
 80084a4:	68e0      	ldr	r0, [r4, #12]
 80084a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a8:	4298      	cmp	r0, r3
 80084aa:	bfb8      	it	lt
 80084ac:	4618      	movlt	r0, r3
 80084ae:	e730      	b.n	8008312 <_printf_float+0xc2>
 80084b0:	2301      	movs	r3, #1
 80084b2:	464a      	mov	r2, r9
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f af27 	beq.w	800830e <_printf_float+0xbe>
 80084c0:	f108 0801 	add.w	r8, r8, #1
 80084c4:	e7e6      	b.n	8008494 <_printf_float+0x244>
 80084c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc39      	bgt.n	8008540 <_printf_float+0x2f0>
 80084cc:	4a1b      	ldr	r2, [pc, #108]	; (800853c <_printf_float+0x2ec>)
 80084ce:	2301      	movs	r3, #1
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f af19 	beq.w	800830e <_printf_float+0xbe>
 80084dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80084e0:	4313      	orrs	r3, r2
 80084e2:	d102      	bne.n	80084ea <_printf_float+0x29a>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	d5d8      	bpl.n	800849c <_printf_float+0x24c>
 80084ea:	ee18 3a10 	vmov	r3, s16
 80084ee:	4652      	mov	r2, sl
 80084f0:	4631      	mov	r1, r6
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	f43f af09 	beq.w	800830e <_printf_float+0xbe>
 80084fc:	f04f 0900 	mov.w	r9, #0
 8008500:	f104 0a1a 	add.w	sl, r4, #26
 8008504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008506:	425b      	negs	r3, r3
 8008508:	454b      	cmp	r3, r9
 800850a:	dc01      	bgt.n	8008510 <_printf_float+0x2c0>
 800850c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850e:	e792      	b.n	8008436 <_printf_float+0x1e6>
 8008510:	2301      	movs	r3, #1
 8008512:	4652      	mov	r2, sl
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f aef7 	beq.w	800830e <_printf_float+0xbe>
 8008520:	f109 0901 	add.w	r9, r9, #1
 8008524:	e7ee      	b.n	8008504 <_printf_float+0x2b4>
 8008526:	bf00      	nop
 8008528:	7fefffff 	.word	0x7fefffff
 800852c:	0800b3c1 	.word	0x0800b3c1
 8008530:	0800b3c5 	.word	0x0800b3c5
 8008534:	0800b3c9 	.word	0x0800b3c9
 8008538:	0800b3cd 	.word	0x0800b3cd
 800853c:	0800b3d1 	.word	0x0800b3d1
 8008540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008542:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008544:	429a      	cmp	r2, r3
 8008546:	bfa8      	it	ge
 8008548:	461a      	movge	r2, r3
 800854a:	2a00      	cmp	r2, #0
 800854c:	4691      	mov	r9, r2
 800854e:	dc37      	bgt.n	80085c0 <_printf_float+0x370>
 8008550:	f04f 0b00 	mov.w	fp, #0
 8008554:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008558:	f104 021a 	add.w	r2, r4, #26
 800855c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800855e:	9305      	str	r3, [sp, #20]
 8008560:	eba3 0309 	sub.w	r3, r3, r9
 8008564:	455b      	cmp	r3, fp
 8008566:	dc33      	bgt.n	80085d0 <_printf_float+0x380>
 8008568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800856c:	429a      	cmp	r2, r3
 800856e:	db3b      	blt.n	80085e8 <_printf_float+0x398>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	07da      	lsls	r2, r3, #31
 8008574:	d438      	bmi.n	80085e8 <_printf_float+0x398>
 8008576:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800857a:	eba2 0903 	sub.w	r9, r2, r3
 800857e:	9b05      	ldr	r3, [sp, #20]
 8008580:	1ad2      	subs	r2, r2, r3
 8008582:	4591      	cmp	r9, r2
 8008584:	bfa8      	it	ge
 8008586:	4691      	movge	r9, r2
 8008588:	f1b9 0f00 	cmp.w	r9, #0
 800858c:	dc35      	bgt.n	80085fa <_printf_float+0x3aa>
 800858e:	f04f 0800 	mov.w	r8, #0
 8008592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008596:	f104 0a1a 	add.w	sl, r4, #26
 800859a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800859e:	1a9b      	subs	r3, r3, r2
 80085a0:	eba3 0309 	sub.w	r3, r3, r9
 80085a4:	4543      	cmp	r3, r8
 80085a6:	f77f af79 	ble.w	800849c <_printf_float+0x24c>
 80085aa:	2301      	movs	r3, #1
 80085ac:	4652      	mov	r2, sl
 80085ae:	4631      	mov	r1, r6
 80085b0:	4628      	mov	r0, r5
 80085b2:	47b8      	blx	r7
 80085b4:	3001      	adds	r0, #1
 80085b6:	f43f aeaa 	beq.w	800830e <_printf_float+0xbe>
 80085ba:	f108 0801 	add.w	r8, r8, #1
 80085be:	e7ec      	b.n	800859a <_printf_float+0x34a>
 80085c0:	4613      	mov	r3, r2
 80085c2:	4631      	mov	r1, r6
 80085c4:	4642      	mov	r2, r8
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	d1c0      	bne.n	8008550 <_printf_float+0x300>
 80085ce:	e69e      	b.n	800830e <_printf_float+0xbe>
 80085d0:	2301      	movs	r3, #1
 80085d2:	4631      	mov	r1, r6
 80085d4:	4628      	mov	r0, r5
 80085d6:	9205      	str	r2, [sp, #20]
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f ae97 	beq.w	800830e <_printf_float+0xbe>
 80085e0:	9a05      	ldr	r2, [sp, #20]
 80085e2:	f10b 0b01 	add.w	fp, fp, #1
 80085e6:	e7b9      	b.n	800855c <_printf_float+0x30c>
 80085e8:	ee18 3a10 	vmov	r3, s16
 80085ec:	4652      	mov	r2, sl
 80085ee:	4631      	mov	r1, r6
 80085f0:	4628      	mov	r0, r5
 80085f2:	47b8      	blx	r7
 80085f4:	3001      	adds	r0, #1
 80085f6:	d1be      	bne.n	8008576 <_printf_float+0x326>
 80085f8:	e689      	b.n	800830e <_printf_float+0xbe>
 80085fa:	9a05      	ldr	r2, [sp, #20]
 80085fc:	464b      	mov	r3, r9
 80085fe:	4442      	add	r2, r8
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	d1c1      	bne.n	800858e <_printf_float+0x33e>
 800860a:	e680      	b.n	800830e <_printf_float+0xbe>
 800860c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860e:	2a01      	cmp	r2, #1
 8008610:	dc01      	bgt.n	8008616 <_printf_float+0x3c6>
 8008612:	07db      	lsls	r3, r3, #31
 8008614:	d53a      	bpl.n	800868c <_printf_float+0x43c>
 8008616:	2301      	movs	r3, #1
 8008618:	4642      	mov	r2, r8
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	47b8      	blx	r7
 8008620:	3001      	adds	r0, #1
 8008622:	f43f ae74 	beq.w	800830e <_printf_float+0xbe>
 8008626:	ee18 3a10 	vmov	r3, s16
 800862a:	4652      	mov	r2, sl
 800862c:	4631      	mov	r1, r6
 800862e:	4628      	mov	r0, r5
 8008630:	47b8      	blx	r7
 8008632:	3001      	adds	r0, #1
 8008634:	f43f ae6b 	beq.w	800830e <_printf_float+0xbe>
 8008638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800863c:	2200      	movs	r2, #0
 800863e:	2300      	movs	r3, #0
 8008640:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008644:	f7f8 fa50 	bl	8000ae8 <__aeabi_dcmpeq>
 8008648:	b9d8      	cbnz	r0, 8008682 <_printf_float+0x432>
 800864a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800864e:	f108 0201 	add.w	r2, r8, #1
 8008652:	4631      	mov	r1, r6
 8008654:	4628      	mov	r0, r5
 8008656:	47b8      	blx	r7
 8008658:	3001      	adds	r0, #1
 800865a:	d10e      	bne.n	800867a <_printf_float+0x42a>
 800865c:	e657      	b.n	800830e <_printf_float+0xbe>
 800865e:	2301      	movs	r3, #1
 8008660:	4652      	mov	r2, sl
 8008662:	4631      	mov	r1, r6
 8008664:	4628      	mov	r0, r5
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	f43f ae50 	beq.w	800830e <_printf_float+0xbe>
 800866e:	f108 0801 	add.w	r8, r8, #1
 8008672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008674:	3b01      	subs	r3, #1
 8008676:	4543      	cmp	r3, r8
 8008678:	dcf1      	bgt.n	800865e <_printf_float+0x40e>
 800867a:	464b      	mov	r3, r9
 800867c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008680:	e6da      	b.n	8008438 <_printf_float+0x1e8>
 8008682:	f04f 0800 	mov.w	r8, #0
 8008686:	f104 0a1a 	add.w	sl, r4, #26
 800868a:	e7f2      	b.n	8008672 <_printf_float+0x422>
 800868c:	2301      	movs	r3, #1
 800868e:	4642      	mov	r2, r8
 8008690:	e7df      	b.n	8008652 <_printf_float+0x402>
 8008692:	2301      	movs	r3, #1
 8008694:	464a      	mov	r2, r9
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	f43f ae36 	beq.w	800830e <_printf_float+0xbe>
 80086a2:	f108 0801 	add.w	r8, r8, #1
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086aa:	1a5b      	subs	r3, r3, r1
 80086ac:	4543      	cmp	r3, r8
 80086ae:	dcf0      	bgt.n	8008692 <_printf_float+0x442>
 80086b0:	e6f8      	b.n	80084a4 <_printf_float+0x254>
 80086b2:	f04f 0800 	mov.w	r8, #0
 80086b6:	f104 0919 	add.w	r9, r4, #25
 80086ba:	e7f4      	b.n	80086a6 <_printf_float+0x456>

080086bc <_printf_common>:
 80086bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	4616      	mov	r6, r2
 80086c2:	4699      	mov	r9, r3
 80086c4:	688a      	ldr	r2, [r1, #8]
 80086c6:	690b      	ldr	r3, [r1, #16]
 80086c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086cc:	4293      	cmp	r3, r2
 80086ce:	bfb8      	it	lt
 80086d0:	4613      	movlt	r3, r2
 80086d2:	6033      	str	r3, [r6, #0]
 80086d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086d8:	4607      	mov	r7, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	b10a      	cbz	r2, 80086e2 <_printf_common+0x26>
 80086de:	3301      	adds	r3, #1
 80086e0:	6033      	str	r3, [r6, #0]
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	0699      	lsls	r1, r3, #26
 80086e6:	bf42      	ittt	mi
 80086e8:	6833      	ldrmi	r3, [r6, #0]
 80086ea:	3302      	addmi	r3, #2
 80086ec:	6033      	strmi	r3, [r6, #0]
 80086ee:	6825      	ldr	r5, [r4, #0]
 80086f0:	f015 0506 	ands.w	r5, r5, #6
 80086f4:	d106      	bne.n	8008704 <_printf_common+0x48>
 80086f6:	f104 0a19 	add.w	sl, r4, #25
 80086fa:	68e3      	ldr	r3, [r4, #12]
 80086fc:	6832      	ldr	r2, [r6, #0]
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	42ab      	cmp	r3, r5
 8008702:	dc26      	bgt.n	8008752 <_printf_common+0x96>
 8008704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008708:	1e13      	subs	r3, r2, #0
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	bf18      	it	ne
 800870e:	2301      	movne	r3, #1
 8008710:	0692      	lsls	r2, r2, #26
 8008712:	d42b      	bmi.n	800876c <_printf_common+0xb0>
 8008714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008718:	4649      	mov	r1, r9
 800871a:	4638      	mov	r0, r7
 800871c:	47c0      	blx	r8
 800871e:	3001      	adds	r0, #1
 8008720:	d01e      	beq.n	8008760 <_printf_common+0xa4>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	6922      	ldr	r2, [r4, #16]
 8008726:	f003 0306 	and.w	r3, r3, #6
 800872a:	2b04      	cmp	r3, #4
 800872c:	bf02      	ittt	eq
 800872e:	68e5      	ldreq	r5, [r4, #12]
 8008730:	6833      	ldreq	r3, [r6, #0]
 8008732:	1aed      	subeq	r5, r5, r3
 8008734:	68a3      	ldr	r3, [r4, #8]
 8008736:	bf0c      	ite	eq
 8008738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800873c:	2500      	movne	r5, #0
 800873e:	4293      	cmp	r3, r2
 8008740:	bfc4      	itt	gt
 8008742:	1a9b      	subgt	r3, r3, r2
 8008744:	18ed      	addgt	r5, r5, r3
 8008746:	2600      	movs	r6, #0
 8008748:	341a      	adds	r4, #26
 800874a:	42b5      	cmp	r5, r6
 800874c:	d11a      	bne.n	8008784 <_printf_common+0xc8>
 800874e:	2000      	movs	r0, #0
 8008750:	e008      	b.n	8008764 <_printf_common+0xa8>
 8008752:	2301      	movs	r3, #1
 8008754:	4652      	mov	r2, sl
 8008756:	4649      	mov	r1, r9
 8008758:	4638      	mov	r0, r7
 800875a:	47c0      	blx	r8
 800875c:	3001      	adds	r0, #1
 800875e:	d103      	bne.n	8008768 <_printf_common+0xac>
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008768:	3501      	adds	r5, #1
 800876a:	e7c6      	b.n	80086fa <_printf_common+0x3e>
 800876c:	18e1      	adds	r1, r4, r3
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	2030      	movs	r0, #48	; 0x30
 8008772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008776:	4422      	add	r2, r4
 8008778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800877c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008780:	3302      	adds	r3, #2
 8008782:	e7c7      	b.n	8008714 <_printf_common+0x58>
 8008784:	2301      	movs	r3, #1
 8008786:	4622      	mov	r2, r4
 8008788:	4649      	mov	r1, r9
 800878a:	4638      	mov	r0, r7
 800878c:	47c0      	blx	r8
 800878e:	3001      	adds	r0, #1
 8008790:	d0e6      	beq.n	8008760 <_printf_common+0xa4>
 8008792:	3601      	adds	r6, #1
 8008794:	e7d9      	b.n	800874a <_printf_common+0x8e>
	...

08008798 <_printf_i>:
 8008798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	7e0f      	ldrb	r7, [r1, #24]
 800879e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087a0:	2f78      	cmp	r7, #120	; 0x78
 80087a2:	4691      	mov	r9, r2
 80087a4:	4680      	mov	r8, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	469a      	mov	sl, r3
 80087aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ae:	d807      	bhi.n	80087c0 <_printf_i+0x28>
 80087b0:	2f62      	cmp	r7, #98	; 0x62
 80087b2:	d80a      	bhi.n	80087ca <_printf_i+0x32>
 80087b4:	2f00      	cmp	r7, #0
 80087b6:	f000 80d4 	beq.w	8008962 <_printf_i+0x1ca>
 80087ba:	2f58      	cmp	r7, #88	; 0x58
 80087bc:	f000 80c0 	beq.w	8008940 <_printf_i+0x1a8>
 80087c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087c8:	e03a      	b.n	8008840 <_printf_i+0xa8>
 80087ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ce:	2b15      	cmp	r3, #21
 80087d0:	d8f6      	bhi.n	80087c0 <_printf_i+0x28>
 80087d2:	a101      	add	r1, pc, #4	; (adr r1, 80087d8 <_printf_i+0x40>)
 80087d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087d8:	08008831 	.word	0x08008831
 80087dc:	08008845 	.word	0x08008845
 80087e0:	080087c1 	.word	0x080087c1
 80087e4:	080087c1 	.word	0x080087c1
 80087e8:	080087c1 	.word	0x080087c1
 80087ec:	080087c1 	.word	0x080087c1
 80087f0:	08008845 	.word	0x08008845
 80087f4:	080087c1 	.word	0x080087c1
 80087f8:	080087c1 	.word	0x080087c1
 80087fc:	080087c1 	.word	0x080087c1
 8008800:	080087c1 	.word	0x080087c1
 8008804:	08008949 	.word	0x08008949
 8008808:	08008871 	.word	0x08008871
 800880c:	08008903 	.word	0x08008903
 8008810:	080087c1 	.word	0x080087c1
 8008814:	080087c1 	.word	0x080087c1
 8008818:	0800896b 	.word	0x0800896b
 800881c:	080087c1 	.word	0x080087c1
 8008820:	08008871 	.word	0x08008871
 8008824:	080087c1 	.word	0x080087c1
 8008828:	080087c1 	.word	0x080087c1
 800882c:	0800890b 	.word	0x0800890b
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	1d1a      	adds	r2, r3, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	602a      	str	r2, [r5, #0]
 8008838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800883c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008840:	2301      	movs	r3, #1
 8008842:	e09f      	b.n	8008984 <_printf_i+0x1ec>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	682b      	ldr	r3, [r5, #0]
 8008848:	0607      	lsls	r7, r0, #24
 800884a:	f103 0104 	add.w	r1, r3, #4
 800884e:	6029      	str	r1, [r5, #0]
 8008850:	d501      	bpl.n	8008856 <_printf_i+0xbe>
 8008852:	681e      	ldr	r6, [r3, #0]
 8008854:	e003      	b.n	800885e <_printf_i+0xc6>
 8008856:	0646      	lsls	r6, r0, #25
 8008858:	d5fb      	bpl.n	8008852 <_printf_i+0xba>
 800885a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800885e:	2e00      	cmp	r6, #0
 8008860:	da03      	bge.n	800886a <_printf_i+0xd2>
 8008862:	232d      	movs	r3, #45	; 0x2d
 8008864:	4276      	negs	r6, r6
 8008866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886a:	485a      	ldr	r0, [pc, #360]	; (80089d4 <_printf_i+0x23c>)
 800886c:	230a      	movs	r3, #10
 800886e:	e012      	b.n	8008896 <_printf_i+0xfe>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	6820      	ldr	r0, [r4, #0]
 8008874:	1d19      	adds	r1, r3, #4
 8008876:	6029      	str	r1, [r5, #0]
 8008878:	0605      	lsls	r5, r0, #24
 800887a:	d501      	bpl.n	8008880 <_printf_i+0xe8>
 800887c:	681e      	ldr	r6, [r3, #0]
 800887e:	e002      	b.n	8008886 <_printf_i+0xee>
 8008880:	0641      	lsls	r1, r0, #25
 8008882:	d5fb      	bpl.n	800887c <_printf_i+0xe4>
 8008884:	881e      	ldrh	r6, [r3, #0]
 8008886:	4853      	ldr	r0, [pc, #332]	; (80089d4 <_printf_i+0x23c>)
 8008888:	2f6f      	cmp	r7, #111	; 0x6f
 800888a:	bf0c      	ite	eq
 800888c:	2308      	moveq	r3, #8
 800888e:	230a      	movne	r3, #10
 8008890:	2100      	movs	r1, #0
 8008892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008896:	6865      	ldr	r5, [r4, #4]
 8008898:	60a5      	str	r5, [r4, #8]
 800889a:	2d00      	cmp	r5, #0
 800889c:	bfa2      	ittt	ge
 800889e:	6821      	ldrge	r1, [r4, #0]
 80088a0:	f021 0104 	bicge.w	r1, r1, #4
 80088a4:	6021      	strge	r1, [r4, #0]
 80088a6:	b90e      	cbnz	r6, 80088ac <_printf_i+0x114>
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	d04b      	beq.n	8008944 <_printf_i+0x1ac>
 80088ac:	4615      	mov	r5, r2
 80088ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80088b2:	fb03 6711 	mls	r7, r3, r1, r6
 80088b6:	5dc7      	ldrb	r7, [r0, r7]
 80088b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088bc:	4637      	mov	r7, r6
 80088be:	42bb      	cmp	r3, r7
 80088c0:	460e      	mov	r6, r1
 80088c2:	d9f4      	bls.n	80088ae <_printf_i+0x116>
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d10b      	bne.n	80088e0 <_printf_i+0x148>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	07de      	lsls	r6, r3, #31
 80088cc:	d508      	bpl.n	80088e0 <_printf_i+0x148>
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	6861      	ldr	r1, [r4, #4]
 80088d2:	4299      	cmp	r1, r3
 80088d4:	bfde      	ittt	le
 80088d6:	2330      	movle	r3, #48	; 0x30
 80088d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088e0:	1b52      	subs	r2, r2, r5
 80088e2:	6122      	str	r2, [r4, #16]
 80088e4:	f8cd a000 	str.w	sl, [sp]
 80088e8:	464b      	mov	r3, r9
 80088ea:	aa03      	add	r2, sp, #12
 80088ec:	4621      	mov	r1, r4
 80088ee:	4640      	mov	r0, r8
 80088f0:	f7ff fee4 	bl	80086bc <_printf_common>
 80088f4:	3001      	adds	r0, #1
 80088f6:	d14a      	bne.n	800898e <_printf_i+0x1f6>
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	b004      	add	sp, #16
 80088fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	f043 0320 	orr.w	r3, r3, #32
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	4833      	ldr	r0, [pc, #204]	; (80089d8 <_printf_i+0x240>)
 800890c:	2778      	movs	r7, #120	; 0x78
 800890e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	6829      	ldr	r1, [r5, #0]
 8008916:	061f      	lsls	r7, r3, #24
 8008918:	f851 6b04 	ldr.w	r6, [r1], #4
 800891c:	d402      	bmi.n	8008924 <_printf_i+0x18c>
 800891e:	065f      	lsls	r7, r3, #25
 8008920:	bf48      	it	mi
 8008922:	b2b6      	uxthmi	r6, r6
 8008924:	07df      	lsls	r7, r3, #31
 8008926:	bf48      	it	mi
 8008928:	f043 0320 	orrmi.w	r3, r3, #32
 800892c:	6029      	str	r1, [r5, #0]
 800892e:	bf48      	it	mi
 8008930:	6023      	strmi	r3, [r4, #0]
 8008932:	b91e      	cbnz	r6, 800893c <_printf_i+0x1a4>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	f023 0320 	bic.w	r3, r3, #32
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	2310      	movs	r3, #16
 800893e:	e7a7      	b.n	8008890 <_printf_i+0xf8>
 8008940:	4824      	ldr	r0, [pc, #144]	; (80089d4 <_printf_i+0x23c>)
 8008942:	e7e4      	b.n	800890e <_printf_i+0x176>
 8008944:	4615      	mov	r5, r2
 8008946:	e7bd      	b.n	80088c4 <_printf_i+0x12c>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	6826      	ldr	r6, [r4, #0]
 800894c:	6961      	ldr	r1, [r4, #20]
 800894e:	1d18      	adds	r0, r3, #4
 8008950:	6028      	str	r0, [r5, #0]
 8008952:	0635      	lsls	r5, r6, #24
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	d501      	bpl.n	800895c <_printf_i+0x1c4>
 8008958:	6019      	str	r1, [r3, #0]
 800895a:	e002      	b.n	8008962 <_printf_i+0x1ca>
 800895c:	0670      	lsls	r0, r6, #25
 800895e:	d5fb      	bpl.n	8008958 <_printf_i+0x1c0>
 8008960:	8019      	strh	r1, [r3, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	6123      	str	r3, [r4, #16]
 8008966:	4615      	mov	r5, r2
 8008968:	e7bc      	b.n	80088e4 <_printf_i+0x14c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	1d1a      	adds	r2, r3, #4
 800896e:	602a      	str	r2, [r5, #0]
 8008970:	681d      	ldr	r5, [r3, #0]
 8008972:	6862      	ldr	r2, [r4, #4]
 8008974:	2100      	movs	r1, #0
 8008976:	4628      	mov	r0, r5
 8008978:	f7f7 fc3a 	bl	80001f0 <memchr>
 800897c:	b108      	cbz	r0, 8008982 <_printf_i+0x1ea>
 800897e:	1b40      	subs	r0, r0, r5
 8008980:	6060      	str	r0, [r4, #4]
 8008982:	6863      	ldr	r3, [r4, #4]
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	2300      	movs	r3, #0
 8008988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800898c:	e7aa      	b.n	80088e4 <_printf_i+0x14c>
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	462a      	mov	r2, r5
 8008992:	4649      	mov	r1, r9
 8008994:	4640      	mov	r0, r8
 8008996:	47d0      	blx	sl
 8008998:	3001      	adds	r0, #1
 800899a:	d0ad      	beq.n	80088f8 <_printf_i+0x160>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	079b      	lsls	r3, r3, #30
 80089a0:	d413      	bmi.n	80089ca <_printf_i+0x232>
 80089a2:	68e0      	ldr	r0, [r4, #12]
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	4298      	cmp	r0, r3
 80089a8:	bfb8      	it	lt
 80089aa:	4618      	movlt	r0, r3
 80089ac:	e7a6      	b.n	80088fc <_printf_i+0x164>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4632      	mov	r2, r6
 80089b2:	4649      	mov	r1, r9
 80089b4:	4640      	mov	r0, r8
 80089b6:	47d0      	blx	sl
 80089b8:	3001      	adds	r0, #1
 80089ba:	d09d      	beq.n	80088f8 <_printf_i+0x160>
 80089bc:	3501      	adds	r5, #1
 80089be:	68e3      	ldr	r3, [r4, #12]
 80089c0:	9903      	ldr	r1, [sp, #12]
 80089c2:	1a5b      	subs	r3, r3, r1
 80089c4:	42ab      	cmp	r3, r5
 80089c6:	dcf2      	bgt.n	80089ae <_printf_i+0x216>
 80089c8:	e7eb      	b.n	80089a2 <_printf_i+0x20a>
 80089ca:	2500      	movs	r5, #0
 80089cc:	f104 0619 	add.w	r6, r4, #25
 80089d0:	e7f5      	b.n	80089be <_printf_i+0x226>
 80089d2:	bf00      	nop
 80089d4:	0800b3d3 	.word	0x0800b3d3
 80089d8:	0800b3e4 	.word	0x0800b3e4

080089dc <__sflush_r>:
 80089dc:	898a      	ldrh	r2, [r1, #12]
 80089de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e2:	4605      	mov	r5, r0
 80089e4:	0710      	lsls	r0, r2, #28
 80089e6:	460c      	mov	r4, r1
 80089e8:	d458      	bmi.n	8008a9c <__sflush_r+0xc0>
 80089ea:	684b      	ldr	r3, [r1, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dc05      	bgt.n	80089fc <__sflush_r+0x20>
 80089f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	dc02      	bgt.n	80089fc <__sflush_r+0x20>
 80089f6:	2000      	movs	r0, #0
 80089f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	d0f9      	beq.n	80089f6 <__sflush_r+0x1a>
 8008a02:	2300      	movs	r3, #0
 8008a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a08:	682f      	ldr	r7, [r5, #0]
 8008a0a:	6a21      	ldr	r1, [r4, #32]
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	d032      	beq.n	8008a76 <__sflush_r+0x9a>
 8008a10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	075a      	lsls	r2, r3, #29
 8008a16:	d505      	bpl.n	8008a24 <__sflush_r+0x48>
 8008a18:	6863      	ldr	r3, [r4, #4]
 8008a1a:	1ac0      	subs	r0, r0, r3
 8008a1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a1e:	b10b      	cbz	r3, 8008a24 <__sflush_r+0x48>
 8008a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a22:	1ac0      	subs	r0, r0, r3
 8008a24:	2300      	movs	r3, #0
 8008a26:	4602      	mov	r2, r0
 8008a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a2a:	6a21      	ldr	r1, [r4, #32]
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b0      	blx	r6
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	d106      	bne.n	8008a44 <__sflush_r+0x68>
 8008a36:	6829      	ldr	r1, [r5, #0]
 8008a38:	291d      	cmp	r1, #29
 8008a3a:	d82b      	bhi.n	8008a94 <__sflush_r+0xb8>
 8008a3c:	4a29      	ldr	r2, [pc, #164]	; (8008ae4 <__sflush_r+0x108>)
 8008a3e:	410a      	asrs	r2, r1
 8008a40:	07d6      	lsls	r6, r2, #31
 8008a42:	d427      	bmi.n	8008a94 <__sflush_r+0xb8>
 8008a44:	2200      	movs	r2, #0
 8008a46:	6062      	str	r2, [r4, #4]
 8008a48:	04d9      	lsls	r1, r3, #19
 8008a4a:	6922      	ldr	r2, [r4, #16]
 8008a4c:	6022      	str	r2, [r4, #0]
 8008a4e:	d504      	bpl.n	8008a5a <__sflush_r+0x7e>
 8008a50:	1c42      	adds	r2, r0, #1
 8008a52:	d101      	bne.n	8008a58 <__sflush_r+0x7c>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b903      	cbnz	r3, 8008a5a <__sflush_r+0x7e>
 8008a58:	6560      	str	r0, [r4, #84]	; 0x54
 8008a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a5c:	602f      	str	r7, [r5, #0]
 8008a5e:	2900      	cmp	r1, #0
 8008a60:	d0c9      	beq.n	80089f6 <__sflush_r+0x1a>
 8008a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a66:	4299      	cmp	r1, r3
 8008a68:	d002      	beq.n	8008a70 <__sflush_r+0x94>
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f001 fa3a 	bl	8009ee4 <_free_r>
 8008a70:	2000      	movs	r0, #0
 8008a72:	6360      	str	r0, [r4, #52]	; 0x34
 8008a74:	e7c0      	b.n	80089f8 <__sflush_r+0x1c>
 8008a76:	2301      	movs	r3, #1
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b0      	blx	r6
 8008a7c:	1c41      	adds	r1, r0, #1
 8008a7e:	d1c8      	bne.n	8008a12 <__sflush_r+0x36>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0c5      	beq.n	8008a12 <__sflush_r+0x36>
 8008a86:	2b1d      	cmp	r3, #29
 8008a88:	d001      	beq.n	8008a8e <__sflush_r+0xb2>
 8008a8a:	2b16      	cmp	r3, #22
 8008a8c:	d101      	bne.n	8008a92 <__sflush_r+0xb6>
 8008a8e:	602f      	str	r7, [r5, #0]
 8008a90:	e7b1      	b.n	80089f6 <__sflush_r+0x1a>
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a98:	81a3      	strh	r3, [r4, #12]
 8008a9a:	e7ad      	b.n	80089f8 <__sflush_r+0x1c>
 8008a9c:	690f      	ldr	r7, [r1, #16]
 8008a9e:	2f00      	cmp	r7, #0
 8008aa0:	d0a9      	beq.n	80089f6 <__sflush_r+0x1a>
 8008aa2:	0793      	lsls	r3, r2, #30
 8008aa4:	680e      	ldr	r6, [r1, #0]
 8008aa6:	bf08      	it	eq
 8008aa8:	694b      	ldreq	r3, [r1, #20]
 8008aaa:	600f      	str	r7, [r1, #0]
 8008aac:	bf18      	it	ne
 8008aae:	2300      	movne	r3, #0
 8008ab0:	eba6 0807 	sub.w	r8, r6, r7
 8008ab4:	608b      	str	r3, [r1, #8]
 8008ab6:	f1b8 0f00 	cmp.w	r8, #0
 8008aba:	dd9c      	ble.n	80089f6 <__sflush_r+0x1a>
 8008abc:	6a21      	ldr	r1, [r4, #32]
 8008abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ac0:	4643      	mov	r3, r8
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b0      	blx	r6
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	dc06      	bgt.n	8008ada <__sflush_r+0xfe>
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad2:	81a3      	strh	r3, [r4, #12]
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	e78e      	b.n	80089f8 <__sflush_r+0x1c>
 8008ada:	4407      	add	r7, r0
 8008adc:	eba8 0800 	sub.w	r8, r8, r0
 8008ae0:	e7e9      	b.n	8008ab6 <__sflush_r+0xda>
 8008ae2:	bf00      	nop
 8008ae4:	dfbffffe 	.word	0xdfbffffe

08008ae8 <_fflush_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	690b      	ldr	r3, [r1, #16]
 8008aec:	4605      	mov	r5, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	b913      	cbnz	r3, 8008af8 <_fflush_r+0x10>
 8008af2:	2500      	movs	r5, #0
 8008af4:	4628      	mov	r0, r5
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	b118      	cbz	r0, 8008b02 <_fflush_r+0x1a>
 8008afa:	6a03      	ldr	r3, [r0, #32]
 8008afc:	b90b      	cbnz	r3, 8008b02 <_fflush_r+0x1a>
 8008afe:	f000 f8bb 	bl	8008c78 <__sinit>
 8008b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0f3      	beq.n	8008af2 <_fflush_r+0xa>
 8008b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b0c:	07d0      	lsls	r0, r2, #31
 8008b0e:	d404      	bmi.n	8008b1a <_fflush_r+0x32>
 8008b10:	0599      	lsls	r1, r3, #22
 8008b12:	d402      	bmi.n	8008b1a <_fflush_r+0x32>
 8008b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b16:	f000 fb68 	bl	80091ea <__retarget_lock_acquire_recursive>
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f7ff ff5d 	bl	80089dc <__sflush_r>
 8008b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b24:	07da      	lsls	r2, r3, #31
 8008b26:	4605      	mov	r5, r0
 8008b28:	d4e4      	bmi.n	8008af4 <_fflush_r+0xc>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	059b      	lsls	r3, r3, #22
 8008b2e:	d4e1      	bmi.n	8008af4 <_fflush_r+0xc>
 8008b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b32:	f000 fb5b 	bl	80091ec <__retarget_lock_release_recursive>
 8008b36:	e7dd      	b.n	8008af4 <_fflush_r+0xc>

08008b38 <fflush>:
 8008b38:	4601      	mov	r1, r0
 8008b3a:	b920      	cbnz	r0, 8008b46 <fflush+0xe>
 8008b3c:	4a04      	ldr	r2, [pc, #16]	; (8008b50 <fflush+0x18>)
 8008b3e:	4905      	ldr	r1, [pc, #20]	; (8008b54 <fflush+0x1c>)
 8008b40:	4805      	ldr	r0, [pc, #20]	; (8008b58 <fflush+0x20>)
 8008b42:	f000 b8b1 	b.w	8008ca8 <_fwalk_sglue>
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <fflush+0x24>)
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f7ff bfcd 	b.w	8008ae8 <_fflush_r>
 8008b4e:	bf00      	nop
 8008b50:	2000036c 	.word	0x2000036c
 8008b54:	08008ae9 	.word	0x08008ae9
 8008b58:	20000378 	.word	0x20000378
 8008b5c:	200003c4 	.word	0x200003c4

08008b60 <std>:
 8008b60:	2300      	movs	r3, #0
 8008b62:	b510      	push	{r4, lr}
 8008b64:	4604      	mov	r4, r0
 8008b66:	e9c0 3300 	strd	r3, r3, [r0]
 8008b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b6e:	6083      	str	r3, [r0, #8]
 8008b70:	8181      	strh	r1, [r0, #12]
 8008b72:	6643      	str	r3, [r0, #100]	; 0x64
 8008b74:	81c2      	strh	r2, [r0, #14]
 8008b76:	6183      	str	r3, [r0, #24]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	2208      	movs	r2, #8
 8008b7c:	305c      	adds	r0, #92	; 0x5c
 8008b7e:	f000 faa5 	bl	80090cc <memset>
 8008b82:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <std+0x58>)
 8008b84:	6263      	str	r3, [r4, #36]	; 0x24
 8008b86:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <std+0x5c>)
 8008b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b8a:	4b0d      	ldr	r3, [pc, #52]	; (8008bc0 <std+0x60>)
 8008b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <std+0x64>)
 8008b90:	6323      	str	r3, [r4, #48]	; 0x30
 8008b92:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <std+0x68>)
 8008b94:	6224      	str	r4, [r4, #32]
 8008b96:	429c      	cmp	r4, r3
 8008b98:	d006      	beq.n	8008ba8 <std+0x48>
 8008b9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b9e:	4294      	cmp	r4, r2
 8008ba0:	d002      	beq.n	8008ba8 <std+0x48>
 8008ba2:	33d0      	adds	r3, #208	; 0xd0
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	d105      	bne.n	8008bb4 <std+0x54>
 8008ba8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb0:	f000 bb1a 	b.w	80091e8 <__retarget_lock_init_recursive>
 8008bb4:	bd10      	pop	{r4, pc}
 8008bb6:	bf00      	nop
 8008bb8:	08008f1d 	.word	0x08008f1d
 8008bbc:	08008f3f 	.word	0x08008f3f
 8008bc0:	08008f77 	.word	0x08008f77
 8008bc4:	08008f9b 	.word	0x08008f9b
 8008bc8:	20000780 	.word	0x20000780

08008bcc <stdio_exit_handler>:
 8008bcc:	4a02      	ldr	r2, [pc, #8]	; (8008bd8 <stdio_exit_handler+0xc>)
 8008bce:	4903      	ldr	r1, [pc, #12]	; (8008bdc <stdio_exit_handler+0x10>)
 8008bd0:	4803      	ldr	r0, [pc, #12]	; (8008be0 <stdio_exit_handler+0x14>)
 8008bd2:	f000 b869 	b.w	8008ca8 <_fwalk_sglue>
 8008bd6:	bf00      	nop
 8008bd8:	2000036c 	.word	0x2000036c
 8008bdc:	08008ae9 	.word	0x08008ae9
 8008be0:	20000378 	.word	0x20000378

08008be4 <cleanup_stdio>:
 8008be4:	6841      	ldr	r1, [r0, #4]
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <cleanup_stdio+0x34>)
 8008be8:	4299      	cmp	r1, r3
 8008bea:	b510      	push	{r4, lr}
 8008bec:	4604      	mov	r4, r0
 8008bee:	d001      	beq.n	8008bf4 <cleanup_stdio+0x10>
 8008bf0:	f7ff ff7a 	bl	8008ae8 <_fflush_r>
 8008bf4:	68a1      	ldr	r1, [r4, #8]
 8008bf6:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <cleanup_stdio+0x38>)
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d002      	beq.n	8008c02 <cleanup_stdio+0x1e>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f7ff ff73 	bl	8008ae8 <_fflush_r>
 8008c02:	68e1      	ldr	r1, [r4, #12]
 8008c04:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <cleanup_stdio+0x3c>)
 8008c06:	4299      	cmp	r1, r3
 8008c08:	d004      	beq.n	8008c14 <cleanup_stdio+0x30>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c10:	f7ff bf6a 	b.w	8008ae8 <_fflush_r>
 8008c14:	bd10      	pop	{r4, pc}
 8008c16:	bf00      	nop
 8008c18:	20000780 	.word	0x20000780
 8008c1c:	200007e8 	.word	0x200007e8
 8008c20:	20000850 	.word	0x20000850

08008c24 <global_stdio_init.part.0>:
 8008c24:	b510      	push	{r4, lr}
 8008c26:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <global_stdio_init.part.0+0x30>)
 8008c28:	4c0b      	ldr	r4, [pc, #44]	; (8008c58 <global_stdio_init.part.0+0x34>)
 8008c2a:	4a0c      	ldr	r2, [pc, #48]	; (8008c5c <global_stdio_init.part.0+0x38>)
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	4620      	mov	r0, r4
 8008c30:	2200      	movs	r2, #0
 8008c32:	2104      	movs	r1, #4
 8008c34:	f7ff ff94 	bl	8008b60 <std>
 8008c38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	2109      	movs	r1, #9
 8008c40:	f7ff ff8e 	bl	8008b60 <std>
 8008c44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008c48:	2202      	movs	r2, #2
 8008c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4e:	2112      	movs	r1, #18
 8008c50:	f7ff bf86 	b.w	8008b60 <std>
 8008c54:	200008b8 	.word	0x200008b8
 8008c58:	20000780 	.word	0x20000780
 8008c5c:	08008bcd 	.word	0x08008bcd

08008c60 <__sfp_lock_acquire>:
 8008c60:	4801      	ldr	r0, [pc, #4]	; (8008c68 <__sfp_lock_acquire+0x8>)
 8008c62:	f000 bac2 	b.w	80091ea <__retarget_lock_acquire_recursive>
 8008c66:	bf00      	nop
 8008c68:	200008c1 	.word	0x200008c1

08008c6c <__sfp_lock_release>:
 8008c6c:	4801      	ldr	r0, [pc, #4]	; (8008c74 <__sfp_lock_release+0x8>)
 8008c6e:	f000 babd 	b.w	80091ec <__retarget_lock_release_recursive>
 8008c72:	bf00      	nop
 8008c74:	200008c1 	.word	0x200008c1

08008c78 <__sinit>:
 8008c78:	b510      	push	{r4, lr}
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	f7ff fff0 	bl	8008c60 <__sfp_lock_acquire>
 8008c80:	6a23      	ldr	r3, [r4, #32]
 8008c82:	b11b      	cbz	r3, 8008c8c <__sinit+0x14>
 8008c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c88:	f7ff bff0 	b.w	8008c6c <__sfp_lock_release>
 8008c8c:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <__sinit+0x28>)
 8008c8e:	6223      	str	r3, [r4, #32]
 8008c90:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <__sinit+0x2c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1f5      	bne.n	8008c84 <__sinit+0xc>
 8008c98:	f7ff ffc4 	bl	8008c24 <global_stdio_init.part.0>
 8008c9c:	e7f2      	b.n	8008c84 <__sinit+0xc>
 8008c9e:	bf00      	nop
 8008ca0:	08008be5 	.word	0x08008be5
 8008ca4:	200008b8 	.word	0x200008b8

08008ca8 <_fwalk_sglue>:
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cac:	4607      	mov	r7, r0
 8008cae:	4688      	mov	r8, r1
 8008cb0:	4614      	mov	r4, r2
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8008cbc:	d505      	bpl.n	8008cca <_fwalk_sglue+0x22>
 8008cbe:	6824      	ldr	r4, [r4, #0]
 8008cc0:	2c00      	cmp	r4, #0
 8008cc2:	d1f7      	bne.n	8008cb4 <_fwalk_sglue+0xc>
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d907      	bls.n	8008ce0 <_fwalk_sglue+0x38>
 8008cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	d003      	beq.n	8008ce0 <_fwalk_sglue+0x38>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4638      	mov	r0, r7
 8008cdc:	47c0      	blx	r8
 8008cde:	4306      	orrs	r6, r0
 8008ce0:	3568      	adds	r5, #104	; 0x68
 8008ce2:	e7e9      	b.n	8008cb8 <_fwalk_sglue+0x10>

08008ce4 <iprintf>:
 8008ce4:	b40f      	push	{r0, r1, r2, r3}
 8008ce6:	b507      	push	{r0, r1, r2, lr}
 8008ce8:	4906      	ldr	r1, [pc, #24]	; (8008d04 <iprintf+0x20>)
 8008cea:	ab04      	add	r3, sp, #16
 8008cec:	6808      	ldr	r0, [r1, #0]
 8008cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf2:	6881      	ldr	r1, [r0, #8]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	f001 fd9b 	bl	800a830 <_vfiprintf_r>
 8008cfa:	b003      	add	sp, #12
 8008cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d00:	b004      	add	sp, #16
 8008d02:	4770      	bx	lr
 8008d04:	200003c4 	.word	0x200003c4

08008d08 <_puts_r>:
 8008d08:	6a03      	ldr	r3, [r0, #32]
 8008d0a:	b570      	push	{r4, r5, r6, lr}
 8008d0c:	6884      	ldr	r4, [r0, #8]
 8008d0e:	4605      	mov	r5, r0
 8008d10:	460e      	mov	r6, r1
 8008d12:	b90b      	cbnz	r3, 8008d18 <_puts_r+0x10>
 8008d14:	f7ff ffb0 	bl	8008c78 <__sinit>
 8008d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d1a:	07db      	lsls	r3, r3, #31
 8008d1c:	d405      	bmi.n	8008d2a <_puts_r+0x22>
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	0598      	lsls	r0, r3, #22
 8008d22:	d402      	bmi.n	8008d2a <_puts_r+0x22>
 8008d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d26:	f000 fa60 	bl	80091ea <__retarget_lock_acquire_recursive>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	0719      	lsls	r1, r3, #28
 8008d2e:	d513      	bpl.n	8008d58 <_puts_r+0x50>
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	b18b      	cbz	r3, 8008d58 <_puts_r+0x50>
 8008d34:	3e01      	subs	r6, #1
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	60a3      	str	r3, [r4, #8]
 8008d40:	b9e9      	cbnz	r1, 8008d7e <_puts_r+0x76>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	da2e      	bge.n	8008da4 <_puts_r+0x9c>
 8008d46:	4622      	mov	r2, r4
 8008d48:	210a      	movs	r1, #10
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 f929 	bl	8008fa2 <__swbuf_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d007      	beq.n	8008d64 <_puts_r+0x5c>
 8008d54:	250a      	movs	r5, #10
 8008d56:	e007      	b.n	8008d68 <_puts_r+0x60>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 f95e 	bl	800901c <__swsetup_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d0e7      	beq.n	8008d34 <_puts_r+0x2c>
 8008d64:	f04f 35ff 	mov.w	r5, #4294967295
 8008d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d6a:	07da      	lsls	r2, r3, #31
 8008d6c:	d405      	bmi.n	8008d7a <_puts_r+0x72>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	059b      	lsls	r3, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_puts_r+0x72>
 8008d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d76:	f000 fa39 	bl	80091ec <__retarget_lock_release_recursive>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da04      	bge.n	8008d8c <_puts_r+0x84>
 8008d82:	69a2      	ldr	r2, [r4, #24]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	dc06      	bgt.n	8008d96 <_puts_r+0x8e>
 8008d88:	290a      	cmp	r1, #10
 8008d8a:	d004      	beq.n	8008d96 <_puts_r+0x8e>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	6022      	str	r2, [r4, #0]
 8008d92:	7019      	strb	r1, [r3, #0]
 8008d94:	e7cf      	b.n	8008d36 <_puts_r+0x2e>
 8008d96:	4622      	mov	r2, r4
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f000 f902 	bl	8008fa2 <__swbuf_r>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d1c9      	bne.n	8008d36 <_puts_r+0x2e>
 8008da2:	e7df      	b.n	8008d64 <_puts_r+0x5c>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	250a      	movs	r5, #10
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	701d      	strb	r5, [r3, #0]
 8008dae:	e7db      	b.n	8008d68 <_puts_r+0x60>

08008db0 <puts>:
 8008db0:	4b02      	ldr	r3, [pc, #8]	; (8008dbc <puts+0xc>)
 8008db2:	4601      	mov	r1, r0
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	f7ff bfa7 	b.w	8008d08 <_puts_r>
 8008dba:	bf00      	nop
 8008dbc:	200003c4 	.word	0x200003c4

08008dc0 <setvbuf>:
 8008dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dc4:	461d      	mov	r5, r3
 8008dc6:	4b54      	ldr	r3, [pc, #336]	; (8008f18 <setvbuf+0x158>)
 8008dc8:	681f      	ldr	r7, [r3, #0]
 8008dca:	4604      	mov	r4, r0
 8008dcc:	460e      	mov	r6, r1
 8008dce:	4690      	mov	r8, r2
 8008dd0:	b127      	cbz	r7, 8008ddc <setvbuf+0x1c>
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	b913      	cbnz	r3, 8008ddc <setvbuf+0x1c>
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	f7ff ff4e 	bl	8008c78 <__sinit>
 8008ddc:	f1b8 0f02 	cmp.w	r8, #2
 8008de0:	d006      	beq.n	8008df0 <setvbuf+0x30>
 8008de2:	f1b8 0f01 	cmp.w	r8, #1
 8008de6:	f200 8094 	bhi.w	8008f12 <setvbuf+0x152>
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	f2c0 8091 	blt.w	8008f12 <setvbuf+0x152>
 8008df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008df2:	07da      	lsls	r2, r3, #31
 8008df4:	d405      	bmi.n	8008e02 <setvbuf+0x42>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	059b      	lsls	r3, r3, #22
 8008dfa:	d402      	bmi.n	8008e02 <setvbuf+0x42>
 8008dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dfe:	f000 f9f4 	bl	80091ea <__retarget_lock_acquire_recursive>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4638      	mov	r0, r7
 8008e06:	f7ff fe6f 	bl	8008ae8 <_fflush_r>
 8008e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e0c:	b141      	cbz	r1, 8008e20 <setvbuf+0x60>
 8008e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e12:	4299      	cmp	r1, r3
 8008e14:	d002      	beq.n	8008e1c <setvbuf+0x5c>
 8008e16:	4638      	mov	r0, r7
 8008e18:	f001 f864 	bl	8009ee4 <_free_r>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6363      	str	r3, [r4, #52]	; 0x34
 8008e20:	2300      	movs	r3, #0
 8008e22:	61a3      	str	r3, [r4, #24]
 8008e24:	6063      	str	r3, [r4, #4]
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	0618      	lsls	r0, r3, #24
 8008e2a:	d503      	bpl.n	8008e34 <setvbuf+0x74>
 8008e2c:	6921      	ldr	r1, [r4, #16]
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f001 f858 	bl	8009ee4 <_free_r>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	f1b8 0f02 	cmp.w	r8, #2
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	d05f      	beq.n	8008f06 <setvbuf+0x146>
 8008e46:	ab01      	add	r3, sp, #4
 8008e48:	466a      	mov	r2, sp
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	f001 fe09 	bl	800aa64 <__swhatbuf_r>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	4318      	orrs	r0, r3
 8008e56:	81a0      	strh	r0, [r4, #12]
 8008e58:	bb2d      	cbnz	r5, 8008ea6 <setvbuf+0xe6>
 8008e5a:	9d00      	ldr	r5, [sp, #0]
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f001 f88d 	bl	8009f7c <malloc>
 8008e62:	4606      	mov	r6, r0
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d150      	bne.n	8008f0a <setvbuf+0x14a>
 8008e68:	f8dd 9000 	ldr.w	r9, [sp]
 8008e6c:	45a9      	cmp	r9, r5
 8008e6e:	d13e      	bne.n	8008eee <setvbuf+0x12e>
 8008e70:	f04f 35ff 	mov.w	r5, #4294967295
 8008e74:	2200      	movs	r2, #0
 8008e76:	60a2      	str	r2, [r4, #8]
 8008e78:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008e7c:	6022      	str	r2, [r4, #0]
 8008e7e:	6122      	str	r2, [r4, #16]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e86:	6162      	str	r2, [r4, #20]
 8008e88:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e8a:	f043 0302 	orr.w	r3, r3, #2
 8008e8e:	07d1      	lsls	r1, r2, #31
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	d404      	bmi.n	8008e9e <setvbuf+0xde>
 8008e94:	059b      	lsls	r3, r3, #22
 8008e96:	d402      	bmi.n	8008e9e <setvbuf+0xde>
 8008e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9a:	f000 f9a7 	bl	80091ec <__retarget_lock_release_recursive>
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	b003      	add	sp, #12
 8008ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	d0d8      	beq.n	8008e5c <setvbuf+0x9c>
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	b913      	cbnz	r3, 8008eb4 <setvbuf+0xf4>
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f7ff fee2 	bl	8008c78 <__sinit>
 8008eb4:	f1b8 0f01 	cmp.w	r8, #1
 8008eb8:	bf08      	it	eq
 8008eba:	89a3      	ldrheq	r3, [r4, #12]
 8008ebc:	6026      	str	r6, [r4, #0]
 8008ebe:	bf04      	itt	eq
 8008ec0:	f043 0301 	orreq.w	r3, r3, #1
 8008ec4:	81a3      	strheq	r3, [r4, #12]
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	f013 0208 	ands.w	r2, r3, #8
 8008ecc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008ed0:	d01d      	beq.n	8008f0e <setvbuf+0x14e>
 8008ed2:	07da      	lsls	r2, r3, #31
 8008ed4:	bf41      	itttt	mi
 8008ed6:	2200      	movmi	r2, #0
 8008ed8:	426d      	negmi	r5, r5
 8008eda:	60a2      	strmi	r2, [r4, #8]
 8008edc:	61a5      	strmi	r5, [r4, #24]
 8008ede:	bf58      	it	pl
 8008ee0:	60a5      	strpl	r5, [r4, #8]
 8008ee2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008ee4:	f015 0501 	ands.w	r5, r5, #1
 8008ee8:	d0d4      	beq.n	8008e94 <setvbuf+0xd4>
 8008eea:	2500      	movs	r5, #0
 8008eec:	e7d7      	b.n	8008e9e <setvbuf+0xde>
 8008eee:	4648      	mov	r0, r9
 8008ef0:	f001 f844 	bl	8009f7c <malloc>
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0ba      	beq.n	8008e70 <setvbuf+0xb0>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	464d      	mov	r5, r9
 8008f04:	e7d1      	b.n	8008eaa <setvbuf+0xea>
 8008f06:	2500      	movs	r5, #0
 8008f08:	e7b4      	b.n	8008e74 <setvbuf+0xb4>
 8008f0a:	46a9      	mov	r9, r5
 8008f0c:	e7f5      	b.n	8008efa <setvbuf+0x13a>
 8008f0e:	60a2      	str	r2, [r4, #8]
 8008f10:	e7e7      	b.n	8008ee2 <setvbuf+0x122>
 8008f12:	f04f 35ff 	mov.w	r5, #4294967295
 8008f16:	e7c2      	b.n	8008e9e <setvbuf+0xde>
 8008f18:	200003c4 	.word	0x200003c4

08008f1c <__sread>:
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	460c      	mov	r4, r1
 8008f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f24:	f000 f912 	bl	800914c <_read_r>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	bfab      	itete	ge
 8008f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f30:	181b      	addge	r3, r3, r0
 8008f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f36:	bfac      	ite	ge
 8008f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f3a:	81a3      	strhlt	r3, [r4, #12]
 8008f3c:	bd10      	pop	{r4, pc}

08008f3e <__swrite>:
 8008f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f42:	461f      	mov	r7, r3
 8008f44:	898b      	ldrh	r3, [r1, #12]
 8008f46:	05db      	lsls	r3, r3, #23
 8008f48:	4605      	mov	r5, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	4616      	mov	r6, r2
 8008f4e:	d505      	bpl.n	8008f5c <__swrite+0x1e>
 8008f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f54:	2302      	movs	r3, #2
 8008f56:	2200      	movs	r2, #0
 8008f58:	f000 f8e6 	bl	8009128 <_lseek_r>
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	4632      	mov	r2, r6
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f72:	f000 b8fd 	b.w	8009170 <_write_r>

08008f76 <__sseek>:
 8008f76:	b510      	push	{r4, lr}
 8008f78:	460c      	mov	r4, r1
 8008f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7e:	f000 f8d3 	bl	8009128 <_lseek_r>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	bf15      	itete	ne
 8008f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f92:	81a3      	strheq	r3, [r4, #12]
 8008f94:	bf18      	it	ne
 8008f96:	81a3      	strhne	r3, [r4, #12]
 8008f98:	bd10      	pop	{r4, pc}

08008f9a <__sclose>:
 8008f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9e:	f000 b8b3 	b.w	8009108 <_close_r>

08008fa2 <__swbuf_r>:
 8008fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa4:	460e      	mov	r6, r1
 8008fa6:	4614      	mov	r4, r2
 8008fa8:	4605      	mov	r5, r0
 8008faa:	b118      	cbz	r0, 8008fb4 <__swbuf_r+0x12>
 8008fac:	6a03      	ldr	r3, [r0, #32]
 8008fae:	b90b      	cbnz	r3, 8008fb4 <__swbuf_r+0x12>
 8008fb0:	f7ff fe62 	bl	8008c78 <__sinit>
 8008fb4:	69a3      	ldr	r3, [r4, #24]
 8008fb6:	60a3      	str	r3, [r4, #8]
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	071a      	lsls	r2, r3, #28
 8008fbc:	d525      	bpl.n	800900a <__swbuf_r+0x68>
 8008fbe:	6923      	ldr	r3, [r4, #16]
 8008fc0:	b31b      	cbz	r3, 800900a <__swbuf_r+0x68>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	1a98      	subs	r0, r3, r2
 8008fc8:	6963      	ldr	r3, [r4, #20]
 8008fca:	b2f6      	uxtb	r6, r6
 8008fcc:	4283      	cmp	r3, r0
 8008fce:	4637      	mov	r7, r6
 8008fd0:	dc04      	bgt.n	8008fdc <__swbuf_r+0x3a>
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f7ff fd87 	bl	8008ae8 <_fflush_r>
 8008fda:	b9e0      	cbnz	r0, 8009016 <__swbuf_r+0x74>
 8008fdc:	68a3      	ldr	r3, [r4, #8]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	60a3      	str	r3, [r4, #8]
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	6022      	str	r2, [r4, #0]
 8008fe8:	701e      	strb	r6, [r3, #0]
 8008fea:	6962      	ldr	r2, [r4, #20]
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d004      	beq.n	8008ffc <__swbuf_r+0x5a>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	07db      	lsls	r3, r3, #31
 8008ff6:	d506      	bpl.n	8009006 <__swbuf_r+0x64>
 8008ff8:	2e0a      	cmp	r6, #10
 8008ffa:	d104      	bne.n	8009006 <__swbuf_r+0x64>
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	4628      	mov	r0, r5
 8009000:	f7ff fd72 	bl	8008ae8 <_fflush_r>
 8009004:	b938      	cbnz	r0, 8009016 <__swbuf_r+0x74>
 8009006:	4638      	mov	r0, r7
 8009008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800900a:	4621      	mov	r1, r4
 800900c:	4628      	mov	r0, r5
 800900e:	f000 f805 	bl	800901c <__swsetup_r>
 8009012:	2800      	cmp	r0, #0
 8009014:	d0d5      	beq.n	8008fc2 <__swbuf_r+0x20>
 8009016:	f04f 37ff 	mov.w	r7, #4294967295
 800901a:	e7f4      	b.n	8009006 <__swbuf_r+0x64>

0800901c <__swsetup_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4b2a      	ldr	r3, [pc, #168]	; (80090c8 <__swsetup_r+0xac>)
 8009020:	4605      	mov	r5, r0
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	460c      	mov	r4, r1
 8009026:	b118      	cbz	r0, 8009030 <__swsetup_r+0x14>
 8009028:	6a03      	ldr	r3, [r0, #32]
 800902a:	b90b      	cbnz	r3, 8009030 <__swsetup_r+0x14>
 800902c:	f7ff fe24 	bl	8008c78 <__sinit>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009036:	0718      	lsls	r0, r3, #28
 8009038:	d422      	bmi.n	8009080 <__swsetup_r+0x64>
 800903a:	06d9      	lsls	r1, r3, #27
 800903c:	d407      	bmi.n	800904e <__swsetup_r+0x32>
 800903e:	2309      	movs	r3, #9
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	f04f 30ff 	mov.w	r0, #4294967295
 800904c:	e034      	b.n	80090b8 <__swsetup_r+0x9c>
 800904e:	0758      	lsls	r0, r3, #29
 8009050:	d512      	bpl.n	8009078 <__swsetup_r+0x5c>
 8009052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009054:	b141      	cbz	r1, 8009068 <__swsetup_r+0x4c>
 8009056:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800905a:	4299      	cmp	r1, r3
 800905c:	d002      	beq.n	8009064 <__swsetup_r+0x48>
 800905e:	4628      	mov	r0, r5
 8009060:	f000 ff40 	bl	8009ee4 <_free_r>
 8009064:	2300      	movs	r3, #0
 8009066:	6363      	str	r3, [r4, #52]	; 0x34
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	2300      	movs	r3, #0
 8009072:	6063      	str	r3, [r4, #4]
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	f043 0308 	orr.w	r3, r3, #8
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	b94b      	cbnz	r3, 8009098 <__swsetup_r+0x7c>
 8009084:	89a3      	ldrh	r3, [r4, #12]
 8009086:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800908a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800908e:	d003      	beq.n	8009098 <__swsetup_r+0x7c>
 8009090:	4621      	mov	r1, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f001 fd0c 	bl	800aab0 <__smakebuf_r>
 8009098:	89a0      	ldrh	r0, [r4, #12]
 800909a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800909e:	f010 0301 	ands.w	r3, r0, #1
 80090a2:	d00a      	beq.n	80090ba <__swsetup_r+0x9e>
 80090a4:	2300      	movs	r3, #0
 80090a6:	60a3      	str	r3, [r4, #8]
 80090a8:	6963      	ldr	r3, [r4, #20]
 80090aa:	425b      	negs	r3, r3
 80090ac:	61a3      	str	r3, [r4, #24]
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	b943      	cbnz	r3, 80090c4 <__swsetup_r+0xa8>
 80090b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090b6:	d1c4      	bne.n	8009042 <__swsetup_r+0x26>
 80090b8:	bd38      	pop	{r3, r4, r5, pc}
 80090ba:	0781      	lsls	r1, r0, #30
 80090bc:	bf58      	it	pl
 80090be:	6963      	ldrpl	r3, [r4, #20]
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	e7f4      	b.n	80090ae <__swsetup_r+0x92>
 80090c4:	2000      	movs	r0, #0
 80090c6:	e7f7      	b.n	80090b8 <__swsetup_r+0x9c>
 80090c8:	200003c4 	.word	0x200003c4

080090cc <memset>:
 80090cc:	4402      	add	r2, r0
 80090ce:	4603      	mov	r3, r0
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d100      	bne.n	80090d6 <memset+0xa>
 80090d4:	4770      	bx	lr
 80090d6:	f803 1b01 	strb.w	r1, [r3], #1
 80090da:	e7f9      	b.n	80090d0 <memset+0x4>

080090dc <strncmp>:
 80090dc:	b510      	push	{r4, lr}
 80090de:	b16a      	cbz	r2, 80090fc <strncmp+0x20>
 80090e0:	3901      	subs	r1, #1
 80090e2:	1884      	adds	r4, r0, r2
 80090e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d103      	bne.n	80090f8 <strncmp+0x1c>
 80090f0:	42a0      	cmp	r0, r4
 80090f2:	d001      	beq.n	80090f8 <strncmp+0x1c>
 80090f4:	2a00      	cmp	r2, #0
 80090f6:	d1f5      	bne.n	80090e4 <strncmp+0x8>
 80090f8:	1ad0      	subs	r0, r2, r3
 80090fa:	bd10      	pop	{r4, pc}
 80090fc:	4610      	mov	r0, r2
 80090fe:	e7fc      	b.n	80090fa <strncmp+0x1e>

08009100 <_localeconv_r>:
 8009100:	4800      	ldr	r0, [pc, #0]	; (8009104 <_localeconv_r+0x4>)
 8009102:	4770      	bx	lr
 8009104:	200004b8 	.word	0x200004b8

08009108 <_close_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d06      	ldr	r5, [pc, #24]	; (8009124 <_close_r+0x1c>)
 800910c:	2300      	movs	r3, #0
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	602b      	str	r3, [r5, #0]
 8009114:	f7f8 fe83 	bl	8001e1e <_close>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_close_r+0x1a>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_close_r+0x1a>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	200008bc 	.word	0x200008bc

08009128 <_lseek_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d07      	ldr	r5, [pc, #28]	; (8009148 <_lseek_r+0x20>)
 800912c:	4604      	mov	r4, r0
 800912e:	4608      	mov	r0, r1
 8009130:	4611      	mov	r1, r2
 8009132:	2200      	movs	r2, #0
 8009134:	602a      	str	r2, [r5, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	f7f8 fe98 	bl	8001e6c <_lseek>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_lseek_r+0x1e>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_lseek_r+0x1e>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	200008bc 	.word	0x200008bc

0800914c <_read_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4d07      	ldr	r5, [pc, #28]	; (800916c <_read_r+0x20>)
 8009150:	4604      	mov	r4, r0
 8009152:	4608      	mov	r0, r1
 8009154:	4611      	mov	r1, r2
 8009156:	2200      	movs	r2, #0
 8009158:	602a      	str	r2, [r5, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	f7f8 fe42 	bl	8001de4 <_read>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_read_r+0x1e>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_read_r+0x1e>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	200008bc 	.word	0x200008bc

08009170 <_write_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d07      	ldr	r5, [pc, #28]	; (8009190 <_write_r+0x20>)
 8009174:	4604      	mov	r4, r0
 8009176:	4608      	mov	r0, r1
 8009178:	4611      	mov	r1, r2
 800917a:	2200      	movs	r2, #0
 800917c:	602a      	str	r2, [r5, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	f7f7 ffea 	bl	8001158 <_write>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_write_r+0x1e>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_write_r+0x1e>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	200008bc 	.word	0x200008bc

08009194 <__errno>:
 8009194:	4b01      	ldr	r3, [pc, #4]	; (800919c <__errno+0x8>)
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	200003c4 	.word	0x200003c4

080091a0 <__libc_init_array>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	4d0d      	ldr	r5, [pc, #52]	; (80091d8 <__libc_init_array+0x38>)
 80091a4:	4c0d      	ldr	r4, [pc, #52]	; (80091dc <__libc_init_array+0x3c>)
 80091a6:	1b64      	subs	r4, r4, r5
 80091a8:	10a4      	asrs	r4, r4, #2
 80091aa:	2600      	movs	r6, #0
 80091ac:	42a6      	cmp	r6, r4
 80091ae:	d109      	bne.n	80091c4 <__libc_init_array+0x24>
 80091b0:	4d0b      	ldr	r5, [pc, #44]	; (80091e0 <__libc_init_array+0x40>)
 80091b2:	4c0c      	ldr	r4, [pc, #48]	; (80091e4 <__libc_init_array+0x44>)
 80091b4:	f001 fdaa 	bl	800ad0c <_init>
 80091b8:	1b64      	subs	r4, r4, r5
 80091ba:	10a4      	asrs	r4, r4, #2
 80091bc:	2600      	movs	r6, #0
 80091be:	42a6      	cmp	r6, r4
 80091c0:	d105      	bne.n	80091ce <__libc_init_array+0x2e>
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c8:	4798      	blx	r3
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7ee      	b.n	80091ac <__libc_init_array+0xc>
 80091ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d2:	4798      	blx	r3
 80091d4:	3601      	adds	r6, #1
 80091d6:	e7f2      	b.n	80091be <__libc_init_array+0x1e>
 80091d8:	0800b634 	.word	0x0800b634
 80091dc:	0800b634 	.word	0x0800b634
 80091e0:	0800b634 	.word	0x0800b634
 80091e4:	0800b638 	.word	0x0800b638

080091e8 <__retarget_lock_init_recursive>:
 80091e8:	4770      	bx	lr

080091ea <__retarget_lock_acquire_recursive>:
 80091ea:	4770      	bx	lr

080091ec <__retarget_lock_release_recursive>:
 80091ec:	4770      	bx	lr

080091ee <quorem>:
 80091ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f2:	6903      	ldr	r3, [r0, #16]
 80091f4:	690c      	ldr	r4, [r1, #16]
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	4607      	mov	r7, r0
 80091fa:	db7e      	blt.n	80092fa <quorem+0x10c>
 80091fc:	3c01      	subs	r4, #1
 80091fe:	f101 0814 	add.w	r8, r1, #20
 8009202:	f100 0514 	add.w	r5, r0, #20
 8009206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009214:	3301      	adds	r3, #1
 8009216:	429a      	cmp	r2, r3
 8009218:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800921c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009220:	fbb2 f6f3 	udiv	r6, r2, r3
 8009224:	d331      	bcc.n	800928a <quorem+0x9c>
 8009226:	f04f 0e00 	mov.w	lr, #0
 800922a:	4640      	mov	r0, r8
 800922c:	46ac      	mov	ip, r5
 800922e:	46f2      	mov	sl, lr
 8009230:	f850 2b04 	ldr.w	r2, [r0], #4
 8009234:	b293      	uxth	r3, r2
 8009236:	fb06 e303 	mla	r3, r6, r3, lr
 800923a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800923e:	0c1a      	lsrs	r2, r3, #16
 8009240:	b29b      	uxth	r3, r3
 8009242:	ebaa 0303 	sub.w	r3, sl, r3
 8009246:	f8dc a000 	ldr.w	sl, [ip]
 800924a:	fa13 f38a 	uxtah	r3, r3, sl
 800924e:	fb06 220e 	mla	r2, r6, lr, r2
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800925a:	b292      	uxth	r2, r2
 800925c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009264:	f8bd 3000 	ldrh.w	r3, [sp]
 8009268:	4581      	cmp	r9, r0
 800926a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800926e:	f84c 3b04 	str.w	r3, [ip], #4
 8009272:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009276:	d2db      	bcs.n	8009230 <quorem+0x42>
 8009278:	f855 300b 	ldr.w	r3, [r5, fp]
 800927c:	b92b      	cbnz	r3, 800928a <quorem+0x9c>
 800927e:	9b01      	ldr	r3, [sp, #4]
 8009280:	3b04      	subs	r3, #4
 8009282:	429d      	cmp	r5, r3
 8009284:	461a      	mov	r2, r3
 8009286:	d32c      	bcc.n	80092e2 <quorem+0xf4>
 8009288:	613c      	str	r4, [r7, #16]
 800928a:	4638      	mov	r0, r7
 800928c:	f001 f9a6 	bl	800a5dc <__mcmp>
 8009290:	2800      	cmp	r0, #0
 8009292:	db22      	blt.n	80092da <quorem+0xec>
 8009294:	3601      	adds	r6, #1
 8009296:	4629      	mov	r1, r5
 8009298:	2000      	movs	r0, #0
 800929a:	f858 2b04 	ldr.w	r2, [r8], #4
 800929e:	f8d1 c000 	ldr.w	ip, [r1]
 80092a2:	b293      	uxth	r3, r2
 80092a4:	1ac3      	subs	r3, r0, r3
 80092a6:	0c12      	lsrs	r2, r2, #16
 80092a8:	fa13 f38c 	uxtah	r3, r3, ip
 80092ac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80092b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ba:	45c1      	cmp	r9, r8
 80092bc:	f841 3b04 	str.w	r3, [r1], #4
 80092c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092c4:	d2e9      	bcs.n	800929a <quorem+0xac>
 80092c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ce:	b922      	cbnz	r2, 80092da <quorem+0xec>
 80092d0:	3b04      	subs	r3, #4
 80092d2:	429d      	cmp	r5, r3
 80092d4:	461a      	mov	r2, r3
 80092d6:	d30a      	bcc.n	80092ee <quorem+0x100>
 80092d8:	613c      	str	r4, [r7, #16]
 80092da:	4630      	mov	r0, r6
 80092dc:	b003      	add	sp, #12
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	6812      	ldr	r2, [r2, #0]
 80092e4:	3b04      	subs	r3, #4
 80092e6:	2a00      	cmp	r2, #0
 80092e8:	d1ce      	bne.n	8009288 <quorem+0x9a>
 80092ea:	3c01      	subs	r4, #1
 80092ec:	e7c9      	b.n	8009282 <quorem+0x94>
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	3b04      	subs	r3, #4
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	d1f0      	bne.n	80092d8 <quorem+0xea>
 80092f6:	3c01      	subs	r4, #1
 80092f8:	e7eb      	b.n	80092d2 <quorem+0xe4>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e7ee      	b.n	80092dc <quorem+0xee>
	...

08009300 <_dtoa_r>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	ed2d 8b04 	vpush	{d8-d9}
 8009308:	69c5      	ldr	r5, [r0, #28]
 800930a:	b093      	sub	sp, #76	; 0x4c
 800930c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009310:	ec57 6b10 	vmov	r6, r7, d0
 8009314:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009318:	9107      	str	r1, [sp, #28]
 800931a:	4604      	mov	r4, r0
 800931c:	920a      	str	r2, [sp, #40]	; 0x28
 800931e:	930d      	str	r3, [sp, #52]	; 0x34
 8009320:	b975      	cbnz	r5, 8009340 <_dtoa_r+0x40>
 8009322:	2010      	movs	r0, #16
 8009324:	f000 fe2a 	bl	8009f7c <malloc>
 8009328:	4602      	mov	r2, r0
 800932a:	61e0      	str	r0, [r4, #28]
 800932c:	b920      	cbnz	r0, 8009338 <_dtoa_r+0x38>
 800932e:	4bae      	ldr	r3, [pc, #696]	; (80095e8 <_dtoa_r+0x2e8>)
 8009330:	21ef      	movs	r1, #239	; 0xef
 8009332:	48ae      	ldr	r0, [pc, #696]	; (80095ec <_dtoa_r+0x2ec>)
 8009334:	f001 fc38 	bl	800aba8 <__assert_func>
 8009338:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800933c:	6005      	str	r5, [r0, #0]
 800933e:	60c5      	str	r5, [r0, #12]
 8009340:	69e3      	ldr	r3, [r4, #28]
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	b151      	cbz	r1, 800935c <_dtoa_r+0x5c>
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	604a      	str	r2, [r1, #4]
 800934a:	2301      	movs	r3, #1
 800934c:	4093      	lsls	r3, r2
 800934e:	608b      	str	r3, [r1, #8]
 8009350:	4620      	mov	r0, r4
 8009352:	f000 ff07 	bl	800a164 <_Bfree>
 8009356:	69e3      	ldr	r3, [r4, #28]
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	1e3b      	subs	r3, r7, #0
 800935e:	bfbb      	ittet	lt
 8009360:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009364:	9303      	strlt	r3, [sp, #12]
 8009366:	2300      	movge	r3, #0
 8009368:	2201      	movlt	r2, #1
 800936a:	bfac      	ite	ge
 800936c:	f8c8 3000 	strge.w	r3, [r8]
 8009370:	f8c8 2000 	strlt.w	r2, [r8]
 8009374:	4b9e      	ldr	r3, [pc, #632]	; (80095f0 <_dtoa_r+0x2f0>)
 8009376:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800937a:	ea33 0308 	bics.w	r3, r3, r8
 800937e:	d11b      	bne.n	80093b8 <_dtoa_r+0xb8>
 8009380:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009382:	f242 730f 	movw	r3, #9999	; 0x270f
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800938c:	4333      	orrs	r3, r6
 800938e:	f000 8593 	beq.w	8009eb8 <_dtoa_r+0xbb8>
 8009392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009394:	b963      	cbnz	r3, 80093b0 <_dtoa_r+0xb0>
 8009396:	4b97      	ldr	r3, [pc, #604]	; (80095f4 <_dtoa_r+0x2f4>)
 8009398:	e027      	b.n	80093ea <_dtoa_r+0xea>
 800939a:	4b97      	ldr	r3, [pc, #604]	; (80095f8 <_dtoa_r+0x2f8>)
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	3308      	adds	r3, #8
 80093a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	9800      	ldr	r0, [sp, #0]
 80093a6:	b013      	add	sp, #76	; 0x4c
 80093a8:	ecbd 8b04 	vpop	{d8-d9}
 80093ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b0:	4b90      	ldr	r3, [pc, #576]	; (80095f4 <_dtoa_r+0x2f4>)
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	3303      	adds	r3, #3
 80093b6:	e7f3      	b.n	80093a0 <_dtoa_r+0xa0>
 80093b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093bc:	2200      	movs	r2, #0
 80093be:	ec51 0b17 	vmov	r0, r1, d7
 80093c2:	eeb0 8a47 	vmov.f32	s16, s14
 80093c6:	eef0 8a67 	vmov.f32	s17, s15
 80093ca:	2300      	movs	r3, #0
 80093cc:	f7f7 fb8c 	bl	8000ae8 <__aeabi_dcmpeq>
 80093d0:	4681      	mov	r9, r0
 80093d2:	b160      	cbz	r0, 80093ee <_dtoa_r+0xee>
 80093d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093d6:	2301      	movs	r3, #1
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 8568 	beq.w	8009eb2 <_dtoa_r+0xbb2>
 80093e2:	4b86      	ldr	r3, [pc, #536]	; (80095fc <_dtoa_r+0x2fc>)
 80093e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	e7da      	b.n	80093a4 <_dtoa_r+0xa4>
 80093ee:	aa10      	add	r2, sp, #64	; 0x40
 80093f0:	a911      	add	r1, sp, #68	; 0x44
 80093f2:	4620      	mov	r0, r4
 80093f4:	eeb0 0a48 	vmov.f32	s0, s16
 80093f8:	eef0 0a68 	vmov.f32	s1, s17
 80093fc:	f001 f994 	bl	800a728 <__d2b>
 8009400:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009404:	4682      	mov	sl, r0
 8009406:	2d00      	cmp	r5, #0
 8009408:	d07f      	beq.n	800950a <_dtoa_r+0x20a>
 800940a:	ee18 3a90 	vmov	r3, s17
 800940e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009412:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009416:	ec51 0b18 	vmov	r0, r1, d8
 800941a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800941e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009422:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009426:	4619      	mov	r1, r3
 8009428:	2200      	movs	r2, #0
 800942a:	4b75      	ldr	r3, [pc, #468]	; (8009600 <_dtoa_r+0x300>)
 800942c:	f7f6 ff3c 	bl	80002a8 <__aeabi_dsub>
 8009430:	a367      	add	r3, pc, #412	; (adr r3, 80095d0 <_dtoa_r+0x2d0>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f7 f8ef 	bl	8000618 <__aeabi_dmul>
 800943a:	a367      	add	r3, pc, #412	; (adr r3, 80095d8 <_dtoa_r+0x2d8>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f6 ff34 	bl	80002ac <__adddf3>
 8009444:	4606      	mov	r6, r0
 8009446:	4628      	mov	r0, r5
 8009448:	460f      	mov	r7, r1
 800944a:	f7f7 f87b 	bl	8000544 <__aeabi_i2d>
 800944e:	a364      	add	r3, pc, #400	; (adr r3, 80095e0 <_dtoa_r+0x2e0>)
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	f7f7 f8e0 	bl	8000618 <__aeabi_dmul>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4630      	mov	r0, r6
 800945e:	4639      	mov	r1, r7
 8009460:	f7f6 ff24 	bl	80002ac <__adddf3>
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	f7f7 fb86 	bl	8000b78 <__aeabi_d2iz>
 800946c:	2200      	movs	r2, #0
 800946e:	4683      	mov	fp, r0
 8009470:	2300      	movs	r3, #0
 8009472:	4630      	mov	r0, r6
 8009474:	4639      	mov	r1, r7
 8009476:	f7f7 fb41 	bl	8000afc <__aeabi_dcmplt>
 800947a:	b148      	cbz	r0, 8009490 <_dtoa_r+0x190>
 800947c:	4658      	mov	r0, fp
 800947e:	f7f7 f861 	bl	8000544 <__aeabi_i2d>
 8009482:	4632      	mov	r2, r6
 8009484:	463b      	mov	r3, r7
 8009486:	f7f7 fb2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800948a:	b908      	cbnz	r0, 8009490 <_dtoa_r+0x190>
 800948c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009490:	f1bb 0f16 	cmp.w	fp, #22
 8009494:	d857      	bhi.n	8009546 <_dtoa_r+0x246>
 8009496:	4b5b      	ldr	r3, [pc, #364]	; (8009604 <_dtoa_r+0x304>)
 8009498:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	ec51 0b18 	vmov	r0, r1, d8
 80094a4:	f7f7 fb2a 	bl	8000afc <__aeabi_dcmplt>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d04e      	beq.n	800954a <_dtoa_r+0x24a>
 80094ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094b0:	2300      	movs	r3, #0
 80094b2:	930c      	str	r3, [sp, #48]	; 0x30
 80094b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094b6:	1b5b      	subs	r3, r3, r5
 80094b8:	1e5a      	subs	r2, r3, #1
 80094ba:	bf45      	ittet	mi
 80094bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80094c0:	9305      	strmi	r3, [sp, #20]
 80094c2:	2300      	movpl	r3, #0
 80094c4:	2300      	movmi	r3, #0
 80094c6:	9206      	str	r2, [sp, #24]
 80094c8:	bf54      	ite	pl
 80094ca:	9305      	strpl	r3, [sp, #20]
 80094cc:	9306      	strmi	r3, [sp, #24]
 80094ce:	f1bb 0f00 	cmp.w	fp, #0
 80094d2:	db3c      	blt.n	800954e <_dtoa_r+0x24e>
 80094d4:	9b06      	ldr	r3, [sp, #24]
 80094d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80094da:	445b      	add	r3, fp
 80094dc:	9306      	str	r3, [sp, #24]
 80094de:	2300      	movs	r3, #0
 80094e0:	9308      	str	r3, [sp, #32]
 80094e2:	9b07      	ldr	r3, [sp, #28]
 80094e4:	2b09      	cmp	r3, #9
 80094e6:	d868      	bhi.n	80095ba <_dtoa_r+0x2ba>
 80094e8:	2b05      	cmp	r3, #5
 80094ea:	bfc4      	itt	gt
 80094ec:	3b04      	subgt	r3, #4
 80094ee:	9307      	strgt	r3, [sp, #28]
 80094f0:	9b07      	ldr	r3, [sp, #28]
 80094f2:	f1a3 0302 	sub.w	r3, r3, #2
 80094f6:	bfcc      	ite	gt
 80094f8:	2500      	movgt	r5, #0
 80094fa:	2501      	movle	r5, #1
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	f200 8085 	bhi.w	800960c <_dtoa_r+0x30c>
 8009502:	e8df f003 	tbb	[pc, r3]
 8009506:	3b2e      	.short	0x3b2e
 8009508:	5839      	.short	0x5839
 800950a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800950e:	441d      	add	r5, r3
 8009510:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009514:	2b20      	cmp	r3, #32
 8009516:	bfc1      	itttt	gt
 8009518:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800951c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009520:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009524:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009528:	bfd6      	itet	le
 800952a:	f1c3 0320 	rsble	r3, r3, #32
 800952e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009532:	fa06 f003 	lslle.w	r0, r6, r3
 8009536:	f7f6 fff5 	bl	8000524 <__aeabi_ui2d>
 800953a:	2201      	movs	r2, #1
 800953c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009540:	3d01      	subs	r5, #1
 8009542:	920e      	str	r2, [sp, #56]	; 0x38
 8009544:	e76f      	b.n	8009426 <_dtoa_r+0x126>
 8009546:	2301      	movs	r3, #1
 8009548:	e7b3      	b.n	80094b2 <_dtoa_r+0x1b2>
 800954a:	900c      	str	r0, [sp, #48]	; 0x30
 800954c:	e7b2      	b.n	80094b4 <_dtoa_r+0x1b4>
 800954e:	9b05      	ldr	r3, [sp, #20]
 8009550:	eba3 030b 	sub.w	r3, r3, fp
 8009554:	9305      	str	r3, [sp, #20]
 8009556:	f1cb 0300 	rsb	r3, fp, #0
 800955a:	9308      	str	r3, [sp, #32]
 800955c:	2300      	movs	r3, #0
 800955e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009560:	e7bf      	b.n	80094e2 <_dtoa_r+0x1e2>
 8009562:	2300      	movs	r3, #0
 8009564:	9309      	str	r3, [sp, #36]	; 0x24
 8009566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009568:	2b00      	cmp	r3, #0
 800956a:	dc52      	bgt.n	8009612 <_dtoa_r+0x312>
 800956c:	2301      	movs	r3, #1
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	9304      	str	r3, [sp, #16]
 8009572:	461a      	mov	r2, r3
 8009574:	920a      	str	r2, [sp, #40]	; 0x28
 8009576:	e00b      	b.n	8009590 <_dtoa_r+0x290>
 8009578:	2301      	movs	r3, #1
 800957a:	e7f3      	b.n	8009564 <_dtoa_r+0x264>
 800957c:	2300      	movs	r3, #0
 800957e:	9309      	str	r3, [sp, #36]	; 0x24
 8009580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009582:	445b      	add	r3, fp
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	3301      	adds	r3, #1
 8009588:	2b01      	cmp	r3, #1
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	bfb8      	it	lt
 800958e:	2301      	movlt	r3, #1
 8009590:	69e0      	ldr	r0, [r4, #28]
 8009592:	2100      	movs	r1, #0
 8009594:	2204      	movs	r2, #4
 8009596:	f102 0614 	add.w	r6, r2, #20
 800959a:	429e      	cmp	r6, r3
 800959c:	d93d      	bls.n	800961a <_dtoa_r+0x31a>
 800959e:	6041      	str	r1, [r0, #4]
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fd9f 	bl	800a0e4 <_Balloc>
 80095a6:	9000      	str	r0, [sp, #0]
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d139      	bne.n	8009620 <_dtoa_r+0x320>
 80095ac:	4b16      	ldr	r3, [pc, #88]	; (8009608 <_dtoa_r+0x308>)
 80095ae:	4602      	mov	r2, r0
 80095b0:	f240 11af 	movw	r1, #431	; 0x1af
 80095b4:	e6bd      	b.n	8009332 <_dtoa_r+0x32>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e7e1      	b.n	800957e <_dtoa_r+0x27e>
 80095ba:	2501      	movs	r5, #1
 80095bc:	2300      	movs	r3, #0
 80095be:	9307      	str	r3, [sp, #28]
 80095c0:	9509      	str	r5, [sp, #36]	; 0x24
 80095c2:	f04f 33ff 	mov.w	r3, #4294967295
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	2200      	movs	r2, #0
 80095cc:	2312      	movs	r3, #18
 80095ce:	e7d1      	b.n	8009574 <_dtoa_r+0x274>
 80095d0:	636f4361 	.word	0x636f4361
 80095d4:	3fd287a7 	.word	0x3fd287a7
 80095d8:	8b60c8b3 	.word	0x8b60c8b3
 80095dc:	3fc68a28 	.word	0x3fc68a28
 80095e0:	509f79fb 	.word	0x509f79fb
 80095e4:	3fd34413 	.word	0x3fd34413
 80095e8:	0800b402 	.word	0x0800b402
 80095ec:	0800b419 	.word	0x0800b419
 80095f0:	7ff00000 	.word	0x7ff00000
 80095f4:	0800b3fe 	.word	0x0800b3fe
 80095f8:	0800b3f5 	.word	0x0800b3f5
 80095fc:	0800b3d2 	.word	0x0800b3d2
 8009600:	3ff80000 	.word	0x3ff80000
 8009604:	0800b508 	.word	0x0800b508
 8009608:	0800b471 	.word	0x0800b471
 800960c:	2301      	movs	r3, #1
 800960e:	9309      	str	r3, [sp, #36]	; 0x24
 8009610:	e7d7      	b.n	80095c2 <_dtoa_r+0x2c2>
 8009612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	e7ba      	b.n	8009590 <_dtoa_r+0x290>
 800961a:	3101      	adds	r1, #1
 800961c:	0052      	lsls	r2, r2, #1
 800961e:	e7ba      	b.n	8009596 <_dtoa_r+0x296>
 8009620:	69e3      	ldr	r3, [r4, #28]
 8009622:	9a00      	ldr	r2, [sp, #0]
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	9b04      	ldr	r3, [sp, #16]
 8009628:	2b0e      	cmp	r3, #14
 800962a:	f200 80a8 	bhi.w	800977e <_dtoa_r+0x47e>
 800962e:	2d00      	cmp	r5, #0
 8009630:	f000 80a5 	beq.w	800977e <_dtoa_r+0x47e>
 8009634:	f1bb 0f00 	cmp.w	fp, #0
 8009638:	dd38      	ble.n	80096ac <_dtoa_r+0x3ac>
 800963a:	4bc0      	ldr	r3, [pc, #768]	; (800993c <_dtoa_r+0x63c>)
 800963c:	f00b 020f 	and.w	r2, fp, #15
 8009640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009644:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009648:	e9d3 6700 	ldrd	r6, r7, [r3]
 800964c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009650:	d019      	beq.n	8009686 <_dtoa_r+0x386>
 8009652:	4bbb      	ldr	r3, [pc, #748]	; (8009940 <_dtoa_r+0x640>)
 8009654:	ec51 0b18 	vmov	r0, r1, d8
 8009658:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800965c:	f7f7 f906 	bl	800086c <__aeabi_ddiv>
 8009660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009664:	f008 080f 	and.w	r8, r8, #15
 8009668:	2503      	movs	r5, #3
 800966a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009940 <_dtoa_r+0x640>
 800966e:	f1b8 0f00 	cmp.w	r8, #0
 8009672:	d10a      	bne.n	800968a <_dtoa_r+0x38a>
 8009674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009678:	4632      	mov	r2, r6
 800967a:	463b      	mov	r3, r7
 800967c:	f7f7 f8f6 	bl	800086c <__aeabi_ddiv>
 8009680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009684:	e02b      	b.n	80096de <_dtoa_r+0x3de>
 8009686:	2502      	movs	r5, #2
 8009688:	e7ef      	b.n	800966a <_dtoa_r+0x36a>
 800968a:	f018 0f01 	tst.w	r8, #1
 800968e:	d008      	beq.n	80096a2 <_dtoa_r+0x3a2>
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009698:	f7f6 ffbe 	bl	8000618 <__aeabi_dmul>
 800969c:	3501      	adds	r5, #1
 800969e:	4606      	mov	r6, r0
 80096a0:	460f      	mov	r7, r1
 80096a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80096a6:	f109 0908 	add.w	r9, r9, #8
 80096aa:	e7e0      	b.n	800966e <_dtoa_r+0x36e>
 80096ac:	f000 809f 	beq.w	80097ee <_dtoa_r+0x4ee>
 80096b0:	f1cb 0600 	rsb	r6, fp, #0
 80096b4:	4ba1      	ldr	r3, [pc, #644]	; (800993c <_dtoa_r+0x63c>)
 80096b6:	4fa2      	ldr	r7, [pc, #648]	; (8009940 <_dtoa_r+0x640>)
 80096b8:	f006 020f 	and.w	r2, r6, #15
 80096bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	ec51 0b18 	vmov	r0, r1, d8
 80096c8:	f7f6 ffa6 	bl	8000618 <__aeabi_dmul>
 80096cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d0:	1136      	asrs	r6, r6, #4
 80096d2:	2300      	movs	r3, #0
 80096d4:	2502      	movs	r5, #2
 80096d6:	2e00      	cmp	r6, #0
 80096d8:	d17e      	bne.n	80097d8 <_dtoa_r+0x4d8>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1d0      	bne.n	8009680 <_dtoa_r+0x380>
 80096de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 8084 	beq.w	80097f2 <_dtoa_r+0x4f2>
 80096ea:	4b96      	ldr	r3, [pc, #600]	; (8009944 <_dtoa_r+0x644>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	4640      	mov	r0, r8
 80096f0:	4649      	mov	r1, r9
 80096f2:	f7f7 fa03 	bl	8000afc <__aeabi_dcmplt>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d07b      	beq.n	80097f2 <_dtoa_r+0x4f2>
 80096fa:	9b04      	ldr	r3, [sp, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d078      	beq.n	80097f2 <_dtoa_r+0x4f2>
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	dd39      	ble.n	800977a <_dtoa_r+0x47a>
 8009706:	4b90      	ldr	r3, [pc, #576]	; (8009948 <_dtoa_r+0x648>)
 8009708:	2200      	movs	r2, #0
 800970a:	4640      	mov	r0, r8
 800970c:	4649      	mov	r1, r9
 800970e:	f7f6 ff83 	bl	8000618 <__aeabi_dmul>
 8009712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009716:	9e01      	ldr	r6, [sp, #4]
 8009718:	f10b 37ff 	add.w	r7, fp, #4294967295
 800971c:	3501      	adds	r5, #1
 800971e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009722:	4628      	mov	r0, r5
 8009724:	f7f6 ff0e 	bl	8000544 <__aeabi_i2d>
 8009728:	4642      	mov	r2, r8
 800972a:	464b      	mov	r3, r9
 800972c:	f7f6 ff74 	bl	8000618 <__aeabi_dmul>
 8009730:	4b86      	ldr	r3, [pc, #536]	; (800994c <_dtoa_r+0x64c>)
 8009732:	2200      	movs	r2, #0
 8009734:	f7f6 fdba 	bl	80002ac <__adddf3>
 8009738:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800973c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009740:	9303      	str	r3, [sp, #12]
 8009742:	2e00      	cmp	r6, #0
 8009744:	d158      	bne.n	80097f8 <_dtoa_r+0x4f8>
 8009746:	4b82      	ldr	r3, [pc, #520]	; (8009950 <_dtoa_r+0x650>)
 8009748:	2200      	movs	r2, #0
 800974a:	4640      	mov	r0, r8
 800974c:	4649      	mov	r1, r9
 800974e:	f7f6 fdab 	bl	80002a8 <__aeabi_dsub>
 8009752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009756:	4680      	mov	r8, r0
 8009758:	4689      	mov	r9, r1
 800975a:	f7f7 f9ed 	bl	8000b38 <__aeabi_dcmpgt>
 800975e:	2800      	cmp	r0, #0
 8009760:	f040 8296 	bne.w	8009c90 <_dtoa_r+0x990>
 8009764:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009768:	4640      	mov	r0, r8
 800976a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800976e:	4649      	mov	r1, r9
 8009770:	f7f7 f9c4 	bl	8000afc <__aeabi_dcmplt>
 8009774:	2800      	cmp	r0, #0
 8009776:	f040 8289 	bne.w	8009c8c <_dtoa_r+0x98c>
 800977a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800977e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009780:	2b00      	cmp	r3, #0
 8009782:	f2c0 814e 	blt.w	8009a22 <_dtoa_r+0x722>
 8009786:	f1bb 0f0e 	cmp.w	fp, #14
 800978a:	f300 814a 	bgt.w	8009a22 <_dtoa_r+0x722>
 800978e:	4b6b      	ldr	r3, [pc, #428]	; (800993c <_dtoa_r+0x63c>)
 8009790:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979a:	2b00      	cmp	r3, #0
 800979c:	f280 80dc 	bge.w	8009958 <_dtoa_r+0x658>
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f300 80d8 	bgt.w	8009958 <_dtoa_r+0x658>
 80097a8:	f040 826f 	bne.w	8009c8a <_dtoa_r+0x98a>
 80097ac:	4b68      	ldr	r3, [pc, #416]	; (8009950 <_dtoa_r+0x650>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	4640      	mov	r0, r8
 80097b2:	4649      	mov	r1, r9
 80097b4:	f7f6 ff30 	bl	8000618 <__aeabi_dmul>
 80097b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097bc:	f7f7 f9b2 	bl	8000b24 <__aeabi_dcmpge>
 80097c0:	9e04      	ldr	r6, [sp, #16]
 80097c2:	4637      	mov	r7, r6
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f040 8245 	bne.w	8009c54 <_dtoa_r+0x954>
 80097ca:	9d00      	ldr	r5, [sp, #0]
 80097cc:	2331      	movs	r3, #49	; 0x31
 80097ce:	f805 3b01 	strb.w	r3, [r5], #1
 80097d2:	f10b 0b01 	add.w	fp, fp, #1
 80097d6:	e241      	b.n	8009c5c <_dtoa_r+0x95c>
 80097d8:	07f2      	lsls	r2, r6, #31
 80097da:	d505      	bpl.n	80097e8 <_dtoa_r+0x4e8>
 80097dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e0:	f7f6 ff1a 	bl	8000618 <__aeabi_dmul>
 80097e4:	3501      	adds	r5, #1
 80097e6:	2301      	movs	r3, #1
 80097e8:	1076      	asrs	r6, r6, #1
 80097ea:	3708      	adds	r7, #8
 80097ec:	e773      	b.n	80096d6 <_dtoa_r+0x3d6>
 80097ee:	2502      	movs	r5, #2
 80097f0:	e775      	b.n	80096de <_dtoa_r+0x3de>
 80097f2:	9e04      	ldr	r6, [sp, #16]
 80097f4:	465f      	mov	r7, fp
 80097f6:	e792      	b.n	800971e <_dtoa_r+0x41e>
 80097f8:	9900      	ldr	r1, [sp, #0]
 80097fa:	4b50      	ldr	r3, [pc, #320]	; (800993c <_dtoa_r+0x63c>)
 80097fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009800:	4431      	add	r1, r6
 8009802:	9102      	str	r1, [sp, #8]
 8009804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009806:	eeb0 9a47 	vmov.f32	s18, s14
 800980a:	eef0 9a67 	vmov.f32	s19, s15
 800980e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009812:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009816:	2900      	cmp	r1, #0
 8009818:	d044      	beq.n	80098a4 <_dtoa_r+0x5a4>
 800981a:	494e      	ldr	r1, [pc, #312]	; (8009954 <_dtoa_r+0x654>)
 800981c:	2000      	movs	r0, #0
 800981e:	f7f7 f825 	bl	800086c <__aeabi_ddiv>
 8009822:	ec53 2b19 	vmov	r2, r3, d9
 8009826:	f7f6 fd3f 	bl	80002a8 <__aeabi_dsub>
 800982a:	9d00      	ldr	r5, [sp, #0]
 800982c:	ec41 0b19 	vmov	d9, r0, r1
 8009830:	4649      	mov	r1, r9
 8009832:	4640      	mov	r0, r8
 8009834:	f7f7 f9a0 	bl	8000b78 <__aeabi_d2iz>
 8009838:	4606      	mov	r6, r0
 800983a:	f7f6 fe83 	bl	8000544 <__aeabi_i2d>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4640      	mov	r0, r8
 8009844:	4649      	mov	r1, r9
 8009846:	f7f6 fd2f 	bl	80002a8 <__aeabi_dsub>
 800984a:	3630      	adds	r6, #48	; 0x30
 800984c:	f805 6b01 	strb.w	r6, [r5], #1
 8009850:	ec53 2b19 	vmov	r2, r3, d9
 8009854:	4680      	mov	r8, r0
 8009856:	4689      	mov	r9, r1
 8009858:	f7f7 f950 	bl	8000afc <__aeabi_dcmplt>
 800985c:	2800      	cmp	r0, #0
 800985e:	d164      	bne.n	800992a <_dtoa_r+0x62a>
 8009860:	4642      	mov	r2, r8
 8009862:	464b      	mov	r3, r9
 8009864:	4937      	ldr	r1, [pc, #220]	; (8009944 <_dtoa_r+0x644>)
 8009866:	2000      	movs	r0, #0
 8009868:	f7f6 fd1e 	bl	80002a8 <__aeabi_dsub>
 800986c:	ec53 2b19 	vmov	r2, r3, d9
 8009870:	f7f7 f944 	bl	8000afc <__aeabi_dcmplt>
 8009874:	2800      	cmp	r0, #0
 8009876:	f040 80b6 	bne.w	80099e6 <_dtoa_r+0x6e6>
 800987a:	9b02      	ldr	r3, [sp, #8]
 800987c:	429d      	cmp	r5, r3
 800987e:	f43f af7c 	beq.w	800977a <_dtoa_r+0x47a>
 8009882:	4b31      	ldr	r3, [pc, #196]	; (8009948 <_dtoa_r+0x648>)
 8009884:	ec51 0b19 	vmov	r0, r1, d9
 8009888:	2200      	movs	r2, #0
 800988a:	f7f6 fec5 	bl	8000618 <__aeabi_dmul>
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <_dtoa_r+0x648>)
 8009890:	ec41 0b19 	vmov	d9, r0, r1
 8009894:	2200      	movs	r2, #0
 8009896:	4640      	mov	r0, r8
 8009898:	4649      	mov	r1, r9
 800989a:	f7f6 febd 	bl	8000618 <__aeabi_dmul>
 800989e:	4680      	mov	r8, r0
 80098a0:	4689      	mov	r9, r1
 80098a2:	e7c5      	b.n	8009830 <_dtoa_r+0x530>
 80098a4:	ec51 0b17 	vmov	r0, r1, d7
 80098a8:	f7f6 feb6 	bl	8000618 <__aeabi_dmul>
 80098ac:	9b02      	ldr	r3, [sp, #8]
 80098ae:	9d00      	ldr	r5, [sp, #0]
 80098b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098b2:	ec41 0b19 	vmov	d9, r0, r1
 80098b6:	4649      	mov	r1, r9
 80098b8:	4640      	mov	r0, r8
 80098ba:	f7f7 f95d 	bl	8000b78 <__aeabi_d2iz>
 80098be:	4606      	mov	r6, r0
 80098c0:	f7f6 fe40 	bl	8000544 <__aeabi_i2d>
 80098c4:	3630      	adds	r6, #48	; 0x30
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4640      	mov	r0, r8
 80098cc:	4649      	mov	r1, r9
 80098ce:	f7f6 fceb 	bl	80002a8 <__aeabi_dsub>
 80098d2:	f805 6b01 	strb.w	r6, [r5], #1
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	429d      	cmp	r5, r3
 80098da:	4680      	mov	r8, r0
 80098dc:	4689      	mov	r9, r1
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	d124      	bne.n	800992e <_dtoa_r+0x62e>
 80098e4:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <_dtoa_r+0x654>)
 80098e6:	ec51 0b19 	vmov	r0, r1, d9
 80098ea:	f7f6 fcdf 	bl	80002ac <__adddf3>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4640      	mov	r0, r8
 80098f4:	4649      	mov	r1, r9
 80098f6:	f7f7 f91f 	bl	8000b38 <__aeabi_dcmpgt>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d173      	bne.n	80099e6 <_dtoa_r+0x6e6>
 80098fe:	ec53 2b19 	vmov	r2, r3, d9
 8009902:	4914      	ldr	r1, [pc, #80]	; (8009954 <_dtoa_r+0x654>)
 8009904:	2000      	movs	r0, #0
 8009906:	f7f6 fccf 	bl	80002a8 <__aeabi_dsub>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4640      	mov	r0, r8
 8009910:	4649      	mov	r1, r9
 8009912:	f7f7 f8f3 	bl	8000afc <__aeabi_dcmplt>
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f af2f 	beq.w	800977a <_dtoa_r+0x47a>
 800991c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800991e:	1e6b      	subs	r3, r5, #1
 8009920:	930f      	str	r3, [sp, #60]	; 0x3c
 8009922:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009926:	2b30      	cmp	r3, #48	; 0x30
 8009928:	d0f8      	beq.n	800991c <_dtoa_r+0x61c>
 800992a:	46bb      	mov	fp, r7
 800992c:	e04a      	b.n	80099c4 <_dtoa_r+0x6c4>
 800992e:	4b06      	ldr	r3, [pc, #24]	; (8009948 <_dtoa_r+0x648>)
 8009930:	f7f6 fe72 	bl	8000618 <__aeabi_dmul>
 8009934:	4680      	mov	r8, r0
 8009936:	4689      	mov	r9, r1
 8009938:	e7bd      	b.n	80098b6 <_dtoa_r+0x5b6>
 800993a:	bf00      	nop
 800993c:	0800b508 	.word	0x0800b508
 8009940:	0800b4e0 	.word	0x0800b4e0
 8009944:	3ff00000 	.word	0x3ff00000
 8009948:	40240000 	.word	0x40240000
 800994c:	401c0000 	.word	0x401c0000
 8009950:	40140000 	.word	0x40140000
 8009954:	3fe00000 	.word	0x3fe00000
 8009958:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800995c:	9d00      	ldr	r5, [sp, #0]
 800995e:	4642      	mov	r2, r8
 8009960:	464b      	mov	r3, r9
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	f7f6 ff81 	bl	800086c <__aeabi_ddiv>
 800996a:	f7f7 f905 	bl	8000b78 <__aeabi_d2iz>
 800996e:	9001      	str	r0, [sp, #4]
 8009970:	f7f6 fde8 	bl	8000544 <__aeabi_i2d>
 8009974:	4642      	mov	r2, r8
 8009976:	464b      	mov	r3, r9
 8009978:	f7f6 fe4e 	bl	8000618 <__aeabi_dmul>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f6 fc90 	bl	80002a8 <__aeabi_dsub>
 8009988:	9e01      	ldr	r6, [sp, #4]
 800998a:	9f04      	ldr	r7, [sp, #16]
 800998c:	3630      	adds	r6, #48	; 0x30
 800998e:	f805 6b01 	strb.w	r6, [r5], #1
 8009992:	9e00      	ldr	r6, [sp, #0]
 8009994:	1bae      	subs	r6, r5, r6
 8009996:	42b7      	cmp	r7, r6
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	d134      	bne.n	8009a08 <_dtoa_r+0x708>
 800999e:	f7f6 fc85 	bl	80002ac <__adddf3>
 80099a2:	4642      	mov	r2, r8
 80099a4:	464b      	mov	r3, r9
 80099a6:	4606      	mov	r6, r0
 80099a8:	460f      	mov	r7, r1
 80099aa:	f7f7 f8c5 	bl	8000b38 <__aeabi_dcmpgt>
 80099ae:	b9c8      	cbnz	r0, 80099e4 <_dtoa_r+0x6e4>
 80099b0:	4642      	mov	r2, r8
 80099b2:	464b      	mov	r3, r9
 80099b4:	4630      	mov	r0, r6
 80099b6:	4639      	mov	r1, r7
 80099b8:	f7f7 f896 	bl	8000ae8 <__aeabi_dcmpeq>
 80099bc:	b110      	cbz	r0, 80099c4 <_dtoa_r+0x6c4>
 80099be:	9b01      	ldr	r3, [sp, #4]
 80099c0:	07db      	lsls	r3, r3, #31
 80099c2:	d40f      	bmi.n	80099e4 <_dtoa_r+0x6e4>
 80099c4:	4651      	mov	r1, sl
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 fbcc 	bl	800a164 <_Bfree>
 80099cc:	2300      	movs	r3, #0
 80099ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099d0:	702b      	strb	r3, [r5, #0]
 80099d2:	f10b 0301 	add.w	r3, fp, #1
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f43f ace2 	beq.w	80093a4 <_dtoa_r+0xa4>
 80099e0:	601d      	str	r5, [r3, #0]
 80099e2:	e4df      	b.n	80093a4 <_dtoa_r+0xa4>
 80099e4:	465f      	mov	r7, fp
 80099e6:	462b      	mov	r3, r5
 80099e8:	461d      	mov	r5, r3
 80099ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ee:	2a39      	cmp	r2, #57	; 0x39
 80099f0:	d106      	bne.n	8009a00 <_dtoa_r+0x700>
 80099f2:	9a00      	ldr	r2, [sp, #0]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d1f7      	bne.n	80099e8 <_dtoa_r+0x6e8>
 80099f8:	9900      	ldr	r1, [sp, #0]
 80099fa:	2230      	movs	r2, #48	; 0x30
 80099fc:	3701      	adds	r7, #1
 80099fe:	700a      	strb	r2, [r1, #0]
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	3201      	adds	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e790      	b.n	800992a <_dtoa_r+0x62a>
 8009a08:	4ba3      	ldr	r3, [pc, #652]	; (8009c98 <_dtoa_r+0x998>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f7f6 fe04 	bl	8000618 <__aeabi_dmul>
 8009a10:	2200      	movs	r2, #0
 8009a12:	2300      	movs	r3, #0
 8009a14:	4606      	mov	r6, r0
 8009a16:	460f      	mov	r7, r1
 8009a18:	f7f7 f866 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d09e      	beq.n	800995e <_dtoa_r+0x65e>
 8009a20:	e7d0      	b.n	80099c4 <_dtoa_r+0x6c4>
 8009a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a24:	2a00      	cmp	r2, #0
 8009a26:	f000 80ca 	beq.w	8009bbe <_dtoa_r+0x8be>
 8009a2a:	9a07      	ldr	r2, [sp, #28]
 8009a2c:	2a01      	cmp	r2, #1
 8009a2e:	f300 80ad 	bgt.w	8009b8c <_dtoa_r+0x88c>
 8009a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a34:	2a00      	cmp	r2, #0
 8009a36:	f000 80a5 	beq.w	8009b84 <_dtoa_r+0x884>
 8009a3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a3e:	9e08      	ldr	r6, [sp, #32]
 8009a40:	9d05      	ldr	r5, [sp, #20]
 8009a42:	9a05      	ldr	r2, [sp, #20]
 8009a44:	441a      	add	r2, r3
 8009a46:	9205      	str	r2, [sp, #20]
 8009a48:	9a06      	ldr	r2, [sp, #24]
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	441a      	add	r2, r3
 8009a4e:	4620      	mov	r0, r4
 8009a50:	9206      	str	r2, [sp, #24]
 8009a52:	f000 fc3d 	bl	800a2d0 <__i2b>
 8009a56:	4607      	mov	r7, r0
 8009a58:	b165      	cbz	r5, 8009a74 <_dtoa_r+0x774>
 8009a5a:	9b06      	ldr	r3, [sp, #24]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	dd09      	ble.n	8009a74 <_dtoa_r+0x774>
 8009a60:	42ab      	cmp	r3, r5
 8009a62:	9a05      	ldr	r2, [sp, #20]
 8009a64:	bfa8      	it	ge
 8009a66:	462b      	movge	r3, r5
 8009a68:	1ad2      	subs	r2, r2, r3
 8009a6a:	9205      	str	r2, [sp, #20]
 8009a6c:	9a06      	ldr	r2, [sp, #24]
 8009a6e:	1aed      	subs	r5, r5, r3
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	9306      	str	r3, [sp, #24]
 8009a74:	9b08      	ldr	r3, [sp, #32]
 8009a76:	b1f3      	cbz	r3, 8009ab6 <_dtoa_r+0x7b6>
 8009a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 80a3 	beq.w	8009bc6 <_dtoa_r+0x8c6>
 8009a80:	2e00      	cmp	r6, #0
 8009a82:	dd10      	ble.n	8009aa6 <_dtoa_r+0x7a6>
 8009a84:	4639      	mov	r1, r7
 8009a86:	4632      	mov	r2, r6
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fce1 	bl	800a450 <__pow5mult>
 8009a8e:	4652      	mov	r2, sl
 8009a90:	4601      	mov	r1, r0
 8009a92:	4607      	mov	r7, r0
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fc31 	bl	800a2fc <__multiply>
 8009a9a:	4651      	mov	r1, sl
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 fb60 	bl	800a164 <_Bfree>
 8009aa4:	46c2      	mov	sl, r8
 8009aa6:	9b08      	ldr	r3, [sp, #32]
 8009aa8:	1b9a      	subs	r2, r3, r6
 8009aaa:	d004      	beq.n	8009ab6 <_dtoa_r+0x7b6>
 8009aac:	4651      	mov	r1, sl
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 fcce 	bl	800a450 <__pow5mult>
 8009ab4:	4682      	mov	sl, r0
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f000 fc09 	bl	800a2d0 <__i2b>
 8009abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	f340 8081 	ble.w	8009bca <_dtoa_r+0x8ca>
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4601      	mov	r1, r0
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fcbf 	bl	800a450 <__pow5mult>
 8009ad2:	9b07      	ldr	r3, [sp, #28]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	dd7a      	ble.n	8009bd0 <_dtoa_r+0x8d0>
 8009ada:	f04f 0800 	mov.w	r8, #0
 8009ade:	6933      	ldr	r3, [r6, #16]
 8009ae0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ae4:	6918      	ldr	r0, [r3, #16]
 8009ae6:	f000 fba5 	bl	800a234 <__hi0bits>
 8009aea:	f1c0 0020 	rsb	r0, r0, #32
 8009aee:	9b06      	ldr	r3, [sp, #24]
 8009af0:	4418      	add	r0, r3
 8009af2:	f010 001f 	ands.w	r0, r0, #31
 8009af6:	f000 8094 	beq.w	8009c22 <_dtoa_r+0x922>
 8009afa:	f1c0 0320 	rsb	r3, r0, #32
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	f340 8085 	ble.w	8009c0e <_dtoa_r+0x90e>
 8009b04:	9b05      	ldr	r3, [sp, #20]
 8009b06:	f1c0 001c 	rsb	r0, r0, #28
 8009b0a:	4403      	add	r3, r0
 8009b0c:	9305      	str	r3, [sp, #20]
 8009b0e:	9b06      	ldr	r3, [sp, #24]
 8009b10:	4403      	add	r3, r0
 8009b12:	4405      	add	r5, r0
 8009b14:	9306      	str	r3, [sp, #24]
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	dd05      	ble.n	8009b28 <_dtoa_r+0x828>
 8009b1c:	4651      	mov	r1, sl
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 fcef 	bl	800a504 <__lshift>
 8009b26:	4682      	mov	sl, r0
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	dd05      	ble.n	8009b3a <_dtoa_r+0x83a>
 8009b2e:	4631      	mov	r1, r6
 8009b30:	461a      	mov	r2, r3
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 fce6 	bl	800a504 <__lshift>
 8009b38:	4606      	mov	r6, r0
 8009b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d072      	beq.n	8009c26 <_dtoa_r+0x926>
 8009b40:	4631      	mov	r1, r6
 8009b42:	4650      	mov	r0, sl
 8009b44:	f000 fd4a 	bl	800a5dc <__mcmp>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	da6c      	bge.n	8009c26 <_dtoa_r+0x926>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4651      	mov	r1, sl
 8009b50:	220a      	movs	r2, #10
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 fb28 	bl	800a1a8 <__multadd>
 8009b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b5e:	4682      	mov	sl, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 81b0 	beq.w	8009ec6 <_dtoa_r+0xbc6>
 8009b66:	2300      	movs	r3, #0
 8009b68:	4639      	mov	r1, r7
 8009b6a:	220a      	movs	r2, #10
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f000 fb1b 	bl	800a1a8 <__multadd>
 8009b72:	9b01      	ldr	r3, [sp, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	4607      	mov	r7, r0
 8009b78:	f300 8096 	bgt.w	8009ca8 <_dtoa_r+0x9a8>
 8009b7c:	9b07      	ldr	r3, [sp, #28]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	dc59      	bgt.n	8009c36 <_dtoa_r+0x936>
 8009b82:	e091      	b.n	8009ca8 <_dtoa_r+0x9a8>
 8009b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b8a:	e758      	b.n	8009a3e <_dtoa_r+0x73e>
 8009b8c:	9b04      	ldr	r3, [sp, #16]
 8009b8e:	1e5e      	subs	r6, r3, #1
 8009b90:	9b08      	ldr	r3, [sp, #32]
 8009b92:	42b3      	cmp	r3, r6
 8009b94:	bfbf      	itttt	lt
 8009b96:	9b08      	ldrlt	r3, [sp, #32]
 8009b98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009b9a:	9608      	strlt	r6, [sp, #32]
 8009b9c:	1af3      	sublt	r3, r6, r3
 8009b9e:	bfb4      	ite	lt
 8009ba0:	18d2      	addlt	r2, r2, r3
 8009ba2:	1b9e      	subge	r6, r3, r6
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	bfbc      	itt	lt
 8009ba8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009baa:	2600      	movlt	r6, #0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bfb7      	itett	lt
 8009bb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009bb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009bb8:	1a9d      	sublt	r5, r3, r2
 8009bba:	2300      	movlt	r3, #0
 8009bbc:	e741      	b.n	8009a42 <_dtoa_r+0x742>
 8009bbe:	9e08      	ldr	r6, [sp, #32]
 8009bc0:	9d05      	ldr	r5, [sp, #20]
 8009bc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009bc4:	e748      	b.n	8009a58 <_dtoa_r+0x758>
 8009bc6:	9a08      	ldr	r2, [sp, #32]
 8009bc8:	e770      	b.n	8009aac <_dtoa_r+0x7ac>
 8009bca:	9b07      	ldr	r3, [sp, #28]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	dc19      	bgt.n	8009c04 <_dtoa_r+0x904>
 8009bd0:	9b02      	ldr	r3, [sp, #8]
 8009bd2:	b9bb      	cbnz	r3, 8009c04 <_dtoa_r+0x904>
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bda:	b99b      	cbnz	r3, 8009c04 <_dtoa_r+0x904>
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009be2:	0d1b      	lsrs	r3, r3, #20
 8009be4:	051b      	lsls	r3, r3, #20
 8009be6:	b183      	cbz	r3, 8009c0a <_dtoa_r+0x90a>
 8009be8:	9b05      	ldr	r3, [sp, #20]
 8009bea:	3301      	adds	r3, #1
 8009bec:	9305      	str	r3, [sp, #20]
 8009bee:	9b06      	ldr	r3, [sp, #24]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	9306      	str	r3, [sp, #24]
 8009bf4:	f04f 0801 	mov.w	r8, #1
 8009bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f47f af6f 	bne.w	8009ade <_dtoa_r+0x7de>
 8009c00:	2001      	movs	r0, #1
 8009c02:	e774      	b.n	8009aee <_dtoa_r+0x7ee>
 8009c04:	f04f 0800 	mov.w	r8, #0
 8009c08:	e7f6      	b.n	8009bf8 <_dtoa_r+0x8f8>
 8009c0a:	4698      	mov	r8, r3
 8009c0c:	e7f4      	b.n	8009bf8 <_dtoa_r+0x8f8>
 8009c0e:	d082      	beq.n	8009b16 <_dtoa_r+0x816>
 8009c10:	9a05      	ldr	r2, [sp, #20]
 8009c12:	331c      	adds	r3, #28
 8009c14:	441a      	add	r2, r3
 8009c16:	9205      	str	r2, [sp, #20]
 8009c18:	9a06      	ldr	r2, [sp, #24]
 8009c1a:	441a      	add	r2, r3
 8009c1c:	441d      	add	r5, r3
 8009c1e:	9206      	str	r2, [sp, #24]
 8009c20:	e779      	b.n	8009b16 <_dtoa_r+0x816>
 8009c22:	4603      	mov	r3, r0
 8009c24:	e7f4      	b.n	8009c10 <_dtoa_r+0x910>
 8009c26:	9b04      	ldr	r3, [sp, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	dc37      	bgt.n	8009c9c <_dtoa_r+0x99c>
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	dd34      	ble.n	8009c9c <_dtoa_r+0x99c>
 8009c32:	9b04      	ldr	r3, [sp, #16]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	b963      	cbnz	r3, 8009c54 <_dtoa_r+0x954>
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	2205      	movs	r2, #5
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 fab2 	bl	800a1a8 <__multadd>
 8009c44:	4601      	mov	r1, r0
 8009c46:	4606      	mov	r6, r0
 8009c48:	4650      	mov	r0, sl
 8009c4a:	f000 fcc7 	bl	800a5dc <__mcmp>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f73f adbb 	bgt.w	80097ca <_dtoa_r+0x4ca>
 8009c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c56:	9d00      	ldr	r5, [sp, #0]
 8009c58:	ea6f 0b03 	mvn.w	fp, r3
 8009c5c:	f04f 0800 	mov.w	r8, #0
 8009c60:	4631      	mov	r1, r6
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fa7e 	bl	800a164 <_Bfree>
 8009c68:	2f00      	cmp	r7, #0
 8009c6a:	f43f aeab 	beq.w	80099c4 <_dtoa_r+0x6c4>
 8009c6e:	f1b8 0f00 	cmp.w	r8, #0
 8009c72:	d005      	beq.n	8009c80 <_dtoa_r+0x980>
 8009c74:	45b8      	cmp	r8, r7
 8009c76:	d003      	beq.n	8009c80 <_dtoa_r+0x980>
 8009c78:	4641      	mov	r1, r8
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f000 fa72 	bl	800a164 <_Bfree>
 8009c80:	4639      	mov	r1, r7
 8009c82:	4620      	mov	r0, r4
 8009c84:	f000 fa6e 	bl	800a164 <_Bfree>
 8009c88:	e69c      	b.n	80099c4 <_dtoa_r+0x6c4>
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	4637      	mov	r7, r6
 8009c8e:	e7e1      	b.n	8009c54 <_dtoa_r+0x954>
 8009c90:	46bb      	mov	fp, r7
 8009c92:	4637      	mov	r7, r6
 8009c94:	e599      	b.n	80097ca <_dtoa_r+0x4ca>
 8009c96:	bf00      	nop
 8009c98:	40240000 	.word	0x40240000
 8009c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 80c8 	beq.w	8009e34 <_dtoa_r+0xb34>
 8009ca4:	9b04      	ldr	r3, [sp, #16]
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	dd05      	ble.n	8009cb8 <_dtoa_r+0x9b8>
 8009cac:	4639      	mov	r1, r7
 8009cae:	462a      	mov	r2, r5
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 fc27 	bl	800a504 <__lshift>
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	f1b8 0f00 	cmp.w	r8, #0
 8009cbc:	d05b      	beq.n	8009d76 <_dtoa_r+0xa76>
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 fa0f 	bl	800a0e4 <_Balloc>
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	b928      	cbnz	r0, 8009cd6 <_dtoa_r+0x9d6>
 8009cca:	4b83      	ldr	r3, [pc, #524]	; (8009ed8 <_dtoa_r+0xbd8>)
 8009ccc:	4602      	mov	r2, r0
 8009cce:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009cd2:	f7ff bb2e 	b.w	8009332 <_dtoa_r+0x32>
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	3202      	adds	r2, #2
 8009cda:	0092      	lsls	r2, r2, #2
 8009cdc:	f107 010c 	add.w	r1, r7, #12
 8009ce0:	300c      	adds	r0, #12
 8009ce2:	f000 ff53 	bl	800ab8c <memcpy>
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4629      	mov	r1, r5
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fc0a 	bl	800a504 <__lshift>
 8009cf0:	9b00      	ldr	r3, [sp, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	9304      	str	r3, [sp, #16]
 8009cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	9308      	str	r3, [sp, #32]
 8009cfe:	9b02      	ldr	r3, [sp, #8]
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	46b8      	mov	r8, r7
 8009d06:	9306      	str	r3, [sp, #24]
 8009d08:	4607      	mov	r7, r0
 8009d0a:	9b04      	ldr	r3, [sp, #16]
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	4650      	mov	r0, sl
 8009d12:	9301      	str	r3, [sp, #4]
 8009d14:	f7ff fa6b 	bl	80091ee <quorem>
 8009d18:	4641      	mov	r1, r8
 8009d1a:	9002      	str	r0, [sp, #8]
 8009d1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009d20:	4650      	mov	r0, sl
 8009d22:	f000 fc5b 	bl	800a5dc <__mcmp>
 8009d26:	463a      	mov	r2, r7
 8009d28:	9005      	str	r0, [sp, #20]
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fc71 	bl	800a614 <__mdiff>
 8009d32:	68c2      	ldr	r2, [r0, #12]
 8009d34:	4605      	mov	r5, r0
 8009d36:	bb02      	cbnz	r2, 8009d7a <_dtoa_r+0xa7a>
 8009d38:	4601      	mov	r1, r0
 8009d3a:	4650      	mov	r0, sl
 8009d3c:	f000 fc4e 	bl	800a5dc <__mcmp>
 8009d40:	4602      	mov	r2, r0
 8009d42:	4629      	mov	r1, r5
 8009d44:	4620      	mov	r0, r4
 8009d46:	9209      	str	r2, [sp, #36]	; 0x24
 8009d48:	f000 fa0c 	bl	800a164 <_Bfree>
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d50:	9d04      	ldr	r5, [sp, #16]
 8009d52:	ea43 0102 	orr.w	r1, r3, r2
 8009d56:	9b06      	ldr	r3, [sp, #24]
 8009d58:	4319      	orrs	r1, r3
 8009d5a:	d110      	bne.n	8009d7e <_dtoa_r+0xa7e>
 8009d5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d60:	d029      	beq.n	8009db6 <_dtoa_r+0xab6>
 8009d62:	9b05      	ldr	r3, [sp, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dd02      	ble.n	8009d6e <_dtoa_r+0xa6e>
 8009d68:	9b02      	ldr	r3, [sp, #8]
 8009d6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009d6e:	9b01      	ldr	r3, [sp, #4]
 8009d70:	f883 9000 	strb.w	r9, [r3]
 8009d74:	e774      	b.n	8009c60 <_dtoa_r+0x960>
 8009d76:	4638      	mov	r0, r7
 8009d78:	e7ba      	b.n	8009cf0 <_dtoa_r+0x9f0>
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	e7e1      	b.n	8009d42 <_dtoa_r+0xa42>
 8009d7e:	9b05      	ldr	r3, [sp, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	db04      	blt.n	8009d8e <_dtoa_r+0xa8e>
 8009d84:	9907      	ldr	r1, [sp, #28]
 8009d86:	430b      	orrs	r3, r1
 8009d88:	9906      	ldr	r1, [sp, #24]
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	d120      	bne.n	8009dd0 <_dtoa_r+0xad0>
 8009d8e:	2a00      	cmp	r2, #0
 8009d90:	dded      	ble.n	8009d6e <_dtoa_r+0xa6e>
 8009d92:	4651      	mov	r1, sl
 8009d94:	2201      	movs	r2, #1
 8009d96:	4620      	mov	r0, r4
 8009d98:	f000 fbb4 	bl	800a504 <__lshift>
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4682      	mov	sl, r0
 8009da0:	f000 fc1c 	bl	800a5dc <__mcmp>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	dc03      	bgt.n	8009db0 <_dtoa_r+0xab0>
 8009da8:	d1e1      	bne.n	8009d6e <_dtoa_r+0xa6e>
 8009daa:	f019 0f01 	tst.w	r9, #1
 8009dae:	d0de      	beq.n	8009d6e <_dtoa_r+0xa6e>
 8009db0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009db4:	d1d8      	bne.n	8009d68 <_dtoa_r+0xa68>
 8009db6:	9a01      	ldr	r2, [sp, #4]
 8009db8:	2339      	movs	r3, #57	; 0x39
 8009dba:	7013      	strb	r3, [r2, #0]
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	461d      	mov	r5, r3
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009dc6:	2a39      	cmp	r2, #57	; 0x39
 8009dc8:	d06c      	beq.n	8009ea4 <_dtoa_r+0xba4>
 8009dca:	3201      	adds	r2, #1
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	e747      	b.n	8009c60 <_dtoa_r+0x960>
 8009dd0:	2a00      	cmp	r2, #0
 8009dd2:	dd07      	ble.n	8009de4 <_dtoa_r+0xae4>
 8009dd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009dd8:	d0ed      	beq.n	8009db6 <_dtoa_r+0xab6>
 8009dda:	9a01      	ldr	r2, [sp, #4]
 8009ddc:	f109 0301 	add.w	r3, r9, #1
 8009de0:	7013      	strb	r3, [r2, #0]
 8009de2:	e73d      	b.n	8009c60 <_dtoa_r+0x960>
 8009de4:	9b04      	ldr	r3, [sp, #16]
 8009de6:	9a08      	ldr	r2, [sp, #32]
 8009de8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d043      	beq.n	8009e78 <_dtoa_r+0xb78>
 8009df0:	4651      	mov	r1, sl
 8009df2:	2300      	movs	r3, #0
 8009df4:	220a      	movs	r2, #10
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 f9d6 	bl	800a1a8 <__multadd>
 8009dfc:	45b8      	cmp	r8, r7
 8009dfe:	4682      	mov	sl, r0
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	f04f 020a 	mov.w	r2, #10
 8009e08:	4641      	mov	r1, r8
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	d107      	bne.n	8009e1e <_dtoa_r+0xb1e>
 8009e0e:	f000 f9cb 	bl	800a1a8 <__multadd>
 8009e12:	4680      	mov	r8, r0
 8009e14:	4607      	mov	r7, r0
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	9304      	str	r3, [sp, #16]
 8009e1c:	e775      	b.n	8009d0a <_dtoa_r+0xa0a>
 8009e1e:	f000 f9c3 	bl	800a1a8 <__multadd>
 8009e22:	4639      	mov	r1, r7
 8009e24:	4680      	mov	r8, r0
 8009e26:	2300      	movs	r3, #0
 8009e28:	220a      	movs	r2, #10
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 f9bc 	bl	800a1a8 <__multadd>
 8009e30:	4607      	mov	r7, r0
 8009e32:	e7f0      	b.n	8009e16 <_dtoa_r+0xb16>
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	9d00      	ldr	r5, [sp, #0]
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4650      	mov	r0, sl
 8009e3e:	f7ff f9d6 	bl	80091ee <quorem>
 8009e42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	f805 9b01 	strb.w	r9, [r5], #1
 8009e4c:	1aea      	subs	r2, r5, r3
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	4293      	cmp	r3, r2
 8009e52:	dd07      	ble.n	8009e64 <_dtoa_r+0xb64>
 8009e54:	4651      	mov	r1, sl
 8009e56:	2300      	movs	r3, #0
 8009e58:	220a      	movs	r2, #10
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 f9a4 	bl	800a1a8 <__multadd>
 8009e60:	4682      	mov	sl, r0
 8009e62:	e7ea      	b.n	8009e3a <_dtoa_r+0xb3a>
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bfc8      	it	gt
 8009e6a:	461d      	movgt	r5, r3
 8009e6c:	9b00      	ldr	r3, [sp, #0]
 8009e6e:	bfd8      	it	le
 8009e70:	2501      	movle	r5, #1
 8009e72:	441d      	add	r5, r3
 8009e74:	f04f 0800 	mov.w	r8, #0
 8009e78:	4651      	mov	r1, sl
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fb41 	bl	800a504 <__lshift>
 8009e82:	4631      	mov	r1, r6
 8009e84:	4682      	mov	sl, r0
 8009e86:	f000 fba9 	bl	800a5dc <__mcmp>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	dc96      	bgt.n	8009dbc <_dtoa_r+0xabc>
 8009e8e:	d102      	bne.n	8009e96 <_dtoa_r+0xb96>
 8009e90:	f019 0f01 	tst.w	r9, #1
 8009e94:	d192      	bne.n	8009dbc <_dtoa_r+0xabc>
 8009e96:	462b      	mov	r3, r5
 8009e98:	461d      	mov	r5, r3
 8009e9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e9e:	2a30      	cmp	r2, #48	; 0x30
 8009ea0:	d0fa      	beq.n	8009e98 <_dtoa_r+0xb98>
 8009ea2:	e6dd      	b.n	8009c60 <_dtoa_r+0x960>
 8009ea4:	9a00      	ldr	r2, [sp, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d189      	bne.n	8009dbe <_dtoa_r+0xabe>
 8009eaa:	f10b 0b01 	add.w	fp, fp, #1
 8009eae:	2331      	movs	r3, #49	; 0x31
 8009eb0:	e796      	b.n	8009de0 <_dtoa_r+0xae0>
 8009eb2:	4b0a      	ldr	r3, [pc, #40]	; (8009edc <_dtoa_r+0xbdc>)
 8009eb4:	f7ff ba99 	b.w	80093ea <_dtoa_r+0xea>
 8009eb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f47f aa6d 	bne.w	800939a <_dtoa_r+0x9a>
 8009ec0:	4b07      	ldr	r3, [pc, #28]	; (8009ee0 <_dtoa_r+0xbe0>)
 8009ec2:	f7ff ba92 	b.w	80093ea <_dtoa_r+0xea>
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	dcb5      	bgt.n	8009e38 <_dtoa_r+0xb38>
 8009ecc:	9b07      	ldr	r3, [sp, #28]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	f73f aeb1 	bgt.w	8009c36 <_dtoa_r+0x936>
 8009ed4:	e7b0      	b.n	8009e38 <_dtoa_r+0xb38>
 8009ed6:	bf00      	nop
 8009ed8:	0800b471 	.word	0x0800b471
 8009edc:	0800b3d1 	.word	0x0800b3d1
 8009ee0:	0800b3f5 	.word	0x0800b3f5

08009ee4 <_free_r>:
 8009ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ee6:	2900      	cmp	r1, #0
 8009ee8:	d044      	beq.n	8009f74 <_free_r+0x90>
 8009eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eee:	9001      	str	r0, [sp, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ef6:	bfb8      	it	lt
 8009ef8:	18e4      	addlt	r4, r4, r3
 8009efa:	f000 f8e7 	bl	800a0cc <__malloc_lock>
 8009efe:	4a1e      	ldr	r2, [pc, #120]	; (8009f78 <_free_r+0x94>)
 8009f00:	9801      	ldr	r0, [sp, #4]
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	b933      	cbnz	r3, 8009f14 <_free_r+0x30>
 8009f06:	6063      	str	r3, [r4, #4]
 8009f08:	6014      	str	r4, [r2, #0]
 8009f0a:	b003      	add	sp, #12
 8009f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f10:	f000 b8e2 	b.w	800a0d8 <__malloc_unlock>
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	d908      	bls.n	8009f2a <_free_r+0x46>
 8009f18:	6825      	ldr	r5, [r4, #0]
 8009f1a:	1961      	adds	r1, r4, r5
 8009f1c:	428b      	cmp	r3, r1
 8009f1e:	bf01      	itttt	eq
 8009f20:	6819      	ldreq	r1, [r3, #0]
 8009f22:	685b      	ldreq	r3, [r3, #4]
 8009f24:	1949      	addeq	r1, r1, r5
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	e7ed      	b.n	8009f06 <_free_r+0x22>
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	b10b      	cbz	r3, 8009f34 <_free_r+0x50>
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d9fa      	bls.n	8009f2a <_free_r+0x46>
 8009f34:	6811      	ldr	r1, [r2, #0]
 8009f36:	1855      	adds	r5, r2, r1
 8009f38:	42a5      	cmp	r5, r4
 8009f3a:	d10b      	bne.n	8009f54 <_free_r+0x70>
 8009f3c:	6824      	ldr	r4, [r4, #0]
 8009f3e:	4421      	add	r1, r4
 8009f40:	1854      	adds	r4, r2, r1
 8009f42:	42a3      	cmp	r3, r4
 8009f44:	6011      	str	r1, [r2, #0]
 8009f46:	d1e0      	bne.n	8009f0a <_free_r+0x26>
 8009f48:	681c      	ldr	r4, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	6053      	str	r3, [r2, #4]
 8009f4e:	440c      	add	r4, r1
 8009f50:	6014      	str	r4, [r2, #0]
 8009f52:	e7da      	b.n	8009f0a <_free_r+0x26>
 8009f54:	d902      	bls.n	8009f5c <_free_r+0x78>
 8009f56:	230c      	movs	r3, #12
 8009f58:	6003      	str	r3, [r0, #0]
 8009f5a:	e7d6      	b.n	8009f0a <_free_r+0x26>
 8009f5c:	6825      	ldr	r5, [r4, #0]
 8009f5e:	1961      	adds	r1, r4, r5
 8009f60:	428b      	cmp	r3, r1
 8009f62:	bf04      	itt	eq
 8009f64:	6819      	ldreq	r1, [r3, #0]
 8009f66:	685b      	ldreq	r3, [r3, #4]
 8009f68:	6063      	str	r3, [r4, #4]
 8009f6a:	bf04      	itt	eq
 8009f6c:	1949      	addeq	r1, r1, r5
 8009f6e:	6021      	streq	r1, [r4, #0]
 8009f70:	6054      	str	r4, [r2, #4]
 8009f72:	e7ca      	b.n	8009f0a <_free_r+0x26>
 8009f74:	b003      	add	sp, #12
 8009f76:	bd30      	pop	{r4, r5, pc}
 8009f78:	200008c4 	.word	0x200008c4

08009f7c <malloc>:
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <malloc+0xc>)
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	f000 b823 	b.w	8009fcc <_malloc_r>
 8009f86:	bf00      	nop
 8009f88:	200003c4 	.word	0x200003c4

08009f8c <sbrk_aligned>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	4e0e      	ldr	r6, [pc, #56]	; (8009fc8 <sbrk_aligned+0x3c>)
 8009f90:	460c      	mov	r4, r1
 8009f92:	6831      	ldr	r1, [r6, #0]
 8009f94:	4605      	mov	r5, r0
 8009f96:	b911      	cbnz	r1, 8009f9e <sbrk_aligned+0x12>
 8009f98:	f000 fde8 	bl	800ab6c <_sbrk_r>
 8009f9c:	6030      	str	r0, [r6, #0]
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 fde3 	bl	800ab6c <_sbrk_r>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d00a      	beq.n	8009fc0 <sbrk_aligned+0x34>
 8009faa:	1cc4      	adds	r4, r0, #3
 8009fac:	f024 0403 	bic.w	r4, r4, #3
 8009fb0:	42a0      	cmp	r0, r4
 8009fb2:	d007      	beq.n	8009fc4 <sbrk_aligned+0x38>
 8009fb4:	1a21      	subs	r1, r4, r0
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 fdd8 	bl	800ab6c <_sbrk_r>
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d101      	bne.n	8009fc4 <sbrk_aligned+0x38>
 8009fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	200008c8 	.word	0x200008c8

08009fcc <_malloc_r>:
 8009fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd0:	1ccd      	adds	r5, r1, #3
 8009fd2:	f025 0503 	bic.w	r5, r5, #3
 8009fd6:	3508      	adds	r5, #8
 8009fd8:	2d0c      	cmp	r5, #12
 8009fda:	bf38      	it	cc
 8009fdc:	250c      	movcc	r5, #12
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	db01      	blt.n	8009fe8 <_malloc_r+0x1c>
 8009fe4:	42a9      	cmp	r1, r5
 8009fe6:	d905      	bls.n	8009ff4 <_malloc_r+0x28>
 8009fe8:	230c      	movs	r3, #12
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	2600      	movs	r6, #0
 8009fee:	4630      	mov	r0, r6
 8009ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a0c8 <_malloc_r+0xfc>
 8009ff8:	f000 f868 	bl	800a0cc <__malloc_lock>
 8009ffc:	f8d8 3000 	ldr.w	r3, [r8]
 800a000:	461c      	mov	r4, r3
 800a002:	bb5c      	cbnz	r4, 800a05c <_malloc_r+0x90>
 800a004:	4629      	mov	r1, r5
 800a006:	4638      	mov	r0, r7
 800a008:	f7ff ffc0 	bl	8009f8c <sbrk_aligned>
 800a00c:	1c43      	adds	r3, r0, #1
 800a00e:	4604      	mov	r4, r0
 800a010:	d155      	bne.n	800a0be <_malloc_r+0xf2>
 800a012:	f8d8 4000 	ldr.w	r4, [r8]
 800a016:	4626      	mov	r6, r4
 800a018:	2e00      	cmp	r6, #0
 800a01a:	d145      	bne.n	800a0a8 <_malloc_r+0xdc>
 800a01c:	2c00      	cmp	r4, #0
 800a01e:	d048      	beq.n	800a0b2 <_malloc_r+0xe6>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	4631      	mov	r1, r6
 800a024:	4638      	mov	r0, r7
 800a026:	eb04 0903 	add.w	r9, r4, r3
 800a02a:	f000 fd9f 	bl	800ab6c <_sbrk_r>
 800a02e:	4581      	cmp	r9, r0
 800a030:	d13f      	bne.n	800a0b2 <_malloc_r+0xe6>
 800a032:	6821      	ldr	r1, [r4, #0]
 800a034:	1a6d      	subs	r5, r5, r1
 800a036:	4629      	mov	r1, r5
 800a038:	4638      	mov	r0, r7
 800a03a:	f7ff ffa7 	bl	8009f8c <sbrk_aligned>
 800a03e:	3001      	adds	r0, #1
 800a040:	d037      	beq.n	800a0b2 <_malloc_r+0xe6>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	442b      	add	r3, r5
 800a046:	6023      	str	r3, [r4, #0]
 800a048:	f8d8 3000 	ldr.w	r3, [r8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d038      	beq.n	800a0c2 <_malloc_r+0xf6>
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	42a2      	cmp	r2, r4
 800a054:	d12b      	bne.n	800a0ae <_malloc_r+0xe2>
 800a056:	2200      	movs	r2, #0
 800a058:	605a      	str	r2, [r3, #4]
 800a05a:	e00f      	b.n	800a07c <_malloc_r+0xb0>
 800a05c:	6822      	ldr	r2, [r4, #0]
 800a05e:	1b52      	subs	r2, r2, r5
 800a060:	d41f      	bmi.n	800a0a2 <_malloc_r+0xd6>
 800a062:	2a0b      	cmp	r2, #11
 800a064:	d917      	bls.n	800a096 <_malloc_r+0xca>
 800a066:	1961      	adds	r1, r4, r5
 800a068:	42a3      	cmp	r3, r4
 800a06a:	6025      	str	r5, [r4, #0]
 800a06c:	bf18      	it	ne
 800a06e:	6059      	strne	r1, [r3, #4]
 800a070:	6863      	ldr	r3, [r4, #4]
 800a072:	bf08      	it	eq
 800a074:	f8c8 1000 	streq.w	r1, [r8]
 800a078:	5162      	str	r2, [r4, r5]
 800a07a:	604b      	str	r3, [r1, #4]
 800a07c:	4638      	mov	r0, r7
 800a07e:	f104 060b 	add.w	r6, r4, #11
 800a082:	f000 f829 	bl	800a0d8 <__malloc_unlock>
 800a086:	f026 0607 	bic.w	r6, r6, #7
 800a08a:	1d23      	adds	r3, r4, #4
 800a08c:	1af2      	subs	r2, r6, r3
 800a08e:	d0ae      	beq.n	8009fee <_malloc_r+0x22>
 800a090:	1b9b      	subs	r3, r3, r6
 800a092:	50a3      	str	r3, [r4, r2]
 800a094:	e7ab      	b.n	8009fee <_malloc_r+0x22>
 800a096:	42a3      	cmp	r3, r4
 800a098:	6862      	ldr	r2, [r4, #4]
 800a09a:	d1dd      	bne.n	800a058 <_malloc_r+0x8c>
 800a09c:	f8c8 2000 	str.w	r2, [r8]
 800a0a0:	e7ec      	b.n	800a07c <_malloc_r+0xb0>
 800a0a2:	4623      	mov	r3, r4
 800a0a4:	6864      	ldr	r4, [r4, #4]
 800a0a6:	e7ac      	b.n	800a002 <_malloc_r+0x36>
 800a0a8:	4634      	mov	r4, r6
 800a0aa:	6876      	ldr	r6, [r6, #4]
 800a0ac:	e7b4      	b.n	800a018 <_malloc_r+0x4c>
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	e7cc      	b.n	800a04c <_malloc_r+0x80>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	603b      	str	r3, [r7, #0]
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f000 f80e 	bl	800a0d8 <__malloc_unlock>
 800a0bc:	e797      	b.n	8009fee <_malloc_r+0x22>
 800a0be:	6025      	str	r5, [r4, #0]
 800a0c0:	e7dc      	b.n	800a07c <_malloc_r+0xb0>
 800a0c2:	605b      	str	r3, [r3, #4]
 800a0c4:	deff      	udf	#255	; 0xff
 800a0c6:	bf00      	nop
 800a0c8:	200008c4 	.word	0x200008c4

0800a0cc <__malloc_lock>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__malloc_lock+0x8>)
 800a0ce:	f7ff b88c 	b.w	80091ea <__retarget_lock_acquire_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	200008c0 	.word	0x200008c0

0800a0d8 <__malloc_unlock>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	; (800a0e0 <__malloc_unlock+0x8>)
 800a0da:	f7ff b887 	b.w	80091ec <__retarget_lock_release_recursive>
 800a0de:	bf00      	nop
 800a0e0:	200008c0 	.word	0x200008c0

0800a0e4 <_Balloc>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	69c6      	ldr	r6, [r0, #28]
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	460d      	mov	r5, r1
 800a0ec:	b976      	cbnz	r6, 800a10c <_Balloc+0x28>
 800a0ee:	2010      	movs	r0, #16
 800a0f0:	f7ff ff44 	bl	8009f7c <malloc>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	61e0      	str	r0, [r4, #28]
 800a0f8:	b920      	cbnz	r0, 800a104 <_Balloc+0x20>
 800a0fa:	4b18      	ldr	r3, [pc, #96]	; (800a15c <_Balloc+0x78>)
 800a0fc:	4818      	ldr	r0, [pc, #96]	; (800a160 <_Balloc+0x7c>)
 800a0fe:	216b      	movs	r1, #107	; 0x6b
 800a100:	f000 fd52 	bl	800aba8 <__assert_func>
 800a104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a108:	6006      	str	r6, [r0, #0]
 800a10a:	60c6      	str	r6, [r0, #12]
 800a10c:	69e6      	ldr	r6, [r4, #28]
 800a10e:	68f3      	ldr	r3, [r6, #12]
 800a110:	b183      	cbz	r3, 800a134 <_Balloc+0x50>
 800a112:	69e3      	ldr	r3, [r4, #28]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a11a:	b9b8      	cbnz	r0, 800a14c <_Balloc+0x68>
 800a11c:	2101      	movs	r1, #1
 800a11e:	fa01 f605 	lsl.w	r6, r1, r5
 800a122:	1d72      	adds	r2, r6, #5
 800a124:	0092      	lsls	r2, r2, #2
 800a126:	4620      	mov	r0, r4
 800a128:	f000 fd5c 	bl	800abe4 <_calloc_r>
 800a12c:	b160      	cbz	r0, 800a148 <_Balloc+0x64>
 800a12e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a132:	e00e      	b.n	800a152 <_Balloc+0x6e>
 800a134:	2221      	movs	r2, #33	; 0x21
 800a136:	2104      	movs	r1, #4
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fd53 	bl	800abe4 <_calloc_r>
 800a13e:	69e3      	ldr	r3, [r4, #28]
 800a140:	60f0      	str	r0, [r6, #12]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e4      	bne.n	800a112 <_Balloc+0x2e>
 800a148:	2000      	movs	r0, #0
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	6802      	ldr	r2, [r0, #0]
 800a14e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a152:	2300      	movs	r3, #0
 800a154:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a158:	e7f7      	b.n	800a14a <_Balloc+0x66>
 800a15a:	bf00      	nop
 800a15c:	0800b402 	.word	0x0800b402
 800a160:	0800b482 	.word	0x0800b482

0800a164 <_Bfree>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	69c6      	ldr	r6, [r0, #28]
 800a168:	4605      	mov	r5, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	b976      	cbnz	r6, 800a18c <_Bfree+0x28>
 800a16e:	2010      	movs	r0, #16
 800a170:	f7ff ff04 	bl	8009f7c <malloc>
 800a174:	4602      	mov	r2, r0
 800a176:	61e8      	str	r0, [r5, #28]
 800a178:	b920      	cbnz	r0, 800a184 <_Bfree+0x20>
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <_Bfree+0x3c>)
 800a17c:	4809      	ldr	r0, [pc, #36]	; (800a1a4 <_Bfree+0x40>)
 800a17e:	218f      	movs	r1, #143	; 0x8f
 800a180:	f000 fd12 	bl	800aba8 <__assert_func>
 800a184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a188:	6006      	str	r6, [r0, #0]
 800a18a:	60c6      	str	r6, [r0, #12]
 800a18c:	b13c      	cbz	r4, 800a19e <_Bfree+0x3a>
 800a18e:	69eb      	ldr	r3, [r5, #28]
 800a190:	6862      	ldr	r2, [r4, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a198:	6021      	str	r1, [r4, #0]
 800a19a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	0800b402 	.word	0x0800b402
 800a1a4:	0800b482 	.word	0x0800b482

0800a1a8 <__multadd>:
 800a1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ac:	690d      	ldr	r5, [r1, #16]
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	461e      	mov	r6, r3
 800a1b4:	f101 0c14 	add.w	ip, r1, #20
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a1be:	b299      	uxth	r1, r3
 800a1c0:	fb02 6101 	mla	r1, r2, r1, r6
 800a1c4:	0c1e      	lsrs	r6, r3, #16
 800a1c6:	0c0b      	lsrs	r3, r1, #16
 800a1c8:	fb02 3306 	mla	r3, r2, r6, r3
 800a1cc:	b289      	uxth	r1, r1
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1d4:	4285      	cmp	r5, r0
 800a1d6:	f84c 1b04 	str.w	r1, [ip], #4
 800a1da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1de:	dcec      	bgt.n	800a1ba <__multadd+0x12>
 800a1e0:	b30e      	cbz	r6, 800a226 <__multadd+0x7e>
 800a1e2:	68a3      	ldr	r3, [r4, #8]
 800a1e4:	42ab      	cmp	r3, r5
 800a1e6:	dc19      	bgt.n	800a21c <__multadd+0x74>
 800a1e8:	6861      	ldr	r1, [r4, #4]
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	3101      	adds	r1, #1
 800a1ee:	f7ff ff79 	bl	800a0e4 <_Balloc>
 800a1f2:	4680      	mov	r8, r0
 800a1f4:	b928      	cbnz	r0, 800a202 <__multadd+0x5a>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	4b0c      	ldr	r3, [pc, #48]	; (800a22c <__multadd+0x84>)
 800a1fa:	480d      	ldr	r0, [pc, #52]	; (800a230 <__multadd+0x88>)
 800a1fc:	21ba      	movs	r1, #186	; 0xba
 800a1fe:	f000 fcd3 	bl	800aba8 <__assert_func>
 800a202:	6922      	ldr	r2, [r4, #16]
 800a204:	3202      	adds	r2, #2
 800a206:	f104 010c 	add.w	r1, r4, #12
 800a20a:	0092      	lsls	r2, r2, #2
 800a20c:	300c      	adds	r0, #12
 800a20e:	f000 fcbd 	bl	800ab8c <memcpy>
 800a212:	4621      	mov	r1, r4
 800a214:	4638      	mov	r0, r7
 800a216:	f7ff ffa5 	bl	800a164 <_Bfree>
 800a21a:	4644      	mov	r4, r8
 800a21c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a220:	3501      	adds	r5, #1
 800a222:	615e      	str	r6, [r3, #20]
 800a224:	6125      	str	r5, [r4, #16]
 800a226:	4620      	mov	r0, r4
 800a228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a22c:	0800b471 	.word	0x0800b471
 800a230:	0800b482 	.word	0x0800b482

0800a234 <__hi0bits>:
 800a234:	0c03      	lsrs	r3, r0, #16
 800a236:	041b      	lsls	r3, r3, #16
 800a238:	b9d3      	cbnz	r3, 800a270 <__hi0bits+0x3c>
 800a23a:	0400      	lsls	r0, r0, #16
 800a23c:	2310      	movs	r3, #16
 800a23e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a242:	bf04      	itt	eq
 800a244:	0200      	lsleq	r0, r0, #8
 800a246:	3308      	addeq	r3, #8
 800a248:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a24c:	bf04      	itt	eq
 800a24e:	0100      	lsleq	r0, r0, #4
 800a250:	3304      	addeq	r3, #4
 800a252:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a256:	bf04      	itt	eq
 800a258:	0080      	lsleq	r0, r0, #2
 800a25a:	3302      	addeq	r3, #2
 800a25c:	2800      	cmp	r0, #0
 800a25e:	db05      	blt.n	800a26c <__hi0bits+0x38>
 800a260:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a264:	f103 0301 	add.w	r3, r3, #1
 800a268:	bf08      	it	eq
 800a26a:	2320      	moveq	r3, #32
 800a26c:	4618      	mov	r0, r3
 800a26e:	4770      	bx	lr
 800a270:	2300      	movs	r3, #0
 800a272:	e7e4      	b.n	800a23e <__hi0bits+0xa>

0800a274 <__lo0bits>:
 800a274:	6803      	ldr	r3, [r0, #0]
 800a276:	f013 0207 	ands.w	r2, r3, #7
 800a27a:	d00c      	beq.n	800a296 <__lo0bits+0x22>
 800a27c:	07d9      	lsls	r1, r3, #31
 800a27e:	d422      	bmi.n	800a2c6 <__lo0bits+0x52>
 800a280:	079a      	lsls	r2, r3, #30
 800a282:	bf49      	itett	mi
 800a284:	085b      	lsrmi	r3, r3, #1
 800a286:	089b      	lsrpl	r3, r3, #2
 800a288:	6003      	strmi	r3, [r0, #0]
 800a28a:	2201      	movmi	r2, #1
 800a28c:	bf5c      	itt	pl
 800a28e:	6003      	strpl	r3, [r0, #0]
 800a290:	2202      	movpl	r2, #2
 800a292:	4610      	mov	r0, r2
 800a294:	4770      	bx	lr
 800a296:	b299      	uxth	r1, r3
 800a298:	b909      	cbnz	r1, 800a29e <__lo0bits+0x2a>
 800a29a:	0c1b      	lsrs	r3, r3, #16
 800a29c:	2210      	movs	r2, #16
 800a29e:	b2d9      	uxtb	r1, r3
 800a2a0:	b909      	cbnz	r1, 800a2a6 <__lo0bits+0x32>
 800a2a2:	3208      	adds	r2, #8
 800a2a4:	0a1b      	lsrs	r3, r3, #8
 800a2a6:	0719      	lsls	r1, r3, #28
 800a2a8:	bf04      	itt	eq
 800a2aa:	091b      	lsreq	r3, r3, #4
 800a2ac:	3204      	addeq	r2, #4
 800a2ae:	0799      	lsls	r1, r3, #30
 800a2b0:	bf04      	itt	eq
 800a2b2:	089b      	lsreq	r3, r3, #2
 800a2b4:	3202      	addeq	r2, #2
 800a2b6:	07d9      	lsls	r1, r3, #31
 800a2b8:	d403      	bmi.n	800a2c2 <__lo0bits+0x4e>
 800a2ba:	085b      	lsrs	r3, r3, #1
 800a2bc:	f102 0201 	add.w	r2, r2, #1
 800a2c0:	d003      	beq.n	800a2ca <__lo0bits+0x56>
 800a2c2:	6003      	str	r3, [r0, #0]
 800a2c4:	e7e5      	b.n	800a292 <__lo0bits+0x1e>
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	e7e3      	b.n	800a292 <__lo0bits+0x1e>
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	e7e1      	b.n	800a292 <__lo0bits+0x1e>
	...

0800a2d0 <__i2b>:
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	f7ff ff05 	bl	800a0e4 <_Balloc>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	b928      	cbnz	r0, 800a2ea <__i2b+0x1a>
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <__i2b+0x24>)
 800a2e0:	4805      	ldr	r0, [pc, #20]	; (800a2f8 <__i2b+0x28>)
 800a2e2:	f240 1145 	movw	r1, #325	; 0x145
 800a2e6:	f000 fc5f 	bl	800aba8 <__assert_func>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	6144      	str	r4, [r0, #20]
 800a2ee:	6103      	str	r3, [r0, #16]
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	bf00      	nop
 800a2f4:	0800b471 	.word	0x0800b471
 800a2f8:	0800b482 	.word	0x0800b482

0800a2fc <__multiply>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	4691      	mov	r9, r2
 800a302:	690a      	ldr	r2, [r1, #16]
 800a304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a308:	429a      	cmp	r2, r3
 800a30a:	bfb8      	it	lt
 800a30c:	460b      	movlt	r3, r1
 800a30e:	460c      	mov	r4, r1
 800a310:	bfbc      	itt	lt
 800a312:	464c      	movlt	r4, r9
 800a314:	4699      	movlt	r9, r3
 800a316:	6927      	ldr	r7, [r4, #16]
 800a318:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a31c:	68a3      	ldr	r3, [r4, #8]
 800a31e:	6861      	ldr	r1, [r4, #4]
 800a320:	eb07 060a 	add.w	r6, r7, sl
 800a324:	42b3      	cmp	r3, r6
 800a326:	b085      	sub	sp, #20
 800a328:	bfb8      	it	lt
 800a32a:	3101      	addlt	r1, #1
 800a32c:	f7ff feda 	bl	800a0e4 <_Balloc>
 800a330:	b930      	cbnz	r0, 800a340 <__multiply+0x44>
 800a332:	4602      	mov	r2, r0
 800a334:	4b44      	ldr	r3, [pc, #272]	; (800a448 <__multiply+0x14c>)
 800a336:	4845      	ldr	r0, [pc, #276]	; (800a44c <__multiply+0x150>)
 800a338:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a33c:	f000 fc34 	bl	800aba8 <__assert_func>
 800a340:	f100 0514 	add.w	r5, r0, #20
 800a344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a348:	462b      	mov	r3, r5
 800a34a:	2200      	movs	r2, #0
 800a34c:	4543      	cmp	r3, r8
 800a34e:	d321      	bcc.n	800a394 <__multiply+0x98>
 800a350:	f104 0314 	add.w	r3, r4, #20
 800a354:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a358:	f109 0314 	add.w	r3, r9, #20
 800a35c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a360:	9202      	str	r2, [sp, #8]
 800a362:	1b3a      	subs	r2, r7, r4
 800a364:	3a15      	subs	r2, #21
 800a366:	f022 0203 	bic.w	r2, r2, #3
 800a36a:	3204      	adds	r2, #4
 800a36c:	f104 0115 	add.w	r1, r4, #21
 800a370:	428f      	cmp	r7, r1
 800a372:	bf38      	it	cc
 800a374:	2204      	movcc	r2, #4
 800a376:	9201      	str	r2, [sp, #4]
 800a378:	9a02      	ldr	r2, [sp, #8]
 800a37a:	9303      	str	r3, [sp, #12]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d80c      	bhi.n	800a39a <__multiply+0x9e>
 800a380:	2e00      	cmp	r6, #0
 800a382:	dd03      	ble.n	800a38c <__multiply+0x90>
 800a384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d05b      	beq.n	800a444 <__multiply+0x148>
 800a38c:	6106      	str	r6, [r0, #16]
 800a38e:	b005      	add	sp, #20
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a394:	f843 2b04 	str.w	r2, [r3], #4
 800a398:	e7d8      	b.n	800a34c <__multiply+0x50>
 800a39a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a39e:	f1ba 0f00 	cmp.w	sl, #0
 800a3a2:	d024      	beq.n	800a3ee <__multiply+0xf2>
 800a3a4:	f104 0e14 	add.w	lr, r4, #20
 800a3a8:	46a9      	mov	r9, r5
 800a3aa:	f04f 0c00 	mov.w	ip, #0
 800a3ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3b2:	f8d9 1000 	ldr.w	r1, [r9]
 800a3b6:	fa1f fb82 	uxth.w	fp, r2
 800a3ba:	b289      	uxth	r1, r1
 800a3bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3c4:	f8d9 2000 	ldr.w	r2, [r9]
 800a3c8:	4461      	add	r1, ip
 800a3ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3d6:	b289      	uxth	r1, r1
 800a3d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3dc:	4577      	cmp	r7, lr
 800a3de:	f849 1b04 	str.w	r1, [r9], #4
 800a3e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3e6:	d8e2      	bhi.n	800a3ae <__multiply+0xb2>
 800a3e8:	9a01      	ldr	r2, [sp, #4]
 800a3ea:	f845 c002 	str.w	ip, [r5, r2]
 800a3ee:	9a03      	ldr	r2, [sp, #12]
 800a3f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	f1b9 0f00 	cmp.w	r9, #0
 800a3fa:	d021      	beq.n	800a440 <__multiply+0x144>
 800a3fc:	6829      	ldr	r1, [r5, #0]
 800a3fe:	f104 0c14 	add.w	ip, r4, #20
 800a402:	46ae      	mov	lr, r5
 800a404:	f04f 0a00 	mov.w	sl, #0
 800a408:	f8bc b000 	ldrh.w	fp, [ip]
 800a40c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a410:	fb09 220b 	mla	r2, r9, fp, r2
 800a414:	4452      	add	r2, sl
 800a416:	b289      	uxth	r1, r1
 800a418:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a41c:	f84e 1b04 	str.w	r1, [lr], #4
 800a420:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a424:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a428:	f8be 1000 	ldrh.w	r1, [lr]
 800a42c:	fb09 110a 	mla	r1, r9, sl, r1
 800a430:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a434:	4567      	cmp	r7, ip
 800a436:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a43a:	d8e5      	bhi.n	800a408 <__multiply+0x10c>
 800a43c:	9a01      	ldr	r2, [sp, #4]
 800a43e:	50a9      	str	r1, [r5, r2]
 800a440:	3504      	adds	r5, #4
 800a442:	e799      	b.n	800a378 <__multiply+0x7c>
 800a444:	3e01      	subs	r6, #1
 800a446:	e79b      	b.n	800a380 <__multiply+0x84>
 800a448:	0800b471 	.word	0x0800b471
 800a44c:	0800b482 	.word	0x0800b482

0800a450 <__pow5mult>:
 800a450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a454:	4615      	mov	r5, r2
 800a456:	f012 0203 	ands.w	r2, r2, #3
 800a45a:	4606      	mov	r6, r0
 800a45c:	460f      	mov	r7, r1
 800a45e:	d007      	beq.n	800a470 <__pow5mult+0x20>
 800a460:	4c25      	ldr	r4, [pc, #148]	; (800a4f8 <__pow5mult+0xa8>)
 800a462:	3a01      	subs	r2, #1
 800a464:	2300      	movs	r3, #0
 800a466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a46a:	f7ff fe9d 	bl	800a1a8 <__multadd>
 800a46e:	4607      	mov	r7, r0
 800a470:	10ad      	asrs	r5, r5, #2
 800a472:	d03d      	beq.n	800a4f0 <__pow5mult+0xa0>
 800a474:	69f4      	ldr	r4, [r6, #28]
 800a476:	b97c      	cbnz	r4, 800a498 <__pow5mult+0x48>
 800a478:	2010      	movs	r0, #16
 800a47a:	f7ff fd7f 	bl	8009f7c <malloc>
 800a47e:	4602      	mov	r2, r0
 800a480:	61f0      	str	r0, [r6, #28]
 800a482:	b928      	cbnz	r0, 800a490 <__pow5mult+0x40>
 800a484:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <__pow5mult+0xac>)
 800a486:	481e      	ldr	r0, [pc, #120]	; (800a500 <__pow5mult+0xb0>)
 800a488:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a48c:	f000 fb8c 	bl	800aba8 <__assert_func>
 800a490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a494:	6004      	str	r4, [r0, #0]
 800a496:	60c4      	str	r4, [r0, #12]
 800a498:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a49c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4a0:	b94c      	cbnz	r4, 800a4b6 <__pow5mult+0x66>
 800a4a2:	f240 2171 	movw	r1, #625	; 0x271
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f7ff ff12 	bl	800a2d0 <__i2b>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	f04f 0900 	mov.w	r9, #0
 800a4ba:	07eb      	lsls	r3, r5, #31
 800a4bc:	d50a      	bpl.n	800a4d4 <__pow5mult+0x84>
 800a4be:	4639      	mov	r1, r7
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff ff1a 	bl	800a2fc <__multiply>
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7ff fe49 	bl	800a164 <_Bfree>
 800a4d2:	4647      	mov	r7, r8
 800a4d4:	106d      	asrs	r5, r5, #1
 800a4d6:	d00b      	beq.n	800a4f0 <__pow5mult+0xa0>
 800a4d8:	6820      	ldr	r0, [r4, #0]
 800a4da:	b938      	cbnz	r0, 800a4ec <__pow5mult+0x9c>
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f7ff ff0b 	bl	800a2fc <__multiply>
 800a4e6:	6020      	str	r0, [r4, #0]
 800a4e8:	f8c0 9000 	str.w	r9, [r0]
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	e7e4      	b.n	800a4ba <__pow5mult+0x6a>
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f6:	bf00      	nop
 800a4f8:	0800b5d0 	.word	0x0800b5d0
 800a4fc:	0800b402 	.word	0x0800b402
 800a500:	0800b482 	.word	0x0800b482

0800a504 <__lshift>:
 800a504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	460c      	mov	r4, r1
 800a50a:	6849      	ldr	r1, [r1, #4]
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	4607      	mov	r7, r0
 800a516:	4691      	mov	r9, r2
 800a518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a51c:	f108 0601 	add.w	r6, r8, #1
 800a520:	42b3      	cmp	r3, r6
 800a522:	db0b      	blt.n	800a53c <__lshift+0x38>
 800a524:	4638      	mov	r0, r7
 800a526:	f7ff fddd 	bl	800a0e4 <_Balloc>
 800a52a:	4605      	mov	r5, r0
 800a52c:	b948      	cbnz	r0, 800a542 <__lshift+0x3e>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b28      	ldr	r3, [pc, #160]	; (800a5d4 <__lshift+0xd0>)
 800a532:	4829      	ldr	r0, [pc, #164]	; (800a5d8 <__lshift+0xd4>)
 800a534:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a538:	f000 fb36 	bl	800aba8 <__assert_func>
 800a53c:	3101      	adds	r1, #1
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	e7ee      	b.n	800a520 <__lshift+0x1c>
 800a542:	2300      	movs	r3, #0
 800a544:	f100 0114 	add.w	r1, r0, #20
 800a548:	f100 0210 	add.w	r2, r0, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	4553      	cmp	r3, sl
 800a550:	db33      	blt.n	800a5ba <__lshift+0xb6>
 800a552:	6920      	ldr	r0, [r4, #16]
 800a554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a558:	f104 0314 	add.w	r3, r4, #20
 800a55c:	f019 091f 	ands.w	r9, r9, #31
 800a560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a564:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a568:	d02b      	beq.n	800a5c2 <__lshift+0xbe>
 800a56a:	f1c9 0e20 	rsb	lr, r9, #32
 800a56e:	468a      	mov	sl, r1
 800a570:	2200      	movs	r2, #0
 800a572:	6818      	ldr	r0, [r3, #0]
 800a574:	fa00 f009 	lsl.w	r0, r0, r9
 800a578:	4310      	orrs	r0, r2
 800a57a:	f84a 0b04 	str.w	r0, [sl], #4
 800a57e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a582:	459c      	cmp	ip, r3
 800a584:	fa22 f20e 	lsr.w	r2, r2, lr
 800a588:	d8f3      	bhi.n	800a572 <__lshift+0x6e>
 800a58a:	ebac 0304 	sub.w	r3, ip, r4
 800a58e:	3b15      	subs	r3, #21
 800a590:	f023 0303 	bic.w	r3, r3, #3
 800a594:	3304      	adds	r3, #4
 800a596:	f104 0015 	add.w	r0, r4, #21
 800a59a:	4584      	cmp	ip, r0
 800a59c:	bf38      	it	cc
 800a59e:	2304      	movcc	r3, #4
 800a5a0:	50ca      	str	r2, [r1, r3]
 800a5a2:	b10a      	cbz	r2, 800a5a8 <__lshift+0xa4>
 800a5a4:	f108 0602 	add.w	r6, r8, #2
 800a5a8:	3e01      	subs	r6, #1
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	612e      	str	r6, [r5, #16]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	f7ff fdd8 	bl	800a164 <_Bfree>
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5be:	3301      	adds	r3, #1
 800a5c0:	e7c5      	b.n	800a54e <__lshift+0x4a>
 800a5c2:	3904      	subs	r1, #4
 800a5c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5cc:	459c      	cmp	ip, r3
 800a5ce:	d8f9      	bhi.n	800a5c4 <__lshift+0xc0>
 800a5d0:	e7ea      	b.n	800a5a8 <__lshift+0xa4>
 800a5d2:	bf00      	nop
 800a5d4:	0800b471 	.word	0x0800b471
 800a5d8:	0800b482 	.word	0x0800b482

0800a5dc <__mcmp>:
 800a5dc:	b530      	push	{r4, r5, lr}
 800a5de:	6902      	ldr	r2, [r0, #16]
 800a5e0:	690c      	ldr	r4, [r1, #16]
 800a5e2:	1b12      	subs	r2, r2, r4
 800a5e4:	d10e      	bne.n	800a604 <__mcmp+0x28>
 800a5e6:	f100 0314 	add.w	r3, r0, #20
 800a5ea:	3114      	adds	r1, #20
 800a5ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5fc:	42a5      	cmp	r5, r4
 800a5fe:	d003      	beq.n	800a608 <__mcmp+0x2c>
 800a600:	d305      	bcc.n	800a60e <__mcmp+0x32>
 800a602:	2201      	movs	r2, #1
 800a604:	4610      	mov	r0, r2
 800a606:	bd30      	pop	{r4, r5, pc}
 800a608:	4283      	cmp	r3, r0
 800a60a:	d3f3      	bcc.n	800a5f4 <__mcmp+0x18>
 800a60c:	e7fa      	b.n	800a604 <__mcmp+0x28>
 800a60e:	f04f 32ff 	mov.w	r2, #4294967295
 800a612:	e7f7      	b.n	800a604 <__mcmp+0x28>

0800a614 <__mdiff>:
 800a614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	460c      	mov	r4, r1
 800a61a:	4606      	mov	r6, r0
 800a61c:	4611      	mov	r1, r2
 800a61e:	4620      	mov	r0, r4
 800a620:	4690      	mov	r8, r2
 800a622:	f7ff ffdb 	bl	800a5dc <__mcmp>
 800a626:	1e05      	subs	r5, r0, #0
 800a628:	d110      	bne.n	800a64c <__mdiff+0x38>
 800a62a:	4629      	mov	r1, r5
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7ff fd59 	bl	800a0e4 <_Balloc>
 800a632:	b930      	cbnz	r0, 800a642 <__mdiff+0x2e>
 800a634:	4b3a      	ldr	r3, [pc, #232]	; (800a720 <__mdiff+0x10c>)
 800a636:	4602      	mov	r2, r0
 800a638:	f240 2137 	movw	r1, #567	; 0x237
 800a63c:	4839      	ldr	r0, [pc, #228]	; (800a724 <__mdiff+0x110>)
 800a63e:	f000 fab3 	bl	800aba8 <__assert_func>
 800a642:	2301      	movs	r3, #1
 800a644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64c:	bfa4      	itt	ge
 800a64e:	4643      	movge	r3, r8
 800a650:	46a0      	movge	r8, r4
 800a652:	4630      	mov	r0, r6
 800a654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a658:	bfa6      	itte	ge
 800a65a:	461c      	movge	r4, r3
 800a65c:	2500      	movge	r5, #0
 800a65e:	2501      	movlt	r5, #1
 800a660:	f7ff fd40 	bl	800a0e4 <_Balloc>
 800a664:	b920      	cbnz	r0, 800a670 <__mdiff+0x5c>
 800a666:	4b2e      	ldr	r3, [pc, #184]	; (800a720 <__mdiff+0x10c>)
 800a668:	4602      	mov	r2, r0
 800a66a:	f240 2145 	movw	r1, #581	; 0x245
 800a66e:	e7e5      	b.n	800a63c <__mdiff+0x28>
 800a670:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a674:	6926      	ldr	r6, [r4, #16]
 800a676:	60c5      	str	r5, [r0, #12]
 800a678:	f104 0914 	add.w	r9, r4, #20
 800a67c:	f108 0514 	add.w	r5, r8, #20
 800a680:	f100 0e14 	add.w	lr, r0, #20
 800a684:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a68c:	f108 0210 	add.w	r2, r8, #16
 800a690:	46f2      	mov	sl, lr
 800a692:	2100      	movs	r1, #0
 800a694:	f859 3b04 	ldr.w	r3, [r9], #4
 800a698:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a69c:	fa11 f88b 	uxtah	r8, r1, fp
 800a6a0:	b299      	uxth	r1, r3
 800a6a2:	0c1b      	lsrs	r3, r3, #16
 800a6a4:	eba8 0801 	sub.w	r8, r8, r1
 800a6a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6b0:	fa1f f888 	uxth.w	r8, r8
 800a6b4:	1419      	asrs	r1, r3, #16
 800a6b6:	454e      	cmp	r6, r9
 800a6b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6bc:	f84a 3b04 	str.w	r3, [sl], #4
 800a6c0:	d8e8      	bhi.n	800a694 <__mdiff+0x80>
 800a6c2:	1b33      	subs	r3, r6, r4
 800a6c4:	3b15      	subs	r3, #21
 800a6c6:	f023 0303 	bic.w	r3, r3, #3
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	3415      	adds	r4, #21
 800a6ce:	42a6      	cmp	r6, r4
 800a6d0:	bf38      	it	cc
 800a6d2:	2304      	movcc	r3, #4
 800a6d4:	441d      	add	r5, r3
 800a6d6:	4473      	add	r3, lr
 800a6d8:	469e      	mov	lr, r3
 800a6da:	462e      	mov	r6, r5
 800a6dc:	4566      	cmp	r6, ip
 800a6de:	d30e      	bcc.n	800a6fe <__mdiff+0xea>
 800a6e0:	f10c 0203 	add.w	r2, ip, #3
 800a6e4:	1b52      	subs	r2, r2, r5
 800a6e6:	f022 0203 	bic.w	r2, r2, #3
 800a6ea:	3d03      	subs	r5, #3
 800a6ec:	45ac      	cmp	ip, r5
 800a6ee:	bf38      	it	cc
 800a6f0:	2200      	movcc	r2, #0
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a6f8:	b17a      	cbz	r2, 800a71a <__mdiff+0x106>
 800a6fa:	6107      	str	r7, [r0, #16]
 800a6fc:	e7a4      	b.n	800a648 <__mdiff+0x34>
 800a6fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800a702:	fa11 f288 	uxtah	r2, r1, r8
 800a706:	1414      	asrs	r4, r2, #16
 800a708:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a70c:	b292      	uxth	r2, r2
 800a70e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a712:	f84e 2b04 	str.w	r2, [lr], #4
 800a716:	1421      	asrs	r1, r4, #16
 800a718:	e7e0      	b.n	800a6dc <__mdiff+0xc8>
 800a71a:	3f01      	subs	r7, #1
 800a71c:	e7ea      	b.n	800a6f4 <__mdiff+0xe0>
 800a71e:	bf00      	nop
 800a720:	0800b471 	.word	0x0800b471
 800a724:	0800b482 	.word	0x0800b482

0800a728 <__d2b>:
 800a728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a72c:	460f      	mov	r7, r1
 800a72e:	2101      	movs	r1, #1
 800a730:	ec59 8b10 	vmov	r8, r9, d0
 800a734:	4616      	mov	r6, r2
 800a736:	f7ff fcd5 	bl	800a0e4 <_Balloc>
 800a73a:	4604      	mov	r4, r0
 800a73c:	b930      	cbnz	r0, 800a74c <__d2b+0x24>
 800a73e:	4602      	mov	r2, r0
 800a740:	4b24      	ldr	r3, [pc, #144]	; (800a7d4 <__d2b+0xac>)
 800a742:	4825      	ldr	r0, [pc, #148]	; (800a7d8 <__d2b+0xb0>)
 800a744:	f240 310f 	movw	r1, #783	; 0x30f
 800a748:	f000 fa2e 	bl	800aba8 <__assert_func>
 800a74c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a754:	bb2d      	cbnz	r5, 800a7a2 <__d2b+0x7a>
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	f1b8 0300 	subs.w	r3, r8, #0
 800a75c:	d026      	beq.n	800a7ac <__d2b+0x84>
 800a75e:	4668      	mov	r0, sp
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	f7ff fd87 	bl	800a274 <__lo0bits>
 800a766:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a76a:	b1e8      	cbz	r0, 800a7a8 <__d2b+0x80>
 800a76c:	f1c0 0320 	rsb	r3, r0, #32
 800a770:	fa02 f303 	lsl.w	r3, r2, r3
 800a774:	430b      	orrs	r3, r1
 800a776:	40c2      	lsrs	r2, r0
 800a778:	6163      	str	r3, [r4, #20]
 800a77a:	9201      	str	r2, [sp, #4]
 800a77c:	9b01      	ldr	r3, [sp, #4]
 800a77e:	61a3      	str	r3, [r4, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	bf14      	ite	ne
 800a784:	2202      	movne	r2, #2
 800a786:	2201      	moveq	r2, #1
 800a788:	6122      	str	r2, [r4, #16]
 800a78a:	b1bd      	cbz	r5, 800a7bc <__d2b+0x94>
 800a78c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a790:	4405      	add	r5, r0
 800a792:	603d      	str	r5, [r7, #0]
 800a794:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a798:	6030      	str	r0, [r6, #0]
 800a79a:	4620      	mov	r0, r4
 800a79c:	b003      	add	sp, #12
 800a79e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7a6:	e7d6      	b.n	800a756 <__d2b+0x2e>
 800a7a8:	6161      	str	r1, [r4, #20]
 800a7aa:	e7e7      	b.n	800a77c <__d2b+0x54>
 800a7ac:	a801      	add	r0, sp, #4
 800a7ae:	f7ff fd61 	bl	800a274 <__lo0bits>
 800a7b2:	9b01      	ldr	r3, [sp, #4]
 800a7b4:	6163      	str	r3, [r4, #20]
 800a7b6:	3020      	adds	r0, #32
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	e7e5      	b.n	800a788 <__d2b+0x60>
 800a7bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7c4:	6038      	str	r0, [r7, #0]
 800a7c6:	6918      	ldr	r0, [r3, #16]
 800a7c8:	f7ff fd34 	bl	800a234 <__hi0bits>
 800a7cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7d0:	e7e2      	b.n	800a798 <__d2b+0x70>
 800a7d2:	bf00      	nop
 800a7d4:	0800b471 	.word	0x0800b471
 800a7d8:	0800b482 	.word	0x0800b482

0800a7dc <__sfputc_r>:
 800a7dc:	6893      	ldr	r3, [r2, #8]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	b410      	push	{r4}
 800a7e4:	6093      	str	r3, [r2, #8]
 800a7e6:	da08      	bge.n	800a7fa <__sfputc_r+0x1e>
 800a7e8:	6994      	ldr	r4, [r2, #24]
 800a7ea:	42a3      	cmp	r3, r4
 800a7ec:	db01      	blt.n	800a7f2 <__sfputc_r+0x16>
 800a7ee:	290a      	cmp	r1, #10
 800a7f0:	d103      	bne.n	800a7fa <__sfputc_r+0x1e>
 800a7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7f6:	f7fe bbd4 	b.w	8008fa2 <__swbuf_r>
 800a7fa:	6813      	ldr	r3, [r2, #0]
 800a7fc:	1c58      	adds	r0, r3, #1
 800a7fe:	6010      	str	r0, [r2, #0]
 800a800:	7019      	strb	r1, [r3, #0]
 800a802:	4608      	mov	r0, r1
 800a804:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <__sfputs_r>:
 800a80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80c:	4606      	mov	r6, r0
 800a80e:	460f      	mov	r7, r1
 800a810:	4614      	mov	r4, r2
 800a812:	18d5      	adds	r5, r2, r3
 800a814:	42ac      	cmp	r4, r5
 800a816:	d101      	bne.n	800a81c <__sfputs_r+0x12>
 800a818:	2000      	movs	r0, #0
 800a81a:	e007      	b.n	800a82c <__sfputs_r+0x22>
 800a81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a820:	463a      	mov	r2, r7
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ffda 	bl	800a7dc <__sfputc_r>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	d1f3      	bne.n	800a814 <__sfputs_r+0xa>
 800a82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a830 <_vfiprintf_r>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	460d      	mov	r5, r1
 800a836:	b09d      	sub	sp, #116	; 0x74
 800a838:	4614      	mov	r4, r2
 800a83a:	4698      	mov	r8, r3
 800a83c:	4606      	mov	r6, r0
 800a83e:	b118      	cbz	r0, 800a848 <_vfiprintf_r+0x18>
 800a840:	6a03      	ldr	r3, [r0, #32]
 800a842:	b90b      	cbnz	r3, 800a848 <_vfiprintf_r+0x18>
 800a844:	f7fe fa18 	bl	8008c78 <__sinit>
 800a848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a84a:	07d9      	lsls	r1, r3, #31
 800a84c:	d405      	bmi.n	800a85a <_vfiprintf_r+0x2a>
 800a84e:	89ab      	ldrh	r3, [r5, #12]
 800a850:	059a      	lsls	r2, r3, #22
 800a852:	d402      	bmi.n	800a85a <_vfiprintf_r+0x2a>
 800a854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a856:	f7fe fcc8 	bl	80091ea <__retarget_lock_acquire_recursive>
 800a85a:	89ab      	ldrh	r3, [r5, #12]
 800a85c:	071b      	lsls	r3, r3, #28
 800a85e:	d501      	bpl.n	800a864 <_vfiprintf_r+0x34>
 800a860:	692b      	ldr	r3, [r5, #16]
 800a862:	b99b      	cbnz	r3, 800a88c <_vfiprintf_r+0x5c>
 800a864:	4629      	mov	r1, r5
 800a866:	4630      	mov	r0, r6
 800a868:	f7fe fbd8 	bl	800901c <__swsetup_r>
 800a86c:	b170      	cbz	r0, 800a88c <_vfiprintf_r+0x5c>
 800a86e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a870:	07dc      	lsls	r4, r3, #31
 800a872:	d504      	bpl.n	800a87e <_vfiprintf_r+0x4e>
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	b01d      	add	sp, #116	; 0x74
 800a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87e:	89ab      	ldrh	r3, [r5, #12]
 800a880:	0598      	lsls	r0, r3, #22
 800a882:	d4f7      	bmi.n	800a874 <_vfiprintf_r+0x44>
 800a884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a886:	f7fe fcb1 	bl	80091ec <__retarget_lock_release_recursive>
 800a88a:	e7f3      	b.n	800a874 <_vfiprintf_r+0x44>
 800a88c:	2300      	movs	r3, #0
 800a88e:	9309      	str	r3, [sp, #36]	; 0x24
 800a890:	2320      	movs	r3, #32
 800a892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a896:	f8cd 800c 	str.w	r8, [sp, #12]
 800a89a:	2330      	movs	r3, #48	; 0x30
 800a89c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aa50 <_vfiprintf_r+0x220>
 800a8a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8a4:	f04f 0901 	mov.w	r9, #1
 800a8a8:	4623      	mov	r3, r4
 800a8aa:	469a      	mov	sl, r3
 800a8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8b0:	b10a      	cbz	r2, 800a8b6 <_vfiprintf_r+0x86>
 800a8b2:	2a25      	cmp	r2, #37	; 0x25
 800a8b4:	d1f9      	bne.n	800a8aa <_vfiprintf_r+0x7a>
 800a8b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ba:	d00b      	beq.n	800a8d4 <_vfiprintf_r+0xa4>
 800a8bc:	465b      	mov	r3, fp
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7ff ffa1 	bl	800a80a <__sfputs_r>
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	f000 80a9 	beq.w	800aa20 <_vfiprintf_r+0x1f0>
 800a8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8d0:	445a      	add	r2, fp
 800a8d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 80a1 	beq.w	800aa20 <_vfiprintf_r+0x1f0>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8e8:	f10a 0a01 	add.w	sl, sl, #1
 800a8ec:	9304      	str	r3, [sp, #16]
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a8f6:	4654      	mov	r4, sl
 800a8f8:	2205      	movs	r2, #5
 800a8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8fe:	4854      	ldr	r0, [pc, #336]	; (800aa50 <_vfiprintf_r+0x220>)
 800a900:	f7f5 fc76 	bl	80001f0 <memchr>
 800a904:	9a04      	ldr	r2, [sp, #16]
 800a906:	b9d8      	cbnz	r0, 800a940 <_vfiprintf_r+0x110>
 800a908:	06d1      	lsls	r1, r2, #27
 800a90a:	bf44      	itt	mi
 800a90c:	2320      	movmi	r3, #32
 800a90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a912:	0713      	lsls	r3, r2, #28
 800a914:	bf44      	itt	mi
 800a916:	232b      	movmi	r3, #43	; 0x2b
 800a918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a91c:	f89a 3000 	ldrb.w	r3, [sl]
 800a920:	2b2a      	cmp	r3, #42	; 0x2a
 800a922:	d015      	beq.n	800a950 <_vfiprintf_r+0x120>
 800a924:	9a07      	ldr	r2, [sp, #28]
 800a926:	4654      	mov	r4, sl
 800a928:	2000      	movs	r0, #0
 800a92a:	f04f 0c0a 	mov.w	ip, #10
 800a92e:	4621      	mov	r1, r4
 800a930:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a934:	3b30      	subs	r3, #48	; 0x30
 800a936:	2b09      	cmp	r3, #9
 800a938:	d94d      	bls.n	800a9d6 <_vfiprintf_r+0x1a6>
 800a93a:	b1b0      	cbz	r0, 800a96a <_vfiprintf_r+0x13a>
 800a93c:	9207      	str	r2, [sp, #28]
 800a93e:	e014      	b.n	800a96a <_vfiprintf_r+0x13a>
 800a940:	eba0 0308 	sub.w	r3, r0, r8
 800a944:	fa09 f303 	lsl.w	r3, r9, r3
 800a948:	4313      	orrs	r3, r2
 800a94a:	9304      	str	r3, [sp, #16]
 800a94c:	46a2      	mov	sl, r4
 800a94e:	e7d2      	b.n	800a8f6 <_vfiprintf_r+0xc6>
 800a950:	9b03      	ldr	r3, [sp, #12]
 800a952:	1d19      	adds	r1, r3, #4
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	9103      	str	r1, [sp, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bfbb      	ittet	lt
 800a95c:	425b      	neglt	r3, r3
 800a95e:	f042 0202 	orrlt.w	r2, r2, #2
 800a962:	9307      	strge	r3, [sp, #28]
 800a964:	9307      	strlt	r3, [sp, #28]
 800a966:	bfb8      	it	lt
 800a968:	9204      	strlt	r2, [sp, #16]
 800a96a:	7823      	ldrb	r3, [r4, #0]
 800a96c:	2b2e      	cmp	r3, #46	; 0x2e
 800a96e:	d10c      	bne.n	800a98a <_vfiprintf_r+0x15a>
 800a970:	7863      	ldrb	r3, [r4, #1]
 800a972:	2b2a      	cmp	r3, #42	; 0x2a
 800a974:	d134      	bne.n	800a9e0 <_vfiprintf_r+0x1b0>
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	1d1a      	adds	r2, r3, #4
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	9203      	str	r2, [sp, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	bfb8      	it	lt
 800a982:	f04f 33ff 	movlt.w	r3, #4294967295
 800a986:	3402      	adds	r4, #2
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa60 <_vfiprintf_r+0x230>
 800a98e:	7821      	ldrb	r1, [r4, #0]
 800a990:	2203      	movs	r2, #3
 800a992:	4650      	mov	r0, sl
 800a994:	f7f5 fc2c 	bl	80001f0 <memchr>
 800a998:	b138      	cbz	r0, 800a9aa <_vfiprintf_r+0x17a>
 800a99a:	9b04      	ldr	r3, [sp, #16]
 800a99c:	eba0 000a 	sub.w	r0, r0, sl
 800a9a0:	2240      	movs	r2, #64	; 0x40
 800a9a2:	4082      	lsls	r2, r0
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	3401      	adds	r4, #1
 800a9a8:	9304      	str	r3, [sp, #16]
 800a9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ae:	4829      	ldr	r0, [pc, #164]	; (800aa54 <_vfiprintf_r+0x224>)
 800a9b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9b4:	2206      	movs	r2, #6
 800a9b6:	f7f5 fc1b 	bl	80001f0 <memchr>
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d03f      	beq.n	800aa3e <_vfiprintf_r+0x20e>
 800a9be:	4b26      	ldr	r3, [pc, #152]	; (800aa58 <_vfiprintf_r+0x228>)
 800a9c0:	bb1b      	cbnz	r3, 800aa0a <_vfiprintf_r+0x1da>
 800a9c2:	9b03      	ldr	r3, [sp, #12]
 800a9c4:	3307      	adds	r3, #7
 800a9c6:	f023 0307 	bic.w	r3, r3, #7
 800a9ca:	3308      	adds	r3, #8
 800a9cc:	9303      	str	r3, [sp, #12]
 800a9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d0:	443b      	add	r3, r7
 800a9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d4:	e768      	b.n	800a8a8 <_vfiprintf_r+0x78>
 800a9d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9da:	460c      	mov	r4, r1
 800a9dc:	2001      	movs	r0, #1
 800a9de:	e7a6      	b.n	800a92e <_vfiprintf_r+0xfe>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	3401      	adds	r4, #1
 800a9e4:	9305      	str	r3, [sp, #20]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	f04f 0c0a 	mov.w	ip, #10
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9f2:	3a30      	subs	r2, #48	; 0x30
 800a9f4:	2a09      	cmp	r2, #9
 800a9f6:	d903      	bls.n	800aa00 <_vfiprintf_r+0x1d0>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0c6      	beq.n	800a98a <_vfiprintf_r+0x15a>
 800a9fc:	9105      	str	r1, [sp, #20]
 800a9fe:	e7c4      	b.n	800a98a <_vfiprintf_r+0x15a>
 800aa00:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa04:	4604      	mov	r4, r0
 800aa06:	2301      	movs	r3, #1
 800aa08:	e7f0      	b.n	800a9ec <_vfiprintf_r+0x1bc>
 800aa0a:	ab03      	add	r3, sp, #12
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	462a      	mov	r2, r5
 800aa10:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <_vfiprintf_r+0x22c>)
 800aa12:	a904      	add	r1, sp, #16
 800aa14:	4630      	mov	r0, r6
 800aa16:	f7fd fc1b 	bl	8008250 <_printf_float>
 800aa1a:	4607      	mov	r7, r0
 800aa1c:	1c78      	adds	r0, r7, #1
 800aa1e:	d1d6      	bne.n	800a9ce <_vfiprintf_r+0x19e>
 800aa20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa22:	07d9      	lsls	r1, r3, #31
 800aa24:	d405      	bmi.n	800aa32 <_vfiprintf_r+0x202>
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	059a      	lsls	r2, r3, #22
 800aa2a:	d402      	bmi.n	800aa32 <_vfiprintf_r+0x202>
 800aa2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa2e:	f7fe fbdd 	bl	80091ec <__retarget_lock_release_recursive>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	065b      	lsls	r3, r3, #25
 800aa36:	f53f af1d 	bmi.w	800a874 <_vfiprintf_r+0x44>
 800aa3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa3c:	e71c      	b.n	800a878 <_vfiprintf_r+0x48>
 800aa3e:	ab03      	add	r3, sp, #12
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	462a      	mov	r2, r5
 800aa44:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <_vfiprintf_r+0x22c>)
 800aa46:	a904      	add	r1, sp, #16
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f7fd fea5 	bl	8008798 <_printf_i>
 800aa4e:	e7e4      	b.n	800aa1a <_vfiprintf_r+0x1ea>
 800aa50:	0800b5dc 	.word	0x0800b5dc
 800aa54:	0800b5e6 	.word	0x0800b5e6
 800aa58:	08008251 	.word	0x08008251
 800aa5c:	0800a80b 	.word	0x0800a80b
 800aa60:	0800b5e2 	.word	0x0800b5e2

0800aa64 <__swhatbuf_r>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	460c      	mov	r4, r1
 800aa68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	b096      	sub	sp, #88	; 0x58
 800aa70:	4615      	mov	r5, r2
 800aa72:	461e      	mov	r6, r3
 800aa74:	da0d      	bge.n	800aa92 <__swhatbuf_r+0x2e>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa7c:	f04f 0100 	mov.w	r1, #0
 800aa80:	bf0c      	ite	eq
 800aa82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa86:	2340      	movne	r3, #64	; 0x40
 800aa88:	2000      	movs	r0, #0
 800aa8a:	6031      	str	r1, [r6, #0]
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	b016      	add	sp, #88	; 0x58
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	466a      	mov	r2, sp
 800aa94:	f000 f848 	bl	800ab28 <_fstat_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	dbec      	blt.n	800aa76 <__swhatbuf_r+0x12>
 800aa9c:	9901      	ldr	r1, [sp, #4]
 800aa9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aaa2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aaa6:	4259      	negs	r1, r3
 800aaa8:	4159      	adcs	r1, r3
 800aaaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaae:	e7eb      	b.n	800aa88 <__swhatbuf_r+0x24>

0800aab0 <__smakebuf_r>:
 800aab0:	898b      	ldrh	r3, [r1, #12]
 800aab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aab4:	079d      	lsls	r5, r3, #30
 800aab6:	4606      	mov	r6, r0
 800aab8:	460c      	mov	r4, r1
 800aaba:	d507      	bpl.n	800aacc <__smakebuf_r+0x1c>
 800aabc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	6123      	str	r3, [r4, #16]
 800aac4:	2301      	movs	r3, #1
 800aac6:	6163      	str	r3, [r4, #20]
 800aac8:	b002      	add	sp, #8
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	ab01      	add	r3, sp, #4
 800aace:	466a      	mov	r2, sp
 800aad0:	f7ff ffc8 	bl	800aa64 <__swhatbuf_r>
 800aad4:	9900      	ldr	r1, [sp, #0]
 800aad6:	4605      	mov	r5, r0
 800aad8:	4630      	mov	r0, r6
 800aada:	f7ff fa77 	bl	8009fcc <_malloc_r>
 800aade:	b948      	cbnz	r0, 800aaf4 <__smakebuf_r+0x44>
 800aae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae4:	059a      	lsls	r2, r3, #22
 800aae6:	d4ef      	bmi.n	800aac8 <__smakebuf_r+0x18>
 800aae8:	f023 0303 	bic.w	r3, r3, #3
 800aaec:	f043 0302 	orr.w	r3, r3, #2
 800aaf0:	81a3      	strh	r3, [r4, #12]
 800aaf2:	e7e3      	b.n	800aabc <__smakebuf_r+0xc>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	6020      	str	r0, [r4, #0]
 800aaf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	9b00      	ldr	r3, [sp, #0]
 800ab00:	6163      	str	r3, [r4, #20]
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	6120      	str	r0, [r4, #16]
 800ab06:	b15b      	cbz	r3, 800ab20 <__smakebuf_r+0x70>
 800ab08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f000 f81d 	bl	800ab4c <_isatty_r>
 800ab12:	b128      	cbz	r0, 800ab20 <__smakebuf_r+0x70>
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	f023 0303 	bic.w	r3, r3, #3
 800ab1a:	f043 0301 	orr.w	r3, r3, #1
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	431d      	orrs	r5, r3
 800ab24:	81a5      	strh	r5, [r4, #12]
 800ab26:	e7cf      	b.n	800aac8 <__smakebuf_r+0x18>

0800ab28 <_fstat_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d07      	ldr	r5, [pc, #28]	; (800ab48 <_fstat_r+0x20>)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4608      	mov	r0, r1
 800ab32:	4611      	mov	r1, r2
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	f7f7 f97e 	bl	8001e36 <_fstat>
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	d102      	bne.n	800ab44 <_fstat_r+0x1c>
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	b103      	cbz	r3, 800ab44 <_fstat_r+0x1c>
 800ab42:	6023      	str	r3, [r4, #0]
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
 800ab46:	bf00      	nop
 800ab48:	200008bc 	.word	0x200008bc

0800ab4c <_isatty_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4d06      	ldr	r5, [pc, #24]	; (800ab68 <_isatty_r+0x1c>)
 800ab50:	2300      	movs	r3, #0
 800ab52:	4604      	mov	r4, r0
 800ab54:	4608      	mov	r0, r1
 800ab56:	602b      	str	r3, [r5, #0]
 800ab58:	f7f7 f97d 	bl	8001e56 <_isatty>
 800ab5c:	1c43      	adds	r3, r0, #1
 800ab5e:	d102      	bne.n	800ab66 <_isatty_r+0x1a>
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	b103      	cbz	r3, 800ab66 <_isatty_r+0x1a>
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	200008bc 	.word	0x200008bc

0800ab6c <_sbrk_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d06      	ldr	r5, [pc, #24]	; (800ab88 <_sbrk_r+0x1c>)
 800ab70:	2300      	movs	r3, #0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4608      	mov	r0, r1
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	f7f7 f986 	bl	8001e88 <_sbrk>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_sbrk_r+0x1a>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_sbrk_r+0x1a>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	200008bc 	.word	0x200008bc

0800ab8c <memcpy>:
 800ab8c:	440a      	add	r2, r1
 800ab8e:	4291      	cmp	r1, r2
 800ab90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab94:	d100      	bne.n	800ab98 <memcpy+0xc>
 800ab96:	4770      	bx	lr
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aba2:	4291      	cmp	r1, r2
 800aba4:	d1f9      	bne.n	800ab9a <memcpy+0xe>
 800aba6:	bd10      	pop	{r4, pc}

0800aba8 <__assert_func>:
 800aba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abaa:	4614      	mov	r4, r2
 800abac:	461a      	mov	r2, r3
 800abae:	4b09      	ldr	r3, [pc, #36]	; (800abd4 <__assert_func+0x2c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4605      	mov	r5, r0
 800abb4:	68d8      	ldr	r0, [r3, #12]
 800abb6:	b14c      	cbz	r4, 800abcc <__assert_func+0x24>
 800abb8:	4b07      	ldr	r3, [pc, #28]	; (800abd8 <__assert_func+0x30>)
 800abba:	9100      	str	r1, [sp, #0]
 800abbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abc0:	4906      	ldr	r1, [pc, #24]	; (800abdc <__assert_func+0x34>)
 800abc2:	462b      	mov	r3, r5
 800abc4:	f000 f844 	bl	800ac50 <fiprintf>
 800abc8:	f000 f854 	bl	800ac74 <abort>
 800abcc:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <__assert_func+0x38>)
 800abce:	461c      	mov	r4, r3
 800abd0:	e7f3      	b.n	800abba <__assert_func+0x12>
 800abd2:	bf00      	nop
 800abd4:	200003c4 	.word	0x200003c4
 800abd8:	0800b5f7 	.word	0x0800b5f7
 800abdc:	0800b604 	.word	0x0800b604
 800abe0:	0800b632 	.word	0x0800b632

0800abe4 <_calloc_r>:
 800abe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abe6:	fba1 2402 	umull	r2, r4, r1, r2
 800abea:	b94c      	cbnz	r4, 800ac00 <_calloc_r+0x1c>
 800abec:	4611      	mov	r1, r2
 800abee:	9201      	str	r2, [sp, #4]
 800abf0:	f7ff f9ec 	bl	8009fcc <_malloc_r>
 800abf4:	9a01      	ldr	r2, [sp, #4]
 800abf6:	4605      	mov	r5, r0
 800abf8:	b930      	cbnz	r0, 800ac08 <_calloc_r+0x24>
 800abfa:	4628      	mov	r0, r5
 800abfc:	b003      	add	sp, #12
 800abfe:	bd30      	pop	{r4, r5, pc}
 800ac00:	220c      	movs	r2, #12
 800ac02:	6002      	str	r2, [r0, #0]
 800ac04:	2500      	movs	r5, #0
 800ac06:	e7f8      	b.n	800abfa <_calloc_r+0x16>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	f7fe fa5f 	bl	80090cc <memset>
 800ac0e:	e7f4      	b.n	800abfa <_calloc_r+0x16>

0800ac10 <__ascii_mbtowc>:
 800ac10:	b082      	sub	sp, #8
 800ac12:	b901      	cbnz	r1, 800ac16 <__ascii_mbtowc+0x6>
 800ac14:	a901      	add	r1, sp, #4
 800ac16:	b142      	cbz	r2, 800ac2a <__ascii_mbtowc+0x1a>
 800ac18:	b14b      	cbz	r3, 800ac2e <__ascii_mbtowc+0x1e>
 800ac1a:	7813      	ldrb	r3, [r2, #0]
 800ac1c:	600b      	str	r3, [r1, #0]
 800ac1e:	7812      	ldrb	r2, [r2, #0]
 800ac20:	1e10      	subs	r0, r2, #0
 800ac22:	bf18      	it	ne
 800ac24:	2001      	movne	r0, #1
 800ac26:	b002      	add	sp, #8
 800ac28:	4770      	bx	lr
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	e7fb      	b.n	800ac26 <__ascii_mbtowc+0x16>
 800ac2e:	f06f 0001 	mvn.w	r0, #1
 800ac32:	e7f8      	b.n	800ac26 <__ascii_mbtowc+0x16>

0800ac34 <__ascii_wctomb>:
 800ac34:	b149      	cbz	r1, 800ac4a <__ascii_wctomb+0x16>
 800ac36:	2aff      	cmp	r2, #255	; 0xff
 800ac38:	bf85      	ittet	hi
 800ac3a:	238a      	movhi	r3, #138	; 0x8a
 800ac3c:	6003      	strhi	r3, [r0, #0]
 800ac3e:	700a      	strbls	r2, [r1, #0]
 800ac40:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac44:	bf98      	it	ls
 800ac46:	2001      	movls	r0, #1
 800ac48:	4770      	bx	lr
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4770      	bx	lr
	...

0800ac50 <fiprintf>:
 800ac50:	b40e      	push	{r1, r2, r3}
 800ac52:	b503      	push	{r0, r1, lr}
 800ac54:	4601      	mov	r1, r0
 800ac56:	ab03      	add	r3, sp, #12
 800ac58:	4805      	ldr	r0, [pc, #20]	; (800ac70 <fiprintf+0x20>)
 800ac5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5e:	6800      	ldr	r0, [r0, #0]
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	f7ff fde5 	bl	800a830 <_vfiprintf_r>
 800ac66:	b002      	add	sp, #8
 800ac68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac6c:	b003      	add	sp, #12
 800ac6e:	4770      	bx	lr
 800ac70:	200003c4 	.word	0x200003c4

0800ac74 <abort>:
 800ac74:	b508      	push	{r3, lr}
 800ac76:	2006      	movs	r0, #6
 800ac78:	f000 f82c 	bl	800acd4 <raise>
 800ac7c:	2001      	movs	r0, #1
 800ac7e:	f7f7 f8a7 	bl	8001dd0 <_exit>

0800ac82 <_raise_r>:
 800ac82:	291f      	cmp	r1, #31
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	d904      	bls.n	800ac96 <_raise_r+0x14>
 800ac8c:	2316      	movs	r3, #22
 800ac8e:	6003      	str	r3, [r0, #0]
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	bd38      	pop	{r3, r4, r5, pc}
 800ac96:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac98:	b112      	cbz	r2, 800aca0 <_raise_r+0x1e>
 800ac9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac9e:	b94b      	cbnz	r3, 800acb4 <_raise_r+0x32>
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 f831 	bl	800ad08 <_getpid_r>
 800aca6:	462a      	mov	r2, r5
 800aca8:	4601      	mov	r1, r0
 800acaa:	4620      	mov	r0, r4
 800acac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acb0:	f000 b818 	b.w	800ace4 <_kill_r>
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d00a      	beq.n	800acce <_raise_r+0x4c>
 800acb8:	1c59      	adds	r1, r3, #1
 800acba:	d103      	bne.n	800acc4 <_raise_r+0x42>
 800acbc:	2316      	movs	r3, #22
 800acbe:	6003      	str	r3, [r0, #0]
 800acc0:	2001      	movs	r0, #1
 800acc2:	e7e7      	b.n	800ac94 <_raise_r+0x12>
 800acc4:	2400      	movs	r4, #0
 800acc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acca:	4628      	mov	r0, r5
 800accc:	4798      	blx	r3
 800acce:	2000      	movs	r0, #0
 800acd0:	e7e0      	b.n	800ac94 <_raise_r+0x12>
	...

0800acd4 <raise>:
 800acd4:	4b02      	ldr	r3, [pc, #8]	; (800ace0 <raise+0xc>)
 800acd6:	4601      	mov	r1, r0
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	f7ff bfd2 	b.w	800ac82 <_raise_r>
 800acde:	bf00      	nop
 800ace0:	200003c4 	.word	0x200003c4

0800ace4 <_kill_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d07      	ldr	r5, [pc, #28]	; (800ad04 <_kill_r+0x20>)
 800ace8:	2300      	movs	r3, #0
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	4611      	mov	r1, r2
 800acf0:	602b      	str	r3, [r5, #0]
 800acf2:	f7f7 f85d 	bl	8001db0 <_kill>
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	d102      	bne.n	800ad00 <_kill_r+0x1c>
 800acfa:	682b      	ldr	r3, [r5, #0]
 800acfc:	b103      	cbz	r3, 800ad00 <_kill_r+0x1c>
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
 800ad02:	bf00      	nop
 800ad04:	200008bc 	.word	0x200008bc

0800ad08 <_getpid_r>:
 800ad08:	f7f7 b84a 	b.w	8001da0 <_getpid>

0800ad0c <_init>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	bf00      	nop
 800ad10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad12:	bc08      	pop	{r3}
 800ad14:	469e      	mov	lr, r3
 800ad16:	4770      	bx	lr

0800ad18 <_fini>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	bf00      	nop
 800ad1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1e:	bc08      	pop	{r3}
 800ad20:	469e      	mov	lr, r3
 800ad22:	4770      	bx	lr
