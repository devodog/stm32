
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c6c  08007c6c  00020324  2**0
                  CONTENTS
  4 .ARM          00000000  08007c6c  08007c6c  00020324  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c6c  08007c6c  00020324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  08007c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000324  08007f98  00020324  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08007f98  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156e5  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290e  00000000  00000000  00035a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00039290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1f6  00000000  00000000  0003a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136cf  00000000  00000000  000582d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aebb5  00000000  00000000  0006b9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a55a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  0011a5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000324 	.word	0x20000324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077a0 	.word	0x080077a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000328 	.word	0x20000328
 80001cc:	080077a0 	.word	0x080077a0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};
///////////////////////////////////////////////////
// Define cmd-line Command support functions below.
void LED(char* paramStr, int* paramValues) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 80002aa:	2202      	movs	r2, #2
 80002ac:	4939      	ldr	r1, [pc, #228]	; (8000394 <LED+0xf4>)
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f006 fd47 	bl	8006d42 <strncmp>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d111      	bne.n	80002de <LED+0x3e>
		printf("\r\nLED ON");
 80002ba:	4837      	ldr	r0, [pc, #220]	; (8000398 <LED+0xf8>)
 80002bc:	f006 fb9a 	bl	80069f4 <iprintf>
		paramValues[0] = 1;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3308      	adds	r3, #8
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
      led2 = ON;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <LED+0xfc>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 80002dc:	e055      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 80002de:	2203      	movs	r2, #3
 80002e0:	492f      	ldr	r1, [pc, #188]	; (80003a0 <LED+0x100>)
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f006 fd2d 	bl	8006d42 <strncmp>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d111      	bne.n	8000312 <LED+0x72>
		printf("\r\nLED OFF");
 80002ee:	482d      	ldr	r0, [pc, #180]	; (80003a4 <LED+0x104>)
 80002f0:	f006 fb80 	bl	80069f4 <iprintf>
		paramValues[0] = 0;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	3304      	adds	r3, #4
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	3308      	adds	r3, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <LED+0xfc>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
}
 8000310:	e03b      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000312:	2205      	movs	r2, #5
 8000314:	4924      	ldr	r1, [pc, #144]	; (80003a8 <LED+0x108>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f006 fd13 	bl	8006d42 <strncmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d130      	bne.n	8000384 <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3306      	adds	r3, #6
 8000326:	4921      	ldr	r1, [pc, #132]	; (80003ac <LED+0x10c>)
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff51 	bl	80001d0 <strcmp>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01c      	beq.n	800036e <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	1d9a      	adds	r2, r3, #6
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f103 0408 	add.w	r4, r3, #8
 800033e:	4610      	mov	r0, r2
 8000340:	f006 f8aa 	bl	8006498 <atoi>
 8000344:	4603      	mov	r3, r0
 8000346:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3306      	adds	r3, #6
 800034c:	4618      	mov	r0, r3
 800034e:	f006 f8a3 	bl	8006498 <atoi>
 8000352:	4603      	mov	r3, r0
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <LED+0x110>)
 8000356:	6013      	str	r3, [r2, #0]
         paramValues[0] = 0;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
         paramValues[1] = 0;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
         led2 = BLINKING;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <LED+0xfc>)
 8000368:	2202      	movs	r2, #2
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e003      	b.n	8000376 <LED+0xd6>
			paramValues[2] = 0;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3308      	adds	r3, #8
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <LED+0x110>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LED+0x114>)
 800037e:	f006 fb39 	bl	80069f4 <iprintf>
}
 8000382:	e002      	b.n	800038a <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LED+0x118>)
 8000386:	f006 fb35 	bl	80069f4 <iprintf>
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bd90      	pop	{r4, r7, pc}
 8000392:	bf00      	nop
 8000394:	080077b8 	.word	0x080077b8
 8000398:	080077bc 	.word	0x080077bc
 800039c:	20000350 	.word	0x20000350
 80003a0:	080077c8 	.word	0x080077c8
 80003a4:	080077cc 	.word	0x080077cc
 80003a8:	080077d8 	.word	0x080077d8
 80003ac:	080077e0 	.word	0x080077e0
 80003b0:	20000344 	.word	0x20000344
 80003b4:	080077e4 	.word	0x080077e4
 80003b8:	080077f4 	.word	0x080077f4

080003bc <ADC>:

void ADC(char* paramStr, int* paramValues){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "RO", 2) == 0) {
 80003c6:	2202      	movs	r2, #2
 80003c8:	491c      	ldr	r1, [pc, #112]	; (800043c <ADC+0x80>)
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f006 fcb9 	bl	8006d42 <strncmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d11b      	bne.n	800040e <ADC+0x52>
      printf("\r\nADC READ ONCE");
 80003d6:	481a      	ldr	r0, [pc, #104]	; (8000440 <ADC+0x84>)
 80003d8:	f006 fb0c 	bl	80069f4 <iprintf>
      // Start ADC Conversion
      HAL_ADC_Start(&hadc1);
 80003dc:	4819      	ldr	r0, [pc, #100]	; (8000444 <ADC+0x88>)
 80003de:	f001 f8f5 	bl	80015cc <HAL_ADC_Start>
      HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80003e2:	2100      	movs	r1, #0
 80003e4:	4817      	ldr	r0, [pc, #92]	; (8000444 <ADC+0x88>)
 80003e6:	f001 fa2a 	bl	800183e <HAL_ADCEx_Calibration_Start>

      // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 80003ea:	2101      	movs	r1, #1
 80003ec:	4815      	ldr	r0, [pc, #84]	; (8000444 <ADC+0x88>)
 80003ee:	f001 f95b 	bl	80016a8 <HAL_ADC_PollForConversion>
      // Read The ADC Conversion Result - using 3300 + 400 offset to
      // calculate the analog value
      printf("\r\nAA Battery voltage: %ld mV", 3700*HAL_ADC_GetValue(&hadc1)/4096);
 80003f2:	4814      	ldr	r0, [pc, #80]	; (8000444 <ADC+0x88>)
 80003f4:	f001 fa16 	bl	8001824 <HAL_ADC_GetValue>
 80003f8:	4603      	mov	r3, r0
 80003fa:	f640 6274 	movw	r2, #3700	; 0xe74
 80003fe:	fb02 f303 	mul.w	r3, r2, r3
 8000402:	0b1b      	lsrs	r3, r3, #12
 8000404:	4619      	mov	r1, r3
 8000406:	4810      	ldr	r0, [pc, #64]	; (8000448 <ADC+0x8c>)
 8000408:	f006 faf4 	bl	80069f4 <iprintf>
            "AVRAGE (not implemented)\r\nPOLL (not implemented)\r\nHELP = this printout.");
   }
   else {
      printf("\r\nUNKNOWN ADC COMMAND");
   }
}
 800040c:	e011      	b.n	8000432 <ADC+0x76>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 800040e:	2202      	movs	r2, #2
 8000410:	490e      	ldr	r1, [pc, #56]	; (800044c <ADC+0x90>)
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f006 fc95 	bl	8006d42 <strncmp>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d106      	bne.n	800042c <ADC+0x70>
      printf("\r\nThe ADC command takes the following parameters\r\n");
 800041e:	480c      	ldr	r0, [pc, #48]	; (8000450 <ADC+0x94>)
 8000420:	f006 fb6e 	bl	8006b00 <puts>
      printf("RO = Read Once\r\n" \
 8000424:	480b      	ldr	r0, [pc, #44]	; (8000454 <ADC+0x98>)
 8000426:	f006 fae5 	bl	80069f4 <iprintf>
}
 800042a:	e002      	b.n	8000432 <ADC+0x76>
      printf("\r\nUNKNOWN ADC COMMAND");
 800042c:	480a      	ldr	r0, [pc, #40]	; (8000458 <ADC+0x9c>)
 800042e:	f006 fae1 	bl	80069f4 <iprintf>
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	0800780c 	.word	0x0800780c
 8000440:	08007810 	.word	0x08007810
 8000444:	200003ac 	.word	0x200003ac
 8000448:	08007820 	.word	0x08007820
 800044c:	08007840 	.word	0x08007840
 8000450:	08007848 	.word	0x08007848
 8000454:	0800787c 	.word	0x0800787c
 8000458:	080078d4 	.word	0x080078d4

0800045c <TIM>:

void TIM(char* paramStr, int* paramValues) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "OS", 2) == 0) {      
 8000466:	2202      	movs	r2, #2
 8000468:	493b      	ldr	r1, [pc, #236]	; (8000558 <TIM+0xfc>)
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f006 fc69 	bl	8006d42 <strncmp>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d11b      	bne.n	80004ae <TIM+0x52>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[3]));
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3303      	adds	r3, #3
 800047a:	4618      	mov	r0, r3
 800047c:	f006 f80c 	bl	8006498 <atoi>
 8000480:	4602      	mov	r2, r0
 8000482:	4b36      	ldr	r3, [pc, #216]	; (800055c <TIM+0x100>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3303      	adds	r3, #3
 800048c:	4618      	mov	r0, r3
 800048e:	f006 f803 	bl	8006498 <atoi>
 8000492:	4603      	mov	r3, r0
 8000494:	461a      	mov	r2, r3
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <TIM+0x100>)
 8000498:	60da      	str	r2, [r3, #12]
      printf("\r\nOne Shot timer with period: %d", (int)htim2.Init.Period);
 800049a:	4b30      	ldr	r3, [pc, #192]	; (800055c <TIM+0x100>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4619      	mov	r1, r3
 80004a0:	482f      	ldr	r0, [pc, #188]	; (8000560 <TIM+0x104>)
 80004a2:	f006 faa7 	bl	80069f4 <iprintf>
      // The timer2 struct is updated accordingly to the __HAL_TIM_SET_AUTORELOAD() function.
      
      HAL_TIM_Base_Start_IT(&htim2);
 80004a6:	482d      	ldr	r0, [pc, #180]	; (800055c <TIM+0x100>)
 80004a8:	f003 fc10 	bl	8003ccc <HAL_TIM_Base_Start_IT>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
   }
   else {
      printf("\r\nUNKNOWN TCD COMMAND");
   }
}
 80004ac:	e04f      	b.n	800054e <TIM+0xf2>
   else if (strncmp(paramStr, "PERIOD", 6) == 0) {
 80004ae:	2206      	movs	r2, #6
 80004b0:	492c      	ldr	r1, [pc, #176]	; (8000564 <TIM+0x108>)
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f006 fc45 	bl	8006d42 <strncmp>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d118      	bne.n	80004f0 <TIM+0x94>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[7]));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3307      	adds	r3, #7
 80004c2:	4618      	mov	r0, r3
 80004c4:	f005 ffe8 	bl	8006498 <atoi>
 80004c8:	4602      	mov	r2, r0
 80004ca:	4b24      	ldr	r3, [pc, #144]	; (800055c <TIM+0x100>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3307      	adds	r3, #7
 80004d4:	4618      	mov	r0, r3
 80004d6:	f005 ffdf 	bl	8006498 <atoi>
 80004da:	4603      	mov	r3, r0
 80004dc:	461a      	mov	r2, r3
 80004de:	4b1f      	ldr	r3, [pc, #124]	; (800055c <TIM+0x100>)
 80004e0:	60da      	str	r2, [r3, #12]
      printf("\r\nAuto-reload period: %d", (int)htim2.Init.Period);
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <TIM+0x100>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	4619      	mov	r1, r3
 80004e8:	481f      	ldr	r0, [pc, #124]	; (8000568 <TIM+0x10c>)
 80004ea:	f006 fa83 	bl	80069f4 <iprintf>
}
 80004ee:	e02e      	b.n	800054e <TIM+0xf2>
   else if (strncmp(paramStr, "REPEAT", 6) == 0) {
 80004f0:	2206      	movs	r2, #6
 80004f2:	491e      	ldr	r1, [pc, #120]	; (800056c <TIM+0x110>)
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f006 fc24 	bl	8006d42 <strncmp>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d117      	bne.n	8000530 <TIM+0xd4>
      timRepeat = atoi(&paramStr[7]);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3307      	adds	r3, #7
 8000504:	4618      	mov	r0, r3
 8000506:	f005 ffc7 	bl	8006498 <atoi>
 800050a:	4603      	mov	r3, r0
 800050c:	4a18      	ldr	r2, [pc, #96]	; (8000570 <TIM+0x114>)
 800050e:	6013      	str	r3, [r2, #0]
      timRepeatCount = 0;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <TIM+0x118>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim2);
 8000516:	4811      	ldr	r0, [pc, #68]	; (800055c <TIM+0x100>)
 8000518:	f003 fbd8 	bl	8003ccc <HAL_TIM_Base_Start_IT>
      timMode = REPEAT;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <TIM+0x11c>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
      printf("\r\nAuto-reload repeat % times", timRepeat);
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <TIM+0x114>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	4814      	ldr	r0, [pc, #80]	; (800057c <TIM+0x120>)
 800052a:	f006 fa63 	bl	80069f4 <iprintf>
}
 800052e:	e00e      	b.n	800054e <TIM+0xf2>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000530:	2202      	movs	r2, #2
 8000532:	4913      	ldr	r1, [pc, #76]	; (8000580 <TIM+0x124>)
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f006 fc04 	bl	8006d42 <strncmp>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d103      	bne.n	8000548 <TIM+0xec>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
 8000540:	4810      	ldr	r0, [pc, #64]	; (8000584 <TIM+0x128>)
 8000542:	f006 fa57 	bl	80069f4 <iprintf>
}
 8000546:	e002      	b.n	800054e <TIM+0xf2>
      printf("\r\nUNKNOWN TCD COMMAND");
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <TIM+0x12c>)
 800054a:	f006 fa53 	bl	80069f4 <iprintf>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	080078ec 	.word	0x080078ec
 800055c:	200004d8 	.word	0x200004d8
 8000560:	080078f0 	.word	0x080078f0
 8000564:	08007914 	.word	0x08007914
 8000568:	0800791c 	.word	0x0800791c
 800056c:	08007938 	.word	0x08007938
 8000570:	20000000 	.word	0x20000000
 8000574:	20000340 	.word	0x20000340
 8000578:	20000351 	.word	0x20000351
 800057c:	08007940 	.word	0x08007940
 8000580:	08007840 	.word	0x08007840
 8000584:	08007960 	.word	0x08007960
 8000588:	080079a4 	.word	0x080079a4

0800058c <SYS>:

void SYS(char* paramStr, int* paramValues){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "BN", 2) == 0) {
 8000596:	2202      	movs	r2, #2
 8000598:	4914      	ldr	r1, [pc, #80]	; (80005ec <SYS+0x60>)
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f006 fbd1 	bl	8006d42 <strncmp>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d104      	bne.n	80005b0 <SYS+0x24>
      printf("\r\nBuild no.:%d", BUILD);
 80005a6:	216f      	movs	r1, #111	; 0x6f
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <SYS+0x64>)
 80005aa:	f006 fa23 	bl	80069f4 <iprintf>
   }
   else if (strncmp(paramStr, "VER", 2) == 0) {
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
   }

}
 80005ae:	e019      	b.n	80005e4 <SYS+0x58>
   else if (strncmp(paramStr, "BD", 2) == 0) {
 80005b0:	2202      	movs	r2, #2
 80005b2:	4910      	ldr	r1, [pc, #64]	; (80005f4 <SYS+0x68>)
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f006 fbc4 	bl	8006d42 <strncmp>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d104      	bne.n	80005ca <SYS+0x3e>
      printf("\r\nBuild date: %s", BUILD_DATE_AND_TIME);
 80005c0:	490d      	ldr	r1, [pc, #52]	; (80005f8 <SYS+0x6c>)
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <SYS+0x70>)
 80005c4:	f006 fa16 	bl	80069f4 <iprintf>
}
 80005c8:	e00c      	b.n	80005e4 <SYS+0x58>
   else if (strncmp(paramStr, "VER", 2) == 0) {
 80005ca:	2202      	movs	r2, #2
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <SYS+0x74>)
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f006 fbb7 	bl	8006d42 <strncmp>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d104      	bne.n	80005e4 <SYS+0x58>
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <SYS+0x78>)
 80005e0:	f006 fa08 	bl	80069f4 <iprintf>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	080079bc 	.word	0x080079bc
 80005f0:	080079c0 	.word	0x080079c0
 80005f4:	080079d0 	.word	0x080079d0
 80005f8:	080079d4 	.word	0x080079d4
 80005fc:	080079f0 	.word	0x080079f0
 8000600:	08007a04 	.word	0x08007a04
 8000604:	08007a08 	.word	0x08007a08

08000608 <promt>:
  {"ADC", 4, 7, {"RO", "AVRAGE", "POLL", "HELP"}, {0, 10, 500, 0}, &ADC},
  {"TCD", 4, 7, {"OS", "PERIOD", "REPEAT", "HELP"}, {0, 10, 500, 0}, &TIM},
  {"SYS", 3, 4, {"BN", "BD", "VER"}, {0, 0, 0}, &SYS}
};

void promt() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <promt+0x1c>)
 800060e:	f006 f9f1 	bl	80069f4 <iprintf>
   fflush(stdout);
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <promt+0x20>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4618      	mov	r0, r3
 800061a:	f006 f809 	bl	8006630 <fflush>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08007a18 	.word	0x08007a18
 8000628:	200002c0 	.word	0x200002c0

0800062c <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
   int i = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 800063a:	2304      	movs	r3, #4
 800063c:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 800063e:	e03d      	b.n	80006bc <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	22ac      	movs	r2, #172	; 0xac
 8000644:	fb02 f303 	mul.w	r3, r2, r3
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <executeCmd+0xbc>)
 800064a:	189c      	adds	r4, r3, r2
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	22ac      	movs	r2, #172	; 0xac
 8000650:	fb02 f303 	mul.w	r3, r2, r3
 8000654:	4a24      	ldr	r2, [pc, #144]	; (80006e8 <executeCmd+0xbc>)
 8000656:	4413      	add	r3, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fdc3 	bl	80001e4 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	4620      	mov	r0, r4
 8000666:	f006 fb6c 	bl	8006d42 <strncmp>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d122      	bne.n	80006b6 <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 8000670:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <executeCmd+0xbc>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	21ac      	movs	r1, #172	; 0xac
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4413      	add	r3, r2
 800067c:	33a8      	adds	r3, #168	; 0xa8
 800067e:	681c      	ldr	r4, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	22ac      	movs	r2, #172	; 0xac
 8000684:	fb02 f303 	mul.w	r3, r2, r3
 8000688:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <executeCmd+0xbc>)
 800068a:	4413      	add	r3, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fda9 	bl	80001e4 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	3301      	adds	r3, #1
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	441a      	add	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	21ac      	movs	r1, #172	; 0xac
 800069e:	fb01 f303 	mul.w	r3, r1, r3
 80006a2:	3380      	adds	r3, #128	; 0x80
 80006a4:	4910      	ldr	r1, [pc, #64]	; (80006e8 <executeCmd+0xbc>)
 80006a6:	440b      	add	r3, r1
 80006a8:	4619      	mov	r1, r3
 80006aa:	4610      	mov	r0, r2
 80006ac:	47a0      	blx	r4
       /*** for test only...
 		 printf("\r\nparamValues[0]: %d, paramValues[1]: %d, paramValues[2]: %d",
               mcuCmds[i].paramValues[0],mcuCmds[i].paramValues[1],mcuCmds[i].paramValues[2]);
               ***/
 		 promt();
 80006ae:	f7ff ffab 	bl	8000608 <promt>
     	 return 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e014      	b.n	80006e0 <executeCmd+0xb4>
   for (; i < numberOfCommands; i++) {
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d8bd      	bhi.n	8000640 <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d808      	bhi.n	80006de <executeCmd+0xb2>
      printf("\r\nThe command: %s[%d], is not recognized", termInput, numberOfCommands);
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	4806      	ldr	r0, [pc, #24]	; (80006ec <executeCmd+0xc0>)
 80006d2:	f006 f98f 	bl	80069f4 <iprintf>
      promt();
 80006d6:	f7ff ff97 	bl	8000608 <promt>
      return -1;
 80006da:	23ff      	movs	r3, #255	; 0xff
 80006dc:	e000      	b.n	80006e0 <executeCmd+0xb4>
   }
   else {
	  return -2;
 80006de:	23fe      	movs	r3, #254	; 0xfe
   }
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	20000004 	.word	0x20000004
 80006ec:	08007a24 	.word	0x08007a24

080006f0 <_write>:
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM17_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000704:	68b9      	ldr	r1, [r7, #8]
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <_write+0x28>)
 8000708:	f004 fcee 	bl	80050e8 <HAL_UART_Transmit>
	return len;
 800070c:	687b      	ldr	r3, [r7, #4]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200003fc 	.word	0x200003fc

0800071c <HAL_UART_RxCpltCallback>:
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
uint8_t timMode = ONE_SHOT;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <HAL_UART_RxCpltCallback+0x90>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b0d      	cmp	r3, #13
 800072a:	d126      	bne.n	800077a <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dd1a      	ble.n	800076a <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073a:	481e      	ldr	r0, [pc, #120]	; (80007b4 <HAL_UART_RxCpltCallback+0x98>)
 800073c:	f001 ff6c 	bl	8002618 <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	481c      	ldr	r0, [pc, #112]	; (80007b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000748:	f7ff ff70 	bl	800062c <executeCmd>
			bytesReceived = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 8000752:	2250      	movs	r2, #80	; 0x50
 8000754:	2100      	movs	r1, #0
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000758:	f006 f899 	bl	800688e <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <HAL_UART_RxCpltCallback+0x98>)
 8000764:	f001 ff58 	bl	8002618 <HAL_GPIO_WritePin>
 8000768:	e001      	b.n	800076e <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 800076a:	f7ff ff4d 	bl	8000608 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	490e      	ldr	r1, [pc, #56]	; (80007ac <HAL_UART_RxCpltCallback+0x90>)
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <HAL_UART_RxCpltCallback+0xa0>)
 8000774:	f004 fd42 	bl	80051fc <HAL_UART_Receive_IT>
		return;
 8000778:	e015      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	2201      	movs	r2, #1
 800077e:	490b      	ldr	r1, [pc, #44]	; (80007ac <HAL_UART_RxCpltCallback+0x90>)
 8000780:	480e      	ldr	r0, [pc, #56]	; (80007bc <HAL_UART_RxCpltCallback+0xa0>)
 8000782:	f004 fcb1 	bl	80050e8 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_UART_RxCpltCallback+0x90>)
 800078c:	7811      	ldrb	r1, [r2, #0]
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_UART_RxCpltCallback+0x9c>)
 8000790:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_UART_RxCpltCallback+0x94>)
 800079a:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	4903      	ldr	r1, [pc, #12]	; (80007ac <HAL_UART_RxCpltCallback+0x90>)
 80007a0:	4806      	ldr	r0, [pc, #24]	; (80007bc <HAL_UART_RxCpltCallback+0xa0>)
 80007a2:	f004 fd2b 	bl	80051fc <HAL_UART_Receive_IT>
}
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000348 	.word	0x20000348
 80007b0:	2000034c 	.word	0x2000034c
 80007b4:	48000400 	.word	0x48000400
 80007b8:	20000484 	.word	0x20000484
 80007bc:	200003fc 	.word	0x200003fc

080007c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
   if (timMode == ONE_SHOT) {
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d108      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x22>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	480e      	ldr	r0, [pc, #56]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80007d6:	f001 ff37 	bl	8002648 <HAL_GPIO_TogglePin>
      HAL_TIM_Base_Stop_IT(&htim2);
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80007dc:	f003 faca 	bl	8003d74 <HAL_TIM_Base_Stop_IT>
         HAL_TIM_Base_Stop_IT(&htim2);
      }
   }
   //printf("\r\nHAL_TIM_PeriodElapsedCallback");
   //promt();
}
 80007e0:	e010      	b.n	8000804 <HAL_TIM_PeriodElapsedCallback+0x44>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	480a      	ldr	r0, [pc, #40]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80007e8:	f001 ff2e 	bl	8002648 <HAL_GPIO_TogglePin>
      if (timRepeatCount++ > timRepeat) {
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	1c5a      	adds	r2, r3, #1
 80007f2:	4909      	ldr	r1, [pc, #36]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80007f4:	600a      	str	r2, [r1, #0]
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	4293      	cmp	r3, r2
 80007fc:	dd02      	ble.n	8000804 <HAL_TIM_PeriodElapsedCallback+0x44>
         HAL_TIM_Base_Stop_IT(&htim2);
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000800:	f003 fab8 	bl	8003d74 <HAL_TIM_Base_Stop_IT>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000351 	.word	0x20000351
 8000810:	48000400 	.word	0x48000400
 8000814:	200004d8 	.word	0x200004d8
 8000818:	20000340 	.word	0x20000340
 800081c:	20000000 	.word	0x20000000

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 8000826:	4b3e      	ldr	r3, [pc, #248]	; (8000920 <main+0x100>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6898      	ldr	r0, [r3, #8]
 800082c:	2300      	movs	r3, #0
 800082e:	2202      	movs	r2, #2
 8000830:	2100      	movs	r1, #0
 8000832:	f006 f97d 	bl	8006b30 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fcb9 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f885 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 fa45 	bl	8000ccc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000842:	f000 fa13 	bl	8000c6c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000846:	f000 f8d3 	bl	80009f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800084a:	f000 f947 	bl	8000adc <MX_TIM2_Init>
  MX_TIM17_Init();
 800084e:	f000 f995 	bl	8000b7c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	4933      	ldr	r1, [pc, #204]	; (8000924 <main+0x104>)
 8000856:	4834      	ldr	r0, [pc, #208]	; (8000928 <main+0x108>)
 8000858:	f004 fcd0 	bl	80051fc <HAL_UART_Receive_IT>

  //HAL_TIM_Base_Start_IT(&htim2);

  uint8_t ledState = OFF;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
  printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 8000860:	4832      	ldr	r0, [pc, #200]	; (800092c <main+0x10c>)
 8000862:	f006 f8c7 	bl	80069f4 <iprintf>
  printf("\r\nBuild No. %d", BUILD);
 8000866:	216f      	movs	r1, #111	; 0x6f
 8000868:	4831      	ldr	r0, [pc, #196]	; (8000930 <main+0x110>)
 800086a:	f006 f8c3 	bl	80069f4 <iprintf>
  promt();
 800086e:	f7ff fecb 	bl	8000608 <promt>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	482f      	ldr	r0, [pc, #188]	; (8000934 <main+0x114>)
 8000876:	f003 fb0d 	bl	8003e94 <HAL_TIM_PWM_Start>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 800087a:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <main+0x118>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	429a      	cmp	r2, r3
 8000882:	d013      	beq.n	80008ac <main+0x8c>
			ledState = led2;
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <main+0x118>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	73fb      	strb	r3, [r7, #15]
			if (led2 == ON) {
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <main+0x118>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d106      	bne.n	80008a0 <main+0x80>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4828      	ldr	r0, [pc, #160]	; (800093c <main+0x11c>)
 800089a:	f001 febd 	bl	8002618 <HAL_GPIO_WritePin>
 800089e:	e005      	b.n	80008ac <main+0x8c>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	4825      	ldr	r0, [pc, #148]	; (800093c <main+0x11c>)
 80008a8:	f001 feb6 	bl	8002618 <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <main+0x118>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d116      	bne.n	80008e2 <main+0xc2>
		   if (msValue > 0) {
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <main+0x120>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	dd0a      	ble.n	80008d2 <main+0xb2>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c0:	481e      	ldr	r0, [pc, #120]	; (800093c <main+0x11c>)
 80008c2:	f001 fec1 	bl	8002648 <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <main+0x120>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fcd4 	bl	8001278 <HAL_Delay>
 80008d0:	e007      	b.n	80008e2 <main+0xc2>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d8:	4818      	ldr	r0, [pc, #96]	; (800093c <main+0x11c>)
 80008da:	f001 fe9d 	bl	8002618 <HAL_GPIO_WritePin>
			   ledState = OFF;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]
			}
		}

		/* PWM range from 0% to 100% */
		     for(int i=0; i<=100; i++){
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	e008      	b.n	80008fa <main+0xda>
		        TIM17->CCR1 = i;
 80008e8:	4a16      	ldr	r2, [pc, #88]	; (8000944 <main+0x124>)
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	6353      	str	r3, [r2, #52]	; 0x34
		        HAL_Delay(5);
 80008ee:	2005      	movs	r0, #5
 80008f0:	f000 fcc2 	bl	8001278 <HAL_Delay>
		     for(int i=0; i<=100; i++){
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b64      	cmp	r3, #100	; 0x64
 80008fe:	ddf3      	ble.n	80008e8 <main+0xc8>
		     }

		     /* PWM range from 100% to 0% */
		     for(int i=100; i>=0; i--){
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	e008      	b.n	8000918 <main+0xf8>
		        TIM17->CCR1 = i;
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <main+0x124>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6353      	str	r3, [r2, #52]	; 0x34
		        HAL_Delay(15);
 800090c:	200f      	movs	r0, #15
 800090e:	f000 fcb3 	bl	8001278 <HAL_Delay>
		     for(int i=100; i>=0; i--){
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3b01      	subs	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	daf3      	bge.n	8000906 <main+0xe6>
		if (led2 != ledState) {
 800091e:	e7ac      	b.n	800087a <main+0x5a>
 8000920:	200002c0 	.word	0x200002c0
 8000924:	20000348 	.word	0x20000348
 8000928:	200003fc 	.word	0x200003fc
 800092c:	08007a50 	.word	0x08007a50
 8000930:	08007a8c 	.word	0x08007a8c
 8000934:	20000360 	.word	0x20000360
 8000938:	20000350 	.word	0x20000350
 800093c:	48000400 	.word	0x48000400
 8000940:	20000344 	.word	0x20000344
 8000944:	40014800 	.word	0x40014800

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	; 0x70
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000952:	2228      	movs	r2, #40	; 0x28
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f005 ff99 	bl	800688e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2234      	movs	r2, #52	; 0x34
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f005 ff8b 	bl	800688e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fe75 	bl	800267c <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000998:	f000 f9e4 	bl	8000d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fd68 	bl	800348c <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009c2:	f000 f9cf 	bl	8000d64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM17;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <SystemClock_Config+0xa4>)
 80009c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 ff8f 	bl	80038f8 <HAL_RCCEx_PeriphCLKConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009e0:	f000 f9c0 	bl	8000d64 <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3770      	adds	r7, #112	; 0x70
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	00100001 	.word	0x00100001

080009f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a06:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a0e:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000a42:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a44:	2203      	movs	r2, #3
 8000a46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a52:	2208      	movs	r2, #8
 8000a54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a62:	481d      	ldr	r0, [pc, #116]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a64:	f000 fc2c 	bl	80012c0 <HAL_ADC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000a6e:	f000 f979 	bl	8000d64 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a72:	230f      	movs	r3, #15
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000a90:	f000 ff48 	bl	8001924 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a9a:	f000 f963 	bl	8000d64 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000aa8:	f000 ff3c 	bl	8001924 <HAL_ADC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ab2:	f000 f957 	bl	8000d64 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <MX_ADC1_Init+0xe8>)
 8000ac0:	f000 ff30 	bl	8001924 <HAL_ADC_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000aca:	f000 f94b 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200003ac 	.word	0x200003ac

08000adc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000b12:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b26:	4814      	ldr	r0, [pc, #80]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000b28:	f003 f878 	bl	8003c1c <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b32:	f000 f917 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000b44:	f003 fcc0 	bl	80044c8 <HAL_TIM_ConfigClockSource>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000b4e:	f000 f909 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_TIM2_Init+0x9c>)
 8000b60:	f004 f978 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b6a:	f000 f8fb 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200004d8 	.word	0x200004d8

08000b7c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b092      	sub	sp, #72	; 0x48
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	222c      	movs	r2, #44	; 0x2c
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 fe76 	bl	800688e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000ba4:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <MX_TIM17_Init+0xec>)
 8000ba6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 80-1;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000baa:	224f      	movs	r2, #79	; 0x4f
 8000bac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100-1;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000bb6:	2263      	movs	r2, #99	; 0x63
 8000bb8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bcc:	4825      	ldr	r0, [pc, #148]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000bce:	f003 f825 	bl	8003c1c <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000bd8:	f000 f8c4 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000bdc:	4821      	ldr	r0, [pc, #132]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000bde:	f003 f8f8 	bl	8003dd2 <HAL_TIM_PWM_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000be8:	f000 f8bc 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bec:	2360      	movs	r3, #96	; 0x60
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4814      	ldr	r0, [pc, #80]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000c12:	f003 fb45 	bl	80042a0 <HAL_TIM_PWM_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000c1c:	f000 f8a2 	bl	8000d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c42:	463b      	mov	r3, r7
 8000c44:	4619      	mov	r1, r3
 8000c46:	4807      	ldr	r0, [pc, #28]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000c48:	f004 f96a 	bl	8004f20 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000c52:	f000 f887 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c56:	4803      	ldr	r0, [pc, #12]	; (8000c64 <MX_TIM17_Init+0xe8>)
 8000c58:	f000 f922 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000c5c:	bf00      	nop
 8000c5e:	3748      	adds	r7, #72	; 0x48
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000360 	.word	0x20000360
 8000c68:	40014800 	.word	0x40014800

08000c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c72:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <MX_USART1_UART_Init+0x5c>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000cb0:	f004 f9cc 	bl	800504c <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cba:	f000 f853 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200003fc 	.word	0x200003fc
 8000cc8:	40013800 	.word	0x40013800

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000d00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_GPIO_Init+0x90>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <MX_GPIO_Init+0x94>)
 8000d32:	f001 fc71 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_GPIO_Init+0x94>)
 8000d50:	f001 faf0 	bl	8002334 <HAL_GPIO_Init>

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000400 	.word	0x48000400

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x44>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x44>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x44>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dd8:	d124      	bne.n	8000e24 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x74>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_ADC_MspInit+0x74>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_ADC_MspInit+0x74>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_ADC_MspInit+0x74>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0x74>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_ADC_MspInit+0x74>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f001 fa88 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e40:	d114      	bne.n	8000e6c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_TIM_Base_MspInit+0x68>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_TIM_Base_MspInit+0x68>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_TIM_Base_MspInit+0x68>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	201c      	movs	r0, #28
 8000e60:	f001 f9bb 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e64:	201c      	movs	r0, #28
 8000e66:	f001 f9d4 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e6a:	e010      	b.n	8000e8e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_TIM_Base_MspInit+0x6c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10b      	bne.n	8000e8e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_TIM_Base_MspInit+0x68>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_TIM_Base_MspInit+0x68>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_TIM_Base_MspInit+0x68>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40014800 	.word	0x40014800

08000ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a11      	ldr	r2, [pc, #68]	; (8000f04 <HAL_TIM_MspPostInit+0x64>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d11b      	bne.n	8000efa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_TIM_MspPostInit+0x68>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_TIM_MspPostInit+0x68>)
 8000ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ecc:	6153      	str	r3, [r2, #20]
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_TIM_MspPostInit+0x68>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB5     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eda:	2320      	movs	r3, #32
 8000edc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000eea:	230a      	movs	r3, #10
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_TIM_MspPostInit+0x6c>)
 8000ef6:	f001 fa1d 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40014800 	.word	0x40014800
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12f      	bne.n	8000f92 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_UART_MspInit+0x90>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f62:	2330      	movs	r3, #48	; 0x30
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f72:	2307      	movs	r3, #7
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <HAL_UART_MspInit+0x94>)
 8000f7e:	f001 f9d9 	bl	8002334 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2025      	movs	r0, #37	; 0x25
 8000f88:	f001 f927 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f8c:	2025      	movs	r0, #37	; 0x25
 8000f8e:	f001 f940 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000800 	.word	0x48000800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f920 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM2_IRQHandler+0x10>)
 8001002:	f003 f82d 	bl	8004060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004d8 	.word	0x200004d8

08001010 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <USART1_IRQHandler+0x10>)
 8001016:	f004 f935 	bl	8005284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200003fc 	.word	0x200003fc

08001024 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e00a      	b.n	800104c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001036:	f3af 8000 	nop.w
 800103a:	4601      	mov	r1, r0
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf0      	blt.n	8001036 <_read+0x12>
	}

return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_close>:
	}
	return len;
}

int _close(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001086:	605a      	str	r2, [r3, #4]
	return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_isatty>:

int _isatty(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f005 f9d2 	bl	80064a0 <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20004000 	.word	0x20004000
 8001128:	00000400 	.word	0x00000400
 800112c:	20000354 	.word	0x20000354
 8001130:	20000538 	.word	0x20000538

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800115c:	f7ff ffea 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <LoopForever+0x6>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	; (8001198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <LoopForever+0xe>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	; (80011a4 <LoopForever+0x16>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f005 fb5b 	bl	8006840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800118a:	f7ff fb49 	bl	8000820 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001190:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 800119c:	08007c74 	.word	0x08007c74
  ldr r2, =_sbss
 80011a0:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 80011a4:	20000538 	.word	0x20000538

080011a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_IRQHandler>
	...

080011ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x28>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x28>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f001 f801 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fdd2 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40022000 	.word	0x40022000

080011d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 f819 	bl	800222e <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 ffe1 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002b4 	.word	0x200002b4
 8001230:	200002bc 	.word	0x200002bc
 8001234:	200002b8 	.word	0x200002b8

08001238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200002bc 	.word	0x200002bc
 800125c:	20000524 	.word	0x20000524

08001260 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;  
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000524 	.word	0x20000524

08001278 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002bc 	.word	0x200002bc

080012c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09a      	sub	sp, #104	; 0x68
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e169      	b.n	80015b4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d176      	bne.n	80013e0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d152      	bne.n	80013a0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fd4f 	bl	8000db8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d13b      	bne.n	80013a0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fe15 	bl	8001f58 <ADC_Disable>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	d12f      	bne.n	80013a0 <HAL_ADC_Init+0xe0>
 8001340:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001344:	2b00      	cmp	r3, #0
 8001346:	d12b      	bne.n	80013a0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001350:	f023 0302 	bic.w	r3, r3, #2
 8001354:	f043 0202 	orr.w	r2, r3, #2
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800136a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800137c:	4b8f      	ldr	r3, [pc, #572]	; (80015bc <HAL_ADC_Init+0x2fc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a8f      	ldr	r2, [pc, #572]	; (80015c0 <HAL_ADC_Init+0x300>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	0c9a      	lsrs	r2, r3, #18
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001392:	e002      	b.n	800139a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3b01      	subs	r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f9      	bne.n	8001394 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013bc:	d110      	bne.n	80013e0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f023 0312 	bic.w	r3, r3, #18
 80013c6:	f043 0210 	orr.w	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f040 80d6 	bne.w	800159a <HAL_ADC_Init+0x2da>
 80013ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 80d1 	bne.w	800159a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 80c9 	bne.w	800159a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001410:	f043 0202 	orr.w	r2, r3, #2
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001418:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <HAL_ADC_Init+0x304>)
 800141a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d108      	bne.n	8001440 <HAL_ADC_Init+0x180>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_Init+0x180>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_ADC_Init+0x182>
 8001440:	2300      	movs	r3, #0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d11c      	bne.n	8001480 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001446:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001448:	2b00      	cmp	r3, #0
 800144a:	d010      	beq.n	800146e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d107      	bne.n	8001468 <HAL_ADC_Init+0x1a8>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_ADC_Init+0x1a8>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_ADC_Init+0x1aa>
 8001468:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800146a:	2b00      	cmp	r3, #0
 800146c:	d108      	bne.n	8001480 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800146e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	431a      	orrs	r2, r3
 800147c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e5b      	ldrb	r3, [r3, #25]
 8001484:	035b      	lsls	r3, r3, #13
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800148a:	2a01      	cmp	r2, #1
 800148c:	d002      	beq.n	8001494 <HAL_ADC_Init+0x1d4>
 800148e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001492:	e000      	b.n	8001496 <HAL_ADC_Init+0x1d6>
 8001494:	2200      	movs	r2, #0
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014a6:	4313      	orrs	r3, r2
 80014a8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d11b      	bne.n	80014ec <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e5b      	ldrb	r3, [r3, #25]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	3b01      	subs	r3, #1
 80014c2:	045a      	lsls	r2, r3, #17
 80014c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	663b      	str	r3, [r7, #96]	; 0x60
 80014ce:	e00d      	b.n	80014ec <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80014d8:	f043 0220 	orr.w	r2, r3, #32
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d007      	beq.n	8001504 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	4313      	orrs	r3, r2
 80014fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001500:	4313      	orrs	r3, r2
 8001502:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b00      	cmp	r3, #0
 8001510:	d114      	bne.n	800153c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001520:	f023 0302 	bic.w	r3, r3, #2
 8001524:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7e1b      	ldrb	r3, [r3, #24]
 800152a:	039a      	lsls	r2, r3, #14
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4313      	orrs	r3, r2
 8001536:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001538:	4313      	orrs	r3, r2
 800153a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_ADC_Init+0x308>)
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800154c:	430b      	orrs	r3, r1
 800154e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10c      	bne.n	8001572 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f023 010f 	bic.w	r1, r3, #15
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
 8001570:	e007      	b.n	8001582 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 020f 	bic.w	r2, r2, #15
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f023 0303 	bic.w	r3, r3, #3
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
 8001598:	e00a      	b.n	80015b0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f023 0312 	bic.w	r3, r3, #18
 80015a2:	f043 0210 	orr.w	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3768      	adds	r7, #104	; 0x68
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002b4 	.word	0x200002b4
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	50000300 	.word	0x50000300
 80015c8:	fff0c007 	.word	0xfff0c007

080015cc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d158      	bne.n	8001698 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_Start+0x28>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e054      	b.n	800169e <HAL_ADC_Start+0xd2>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fc47 	bl	8001e90 <ADC_Enable>
 8001602:	4603      	mov	r3, r0
 8001604:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d140      	bne.n	800168e <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001642:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001656:	d106      	bne.n	8001666 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f023 0206 	bic.w	r2, r3, #6
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
 8001664:	e002      	b.n	800166c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	221c      	movs	r2, #28
 800167a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0204 	orr.w	r2, r2, #4
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e006      	b.n	800169c <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001696:	e001      	b.n	800169c <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001698:	2302      	movs	r3, #2
 800169a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d102      	bne.n	80016c4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80016be:	2308      	movs	r3, #8
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e02e      	b.n	8001722 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c4:	4b56      	ldr	r3, [pc, #344]	; (8001820 <HAL_ADC_PollForConversion+0x178>)
 80016c6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d112      	bne.n	80016fa <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d11d      	bne.n	800171e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e08d      	b.n	8001816 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f043 0220 	orr.w	r2, r3, #32
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e07b      	b.n	8001816 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800171e:	230c      	movs	r3, #12
 8001720:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800172a:	f7ff fd99 	bl	8001260 <HAL_GetTick>
 800172e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001730:	e021      	b.n	8001776 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d01d      	beq.n	8001776 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_ADC_PollForConversion+0xa8>
 8001740:	f7ff fd8e 	bl	8001260 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d212      	bcs.n	8001776 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10b      	bne.n	8001776 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f043 0204 	orr.w	r2, r3, #4
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e04f      	b.n	8001816 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0d6      	beq.n	8001732 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800179a:	2b00      	cmp	r3, #0
 800179c:	d131      	bne.n	8001802 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12c      	bne.n	8001802 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d125      	bne.n	8001802 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d112      	bne.n	80017ea <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d112      	bne.n	8001802 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
 80017e8:	e00b      	b.n	8001802 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f043 0220 	orr.w	r2, r3, #32
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	50000300 	.word	0x50000300

08001824 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_ADCEx_Calibration_Start+0x1c>
 8001856:	2302      	movs	r3, #2
 8001858:	e05f      	b.n	800191a <HAL_ADCEx_Calibration_Start+0xdc>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fb78 	bl	8001f58 <ADC_Disable>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d14e      	bne.n	8001910 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001886:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d107      	bne.n	800189e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800189c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ac:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80018ae:	f7ff fcd7 	bl	8001260 <HAL_GetTick>
 80018b2:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018b4:	e01c      	b.n	80018f0 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018b6:	f7ff fcd3 	bl	8001260 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b0a      	cmp	r3, #10
 80018c2:	d915      	bls.n	80018f0 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018d2:	d10d      	bne.n	80018f0 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f023 0312 	bic.w	r3, r3, #18
 80018dc:	f043 0210 	orr.w	r2, r3, #16
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e014      	b.n	800191a <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018fe:	d0da      	beq.n	80018b6 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f023 0303 	bic.w	r3, r3, #3
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001924:	b480      	push	{r7}
 8001926:	b09b      	sub	sp, #108	; 0x6c
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x22>
 8001942:	2302      	movs	r3, #2
 8001944:	e299      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x556>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 827d 	bne.w	8001e58 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b04      	cmp	r3, #4
 8001964:	d81c      	bhi.n	80019a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	461a      	mov	r2, r3
 800197a:	231f      	movs	r3, #31
 800197c:	4093      	lsls	r3, r2
 800197e:	43db      	mvns	r3, r3
 8001980:	4019      	ands	r1, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
 800199e:	e063      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	d81e      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	3b1e      	subs	r3, #30
 80019bc:	221f      	movs	r2, #31
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4019      	ands	r1, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	3b1e      	subs	r3, #30
 80019d8:	fa00 f203 	lsl.w	r2, r0, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34
 80019e4:	e040      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b0e      	cmp	r3, #14
 80019ec:	d81e      	bhi.n	8001a2c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	3b3c      	subs	r3, #60	; 0x3c
 8001a02:	221f      	movs	r2, #31
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4019      	ands	r1, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	3b3c      	subs	r3, #60	; 0x3c
 8001a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	639a      	str	r2, [r3, #56]	; 0x38
 8001a2a:	e01d      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	3b5a      	subs	r3, #90	; 0x5a
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4019      	ands	r1, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	3b5a      	subs	r3, #90	; 0x5a
 8001a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 80e5 	bne.w	8001c42 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d91c      	bls.n	8001aba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6999      	ldr	r1, [r3, #24]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b1e      	subs	r3, #30
 8001a92:	2207      	movs	r2, #7
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4019      	ands	r1, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6898      	ldr	r0, [r3, #8]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b1e      	subs	r3, #30
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	619a      	str	r2, [r3, #24]
 8001ab8:	e019      	b.n	8001aee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6959      	ldr	r1, [r3, #20]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	2207      	movs	r2, #7
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4019      	ands	r1, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6898      	ldr	r0, [r3, #8]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d84f      	bhi.n	8001bb0 <HAL_ADC_ConfigChannel+0x28c>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b4b 	.word	0x08001b4b
 8001b20:	08001b6d 	.word	0x08001b6d
 8001b24:	08001b8f 	.word	0x08001b8f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b2e:	4b99      	ldr	r3, [pc, #612]	; (8001d94 <HAL_ADC_ConfigChannel+0x470>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	0691      	lsls	r1, r2, #26
 8001b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b46:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b48:	e07e      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b50:	4b90      	ldr	r3, [pc, #576]	; (8001d94 <HAL_ADC_ConfigChannel+0x470>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	0691      	lsls	r1, r2, #26
 8001b5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b68:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b6a:	e06d      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <HAL_ADC_ConfigChannel+0x470>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	0691      	lsls	r1, r2, #26
 8001b7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b8a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b8c:	e05c      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b94:	4b7f      	ldr	r3, [pc, #508]	; (8001d94 <HAL_ADC_ConfigChannel+0x470>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	0691      	lsls	r1, r2, #26
 8001b9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bac:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bae:	e04b      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	069b      	lsls	r3, r3, #26
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d107      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bd2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	069b      	lsls	r3, r3, #26
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d107      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bf6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	069b      	lsls	r3, r3, #26
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d107      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c1a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	069b      	lsls	r3, r3, #26
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d10a      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c3e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001c40:	e001      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001c42:	bf00      	nop
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001c46:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d108      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x344>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x344>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x346>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 80ff 	bne.w	8001e6e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d00f      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	400a      	ands	r2, r1
 8001c92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001c96:	e049      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b09      	cmp	r3, #9
 8001cb8:	d91c      	bls.n	8001cf4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6999      	ldr	r1, [r3, #24]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b1b      	subs	r3, #27
 8001ccc:	2207      	movs	r2, #7
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4019      	ands	r1, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6898      	ldr	r0, [r3, #8]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b1b      	subs	r3, #27
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	619a      	str	r2, [r3, #24]
 8001cf2:	e01b      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6959      	ldr	r1, [r3, #20]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	2207      	movs	r2, #7
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4019      	ands	r1, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6898      	ldr	r0, [r3, #8]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	fa00 f203 	lsl.w	r2, r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_ADC_ConfigChannel+0x474>)
 8001d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d014      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d48:	2b11      	cmp	r3, #17
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d5c:	2b12      	cmp	r3, #18
 8001d5e:	f040 8086 	bne.w	8001e6e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d17f      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d10d      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x478>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d106      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x478>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e005      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x47a>
 8001d92:	bf00      	nop
 8001d94:	83fff000 	.word	0x83fff000
 8001d98:	50000300 	.word	0x50000300
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d150      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001da2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d107      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x4a0>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x4a0>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x4a2>
 8001dc4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d13c      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d11d      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x4ea>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dda:	d118      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_ADC_ConfigChannel+0x564>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_ADC_ConfigChannel+0x568>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0c9a      	lsrs	r2, r3, #18
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dfe:	e002      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f9      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e0c:	e02e      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b11      	cmp	r3, #17
 8001e14:	d10b      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x50a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e1e:	d106      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e2c:	e01e      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d11a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e40:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e42:	e013      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e56:	e00a      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e6a:	e000      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e6c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	376c      	adds	r7, #108	; 0x6c
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	200002b4 	.word	0x200002b4
 8001e8c:	431bde83 	.word	0x431bde83

08001e90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <ADC_Enable+0x2c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <ADC_Enable+0x2c>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <ADC_Enable+0x2e>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d143      	bne.n	8001f4a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <ADC_Enable+0xc4>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e02f      	b.n	8001f4c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001efc:	f7ff f9b0 	bl	8001260 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f02:	e01b      	b.n	8001f3c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f04:	f7ff f9ac 	bl	8001260 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d914      	bls.n	8001f3c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d00d      	beq.n	8001f3c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f043 0210 	orr.w	r2, r3, #16
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e007      	b.n	8001f4c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d1dc      	bne.n	8001f04 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	8000003f 	.word	0x8000003f

08001f58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <ADC_Disable+0x2c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <ADC_Disable+0x2c>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <ADC_Disable+0x2e>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d047      	beq.n	800201a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030d 	and.w	r3, r3, #13
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10f      	bne.n	8001fb8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0202 	orr.w	r2, r2, #2
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2203      	movs	r2, #3
 8001fae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001fb0:	f7ff f956 	bl	8001260 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fb6:	e029      	b.n	800200c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0210 	orr.w	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e023      	b.n	800201c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fd4:	f7ff f944 	bl	8001260 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d914      	bls.n	800200c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d10d      	bne.n	800200c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e007      	b.n	800201c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d0dc      	beq.n	8001fd4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff29 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff3e 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff31 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002254:	2b02      	cmp	r3, #2
 8002256:	d008      	beq.n	800226a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2204      	movs	r2, #4
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e020      	b.n	80022ac <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 020e 	bic.w	r2, r2, #14
 8002278:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d005      	beq.n	80022da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e027      	b.n	800232a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 020e 	bic.w	r2, r2, #14
 80022e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
    } 
  }
  return status;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	e14e      	b.n	80025e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8140 	beq.w	80025dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d005      	beq.n	8002374 <HAL_GPIO_Init+0x40>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d130      	bne.n	80023d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023aa:	2201      	movs	r2, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f003 0201 	and.w	r2, r3, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d017      	beq.n	8002412 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d123      	bne.n	8002466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	6939      	ldr	r1, [r7, #16]
 8002462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 809a 	beq.w	80025dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a8:	4b55      	ldr	r3, [pc, #340]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a54      	ldr	r2, [pc, #336]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_GPIO_Init+0x2d0>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ea:	d013      	beq.n	8002514 <HAL_GPIO_Init+0x1e0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_GPIO_Init+0x2d4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00d      	beq.n	8002510 <HAL_GPIO_Init+0x1dc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a45      	ldr	r2, [pc, #276]	; (800260c <HAL_GPIO_Init+0x2d8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0x1d8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a44      	ldr	r2, [pc, #272]	; (8002610 <HAL_GPIO_Init+0x2dc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_GPIO_Init+0x1d4>
 8002504:	2303      	movs	r3, #3
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002508:	2305      	movs	r3, #5
 800250a:	e004      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 800250c:	2302      	movs	r3, #2
 800250e:	e002      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002514:	2300      	movs	r3, #0
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	f002 0203 	and.w	r2, r2, #3
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	4093      	lsls	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002526:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x2d0>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002534:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002558:	4a2e      	ldr	r2, [pc, #184]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f aea9 	bne.w	8002344 <HAL_GPIO_Init+0x10>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	48000400 	.word	0x48000400
 800260c:	48000800 	.word	0x48000800
 8002610:	48000c00 	.word	0x48000c00
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002634:	e002      	b.n	800263c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	041a      	lsls	r2, r3, #16
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43d9      	mvns	r1, r3
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	400b      	ands	r3, r1
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002682:	af00      	add	r7, sp, #0
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	f000 bef4 	b.w	800347e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 816a 	beq.w	800297a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026a6:	4bb3      	ldr	r3, [pc, #716]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d00c      	beq.n	80026cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b2:	4bb0      	ldr	r3, [pc, #704]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d159      	bne.n	8002772 <HAL_RCC_OscConfig+0xf6>
 80026be:	4bad      	ldr	r3, [pc, #692]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ca:	d152      	bne.n	8002772 <HAL_RCC_OscConfig+0xf6>
 80026cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_RCC_OscConfig+0x82>
 80026f8:	4b9e      	ldr	r3, [pc, #632]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0xae>
 80026fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002702:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002716:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800271a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002726:	4b93      	ldr	r3, [pc, #588]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800272e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002732:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002736:	fa92 f2a2 	rbit	r2, r2
 800273a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800273e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002742:	fab2 f282 	clz	r2, r2
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f042 0220 	orr.w	r2, r2, #32
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f002 021f 	and.w	r2, r2, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 810c 	beq.w	8002978 <HAL_RCC_OscConfig+0x2fc>
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 8106 	bne.w	8002978 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f000 be86 	b.w	800347e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x110>
 800277e:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7c      	ldr	r2, [pc, #496]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e030      	b.n	80027ee <HAL_RCC_OscConfig+0x172>
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x134>
 8002796:	4b77      	ldr	r3, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a76      	ldr	r2, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 800279c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b74      	ldr	r3, [pc, #464]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a73      	ldr	r2, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e01e      	b.n	80027ee <HAL_RCC_OscConfig+0x172>
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCC_OscConfig+0x15a>
 80027bc:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a6c      	ldr	r2, [pc, #432]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a69      	ldr	r2, [pc, #420]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e00b      	b.n	80027ee <HAL_RCC_OscConfig+0x172>
 80027d6:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a66      	ldr	r2, [pc, #408]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a63      	ldr	r2, [pc, #396]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f023 020f 	bic.w	r2, r3, #15
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	495d      	ldr	r1, [pc, #372]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d059      	beq.n	80028c0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe fd28 	bl	8001260 <HAL_GetTick>
 8002810:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002816:	f7fe fd23 	bl	8001260 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d902      	bls.n	800282c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	f000 be29 	b.w	800347e <HAL_RCC_OscConfig+0xe02>
 800282c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002830:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002840:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_RCC_OscConfig+0x1e2>
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e015      	b.n	800288a <HAL_RCC_OscConfig+0x20e>
 800285e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002862:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002876:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800287a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800288e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002892:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002896:	fa92 f2a2 	rbit	r2, r2
 800289a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800289e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ab      	beq.n	8002816 <HAL_RCC_OscConfig+0x19a>
 80028be:	e05c      	b.n	800297a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fcce 	bl	8001260 <HAL_GetTick>
 80028c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ca:	f7fe fcc9 	bl	8001260 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d902      	bls.n	80028e0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	f000 bdcf 	b.w	800347e <HAL_RCC_OscConfig+0xe02>
 80028e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028f4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_RCC_OscConfig+0x296>
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	e015      	b.n	800293e <HAL_RCC_OscConfig+0x2c2>
 8002912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002916:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800292a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800292e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_RCC_OscConfig+0x2f8>)
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002942:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002946:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800294a:	fa92 f2a2 	rbit	r2, r2
 800294e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002952:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002956:	fab2 f282 	clz	r2, r2
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f042 0220 	orr.w	r2, r2, #32
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f002 021f 	and.w	r2, r2, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ab      	bne.n	80028ca <HAL_RCC_OscConfig+0x24e>
 8002972:	e002      	b.n	800297a <HAL_RCC_OscConfig+0x2fe>
 8002974:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 816f 	beq.w	8002c68 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800298a:	4bd0      	ldr	r3, [pc, #832]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002996:	4bcd      	ldr	r3, [pc, #820]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d16c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x400>
 80029a2:	4bca      	ldr	r3, [pc, #808]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d166      	bne.n	8002a7c <HAL_RCC_OscConfig+0x400>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80029c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d102      	bne.n	80029de <HAL_RCC_OscConfig+0x362>
 80029d8:	4bbc      	ldr	r3, [pc, #752]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	e013      	b.n	8002a06 <HAL_RCC_OscConfig+0x38a>
 80029de:	2302      	movs	r3, #2
 80029e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029f0:	2302      	movs	r3, #2
 80029f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a02:	4bb2      	ldr	r3, [pc, #712]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	2202      	movs	r2, #2
 8002a08:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a10:	fa92 f2a2 	rbit	r2, r2
 8002a14:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a18:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_RCC_OscConfig+0x3cc>
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f000 bd1b 	b.w	800347e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4ba0      	ldr	r3, [pc, #640]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	21f8      	movs	r1, #248	; 0xf8
 8002a58:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a60:	fa91 f1a1 	rbit	r1, r1
 8002a64:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a68:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a6c:	fab1 f181 	clz	r1, r1
 8002a70:	b2c9      	uxtb	r1, r1
 8002a72:	408b      	lsls	r3, r1
 8002a74:	4995      	ldr	r1, [pc, #596]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e0f5      	b.n	8002c68 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8085 	beq.w	8002b92 <HAL_RCC_OscConfig+0x516>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002a9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fbd4 	bl	8001260 <HAL_GetTick>
 8002ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fe fbcf 	bl	8001260 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d902      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	f000 bcd5 	b.w	800347e <HAL_RCC_OscConfig+0xe02>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ae6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d102      	bne.n	8002b04 <HAL_RCC_OscConfig+0x488>
 8002afe:	4b73      	ldr	r3, [pc, #460]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	e013      	b.n	8002b2c <HAL_RCC_OscConfig+0x4b0>
 8002b04:	2302      	movs	r3, #2
 8002b06:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b16:	2302      	movs	r3, #2
 8002b18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b28:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b36:	fa92 f2a2 	rbit	r2, r2
 8002b3a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f042 0220 	orr.w	r2, r2, #32
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f002 021f 	and.w	r2, r2, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0af      	beq.n	8002abe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	21f8      	movs	r1, #248	; 0xf8
 8002b6e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b76:	fa91 f1a1 	rbit	r1, r1
 8002b7a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b7e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b82:	fab1 f181 	clz	r1, r1
 8002b86:	b2c9      	uxtb	r1, r1
 8002b88:	408b      	lsls	r3, r1
 8002b8a:	4950      	ldr	r1, [pc, #320]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
 8002b90:	e06a      	b.n	8002c68 <HAL_RCC_OscConfig+0x5ec>
 8002b92:	2301      	movs	r3, #1
 8002b94:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2300      	movs	r3, #0
 8002bbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fb4f 	bl	8001260 <HAL_GetTick>
 8002bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7fe fb4a 	bl	8001260 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d902      	bls.n	8002bde <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	f000 bc50 	b.w	800347e <HAL_RCC_OscConfig+0xe02>
 8002bde:	2302      	movs	r3, #2
 8002be0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_OscConfig+0x592>
 8002c08:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e013      	b.n	8002c36 <HAL_RCC_OscConfig+0x5ba>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c20:	2302      	movs	r3, #2
 8002c22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCC_OscConfig+0x650>)
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2202      	movs	r2, #2
 8002c38:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c40:	fa92 f2a2 	rbit	r2, r2
 8002c44:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c48:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c4c:	fab2 f282 	clz	r2, r2
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f042 0220 	orr.w	r2, r2, #32
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	f002 021f 	and.w	r2, r2, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1af      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80da 	beq.w	8002e2c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d069      	beq.n	8002d56 <HAL_RCC_OscConfig+0x6da>
 8002c82:	2301      	movs	r3, #1
 8002c84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_OscConfig+0x654>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2301      	movs	r3, #1
 8002caa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fad8 	bl	8001260 <HAL_GetTick>
 8002cb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb4:	e00e      	b.n	8002cd4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fad3 	bl	8001260 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d906      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e3d9      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	10908120 	.word	0x10908120
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ce6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d02:	2202      	movs	r2, #2
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002d14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	4ba5      	ldr	r3, [pc, #660]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d1e:	2102      	movs	r1, #2
 8002d20:	6019      	str	r1, [r3, #0]
 8002d22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fa93 f1a3 	rbit	r1, r3
 8002d2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d30:	6019      	str	r1, [r3, #0]
  return result;
 8002d32:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0b0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x63a>
 8002d54:	e06a      	b.n	8002e2c <HAL_RCC_OscConfig+0x7b0>
 8002d56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d6c:	601a      	str	r2, [r3, #0]
  return result;
 8002d6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d72:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <HAL_RCC_OscConfig+0x934>)
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe fa6a 	bl	8001260 <HAL_GetTick>
 8002d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	e009      	b.n	8002da6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fe fa65 	bl	8001260 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e36b      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
 8002da6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002daa:	2202      	movs	r2, #2
 8002dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002dda:	2202      	movs	r2, #2
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f2a3 	rbit	r2, r3
 8002de8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dee:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002df6:	2102      	movs	r1, #2
 8002df8:	6019      	str	r1, [r3, #0]
 8002dfa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f1a3 	rbit	r1, r3
 8002e04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e08:	6019      	str	r1, [r3, #0]
  return result;
 8002e0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1b2      	bne.n	8002d92 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8158 	beq.w	80030ec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b5a      	ldr	r3, [pc, #360]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d112      	bne.n	8002e74 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b57      	ldr	r3, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a56      	ldr	r2, [pc, #344]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b54      	ldr	r3, [pc, #336]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e62:	f107 0308 	add.w	r3, r7, #8
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <HAL_RCC_OscConfig+0x938>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11a      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e80:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <HAL_RCC_OscConfig+0x938>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a4b      	ldr	r2, [pc, #300]	; (8002fb4 <HAL_RCC_OscConfig+0x938>)
 8002e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe f9e8 	bl	8001260 <HAL_GetTick>
 8002e90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e009      	b.n	8002eaa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe f9e3 	bl	8001260 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e2e9      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <HAL_RCC_OscConfig+0x938>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0ef      	beq.n	8002e96 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x852>
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a39      	ldr	r2, [pc, #228]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	e02f      	b.n	8002f2e <HAL_RCC_OscConfig+0x8b2>
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x876>
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a33      	ldr	r2, [pc, #204]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a30      	ldr	r2, [pc, #192]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002eea:	f023 0304 	bic.w	r3, r3, #4
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e01d      	b.n	8002f2e <HAL_RCC_OscConfig+0x8b2>
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x89a>
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a27      	ldr	r2, [pc, #156]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	e00b      	b.n	8002f2e <HAL_RCC_OscConfig+0x8b2>
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a24      	ldr	r2, [pc, #144]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6213      	str	r3, [r2, #32]
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a21      	ldr	r2, [pc, #132]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d06b      	beq.n	8003010 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe f992 	bl	8001260 <HAL_GetTick>
 8002f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	e00b      	b.n	8002f5a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe f98d 	bl	8001260 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e291      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
 8002f5a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f76:	2202      	movs	r2, #2
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	fa93 f2a3 	rbit	r2, r3
 8002f84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f88:	601a      	str	r2, [r3, #0]
  return result;
 8002f8a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x93c>
 8002fa4:	4b01      	ldr	r3, [pc, #4]	; (8002fac <HAL_RCC_OscConfig+0x930>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCC_OscConfig+0x958>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	10908120 	.word	0x10908120
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	4bbb      	ldr	r3, [pc, #748]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fd8:	2102      	movs	r1, #2
 8002fda:	6011      	str	r1, [r2, #0]
 8002fdc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	fa92 f1a2 	rbit	r1, r2
 8002fe6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002fea:	6011      	str	r1, [r2, #0]
  return result;
 8002fec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	fab2 f282 	clz	r2, r2
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	f002 021f 	and.w	r2, r2, #31
 8003002:	2101      	movs	r1, #1
 8003004:	fa01 f202 	lsl.w	r2, r1, r2
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d099      	beq.n	8002f42 <HAL_RCC_OscConfig+0x8c6>
 800300e:	e063      	b.n	80030d8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe f926 	bl	8001260 <HAL_GetTick>
 8003014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003018:	e00b      	b.n	8003032 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fe f921 	bl	8001260 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e225      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
 8003032:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003036:	2202      	movs	r2, #2
 8003038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800304e:	2202      	movs	r2, #2
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003060:	601a      	str	r2, [r3, #0]
  return result;
 8003062:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003066:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f043 0302 	orr.w	r3, r3, #2
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d102      	bne.n	8003082 <HAL_RCC_OscConfig+0xa06>
 800307c:	4b90      	ldr	r3, [pc, #576]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	e00d      	b.n	800309e <HAL_RCC_OscConfig+0xa22>
 8003082:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003086:	2202      	movs	r2, #2
 8003088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80030a2:	2102      	movs	r1, #2
 80030a4:	6011      	str	r1, [r2, #0]
 80030a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	fa92 f1a2 	rbit	r1, r2
 80030b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80030b4:	6011      	str	r1, [r2, #0]
  return result;
 80030b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f002 021f 	and.w	r2, r2, #31
 80030cc:	2101      	movs	r1, #1
 80030ce:	fa01 f202 	lsl.w	r2, r1, r2
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1a0      	bne.n	800301a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b77      	ldr	r3, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4a76      	ldr	r2, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 81c2 	beq.w	800347c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f8:	4b71      	ldr	r3, [pc, #452]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	f000 819c 	beq.w	800343e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b02      	cmp	r3, #2
 800310e:	f040 8114 	bne.w	800333a <HAL_RCC_OscConfig+0xcbe>
 8003112:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003116:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800312a:	601a      	str	r2, [r3, #0]
  return result;
 800312c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003130:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800313c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	461a      	mov	r2, r3
 8003144:	2300      	movs	r3, #0
 8003146:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe f88a 	bl	8001260 <HAL_GetTick>
 800314c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003150:	e009      	b.n	8003166 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003152:	f7fe f885 	bl	8001260 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e18b      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
 8003166:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800316a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	fa93 f2a3 	rbit	r2, r3
 800317a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800317e:	601a      	str	r2, [r3, #0]
  return result;
 8003180:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003184:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0xb24>
 800319a:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e01b      	b.n	80031d8 <HAL_RCC_OscConfig+0xb5c>
 80031a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	fa93 f2a3 	rbit	r2, r3
 80031b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fa93 f2a3 	rbit	r2, r3
 80031ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	4b3a      	ldr	r3, [pc, #232]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	fa92 f1a2 	rbit	r1, r2
 80031ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031f0:	6011      	str	r1, [r2, #0]
  return result;
 80031f2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d19e      	bne.n	8003152 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	430b      	orrs	r3, r1
 800322a:	4925      	ldr	r1, [pc, #148]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
 8003230:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003234:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003248:	601a      	str	r2, [r3, #0]
  return result;
 800324a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800324e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800325a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	461a      	mov	r2, r3
 8003262:	2301      	movs	r3, #1
 8003264:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fd fffb 	bl	8001260 <HAL_GetTick>
 800326a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800326e:	e009      	b.n	8003284 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7fd fff6 	bl	8001260 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0fc      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
 8003284:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800329c:	601a      	str	r2, [r3, #0]
  return result;
 800329e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d105      	bne.n	80032c4 <HAL_RCC_OscConfig+0xc48>
 80032b8:	4b01      	ldr	r3, [pc, #4]	; (80032c0 <HAL_RCC_OscConfig+0xc44>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	e01e      	b.n	80032fc <HAL_RCC_OscConfig+0xc80>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	fa93 f2a3 	rbit	r2, r3
 80032d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fa93 f2a3 	rbit	r2, r3
 80032f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_OscConfig+0xe0c>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003304:	6011      	str	r1, [r2, #0]
 8003306:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	fa92 f1a2 	rbit	r1, r2
 8003310:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003314:	6011      	str	r1, [r2, #0]
  return result;
 8003316:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f042 0220 	orr.w	r2, r2, #32
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f002 021f 	and.w	r2, r2, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d09b      	beq.n	8003270 <HAL_RCC_OscConfig+0xbf4>
 8003338:	e0a0      	b.n	800347c <HAL_RCC_OscConfig+0xe00>
 800333a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800333e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003352:	601a      	str	r2, [r3, #0]
  return result;
 8003354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003358:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	461a      	mov	r2, r3
 800336c:	2300      	movs	r3, #0
 800336e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fd ff76 	bl	8001260 <HAL_GetTick>
 8003374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003378:	e009      	b.n	800338e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337a:	f7fd ff71 	bl	8001260 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e077      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
 800338e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f2a3 	rbit	r2, r3
 80033a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a6:	601a      	str	r2, [r3, #0]
  return result;
 80033a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_RCC_OscConfig+0xd4c>
 80033c2:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_RCC_OscConfig+0xe0c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	e01b      	b.n	8003400 <HAL_RCC_OscConfig+0xd84>
 80033c8:	f107 0320 	add.w	r3, r7, #32
 80033cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f107 0320 	add.w	r3, r7, #32
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f107 031c 	add.w	r3, r7, #28
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	f107 0318 	add.w	r3, r7, #24
 80033e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f107 0318 	add.w	r3, r7, #24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	fa93 f2a3 	rbit	r2, r3
 80033f6:	f107 0314 	add.w	r3, r7, #20
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_OscConfig+0xe0c>)
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f107 0210 	add.w	r2, r7, #16
 8003404:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003408:	6011      	str	r1, [r2, #0]
 800340a:	f107 0210 	add.w	r2, r7, #16
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	fa92 f1a2 	rbit	r1, r2
 8003414:	f107 020c 	add.w	r2, r7, #12
 8003418:	6011      	str	r1, [r2, #0]
  return result;
 800341a:	f107 020c 	add.w	r2, r7, #12
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f042 0220 	orr.w	r2, r2, #32
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f002 021f 	and.w	r2, r2, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d19e      	bne.n	800337a <HAL_RCC_OscConfig+0xcfe>
 800343c:	e01e      	b.n	800347c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e018      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_RCC_OscConfig+0xe0c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003454:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003458:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	429a      	cmp	r2, r3
 8003464:	d108      	bne.n	8003478 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003466:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800346a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000

0800348c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b09e      	sub	sp, #120	; 0x78
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e162      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b90      	ldr	r3, [pc, #576]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d910      	bls.n	80034d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b8d      	ldr	r3, [pc, #564]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 0207 	bic.w	r2, r3, #7
 80034ba:	498b      	ldr	r1, [pc, #556]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e14a      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e0:	4b82      	ldr	r3, [pc, #520]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	497f      	ldr	r1, [pc, #508]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80dc 	beq.w	80036b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d13c      	bne.n	8003582 <HAL_RCC_ClockConfig+0xf6>
 8003508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d102      	bne.n	8003532 <HAL_RCC_ClockConfig+0xa6>
 800352c:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	e00f      	b.n	8003552 <HAL_RCC_ClockConfig+0xc6>
 8003532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003536:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	667b      	str	r3, [r7, #100]	; 0x64
 8003540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003544:	663b      	str	r3, [r7, #96]	; 0x60
 8003546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354e:	4b67      	ldr	r3, [pc, #412]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003556:	65ba      	str	r2, [r7, #88]	; 0x58
 8003558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800355a:	fa92 f2a2 	rbit	r2, r2
 800355e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003562:	fab2 f282 	clz	r2, r2
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f042 0220 	orr.w	r2, r2, #32
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f002 021f 	and.w	r2, r2, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f202 	lsl.w	r2, r1, r2
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d17b      	bne.n	8003676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0f3      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d13c      	bne.n	8003604 <HAL_RCC_ClockConfig+0x178>
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x128>
 80035ae:	4b4f      	ldr	r3, [pc, #316]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_ClockConfig+0x148>
 80035b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	647b      	str	r3, [r7, #68]	; 0x44
 80035c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
 80035c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80035da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035dc:	fa92 f2a2 	rbit	r2, r2
 80035e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e4:	fab2 f282 	clz	r2, r2
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f042 0220 	orr.w	r2, r2, #32
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f002 021f 	and.w	r2, r2, #31
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f202 	lsl.w	r2, r1, r2
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13a      	bne.n	8003676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b2      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
 8003604:	2302      	movs	r3, #2
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <HAL_RCC_ClockConfig+0x1a0>
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	e00d      	b.n	8003648 <HAL_RCC_ClockConfig+0x1bc>
 800362c:	2302      	movs	r3, #2
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	2302      	movs	r3, #2
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2202      	movs	r2, #2
 800364a:	61ba      	str	r2, [r7, #24]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	fa92 f2a2 	rbit	r2, r2
 8003652:	617a      	str	r2, [r7, #20]
  return result;
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e079      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 0203 	bic.w	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	491a      	ldr	r1, [pc, #104]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003688:	f7fd fdea 	bl	8001260 <HAL_GetTick>
 800368c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	f7fd fde6 	bl	8001260 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e061      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_RCC_ClockConfig+0x260>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 020c 	and.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1eb      	bne.n	8003690 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d214      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 0207 	bic.w	r2, r3, #7
 80036ce:	4906      	ldr	r1, [pc, #24]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <HAL_RCC_ClockConfig+0x25c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e040      	b.n	800376a <HAL_RCC_ClockConfig+0x2de>
 80036e8:	40022000 	.word	0x40022000
 80036ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	491a      	ldr	r1, [pc, #104]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4912      	ldr	r1, [pc, #72]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800372e:	f000 f829 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003732:	4601      	mov	r1, r0
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_RCC_ClockConfig+0x2e8>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373c:	22f0      	movs	r2, #240	; 0xf0
 800373e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	60fa      	str	r2, [r7, #12]
  return result;
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	fab2 f282 	clz	r2, r2
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	40d3      	lsrs	r3, r2
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x2ec>)
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	fa21 f303 	lsr.w	r3, r1, r3
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_RCC_ClockConfig+0x2f0>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_RCC_ClockConfig+0x2f4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fd38 	bl	80011d8 <HAL_InitTick>
  
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3778      	adds	r7, #120	; 0x78
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	08007a9c 	.word	0x08007a9c
 800377c:	200002b4 	.word	0x200002b4
 8003780:	200002b8 	.word	0x200002b8

08003784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b08b      	sub	sp, #44	; 0x2c
 8003788:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x36>
 80037b2:	e03c      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037b6:	623b      	str	r3, [r7, #32]
      break;
 80037b8:	e03c      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80037c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	fa92 f2a2 	rbit	r2, r2
 80037cc:	607a      	str	r2, [r7, #4]
  return result;
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	fab2 f282 	clz	r2, r2
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	40d3      	lsrs	r3, r2
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <HAL_RCC_GetSysClockFreq+0xc8>)
 80037da:	5cd3      	ldrb	r3, [r2, r3]
 80037dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	220f      	movs	r2, #15
 80037e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	fa92 f2a2 	rbit	r2, r2
 80037f0:	60fa      	str	r2, [r7, #12]
  return result;
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	fab2 f282 	clz	r2, r2
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	40d3      	lsrs	r3, r2
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <HAL_RCC_GetSysClockFreq+0xc4>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	fbb2 f2f3 	udiv	r2, r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	e004      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	623b      	str	r3, [r7, #32]
      break;
 800382c:	e002      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003830:	623b      	str	r3, [r7, #32]
      break;
 8003832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003834:	6a3b      	ldr	r3, [r7, #32]
}
 8003836:	4618      	mov	r0, r3
 8003838:	372c      	adds	r7, #44	; 0x2c
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	007a1200 	.word	0x007a1200
 800384c:	08007ab4 	.word	0x08007ab4
 8003850:	08007ac4 	.word	0x08007ac4
 8003854:	003d0900 	.word	0x003d0900

08003858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_RCC_GetHCLKFreq+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	200002b4 	.word	0x200002b4

08003870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003876:	f7ff ffef 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 800387a:	4601      	mov	r1, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003884:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003888:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	fa92 f2a2 	rbit	r2, r2
 8003890:	603a      	str	r2, [r7, #0]
  return result;
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	fab2 f282 	clz	r2, r2
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	40d3      	lsrs	r3, r2
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08007aac 	.word	0x08007aac

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038ba:	f7ff ffcd 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 80038be:	4601      	mov	r1, r0
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80038c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	fa92 f2a2 	rbit	r2, r2
 80038d4:	603a      	str	r2, [r7, #0]
  return result;
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	fab2 f282 	clz	r2, r2
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	40d3      	lsrs	r3, r2
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08007aac 	.word	0x08007aac

080038f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b092      	sub	sp, #72	; 0x48
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003908:	2300      	movs	r3, #0
 800390a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80d4 	beq.w	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391c:	4b4e      	ldr	r3, [pc, #312]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10e      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4a4a      	ldr	r2, [pc, #296]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003932:	61d3      	str	r3, [r2, #28]
 8003934:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b45      	ldr	r3, [pc, #276]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003952:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a41      	ldr	r2, [pc, #260]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395e:	f7fd fc7f 	bl	8001260 <HAL_GetTick>
 8003962:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	e008      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fd fc7b 	bl	8001260 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b64      	cmp	r3, #100	; 0x64
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e14b      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003984:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8084 	beq.w	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d07c      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	461a      	mov	r2, r3
 80039ce:	2301      	movs	r3, #1
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	461a      	mov	r2, r3
 80039f2:	2300      	movs	r3, #0
 80039f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039f6:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04b      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fd fc2b 	bl	8001260 <HAL_GetTick>
 8003a0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fd fc27 	bl	8001260 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0f5      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003a24:	2302      	movs	r3, #2
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	2302      	movs	r3, #2
 8003a32:	623b      	str	r3, [r7, #32]
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	61fb      	str	r3, [r7, #28]
  return result;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0302 	orr.w	r3, r3, #2
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d108      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a52:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	e00d      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	10908100 	.word	0x10908100
 8003a64:	2302      	movs	r3, #2
 8003a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	2202      	movs	r2, #2
 8003a76:	613a      	str	r2, [r7, #16]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	fa92 f2a2 	rbit	r2, r2
 8003a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	fab2 f282 	clz	r2, r2
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f002 021f 	and.w	r2, r2, #31
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f202 	lsl.w	r2, r1, r2
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0b7      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a9e:	4b5e      	ldr	r3, [pc, #376]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	495b      	ldr	r1, [pc, #364]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b57      	ldr	r3, [pc, #348]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4a56      	ldr	r2, [pc, #344]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ad0:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	f023 0203 	bic.w	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	494e      	ldr	r1, [pc, #312]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aee:	4b4a      	ldr	r3, [pc, #296]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f023 0210 	bic.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4947      	ldr	r1, [pc, #284]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b0c:	4b42      	ldr	r3, [pc, #264]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	493f      	ldr	r1, [pc, #252]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f023 0220 	bic.w	r2, r3, #32
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	4938      	ldr	r1, [pc, #224]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b48:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	4930      	ldr	r1, [pc, #192]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b66:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	4929      	ldr	r1, [pc, #164]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003b84:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4921      	ldr	r1, [pc, #132]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	491a      	ldr	r1, [pc, #104]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bc0:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	4912      	ldr	r1, [pc, #72]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	490b      	ldr	r1, [pc, #44]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3748      	adds	r7, #72	; 0x48
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e049      	b.n	8003cc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd f8f4 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f000 fd26 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d001      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e03b      	b.n	8003d5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x4e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d004      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x4e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_TIM_Base_Start_IT+0xa0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d115      	bne.n	8003d46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <HAL_TIM_Base_Start_IT+0xa4>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b06      	cmp	r3, #6
 8003d2a:	d015      	beq.n	8003d58 <HAL_TIM_Base_Start_IT+0x8c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d32:	d011      	beq.n	8003d58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	e008      	b.n	8003d58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e000      	b.n	8003d5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	00010007 	.word	0x00010007

08003d74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10f      	bne.n	8003dbc <HAL_TIM_Base_Stop_IT+0x48>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a1a      	ldr	r2, [r3, #32]
 8003da2:	f240 4344 	movw	r3, #1092	; 0x444
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_Base_Stop_IT+0x48>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e049      	b.n	8003e78 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f841 	bl	8003e80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4610      	mov	r0, r2
 8003e12:	f000 fc4b 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_TIM_PWM_Start+0x24>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e03c      	b.n	8003f32 <HAL_TIM_PWM_Start+0x9e>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d109      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0x3e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	e02f      	b.n	8003f32 <HAL_TIM_PWM_Start+0x9e>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d109      	bne.n	8003eec <HAL_TIM_PWM_Start+0x58>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e022      	b.n	8003f32 <HAL_TIM_PWM_Start+0x9e>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d109      	bne.n	8003f06 <HAL_TIM_PWM_Start+0x72>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	bf14      	ite	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	2300      	moveq	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	e015      	b.n	8003f32 <HAL_TIM_PWM_Start+0x9e>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d109      	bne.n	8003f20 <HAL_TIM_PWM_Start+0x8c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e008      	b.n	8003f32 <HAL_TIM_PWM_Start+0x9e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e083      	b.n	8004042 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <HAL_TIM_PWM_Start+0xb6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f48:	e023      	b.n	8003f92 <HAL_TIM_PWM_Start+0xfe>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d104      	bne.n	8003f5a <HAL_TIM_PWM_Start+0xc6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f58:	e01b      	b.n	8003f92 <HAL_TIM_PWM_Start+0xfe>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_PWM_Start+0xd6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	e013      	b.n	8003f92 <HAL_TIM_PWM_Start+0xfe>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Start+0xe6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f78:	e00b      	b.n	8003f92 <HAL_TIM_PWM_Start+0xfe>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start+0xf6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f88:	e003      	b.n	8003f92 <HAL_TIM_PWM_Start+0xfe>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 ff34 	bl	8004e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <HAL_TIM_PWM_Start+0x1b8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_TIM_PWM_Start+0x134>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a28      	ldr	r2, [pc, #160]	; (8004050 <HAL_TIM_PWM_Start+0x1bc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_TIM_PWM_Start+0x134>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a26      	ldr	r2, [pc, #152]	; (8004054 <HAL_TIM_PWM_Start+0x1c0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIM_PWM_Start+0x134>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a25      	ldr	r2, [pc, #148]	; (8004058 <HAL_TIM_PWM_Start+0x1c4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIM_PWM_Start+0x138>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_TIM_PWM_Start+0x13a>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_TIM_PWM_Start+0x1b8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d009      	beq.n	8004000 <HAL_TIM_PWM_Start+0x16c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d004      	beq.n	8004000 <HAL_TIM_PWM_Start+0x16c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a15      	ldr	r2, [pc, #84]	; (8004050 <HAL_TIM_PWM_Start+0x1bc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d115      	bne.n	800402c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_TIM_PWM_Start+0x1c8>)
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b06      	cmp	r3, #6
 8004010:	d015      	beq.n	800403e <HAL_TIM_PWM_Start+0x1aa>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004018:	d011      	beq.n	800403e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	e008      	b.n	800403e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e000      	b.n	8004040 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40014000 	.word	0x40014000
 8004054:	40014400 	.word	0x40014400
 8004058:	40014800 	.word	0x40014800
 800405c:	00010007 	.word	0x00010007

08004060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0202 	mvn.w	r2, #2
 800408c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fae3 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fad5 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fae6 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d122      	bne.n	8004110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d11b      	bne.n	8004110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0204 	mvn.w	r2, #4
 80040e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fab9 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 faab 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fabc 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b08      	cmp	r3, #8
 800411c:	d122      	bne.n	8004164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d11b      	bne.n	8004164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0208 	mvn.w	r2, #8
 8004134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2204      	movs	r2, #4
 800413a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa8f 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fa81 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fa92 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b10      	cmp	r3, #16
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b10      	cmp	r3, #16
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0210 	mvn.w	r2, #16
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2208      	movs	r2, #8
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa65 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa57 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa68 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10e      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d107      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0201 	mvn.w	r2, #1
 80041dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fc faee 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b80      	cmp	r3, #128	; 0x80
 80041f0:	d10e      	bne.n	8004210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d107      	bne.n	8004210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 ff0a 	bl	8005024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421e:	d10e      	bne.n	800423e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b80      	cmp	r3, #128	; 0x80
 800422c:	d107      	bne.n	800423e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fefd 	bl	8005038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d10e      	bne.n	800426a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d107      	bne.n	800426a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fa16 	bl	8004696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b20      	cmp	r3, #32
 8004276:	d10e      	bne.n	8004296 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b20      	cmp	r3, #32
 8004284:	d107      	bne.n	8004296 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f06f 0220 	mvn.w	r2, #32
 800428e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 febd 	bl	8005010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0ff      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b14      	cmp	r3, #20
 80042ca:	f200 80f0 	bhi.w	80044ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	08004329 	.word	0x08004329
 80042d8:	080044af 	.word	0x080044af
 80042dc:	080044af 	.word	0x080044af
 80042e0:	080044af 	.word	0x080044af
 80042e4:	08004369 	.word	0x08004369
 80042e8:	080044af 	.word	0x080044af
 80042ec:	080044af 	.word	0x080044af
 80042f0:	080044af 	.word	0x080044af
 80042f4:	080043ab 	.word	0x080043ab
 80042f8:	080044af 	.word	0x080044af
 80042fc:	080044af 	.word	0x080044af
 8004300:	080044af 	.word	0x080044af
 8004304:	080043eb 	.word	0x080043eb
 8004308:	080044af 	.word	0x080044af
 800430c:	080044af 	.word	0x080044af
 8004310:	080044af 	.word	0x080044af
 8004314:	0800442d 	.word	0x0800442d
 8004318:	080044af 	.word	0x080044af
 800431c:	080044af 	.word	0x080044af
 8004320:	080044af 	.word	0x080044af
 8004324:	0800446d 	.word	0x0800446d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fa2a 	bl	8004788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0208 	orr.w	r2, r2, #8
 8004342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0204 	bic.w	r2, r2, #4
 8004352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6999      	ldr	r1, [r3, #24]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	619a      	str	r2, [r3, #24]
      break;
 8004366:	e0a5      	b.n	80044b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fa90 	bl	8004894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6999      	ldr	r1, [r3, #24]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	021a      	lsls	r2, r3, #8
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	619a      	str	r2, [r3, #24]
      break;
 80043a8:	e084      	b.n	80044b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 faef 	bl	8004994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0208 	orr.w	r2, r2, #8
 80043c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0204 	bic.w	r2, r2, #4
 80043d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69d9      	ldr	r1, [r3, #28]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	61da      	str	r2, [r3, #28]
      break;
 80043e8:	e064      	b.n	80044b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fb4d 	bl	8004a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	021a      	lsls	r2, r3, #8
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	61da      	str	r2, [r3, #28]
      break;
 800442a:	e043      	b.n	80044b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fb90 	bl	8004b58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0208 	orr.w	r2, r2, #8
 8004446:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0204 	bic.w	r2, r2, #4
 8004456:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800446a:	e023      	b.n	80044b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fbce 	bl	8004c14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	021a      	lsls	r2, r3, #8
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044ac:	e002      	b.n	80044b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
      break;
 80044b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop

080044c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_TIM_ConfigClockSource+0x1c>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e0b6      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x18a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004520:	d03e      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0xd8>
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004526:	f200 8087 	bhi.w	8004638 <HAL_TIM_ConfigClockSource+0x170>
 800452a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452e:	f000 8086 	beq.w	800463e <HAL_TIM_ConfigClockSource+0x176>
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d87f      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x170>
 8004538:	2b70      	cmp	r3, #112	; 0x70
 800453a:	d01a      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xaa>
 800453c:	2b70      	cmp	r3, #112	; 0x70
 800453e:	d87b      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x170>
 8004540:	2b60      	cmp	r3, #96	; 0x60
 8004542:	d050      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x11e>
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d877      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x170>
 8004548:	2b50      	cmp	r3, #80	; 0x50
 800454a:	d03c      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0xfe>
 800454c:	2b50      	cmp	r3, #80	; 0x50
 800454e:	d873      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x170>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d058      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x13e>
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d86f      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x170>
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d064      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15e>
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d86b      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x170>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d060      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15e>
 8004564:	2b20      	cmp	r3, #32
 8004566:	d867      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x170>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d05c      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15e>
 800456c:	2b10      	cmp	r3, #16
 800456e:	d05a      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15e>
 8004570:	e062      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6899      	ldr	r1, [r3, #8]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f000 fc21 	bl	8004dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	609a      	str	r2, [r3, #8]
      break;
 800459e:	e04f      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6899      	ldr	r1, [r3, #8]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f000 fc0a 	bl	8004dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045c2:	609a      	str	r2, [r3, #8]
      break;
 80045c4:	e03c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 fb7e 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2150      	movs	r1, #80	; 0x50
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fbd7 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 80045e4:	e02c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 fb9d 	bl	8004d32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2160      	movs	r1, #96	; 0x60
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fbc7 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004604:	e01c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	461a      	mov	r2, r3
 8004614:	f000 fb5e 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2140      	movs	r1, #64	; 0x40
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fbb7 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004624:	e00c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f000 fbae 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004636:	e003      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e000      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800463e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <TIM_Base_SetConfig+0xcc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_Base_SetConfig+0x20>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ca:	d108      	bne.n	80046de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a25      	ldr	r2, [pc, #148]	; (8004778 <TIM_Base_SetConfig+0xcc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_Base_SetConfig+0x5a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d00b      	beq.n	8004706 <TIM_Base_SetConfig+0x5a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a22      	ldr	r2, [pc, #136]	; (800477c <TIM_Base_SetConfig+0xd0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_Base_SetConfig+0x5a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a21      	ldr	r2, [pc, #132]	; (8004780 <TIM_Base_SetConfig+0xd4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_Base_SetConfig+0x5a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a20      	ldr	r2, [pc, #128]	; (8004784 <TIM_Base_SetConfig+0xd8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <TIM_Base_SetConfig+0xcc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0xb0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0d      	ldr	r2, [pc, #52]	; (800477c <TIM_Base_SetConfig+0xd0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a0c      	ldr	r2, [pc, #48]	; (8004780 <TIM_Base_SetConfig+0xd4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0xb0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a0b      	ldr	r2, [pc, #44]	; (8004784 <TIM_Base_SetConfig+0xd8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d103      	bne.n	8004764 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	615a      	str	r2, [r3, #20]
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 0302 	bic.w	r3, r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a28      	ldr	r2, [pc, #160]	; (8004884 <TIM_OC1_SetConfig+0xfc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00b      	beq.n	8004800 <TIM_OC1_SetConfig+0x78>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a27      	ldr	r2, [pc, #156]	; (8004888 <TIM_OC1_SetConfig+0x100>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_OC1_SetConfig+0x78>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a26      	ldr	r2, [pc, #152]	; (800488c <TIM_OC1_SetConfig+0x104>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC1_SetConfig+0x78>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a25      	ldr	r2, [pc, #148]	; (8004890 <TIM_OC1_SetConfig+0x108>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10c      	bne.n	800481a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0308 	bic.w	r3, r3, #8
 8004806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <TIM_OC1_SetConfig+0xfc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00b      	beq.n	800483a <TIM_OC1_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a18      	ldr	r2, [pc, #96]	; (8004888 <TIM_OC1_SetConfig+0x100>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <TIM_OC1_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a17      	ldr	r2, [pc, #92]	; (800488c <TIM_OC1_SetConfig+0x104>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_OC1_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a16      	ldr	r2, [pc, #88]	; (8004890 <TIM_OC1_SetConfig+0x108>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d111      	bne.n	800485e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0210 	bic.w	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0320 	bic.w	r3, r3, #32
 80048e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a24      	ldr	r2, [pc, #144]	; (8004984 <TIM_OC2_SetConfig+0xf0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10d      	bne.n	8004914 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1b      	ldr	r2, [pc, #108]	; (8004984 <TIM_OC2_SetConfig+0xf0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_OC2_SetConfig+0xa0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <TIM_OC2_SetConfig+0xf4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_OC2_SetConfig+0xa0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a19      	ldr	r2, [pc, #100]	; (800498c <TIM_OC2_SetConfig+0xf8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_OC2_SetConfig+0xa0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <TIM_OC2_SetConfig+0xfc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d113      	bne.n	800495c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004942:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40014000 	.word	0x40014000
 800498c:	40014400 	.word	0x40014400
 8004990:	40014800 	.word	0x40014800

08004994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <TIM_OC3_SetConfig+0xec>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10d      	bne.n	8004a12 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1a      	ldr	r2, [pc, #104]	; (8004a80 <TIM_OC3_SetConfig+0xec>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00b      	beq.n	8004a32 <TIM_OC3_SetConfig+0x9e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <TIM_OC3_SetConfig+0xf0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d007      	beq.n	8004a32 <TIM_OC3_SetConfig+0x9e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <TIM_OC3_SetConfig+0xf4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_OC3_SetConfig+0x9e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <TIM_OC3_SetConfig+0xf8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d113      	bne.n	8004a5a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	031b      	lsls	r3, r3, #12
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <TIM_OC4_SetConfig+0xb8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_OC4_SetConfig+0x7c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <TIM_OC4_SetConfig+0xbc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_OC4_SetConfig+0x7c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <TIM_OC4_SetConfig+0xc0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC4_SetConfig+0x7c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <TIM_OC4_SetConfig+0xc4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400
 8004b54:	40014800 	.word	0x40014800

08004b58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <TIM_OC5_SetConfig+0xac>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <TIM_OC5_SetConfig+0x72>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <TIM_OC5_SetConfig+0xb0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_OC5_SetConfig+0x72>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <TIM_OC5_SetConfig+0xb4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_OC5_SetConfig+0x72>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <TIM_OC5_SetConfig+0xb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d109      	bne.n	8004bde <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40014400 	.word	0x40014400
 8004c10:	40014800 	.word	0x40014800

08004c14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <TIM_OC6_SetConfig+0xb0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_OC6_SetConfig+0x74>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <TIM_OC6_SetConfig+0xb4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_OC6_SetConfig+0x74>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <TIM_OC6_SetConfig+0xb8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_OC6_SetConfig+0x74>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <TIM_OC6_SetConfig+0xbc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d109      	bne.n	8004c9c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	029b      	lsls	r3, r3, #10
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 030a 	bic.w	r3, r3, #10
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b087      	sub	sp, #28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0210 	bic.w	r2, r3, #16
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	031b      	lsls	r3, r3, #12
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f043 0307 	orr.w	r3, r3, #7
 8004db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	021a      	lsls	r2, r3, #8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1a      	ldr	r2, [r3, #32]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e04f      	b.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d004      	beq.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a10      	ldr	r2, [pc, #64]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40014000 	.word	0x40014000

08004f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e060      	b.n	8004ffe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a14      	ldr	r2, [pc, #80]	; (800500c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d115      	bne.n	8004fec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	051b      	lsls	r3, r3, #20
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00

08005010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e040      	b.n	80050e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fb ff4e 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	; 0x24
 8005078:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fc00 	bl	8005890 <UART_SetConfig>
 8005090:	4603      	mov	r3, r0
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e022      	b.n	80050e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fd2a 	bl	8005afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fdb1 	bl	8005c40 <UART_CheckIdleState>
 80050de:	4603      	mov	r3, r0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d178      	bne.n	80051f2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_UART_Transmit+0x24>
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e071      	b.n	80051f4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2221      	movs	r2, #33	; 0x21
 800511c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800511e:	f7fc f89f 	bl	8001260 <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d108      	bne.n	8005150 <HAL_UART_Transmit+0x68>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	e003      	b.n	8005158 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005158:	e030      	b.n	80051bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	2180      	movs	r1, #128	; 0x80
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fe13 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e03c      	b.n	80051f4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	881a      	ldrh	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800518c:	b292      	uxth	r2, r2
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	3302      	adds	r3, #2
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	e008      	b.n	80051aa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	b292      	uxth	r2, r2
 80051a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1c8      	bne.n	800515a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	2140      	movs	r1, #64	; 0x40
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fddc 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e005      	b.n	80051f4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005210:	2b20      	cmp	r3, #32
 8005212:	d132      	bne.n	800527a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_UART_Receive_IT+0x24>
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e02b      	b.n	800527c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d018      	beq.n	800526a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	613b      	str	r3, [r7, #16]
   return(result);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	623b      	str	r3, [r7, #32]
 8005258:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	69f9      	ldr	r1, [r7, #28]
 800525c:	6a3a      	ldr	r2, [r7, #32]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	61bb      	str	r3, [r7, #24]
   return(result);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e6      	bne.n	8005238 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	461a      	mov	r2, r3
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fdf5 	bl	8005e60 <UART_Start_Receive_IT>
 8005276:	4603      	mov	r3, r0
 8005278:	e000      	b.n	800527c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b0ba      	sub	sp, #232	; 0xe8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80052ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80052b2:	4013      	ands	r3, r2
 80052b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d115      	bne.n	80052ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00f      	beq.n	80052ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 82ab 	beq.w	8005838 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	4798      	blx	r3
      }
      return;
 80052ea:	e2a5      	b.n	8005838 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8117 	beq.w	8005524 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005302:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005306:	4b85      	ldr	r3, [pc, #532]	; (800551c <HAL_UART_IRQHandler+0x298>)
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 810a 	beq.w	8005524 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d011      	beq.n	8005340 <HAL_UART_IRQHandler+0xbc>
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d011      	beq.n	8005370 <HAL_UART_IRQHandler+0xec>
 800534c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2202      	movs	r2, #2
 800535e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005366:	f043 0204 	orr.w	r2, r3, #4
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d011      	beq.n	80053a0 <HAL_UART_IRQHandler+0x11c>
 800537c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2204      	movs	r2, #4
 800538e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005396:	f043 0202 	orr.w	r2, r3, #2
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a4:	f003 0308 	and.w	r3, r3, #8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d017      	beq.n	80053dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00b      	beq.n	80053dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2208      	movs	r2, #8
 80053ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d2:	f043 0208 	orr.w	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d012      	beq.n	800540e <HAL_UART_IRQHandler+0x18a>
 80053e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8211 	beq.w	800583c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b40      	cmp	r3, #64	; 0x40
 8005458:	d005      	beq.n	8005466 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800545a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800545e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005462:	2b00      	cmp	r3, #0
 8005464:	d04f      	beq.n	8005506 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fdc0 	bl	8005fec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b40      	cmp	r3, #64	; 0x40
 8005478:	d141      	bne.n	80054fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3308      	adds	r3, #8
 8005480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1d9      	bne.n	800547a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d013      	beq.n	80054f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d2:	4a13      	ldr	r2, [pc, #76]	; (8005520 <HAL_UART_IRQHandler+0x29c>)
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fc feec 	bl	80022b8 <HAL_DMA_Abort_IT>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054f0:	4610      	mov	r0, r2
 80054f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	e00f      	b.n	8005516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f9b4 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	e00b      	b.n	8005516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f9b0 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	e007      	b.n	8005516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f9ac 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005514:	e192      	b.n	800583c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005516:	bf00      	nop
    return;
 8005518:	e190      	b.n	800583c <HAL_UART_IRQHandler+0x5b8>
 800551a:	bf00      	nop
 800551c:	04000120 	.word	0x04000120
 8005520:	080060b5 	.word	0x080060b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	2b01      	cmp	r3, #1
 800552a:	f040 814b 	bne.w	80057c4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8144 	beq.w	80057c4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800553c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 813d 	beq.w	80057c4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	f040 80b5 	bne.w	80056cc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800556e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8164 	beq.w	8005840 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800557e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005582:	429a      	cmp	r2, r3
 8005584:	f080 815c 	bcs.w	8005840 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800558e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b20      	cmp	r3, #32
 800559a:	f000 8086 	beq.w	80056aa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1da      	bne.n	800559e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3308      	adds	r3, #8
 80055ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800560c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005610:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005614:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800561e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e1      	bne.n	80055e8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3308      	adds	r3, #8
 800562a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005648:	66fa      	str	r2, [r7, #108]	; 0x6c
 800564a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800564e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e3      	bne.n	8005624 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567a:	f023 0310 	bic.w	r3, r3, #16
 800567e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800568c:	65bb      	str	r3, [r7, #88]	; 0x58
 800568e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800569a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e4      	bne.n	800566a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fc fdce 	bl	8002246 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056bc:	b29b      	uxth	r3, r3
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8d7 	bl	8005878 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056ca:	e0b9      	b.n	8005840 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80ab 	beq.w	8005844 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80056ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80a6 	beq.w	8005844 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800570c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800571a:	647b      	str	r3, [r7, #68]	; 0x44
 800571c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e4      	bne.n	80056f8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	623b      	str	r3, [r7, #32]
   return(result);
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005752:	633a      	str	r2, [r7, #48]	; 0x30
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e3      	bne.n	800572e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	60fb      	str	r3, [r7, #12]
   return(result);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0310 	bic.w	r3, r3, #16
 800578e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800579c:	61fb      	str	r3, [r7, #28]
 800579e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	69b9      	ldr	r1, [r7, #24]
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	617b      	str	r3, [r7, #20]
   return(result);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e4      	bne.n	800577a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f85b 	bl	8005878 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057c2:	e03f      	b.n	8005844 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00e      	beq.n	80057ee <HAL_UART_IRQHandler+0x56a>
 80057d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fe4c 	bl	8006484 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057ec:	e02d      	b.n	800584a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01c      	beq.n	8005848 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
    }
    return;
 8005816:	e017      	b.n	8005848 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <HAL_UART_IRQHandler+0x5c6>
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fc55 	bl	80060e0 <UART_EndTransmit_IT>
    return;
 8005836:	e008      	b.n	800584a <HAL_UART_IRQHandler+0x5c6>
      return;
 8005838:	bf00      	nop
 800583a:	e006      	b.n	800584a <HAL_UART_IRQHandler+0x5c6>
    return;
 800583c:	bf00      	nop
 800583e:	e004      	b.n	800584a <HAL_UART_IRQHandler+0x5c6>
      return;
 8005840:	bf00      	nop
 8005842:	e002      	b.n	800584a <HAL_UART_IRQHandler+0x5c6>
      return;
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <HAL_UART_IRQHandler+0x5c6>
    return;
 8005848:	bf00      	nop
  }

}
 800584a:	37e8      	adds	r7, #232	; 0xe8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b8a      	ldr	r3, [pc, #552]	; (8005ae4 <UART_SetConfig+0x254>)
 80058bc:	4013      	ands	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	6979      	ldr	r1, [r7, #20]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a78      	ldr	r2, [pc, #480]	; (8005ae8 <UART_SetConfig+0x258>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d120      	bne.n	800594e <UART_SetConfig+0xbe>
 800590c:	4b77      	ldr	r3, [pc, #476]	; (8005aec <UART_SetConfig+0x25c>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	2b03      	cmp	r3, #3
 8005916:	d817      	bhi.n	8005948 <UART_SetConfig+0xb8>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <UART_SetConfig+0x90>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	08005931 	.word	0x08005931
 8005924:	0800593d 	.word	0x0800593d
 8005928:	08005943 	.word	0x08005943
 800592c:	08005937 	.word	0x08005937
 8005930:	2300      	movs	r3, #0
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e01d      	b.n	8005972 <UART_SetConfig+0xe2>
 8005936:	2302      	movs	r3, #2
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	e01a      	b.n	8005972 <UART_SetConfig+0xe2>
 800593c:	2304      	movs	r3, #4
 800593e:	77fb      	strb	r3, [r7, #31]
 8005940:	e017      	b.n	8005972 <UART_SetConfig+0xe2>
 8005942:	2308      	movs	r3, #8
 8005944:	77fb      	strb	r3, [r7, #31]
 8005946:	e014      	b.n	8005972 <UART_SetConfig+0xe2>
 8005948:	2310      	movs	r3, #16
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e011      	b.n	8005972 <UART_SetConfig+0xe2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a67      	ldr	r2, [pc, #412]	; (8005af0 <UART_SetConfig+0x260>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d102      	bne.n	800595e <UART_SetConfig+0xce>
 8005958:	2300      	movs	r3, #0
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e009      	b.n	8005972 <UART_SetConfig+0xe2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a64      	ldr	r2, [pc, #400]	; (8005af4 <UART_SetConfig+0x264>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d102      	bne.n	800596e <UART_SetConfig+0xde>
 8005968:	2300      	movs	r3, #0
 800596a:	77fb      	strb	r3, [r7, #31]
 800596c:	e001      	b.n	8005972 <UART_SetConfig+0xe2>
 800596e:	2310      	movs	r3, #16
 8005970:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597a:	d15a      	bne.n	8005a32 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800597c:	7ffb      	ldrb	r3, [r7, #31]
 800597e:	2b08      	cmp	r3, #8
 8005980:	d827      	bhi.n	80059d2 <UART_SetConfig+0x142>
 8005982:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0xf8>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059ad 	.word	0x080059ad
 800598c:	080059b5 	.word	0x080059b5
 8005990:	080059bd 	.word	0x080059bd
 8005994:	080059d3 	.word	0x080059d3
 8005998:	080059c3 	.word	0x080059c3
 800599c:	080059d3 	.word	0x080059d3
 80059a0:	080059d3 	.word	0x080059d3
 80059a4:	080059d3 	.word	0x080059d3
 80059a8:	080059cb 	.word	0x080059cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ac:	f7fd ff60 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 80059b0:	61b8      	str	r0, [r7, #24]
        break;
 80059b2:	e013      	b.n	80059dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b4:	f7fd ff7e 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 80059b8:	61b8      	str	r0, [r7, #24]
        break;
 80059ba:	e00f      	b.n	80059dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059bc:	4b4e      	ldr	r3, [pc, #312]	; (8005af8 <UART_SetConfig+0x268>)
 80059be:	61bb      	str	r3, [r7, #24]
        break;
 80059c0:	e00c      	b.n	80059dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c2:	f7fd fedf 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 80059c6:	61b8      	str	r0, [r7, #24]
        break;
 80059c8:	e008      	b.n	80059dc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ce:	61bb      	str	r3, [r7, #24]
        break;
 80059d0:	e004      	b.n	80059dc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	77bb      	strb	r3, [r7, #30]
        break;
 80059da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d074      	beq.n	8005acc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	005a      	lsls	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b0f      	cmp	r3, #15
 80059fc:	d916      	bls.n	8005a2c <UART_SetConfig+0x19c>
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a04:	d212      	bcs.n	8005a2c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f023 030f 	bic.w	r3, r3, #15
 8005a0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	89fa      	ldrh	r2, [r7, #14]
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	e04f      	b.n	8005acc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	77bb      	strb	r3, [r7, #30]
 8005a30:	e04c      	b.n	8005acc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a32:	7ffb      	ldrb	r3, [r7, #31]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d828      	bhi.n	8005a8a <UART_SetConfig+0x1fa>
 8005a38:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <UART_SetConfig+0x1b0>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a6d 	.word	0x08005a6d
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	08005a8b 	.word	0x08005a8b
 8005a50:	08005a7b 	.word	0x08005a7b
 8005a54:	08005a8b 	.word	0x08005a8b
 8005a58:	08005a8b 	.word	0x08005a8b
 8005a5c:	08005a8b 	.word	0x08005a8b
 8005a60:	08005a83 	.word	0x08005a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a64:	f7fd ff04 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 8005a68:	61b8      	str	r0, [r7, #24]
        break;
 8005a6a:	e013      	b.n	8005a94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a6c:	f7fd ff22 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8005a70:	61b8      	str	r0, [r7, #24]
        break;
 8005a72:	e00f      	b.n	8005a94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a74:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <UART_SetConfig+0x268>)
 8005a76:	61bb      	str	r3, [r7, #24]
        break;
 8005a78:	e00c      	b.n	8005a94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a7a:	f7fd fe83 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8005a7e:	61b8      	str	r0, [r7, #24]
        break;
 8005a80:	e008      	b.n	8005a94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a86:	61bb      	str	r3, [r7, #24]
        break;
 8005a88:	e004      	b.n	8005a94 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	77bb      	strb	r3, [r7, #30]
        break;
 8005a92:	bf00      	nop
    }

    if (pclk != 0U)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d018      	beq.n	8005acc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	085a      	lsrs	r2, r3, #1
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	441a      	add	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b0f      	cmp	r3, #15
 8005ab2:	d909      	bls.n	8005ac8 <UART_SetConfig+0x238>
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aba:	d205      	bcs.n	8005ac8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	e001      	b.n	8005acc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ad8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	efff69f3 	.word	0xefff69f3
 8005ae8:	40013800 	.word	0x40013800
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40004400 	.word	0x40004400
 8005af4:	40004800 	.word	0x40004800
 8005af8:	007a1200 	.word	0x007a1200

08005afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01a      	beq.n	8005c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfa:	d10a      	bne.n	8005c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]
  }
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b098      	sub	sp, #96	; 0x60
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c50:	f7fb fb06 	bl	8001260 <HAL_GetTick>
 8005c54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d12e      	bne.n	8005cc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f88c 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d021      	beq.n	8005cc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c92:	653b      	str	r3, [r7, #80]	; 0x50
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e6      	bne.n	8005c7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e062      	b.n	8005d88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d149      	bne.n	8005d64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f856 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d03c      	beq.n	8005d64 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
 8005d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e6      	bne.n	8005cea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d3c:	61fa      	str	r2, [r7, #28]
 8005d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	69b9      	ldr	r1, [r7, #24]
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	617b      	str	r3, [r7, #20]
   return(result);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e5      	bne.n	8005d1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e011      	b.n	8005d88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3758      	adds	r7, #88	; 0x58
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da0:	e049      	b.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d045      	beq.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005daa:	f7fb fa59 	bl	8001260 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e048      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d031      	beq.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d110      	bne.n	8005e02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2208      	movs	r2, #8
 8005de6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f8ff 	bl	8005fec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2208      	movs	r2, #8
 8005df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e029      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e10:	d111      	bne.n	8005e36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f8e5 	bl	8005fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e00f      	b.n	8005e56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d0a6      	beq.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b097      	sub	sp, #92	; 0x5c
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e92:	d10e      	bne.n	8005eb2 <UART_Start_Receive_IT+0x52>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <UART_Start_Receive_IT+0x48>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ea6:	e02d      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	22ff      	movs	r2, #255	; 0xff
 8005eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb0:	e028      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10d      	bne.n	8005ed6 <UART_Start_Receive_IT+0x76>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <UART_Start_Receive_IT+0x6c>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	22ff      	movs	r2, #255	; 0xff
 8005ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eca:	e01b      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	227f      	movs	r2, #127	; 0x7f
 8005ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ed4:	e016      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ede:	d10d      	bne.n	8005efc <UART_Start_Receive_IT+0x9c>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <UART_Start_Receive_IT+0x92>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	227f      	movs	r2, #127	; 0x7f
 8005eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ef0:	e008      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	223f      	movs	r2, #63	; 0x3f
 8005ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005efa:	e003      	b.n	8005f04 <UART_Start_Receive_IT+0xa4>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2222      	movs	r2, #34	; 0x22
 8005f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3308      	adds	r3, #8
 8005f32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f34:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e5      	bne.n	8005f14 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f50:	d107      	bne.n	8005f62 <UART_Start_Receive_IT+0x102>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <UART_Start_Receive_IT+0x184>)
 8005f5e:	669a      	str	r2, [r3, #104]	; 0x68
 8005f60:	e002      	b.n	8005f68 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <UART_Start_Receive_IT+0x188>)
 8005f66:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d019      	beq.n	8005fa4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e6      	bne.n	8005f70 <UART_Start_Receive_IT+0x110>
 8005fa2:	e018      	b.n	8005fd6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f043 0320 	orr.w	r3, r3, #32
 8005fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	69f9      	ldr	r1, [r7, #28]
 8005fc8:	6a3a      	ldr	r2, [r7, #32]
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e6      	bne.n	8005fa4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	375c      	adds	r7, #92	; 0x5c
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	080062dd 	.word	0x080062dd
 8005fe8:	08006135 	.word	0x08006135

08005fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b095      	sub	sp, #84	; 0x54
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006012:	643b      	str	r3, [r7, #64]	; 0x40
 8006014:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e6      	bne.n	8005ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	61fb      	str	r3, [r7, #28]
   return(result);
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	64bb      	str	r3, [r7, #72]	; 0x48
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3308      	adds	r3, #8
 8006044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800604c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e5      	bne.n	8006026 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605e:	2b01      	cmp	r3, #1
 8006060:	d118      	bne.n	8006094 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f023 0310 	bic.w	r3, r3, #16
 8006076:	647b      	str	r3, [r7, #68]	; 0x44
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6979      	ldr	r1, [r7, #20]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	613b      	str	r3, [r7, #16]
   return(result);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e6      	bne.n	8006062 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060a8:	bf00      	nop
 80060aa:	3754      	adds	r7, #84	; 0x54
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff fbc6 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	61fb      	str	r3, [r7, #28]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6979      	ldr	r1, [r7, #20]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	613b      	str	r3, [r7, #16]
   return(result);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e6      	bne.n	80060e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fb92 	bl	8005850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800612c:	bf00      	nop
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b09c      	sub	sp, #112	; 0x70
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006142:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800614c:	2b22      	cmp	r3, #34	; 0x22
 800614e:	f040 80b9 	bne.w	80062c4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006158:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800615c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006160:	b2d9      	uxtb	r1, r3
 8006162:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006166:	b2da      	uxtb	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616c:	400a      	ands	r2, r1
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 809c 	bne.w	80062d4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80061bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e6      	bne.n	800619c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	667b      	str	r3, [r7, #100]	; 0x64
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061ee:	647a      	str	r2, [r7, #68]	; 0x44
 80061f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d018      	beq.n	8006256 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	623b      	str	r3, [r7, #32]
   return(result);
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006238:	663b      	str	r3, [r7, #96]	; 0x60
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006242:	633b      	str	r3, [r7, #48]	; 0x30
 8006244:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e6      	bne.n	8006224 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	2b01      	cmp	r3, #1
 800625c:	d12e      	bne.n	80062bc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	60fb      	str	r3, [r7, #12]
   return(result);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f023 0310 	bic.w	r3, r3, #16
 8006278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	69b9      	ldr	r1, [r7, #24]
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	617b      	str	r3, [r7, #20]
   return(result);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d103      	bne.n	80062ac <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2210      	movs	r2, #16
 80062aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff fadf 	bl	8005878 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062ba:	e00b      	b.n	80062d4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7fa fa2d 	bl	800071c <HAL_UART_RxCpltCallback>
}
 80062c2:	e007      	b.n	80062d4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0208 	orr.w	r2, r2, #8
 80062d2:	619a      	str	r2, [r3, #24]
}
 80062d4:	bf00      	nop
 80062d6:	3770      	adds	r7, #112	; 0x70
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b09c      	sub	sp, #112	; 0x70
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f4:	2b22      	cmp	r3, #34	; 0x22
 80062f6:	f040 80b9 	bne.w	800646c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006300:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800630a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800630e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006312:	4013      	ands	r3, r2
 8006314:	b29a      	uxth	r2, r3
 8006316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006318:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	1c9a      	adds	r2, r3, #2
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 809c 	bne.w	800647c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006358:	667b      	str	r3, [r7, #100]	; 0x64
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006362:	657b      	str	r3, [r7, #84]	; 0x54
 8006364:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e6      	bne.n	8006344 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	663b      	str	r3, [r7, #96]	; 0x60
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006396:	643a      	str	r2, [r7, #64]	; 0x40
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800639c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e5      	bne.n	8006376 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d018      	beq.n	80063fe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e6      	bne.n	80063cc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006402:	2b01      	cmp	r3, #1
 8006404:	d12e      	bne.n	8006464 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	60bb      	str	r3, [r7, #8]
   return(result);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f023 0310 	bic.w	r3, r3, #16
 8006420:	65bb      	str	r3, [r7, #88]	; 0x58
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	613b      	str	r3, [r7, #16]
   return(result);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e6      	bne.n	800640c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d103      	bne.n	8006454 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2210      	movs	r2, #16
 8006452:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fa0b 	bl	8005878 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006462:	e00b      	b.n	800647c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fa f959 	bl	800071c <HAL_UART_RxCpltCallback>
}
 800646a:	e007      	b.n	800647c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0208 	orr.w	r2, r2, #8
 800647a:	619a      	str	r2, [r3, #24]
}
 800647c:	bf00      	nop
 800647e:	3770      	adds	r7, #112	; 0x70
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <atoi>:
 8006498:	220a      	movs	r2, #10
 800649a:	2100      	movs	r1, #0
 800649c:	f000 bce8 	b.w	8006e70 <strtol>

080064a0 <__errno>:
 80064a0:	4b01      	ldr	r3, [pc, #4]	; (80064a8 <__errno+0x8>)
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	200002c0 	.word	0x200002c0

080064ac <__sflush_r>:
 80064ac:	898a      	ldrh	r2, [r1, #12]
 80064ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b2:	4605      	mov	r5, r0
 80064b4:	0710      	lsls	r0, r2, #28
 80064b6:	460c      	mov	r4, r1
 80064b8:	d458      	bmi.n	800656c <__sflush_r+0xc0>
 80064ba:	684b      	ldr	r3, [r1, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc05      	bgt.n	80064cc <__sflush_r+0x20>
 80064c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	dc02      	bgt.n	80064cc <__sflush_r+0x20>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d0f9      	beq.n	80064c6 <__sflush_r+0x1a>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064d8:	682f      	ldr	r7, [r5, #0]
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	d032      	beq.n	8006544 <__sflush_r+0x98>
 80064de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	075a      	lsls	r2, r3, #29
 80064e4:	d505      	bpl.n	80064f2 <__sflush_r+0x46>
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	1ac0      	subs	r0, r0, r3
 80064ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064ec:	b10b      	cbz	r3, 80064f2 <__sflush_r+0x46>
 80064ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064f0:	1ac0      	subs	r0, r0, r3
 80064f2:	2300      	movs	r3, #0
 80064f4:	4602      	mov	r2, r0
 80064f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f8:	6a21      	ldr	r1, [r4, #32]
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b0      	blx	r6
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	d106      	bne.n	8006512 <__sflush_r+0x66>
 8006504:	6829      	ldr	r1, [r5, #0]
 8006506:	291d      	cmp	r1, #29
 8006508:	d82c      	bhi.n	8006564 <__sflush_r+0xb8>
 800650a:	4a2a      	ldr	r2, [pc, #168]	; (80065b4 <__sflush_r+0x108>)
 800650c:	40ca      	lsrs	r2, r1
 800650e:	07d6      	lsls	r6, r2, #31
 8006510:	d528      	bpl.n	8006564 <__sflush_r+0xb8>
 8006512:	2200      	movs	r2, #0
 8006514:	6062      	str	r2, [r4, #4]
 8006516:	04d9      	lsls	r1, r3, #19
 8006518:	6922      	ldr	r2, [r4, #16]
 800651a:	6022      	str	r2, [r4, #0]
 800651c:	d504      	bpl.n	8006528 <__sflush_r+0x7c>
 800651e:	1c42      	adds	r2, r0, #1
 8006520:	d101      	bne.n	8006526 <__sflush_r+0x7a>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	b903      	cbnz	r3, 8006528 <__sflush_r+0x7c>
 8006526:	6560      	str	r0, [r4, #84]	; 0x54
 8006528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652a:	602f      	str	r7, [r5, #0]
 800652c:	2900      	cmp	r1, #0
 800652e:	d0ca      	beq.n	80064c6 <__sflush_r+0x1a>
 8006530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006534:	4299      	cmp	r1, r3
 8006536:	d002      	beq.n	800653e <__sflush_r+0x92>
 8006538:	4628      	mov	r0, r5
 800653a:	f000 f9b1 	bl	80068a0 <_free_r>
 800653e:	2000      	movs	r0, #0
 8006540:	6360      	str	r0, [r4, #52]	; 0x34
 8006542:	e7c1      	b.n	80064c8 <__sflush_r+0x1c>
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	2301      	movs	r3, #1
 8006548:	4628      	mov	r0, r5
 800654a:	47b0      	blx	r6
 800654c:	1c41      	adds	r1, r0, #1
 800654e:	d1c7      	bne.n	80064e0 <__sflush_r+0x34>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0c4      	beq.n	80064e0 <__sflush_r+0x34>
 8006556:	2b1d      	cmp	r3, #29
 8006558:	d001      	beq.n	800655e <__sflush_r+0xb2>
 800655a:	2b16      	cmp	r3, #22
 800655c:	d101      	bne.n	8006562 <__sflush_r+0xb6>
 800655e:	602f      	str	r7, [r5, #0]
 8006560:	e7b1      	b.n	80064c6 <__sflush_r+0x1a>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	e7ad      	b.n	80064c8 <__sflush_r+0x1c>
 800656c:	690f      	ldr	r7, [r1, #16]
 800656e:	2f00      	cmp	r7, #0
 8006570:	d0a9      	beq.n	80064c6 <__sflush_r+0x1a>
 8006572:	0793      	lsls	r3, r2, #30
 8006574:	680e      	ldr	r6, [r1, #0]
 8006576:	bf08      	it	eq
 8006578:	694b      	ldreq	r3, [r1, #20]
 800657a:	600f      	str	r7, [r1, #0]
 800657c:	bf18      	it	ne
 800657e:	2300      	movne	r3, #0
 8006580:	eba6 0807 	sub.w	r8, r6, r7
 8006584:	608b      	str	r3, [r1, #8]
 8006586:	f1b8 0f00 	cmp.w	r8, #0
 800658a:	dd9c      	ble.n	80064c6 <__sflush_r+0x1a>
 800658c:	6a21      	ldr	r1, [r4, #32]
 800658e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006590:	4643      	mov	r3, r8
 8006592:	463a      	mov	r2, r7
 8006594:	4628      	mov	r0, r5
 8006596:	47b0      	blx	r6
 8006598:	2800      	cmp	r0, #0
 800659a:	dc06      	bgt.n	80065aa <__sflush_r+0xfe>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a2:	81a3      	strh	r3, [r4, #12]
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e78e      	b.n	80064c8 <__sflush_r+0x1c>
 80065aa:	4407      	add	r7, r0
 80065ac:	eba8 0800 	sub.w	r8, r8, r0
 80065b0:	e7e9      	b.n	8006586 <__sflush_r+0xda>
 80065b2:	bf00      	nop
 80065b4:	20400001 	.word	0x20400001

080065b8 <_fflush_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	690b      	ldr	r3, [r1, #16]
 80065bc:	4605      	mov	r5, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	b913      	cbnz	r3, 80065c8 <_fflush_r+0x10>
 80065c2:	2500      	movs	r5, #0
 80065c4:	4628      	mov	r0, r5
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	b118      	cbz	r0, 80065d2 <_fflush_r+0x1a>
 80065ca:	6983      	ldr	r3, [r0, #24]
 80065cc:	b90b      	cbnz	r3, 80065d2 <_fflush_r+0x1a>
 80065ce:	f000 f899 	bl	8006704 <__sinit>
 80065d2:	4b14      	ldr	r3, [pc, #80]	; (8006624 <_fflush_r+0x6c>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	d11b      	bne.n	8006610 <_fflush_r+0x58>
 80065d8:	686c      	ldr	r4, [r5, #4]
 80065da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0ef      	beq.n	80065c2 <_fflush_r+0xa>
 80065e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065e4:	07d0      	lsls	r0, r2, #31
 80065e6:	d404      	bmi.n	80065f2 <_fflush_r+0x3a>
 80065e8:	0599      	lsls	r1, r3, #22
 80065ea:	d402      	bmi.n	80065f2 <_fflush_r+0x3a>
 80065ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ee:	f000 f94c 	bl	800688a <__retarget_lock_acquire_recursive>
 80065f2:	4628      	mov	r0, r5
 80065f4:	4621      	mov	r1, r4
 80065f6:	f7ff ff59 	bl	80064ac <__sflush_r>
 80065fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fc:	07da      	lsls	r2, r3, #31
 80065fe:	4605      	mov	r5, r0
 8006600:	d4e0      	bmi.n	80065c4 <_fflush_r+0xc>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	059b      	lsls	r3, r3, #22
 8006606:	d4dd      	bmi.n	80065c4 <_fflush_r+0xc>
 8006608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660a:	f000 f93f 	bl	800688c <__retarget_lock_release_recursive>
 800660e:	e7d9      	b.n	80065c4 <_fflush_r+0xc>
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <_fflush_r+0x70>)
 8006612:	429c      	cmp	r4, r3
 8006614:	d101      	bne.n	800661a <_fflush_r+0x62>
 8006616:	68ac      	ldr	r4, [r5, #8]
 8006618:	e7df      	b.n	80065da <_fflush_r+0x22>
 800661a:	4b04      	ldr	r3, [pc, #16]	; (800662c <_fflush_r+0x74>)
 800661c:	429c      	cmp	r4, r3
 800661e:	bf08      	it	eq
 8006620:	68ec      	ldreq	r4, [r5, #12]
 8006622:	e7da      	b.n	80065da <_fflush_r+0x22>
 8006624:	08007af4 	.word	0x08007af4
 8006628:	08007b14 	.word	0x08007b14
 800662c:	08007ad4 	.word	0x08007ad4

08006630 <fflush>:
 8006630:	4601      	mov	r1, r0
 8006632:	b920      	cbnz	r0, 800663e <fflush+0xe>
 8006634:	4b04      	ldr	r3, [pc, #16]	; (8006648 <fflush+0x18>)
 8006636:	4905      	ldr	r1, [pc, #20]	; (800664c <fflush+0x1c>)
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	f000 b8e1 	b.w	8006800 <_fwalk_reent>
 800663e:	4b04      	ldr	r3, [pc, #16]	; (8006650 <fflush+0x20>)
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	f7ff bfb9 	b.w	80065b8 <_fflush_r>
 8006646:	bf00      	nop
 8006648:	08007b34 	.word	0x08007b34
 800664c:	080065b9 	.word	0x080065b9
 8006650:	200002c0 	.word	0x200002c0

08006654 <std>:
 8006654:	2300      	movs	r3, #0
 8006656:	b510      	push	{r4, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	e9c0 3300 	strd	r3, r3, [r0]
 800665e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006662:	6083      	str	r3, [r0, #8]
 8006664:	8181      	strh	r1, [r0, #12]
 8006666:	6643      	str	r3, [r0, #100]	; 0x64
 8006668:	81c2      	strh	r2, [r0, #14]
 800666a:	6183      	str	r3, [r0, #24]
 800666c:	4619      	mov	r1, r3
 800666e:	2208      	movs	r2, #8
 8006670:	305c      	adds	r0, #92	; 0x5c
 8006672:	f000 f90c 	bl	800688e <memset>
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <std+0x38>)
 8006678:	6263      	str	r3, [r4, #36]	; 0x24
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <std+0x3c>)
 800667c:	62a3      	str	r3, [r4, #40]	; 0x28
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <std+0x40>)
 8006680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <std+0x44>)
 8006684:	6224      	str	r4, [r4, #32]
 8006686:	6323      	str	r3, [r4, #48]	; 0x30
 8006688:	bd10      	pop	{r4, pc}
 800668a:	bf00      	nop
 800668c:	08006cbd 	.word	0x08006cbd
 8006690:	08006cdf 	.word	0x08006cdf
 8006694:	08006d17 	.word	0x08006d17
 8006698:	08006d3b 	.word	0x08006d3b

0800669c <_cleanup_r>:
 800669c:	4901      	ldr	r1, [pc, #4]	; (80066a4 <_cleanup_r+0x8>)
 800669e:	f000 b8af 	b.w	8006800 <_fwalk_reent>
 80066a2:	bf00      	nop
 80066a4:	080065b9 	.word	0x080065b9

080066a8 <__sfmoreglue>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	1e4a      	subs	r2, r1, #1
 80066ac:	2568      	movs	r5, #104	; 0x68
 80066ae:	4355      	muls	r5, r2
 80066b0:	460e      	mov	r6, r1
 80066b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066b6:	f000 f943 	bl	8006940 <_malloc_r>
 80066ba:	4604      	mov	r4, r0
 80066bc:	b140      	cbz	r0, 80066d0 <__sfmoreglue+0x28>
 80066be:	2100      	movs	r1, #0
 80066c0:	e9c0 1600 	strd	r1, r6, [r0]
 80066c4:	300c      	adds	r0, #12
 80066c6:	60a0      	str	r0, [r4, #8]
 80066c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066cc:	f000 f8df 	bl	800688e <memset>
 80066d0:	4620      	mov	r0, r4
 80066d2:	bd70      	pop	{r4, r5, r6, pc}

080066d4 <__sfp_lock_acquire>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__sfp_lock_acquire+0x8>)
 80066d6:	f000 b8d8 	b.w	800688a <__retarget_lock_acquire_recursive>
 80066da:	bf00      	nop
 80066dc:	20000530 	.word	0x20000530

080066e0 <__sfp_lock_release>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__sfp_lock_release+0x8>)
 80066e2:	f000 b8d3 	b.w	800688c <__retarget_lock_release_recursive>
 80066e6:	bf00      	nop
 80066e8:	20000530 	.word	0x20000530

080066ec <__sinit_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__sinit_lock_acquire+0x8>)
 80066ee:	f000 b8cc 	b.w	800688a <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	2000052b 	.word	0x2000052b

080066f8 <__sinit_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__sinit_lock_release+0x8>)
 80066fa:	f000 b8c7 	b.w	800688c <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	2000052b 	.word	0x2000052b

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sinit_lock_acquire>
 800670c:	69a3      	ldr	r3, [r4, #24]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sinit_lock_release>
 8006718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800671c:	6523      	str	r3, [r4, #80]	; 0x50
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <__sinit+0x68>)
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <__sinit+0x6c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	62a2      	str	r2, [r4, #40]	; 0x28
 8006726:	42a3      	cmp	r3, r4
 8006728:	bf04      	itt	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	61a3      	streq	r3, [r4, #24]
 800672e:	4620      	mov	r0, r4
 8006730:	f000 f820 	bl	8006774 <__sfp>
 8006734:	6060      	str	r0, [r4, #4]
 8006736:	4620      	mov	r0, r4
 8006738:	f000 f81c 	bl	8006774 <__sfp>
 800673c:	60a0      	str	r0, [r4, #8]
 800673e:	4620      	mov	r0, r4
 8006740:	f000 f818 	bl	8006774 <__sfp>
 8006744:	2200      	movs	r2, #0
 8006746:	60e0      	str	r0, [r4, #12]
 8006748:	2104      	movs	r1, #4
 800674a:	6860      	ldr	r0, [r4, #4]
 800674c:	f7ff ff82 	bl	8006654 <std>
 8006750:	68a0      	ldr	r0, [r4, #8]
 8006752:	2201      	movs	r2, #1
 8006754:	2109      	movs	r1, #9
 8006756:	f7ff ff7d 	bl	8006654 <std>
 800675a:	68e0      	ldr	r0, [r4, #12]
 800675c:	2202      	movs	r2, #2
 800675e:	2112      	movs	r1, #18
 8006760:	f7ff ff78 	bl	8006654 <std>
 8006764:	2301      	movs	r3, #1
 8006766:	61a3      	str	r3, [r4, #24]
 8006768:	e7d2      	b.n	8006710 <__sinit+0xc>
 800676a:	bf00      	nop
 800676c:	08007b34 	.word	0x08007b34
 8006770:	0800669d 	.word	0x0800669d

08006774 <__sfp>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	4607      	mov	r7, r0
 8006778:	f7ff ffac 	bl	80066d4 <__sfp_lock_acquire>
 800677c:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <__sfp+0x84>)
 800677e:	681e      	ldr	r6, [r3, #0]
 8006780:	69b3      	ldr	r3, [r6, #24]
 8006782:	b913      	cbnz	r3, 800678a <__sfp+0x16>
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff ffbd 	bl	8006704 <__sinit>
 800678a:	3648      	adds	r6, #72	; 0x48
 800678c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006790:	3b01      	subs	r3, #1
 8006792:	d503      	bpl.n	800679c <__sfp+0x28>
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	b30b      	cbz	r3, 80067dc <__sfp+0x68>
 8006798:	6836      	ldr	r6, [r6, #0]
 800679a:	e7f7      	b.n	800678c <__sfp+0x18>
 800679c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067a0:	b9d5      	cbnz	r5, 80067d8 <__sfp+0x64>
 80067a2:	4b16      	ldr	r3, [pc, #88]	; (80067fc <__sfp+0x88>)
 80067a4:	60e3      	str	r3, [r4, #12]
 80067a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067aa:	6665      	str	r5, [r4, #100]	; 0x64
 80067ac:	f000 f86c 	bl	8006888 <__retarget_lock_init_recursive>
 80067b0:	f7ff ff96 	bl	80066e0 <__sfp_lock_release>
 80067b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067bc:	6025      	str	r5, [r4, #0]
 80067be:	61a5      	str	r5, [r4, #24]
 80067c0:	2208      	movs	r2, #8
 80067c2:	4629      	mov	r1, r5
 80067c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067c8:	f000 f861 	bl	800688e <memset>
 80067cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067d4:	4620      	mov	r0, r4
 80067d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d8:	3468      	adds	r4, #104	; 0x68
 80067da:	e7d9      	b.n	8006790 <__sfp+0x1c>
 80067dc:	2104      	movs	r1, #4
 80067de:	4638      	mov	r0, r7
 80067e0:	f7ff ff62 	bl	80066a8 <__sfmoreglue>
 80067e4:	4604      	mov	r4, r0
 80067e6:	6030      	str	r0, [r6, #0]
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d1d5      	bne.n	8006798 <__sfp+0x24>
 80067ec:	f7ff ff78 	bl	80066e0 <__sfp_lock_release>
 80067f0:	230c      	movs	r3, #12
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	e7ee      	b.n	80067d4 <__sfp+0x60>
 80067f6:	bf00      	nop
 80067f8:	08007b34 	.word	0x08007b34
 80067fc:	ffff0001 	.word	0xffff0001

08006800 <_fwalk_reent>:
 8006800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006804:	4606      	mov	r6, r0
 8006806:	4688      	mov	r8, r1
 8006808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800680c:	2700      	movs	r7, #0
 800680e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006812:	f1b9 0901 	subs.w	r9, r9, #1
 8006816:	d505      	bpl.n	8006824 <_fwalk_reent+0x24>
 8006818:	6824      	ldr	r4, [r4, #0]
 800681a:	2c00      	cmp	r4, #0
 800681c:	d1f7      	bne.n	800680e <_fwalk_reent+0xe>
 800681e:	4638      	mov	r0, r7
 8006820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006824:	89ab      	ldrh	r3, [r5, #12]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d907      	bls.n	800683a <_fwalk_reent+0x3a>
 800682a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800682e:	3301      	adds	r3, #1
 8006830:	d003      	beq.n	800683a <_fwalk_reent+0x3a>
 8006832:	4629      	mov	r1, r5
 8006834:	4630      	mov	r0, r6
 8006836:	47c0      	blx	r8
 8006838:	4307      	orrs	r7, r0
 800683a:	3568      	adds	r5, #104	; 0x68
 800683c:	e7e9      	b.n	8006812 <_fwalk_reent+0x12>
	...

08006840 <__libc_init_array>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	4d0d      	ldr	r5, [pc, #52]	; (8006878 <__libc_init_array+0x38>)
 8006844:	4c0d      	ldr	r4, [pc, #52]	; (800687c <__libc_init_array+0x3c>)
 8006846:	1b64      	subs	r4, r4, r5
 8006848:	10a4      	asrs	r4, r4, #2
 800684a:	2600      	movs	r6, #0
 800684c:	42a6      	cmp	r6, r4
 800684e:	d109      	bne.n	8006864 <__libc_init_array+0x24>
 8006850:	4d0b      	ldr	r5, [pc, #44]	; (8006880 <__libc_init_array+0x40>)
 8006852:	4c0c      	ldr	r4, [pc, #48]	; (8006884 <__libc_init_array+0x44>)
 8006854:	f000 ffa4 	bl	80077a0 <_init>
 8006858:	1b64      	subs	r4, r4, r5
 800685a:	10a4      	asrs	r4, r4, #2
 800685c:	2600      	movs	r6, #0
 800685e:	42a6      	cmp	r6, r4
 8006860:	d105      	bne.n	800686e <__libc_init_array+0x2e>
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	f855 3b04 	ldr.w	r3, [r5], #4
 8006868:	4798      	blx	r3
 800686a:	3601      	adds	r6, #1
 800686c:	e7ee      	b.n	800684c <__libc_init_array+0xc>
 800686e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006872:	4798      	blx	r3
 8006874:	3601      	adds	r6, #1
 8006876:	e7f2      	b.n	800685e <__libc_init_array+0x1e>
 8006878:	08007c6c 	.word	0x08007c6c
 800687c:	08007c6c 	.word	0x08007c6c
 8006880:	08007c6c 	.word	0x08007c6c
 8006884:	08007c70 	.word	0x08007c70

08006888 <__retarget_lock_init_recursive>:
 8006888:	4770      	bx	lr

0800688a <__retarget_lock_acquire_recursive>:
 800688a:	4770      	bx	lr

0800688c <__retarget_lock_release_recursive>:
 800688c:	4770      	bx	lr

0800688e <memset>:
 800688e:	4402      	add	r2, r0
 8006890:	4603      	mov	r3, r0
 8006892:	4293      	cmp	r3, r2
 8006894:	d100      	bne.n	8006898 <memset+0xa>
 8006896:	4770      	bx	lr
 8006898:	f803 1b01 	strb.w	r1, [r3], #1
 800689c:	e7f9      	b.n	8006892 <memset+0x4>
	...

080068a0 <_free_r>:
 80068a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068a2:	2900      	cmp	r1, #0
 80068a4:	d048      	beq.n	8006938 <_free_r+0x98>
 80068a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068aa:	9001      	str	r0, [sp, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f1a1 0404 	sub.w	r4, r1, #4
 80068b2:	bfb8      	it	lt
 80068b4:	18e4      	addlt	r4, r4, r3
 80068b6:	f000 fc45 	bl	8007144 <__malloc_lock>
 80068ba:	4a20      	ldr	r2, [pc, #128]	; (800693c <_free_r+0x9c>)
 80068bc:	9801      	ldr	r0, [sp, #4]
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	4615      	mov	r5, r2
 80068c2:	b933      	cbnz	r3, 80068d2 <_free_r+0x32>
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	6014      	str	r4, [r2, #0]
 80068c8:	b003      	add	sp, #12
 80068ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068ce:	f000 bc3f 	b.w	8007150 <__malloc_unlock>
 80068d2:	42a3      	cmp	r3, r4
 80068d4:	d90b      	bls.n	80068ee <_free_r+0x4e>
 80068d6:	6821      	ldr	r1, [r4, #0]
 80068d8:	1862      	adds	r2, r4, r1
 80068da:	4293      	cmp	r3, r2
 80068dc:	bf04      	itt	eq
 80068de:	681a      	ldreq	r2, [r3, #0]
 80068e0:	685b      	ldreq	r3, [r3, #4]
 80068e2:	6063      	str	r3, [r4, #4]
 80068e4:	bf04      	itt	eq
 80068e6:	1852      	addeq	r2, r2, r1
 80068e8:	6022      	streq	r2, [r4, #0]
 80068ea:	602c      	str	r4, [r5, #0]
 80068ec:	e7ec      	b.n	80068c8 <_free_r+0x28>
 80068ee:	461a      	mov	r2, r3
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	b10b      	cbz	r3, 80068f8 <_free_r+0x58>
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	d9fa      	bls.n	80068ee <_free_r+0x4e>
 80068f8:	6811      	ldr	r1, [r2, #0]
 80068fa:	1855      	adds	r5, r2, r1
 80068fc:	42a5      	cmp	r5, r4
 80068fe:	d10b      	bne.n	8006918 <_free_r+0x78>
 8006900:	6824      	ldr	r4, [r4, #0]
 8006902:	4421      	add	r1, r4
 8006904:	1854      	adds	r4, r2, r1
 8006906:	42a3      	cmp	r3, r4
 8006908:	6011      	str	r1, [r2, #0]
 800690a:	d1dd      	bne.n	80068c8 <_free_r+0x28>
 800690c:	681c      	ldr	r4, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	6053      	str	r3, [r2, #4]
 8006912:	4421      	add	r1, r4
 8006914:	6011      	str	r1, [r2, #0]
 8006916:	e7d7      	b.n	80068c8 <_free_r+0x28>
 8006918:	d902      	bls.n	8006920 <_free_r+0x80>
 800691a:	230c      	movs	r3, #12
 800691c:	6003      	str	r3, [r0, #0]
 800691e:	e7d3      	b.n	80068c8 <_free_r+0x28>
 8006920:	6825      	ldr	r5, [r4, #0]
 8006922:	1961      	adds	r1, r4, r5
 8006924:	428b      	cmp	r3, r1
 8006926:	bf04      	itt	eq
 8006928:	6819      	ldreq	r1, [r3, #0]
 800692a:	685b      	ldreq	r3, [r3, #4]
 800692c:	6063      	str	r3, [r4, #4]
 800692e:	bf04      	itt	eq
 8006930:	1949      	addeq	r1, r1, r5
 8006932:	6021      	streq	r1, [r4, #0]
 8006934:	6054      	str	r4, [r2, #4]
 8006936:	e7c7      	b.n	80068c8 <_free_r+0x28>
 8006938:	b003      	add	sp, #12
 800693a:	bd30      	pop	{r4, r5, pc}
 800693c:	20000358 	.word	0x20000358

08006940 <_malloc_r>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	1ccd      	adds	r5, r1, #3
 8006944:	f025 0503 	bic.w	r5, r5, #3
 8006948:	3508      	adds	r5, #8
 800694a:	2d0c      	cmp	r5, #12
 800694c:	bf38      	it	cc
 800694e:	250c      	movcc	r5, #12
 8006950:	2d00      	cmp	r5, #0
 8006952:	4606      	mov	r6, r0
 8006954:	db01      	blt.n	800695a <_malloc_r+0x1a>
 8006956:	42a9      	cmp	r1, r5
 8006958:	d903      	bls.n	8006962 <_malloc_r+0x22>
 800695a:	230c      	movs	r3, #12
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	2000      	movs	r0, #0
 8006960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006962:	f000 fbef 	bl	8007144 <__malloc_lock>
 8006966:	4921      	ldr	r1, [pc, #132]	; (80069ec <_malloc_r+0xac>)
 8006968:	680a      	ldr	r2, [r1, #0]
 800696a:	4614      	mov	r4, r2
 800696c:	b99c      	cbnz	r4, 8006996 <_malloc_r+0x56>
 800696e:	4f20      	ldr	r7, [pc, #128]	; (80069f0 <_malloc_r+0xb0>)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	b923      	cbnz	r3, 800697e <_malloc_r+0x3e>
 8006974:	4621      	mov	r1, r4
 8006976:	4630      	mov	r0, r6
 8006978:	f000 f8ca 	bl	8006b10 <_sbrk_r>
 800697c:	6038      	str	r0, [r7, #0]
 800697e:	4629      	mov	r1, r5
 8006980:	4630      	mov	r0, r6
 8006982:	f000 f8c5 	bl	8006b10 <_sbrk_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d123      	bne.n	80069d2 <_malloc_r+0x92>
 800698a:	230c      	movs	r3, #12
 800698c:	6033      	str	r3, [r6, #0]
 800698e:	4630      	mov	r0, r6
 8006990:	f000 fbde 	bl	8007150 <__malloc_unlock>
 8006994:	e7e3      	b.n	800695e <_malloc_r+0x1e>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	1b5b      	subs	r3, r3, r5
 800699a:	d417      	bmi.n	80069cc <_malloc_r+0x8c>
 800699c:	2b0b      	cmp	r3, #11
 800699e:	d903      	bls.n	80069a8 <_malloc_r+0x68>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	441c      	add	r4, r3
 80069a4:	6025      	str	r5, [r4, #0]
 80069a6:	e004      	b.n	80069b2 <_malloc_r+0x72>
 80069a8:	6863      	ldr	r3, [r4, #4]
 80069aa:	42a2      	cmp	r2, r4
 80069ac:	bf0c      	ite	eq
 80069ae:	600b      	streq	r3, [r1, #0]
 80069b0:	6053      	strne	r3, [r2, #4]
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 fbcc 	bl	8007150 <__malloc_unlock>
 80069b8:	f104 000b 	add.w	r0, r4, #11
 80069bc:	1d23      	adds	r3, r4, #4
 80069be:	f020 0007 	bic.w	r0, r0, #7
 80069c2:	1ac2      	subs	r2, r0, r3
 80069c4:	d0cc      	beq.n	8006960 <_malloc_r+0x20>
 80069c6:	1a1b      	subs	r3, r3, r0
 80069c8:	50a3      	str	r3, [r4, r2]
 80069ca:	e7c9      	b.n	8006960 <_malloc_r+0x20>
 80069cc:	4622      	mov	r2, r4
 80069ce:	6864      	ldr	r4, [r4, #4]
 80069d0:	e7cc      	b.n	800696c <_malloc_r+0x2c>
 80069d2:	1cc4      	adds	r4, r0, #3
 80069d4:	f024 0403 	bic.w	r4, r4, #3
 80069d8:	42a0      	cmp	r0, r4
 80069da:	d0e3      	beq.n	80069a4 <_malloc_r+0x64>
 80069dc:	1a21      	subs	r1, r4, r0
 80069de:	4630      	mov	r0, r6
 80069e0:	f000 f896 	bl	8006b10 <_sbrk_r>
 80069e4:	3001      	adds	r0, #1
 80069e6:	d1dd      	bne.n	80069a4 <_malloc_r+0x64>
 80069e8:	e7cf      	b.n	800698a <_malloc_r+0x4a>
 80069ea:	bf00      	nop
 80069ec:	20000358 	.word	0x20000358
 80069f0:	2000035c 	.word	0x2000035c

080069f4 <iprintf>:
 80069f4:	b40f      	push	{r0, r1, r2, r3}
 80069f6:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <iprintf+0x2c>)
 80069f8:	b513      	push	{r0, r1, r4, lr}
 80069fa:	681c      	ldr	r4, [r3, #0]
 80069fc:	b124      	cbz	r4, 8006a08 <iprintf+0x14>
 80069fe:	69a3      	ldr	r3, [r4, #24]
 8006a00:	b913      	cbnz	r3, 8006a08 <iprintf+0x14>
 8006a02:	4620      	mov	r0, r4
 8006a04:	f7ff fe7e 	bl	8006704 <__sinit>
 8006a08:	ab05      	add	r3, sp, #20
 8006a0a:	9a04      	ldr	r2, [sp, #16]
 8006a0c:	68a1      	ldr	r1, [r4, #8]
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fbcd 	bl	80071b0 <_vfiprintf_r>
 8006a16:	b002      	add	sp, #8
 8006a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1c:	b004      	add	sp, #16
 8006a1e:	4770      	bx	lr
 8006a20:	200002c0 	.word	0x200002c0

08006a24 <_puts_r>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	460e      	mov	r6, r1
 8006a28:	4605      	mov	r5, r0
 8006a2a:	b118      	cbz	r0, 8006a34 <_puts_r+0x10>
 8006a2c:	6983      	ldr	r3, [r0, #24]
 8006a2e:	b90b      	cbnz	r3, 8006a34 <_puts_r+0x10>
 8006a30:	f7ff fe68 	bl	8006704 <__sinit>
 8006a34:	69ab      	ldr	r3, [r5, #24]
 8006a36:	68ac      	ldr	r4, [r5, #8]
 8006a38:	b913      	cbnz	r3, 8006a40 <_puts_r+0x1c>
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f7ff fe62 	bl	8006704 <__sinit>
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <_puts_r+0xd0>)
 8006a42:	429c      	cmp	r4, r3
 8006a44:	d120      	bne.n	8006a88 <_puts_r+0x64>
 8006a46:	686c      	ldr	r4, [r5, #4]
 8006a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a4a:	07db      	lsls	r3, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_puts_r+0x36>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	0598      	lsls	r0, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_puts_r+0x36>
 8006a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a56:	f7ff ff18 	bl	800688a <__retarget_lock_acquire_recursive>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	0719      	lsls	r1, r3, #28
 8006a5e:	d51d      	bpl.n	8006a9c <_puts_r+0x78>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	b1db      	cbz	r3, 8006a9c <_puts_r+0x78>
 8006a64:	3e01      	subs	r6, #1
 8006a66:	68a3      	ldr	r3, [r4, #8]
 8006a68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	60a3      	str	r3, [r4, #8]
 8006a70:	bb39      	cbnz	r1, 8006ac2 <_puts_r+0x9e>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da38      	bge.n	8006ae8 <_puts_r+0xc4>
 8006a76:	4622      	mov	r2, r4
 8006a78:	210a      	movs	r1, #10
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 fa02 	bl	8006e84 <__swbuf_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d011      	beq.n	8006aa8 <_puts_r+0x84>
 8006a84:	250a      	movs	r5, #10
 8006a86:	e011      	b.n	8006aac <_puts_r+0x88>
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <_puts_r+0xd4>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d101      	bne.n	8006a92 <_puts_r+0x6e>
 8006a8e:	68ac      	ldr	r4, [r5, #8]
 8006a90:	e7da      	b.n	8006a48 <_puts_r+0x24>
 8006a92:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <_puts_r+0xd8>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	bf08      	it	eq
 8006a98:	68ec      	ldreq	r4, [r5, #12]
 8006a9a:	e7d5      	b.n	8006a48 <_puts_r+0x24>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 fa54 	bl	8006f4c <__swsetup_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d0dd      	beq.n	8006a64 <_puts_r+0x40>
 8006aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8006aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aae:	07da      	lsls	r2, r3, #31
 8006ab0:	d405      	bmi.n	8006abe <_puts_r+0x9a>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	059b      	lsls	r3, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_puts_r+0x9a>
 8006ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aba:	f7ff fee7 	bl	800688c <__retarget_lock_release_recursive>
 8006abe:	4628      	mov	r0, r5
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da04      	bge.n	8006ad0 <_puts_r+0xac>
 8006ac6:	69a2      	ldr	r2, [r4, #24]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	dc06      	bgt.n	8006ada <_puts_r+0xb6>
 8006acc:	290a      	cmp	r1, #10
 8006ace:	d004      	beq.n	8006ada <_puts_r+0xb6>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	7019      	strb	r1, [r3, #0]
 8006ad8:	e7c5      	b.n	8006a66 <_puts_r+0x42>
 8006ada:	4622      	mov	r2, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 f9d1 	bl	8006e84 <__swbuf_r>
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d1bf      	bne.n	8006a66 <_puts_r+0x42>
 8006ae6:	e7df      	b.n	8006aa8 <_puts_r+0x84>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	250a      	movs	r5, #10
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	701d      	strb	r5, [r3, #0]
 8006af2:	e7db      	b.n	8006aac <_puts_r+0x88>
 8006af4:	08007af4 	.word	0x08007af4
 8006af8:	08007b14 	.word	0x08007b14
 8006afc:	08007ad4 	.word	0x08007ad4

08006b00 <puts>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <puts+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f7ff bf8d 	b.w	8006a24 <_puts_r>
 8006b0a:	bf00      	nop
 8006b0c:	200002c0 	.word	0x200002c0

08006b10 <_sbrk_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d06      	ldr	r5, [pc, #24]	; (8006b2c <_sbrk_r+0x1c>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	f7fa fad4 	bl	80010c8 <_sbrk>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_sbrk_r+0x1a>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_sbrk_r+0x1a>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	20000534 	.word	0x20000534

08006b30 <setvbuf>:
 8006b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	461d      	mov	r5, r3
 8006b36:	4b5d      	ldr	r3, [pc, #372]	; (8006cac <setvbuf+0x17c>)
 8006b38:	681f      	ldr	r7, [r3, #0]
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	460e      	mov	r6, r1
 8006b3e:	4690      	mov	r8, r2
 8006b40:	b127      	cbz	r7, 8006b4c <setvbuf+0x1c>
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	b913      	cbnz	r3, 8006b4c <setvbuf+0x1c>
 8006b46:	4638      	mov	r0, r7
 8006b48:	f7ff fddc 	bl	8006704 <__sinit>
 8006b4c:	4b58      	ldr	r3, [pc, #352]	; (8006cb0 <setvbuf+0x180>)
 8006b4e:	429c      	cmp	r4, r3
 8006b50:	d167      	bne.n	8006c22 <setvbuf+0xf2>
 8006b52:	687c      	ldr	r4, [r7, #4]
 8006b54:	f1b8 0f02 	cmp.w	r8, #2
 8006b58:	d006      	beq.n	8006b68 <setvbuf+0x38>
 8006b5a:	f1b8 0f01 	cmp.w	r8, #1
 8006b5e:	f200 809f 	bhi.w	8006ca0 <setvbuf+0x170>
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	f2c0 809c 	blt.w	8006ca0 <setvbuf+0x170>
 8006b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b6a:	07db      	lsls	r3, r3, #31
 8006b6c:	d405      	bmi.n	8006b7a <setvbuf+0x4a>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	0598      	lsls	r0, r3, #22
 8006b72:	d402      	bmi.n	8006b7a <setvbuf+0x4a>
 8006b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b76:	f7ff fe88 	bl	800688a <__retarget_lock_acquire_recursive>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7ff fd1b 	bl	80065b8 <_fflush_r>
 8006b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b84:	b141      	cbz	r1, 8006b98 <setvbuf+0x68>
 8006b86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b8a:	4299      	cmp	r1, r3
 8006b8c:	d002      	beq.n	8006b94 <setvbuf+0x64>
 8006b8e:	4638      	mov	r0, r7
 8006b90:	f7ff fe86 	bl	80068a0 <_free_r>
 8006b94:	2300      	movs	r3, #0
 8006b96:	6363      	str	r3, [r4, #52]	; 0x34
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61a3      	str	r3, [r4, #24]
 8006b9c:	6063      	str	r3, [r4, #4]
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	0619      	lsls	r1, r3, #24
 8006ba2:	d503      	bpl.n	8006bac <setvbuf+0x7c>
 8006ba4:	6921      	ldr	r1, [r4, #16]
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f7ff fe7a 	bl	80068a0 <_free_r>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	f1b8 0f02 	cmp.w	r8, #2
 8006bba:	81a3      	strh	r3, [r4, #12]
 8006bbc:	d06c      	beq.n	8006c98 <setvbuf+0x168>
 8006bbe:	ab01      	add	r3, sp, #4
 8006bc0:	466a      	mov	r2, sp
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f000 fa51 	bl	800706c <__swhatbuf_r>
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	4318      	orrs	r0, r3
 8006bce:	81a0      	strh	r0, [r4, #12]
 8006bd0:	2d00      	cmp	r5, #0
 8006bd2:	d130      	bne.n	8006c36 <setvbuf+0x106>
 8006bd4:	9d00      	ldr	r5, [sp, #0]
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 faac 	bl	8007134 <malloc>
 8006bdc:	4606      	mov	r6, r0
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d155      	bne.n	8006c8e <setvbuf+0x15e>
 8006be2:	f8dd 9000 	ldr.w	r9, [sp]
 8006be6:	45a9      	cmp	r9, r5
 8006be8:	d14a      	bne.n	8006c80 <setvbuf+0x150>
 8006bea:	f04f 35ff 	mov.w	r5, #4294967295
 8006bee:	2200      	movs	r2, #0
 8006bf0:	60a2      	str	r2, [r4, #8]
 8006bf2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	6122      	str	r2, [r4, #16]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c00:	6162      	str	r2, [r4, #20]
 8006c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	07d2      	lsls	r2, r2, #31
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	d405      	bmi.n	8006c1a <setvbuf+0xea>
 8006c0e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c12:	d102      	bne.n	8006c1a <setvbuf+0xea>
 8006c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c16:	f7ff fe39 	bl	800688c <__retarget_lock_release_recursive>
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	b003      	add	sp, #12
 8006c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <setvbuf+0x184>)
 8006c24:	429c      	cmp	r4, r3
 8006c26:	d101      	bne.n	8006c2c <setvbuf+0xfc>
 8006c28:	68bc      	ldr	r4, [r7, #8]
 8006c2a:	e793      	b.n	8006b54 <setvbuf+0x24>
 8006c2c:	4b22      	ldr	r3, [pc, #136]	; (8006cb8 <setvbuf+0x188>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	bf08      	it	eq
 8006c32:	68fc      	ldreq	r4, [r7, #12]
 8006c34:	e78e      	b.n	8006b54 <setvbuf+0x24>
 8006c36:	2e00      	cmp	r6, #0
 8006c38:	d0cd      	beq.n	8006bd6 <setvbuf+0xa6>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	b913      	cbnz	r3, 8006c44 <setvbuf+0x114>
 8006c3e:	4638      	mov	r0, r7
 8006c40:	f7ff fd60 	bl	8006704 <__sinit>
 8006c44:	f1b8 0f01 	cmp.w	r8, #1
 8006c48:	bf08      	it	eq
 8006c4a:	89a3      	ldrheq	r3, [r4, #12]
 8006c4c:	6026      	str	r6, [r4, #0]
 8006c4e:	bf04      	itt	eq
 8006c50:	f043 0301 	orreq.w	r3, r3, #1
 8006c54:	81a3      	strheq	r3, [r4, #12]
 8006c56:	89a2      	ldrh	r2, [r4, #12]
 8006c58:	f012 0308 	ands.w	r3, r2, #8
 8006c5c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006c60:	d01c      	beq.n	8006c9c <setvbuf+0x16c>
 8006c62:	07d3      	lsls	r3, r2, #31
 8006c64:	bf41      	itttt	mi
 8006c66:	2300      	movmi	r3, #0
 8006c68:	426d      	negmi	r5, r5
 8006c6a:	60a3      	strmi	r3, [r4, #8]
 8006c6c:	61a5      	strmi	r5, [r4, #24]
 8006c6e:	bf58      	it	pl
 8006c70:	60a5      	strpl	r5, [r4, #8]
 8006c72:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006c74:	f015 0501 	ands.w	r5, r5, #1
 8006c78:	d115      	bne.n	8006ca6 <setvbuf+0x176>
 8006c7a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006c7e:	e7c8      	b.n	8006c12 <setvbuf+0xe2>
 8006c80:	4648      	mov	r0, r9
 8006c82:	f000 fa57 	bl	8007134 <malloc>
 8006c86:	4606      	mov	r6, r0
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d0ae      	beq.n	8006bea <setvbuf+0xba>
 8006c8c:	464d      	mov	r5, r9
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	e7d0      	b.n	8006c3a <setvbuf+0x10a>
 8006c98:	2500      	movs	r5, #0
 8006c9a:	e7a8      	b.n	8006bee <setvbuf+0xbe>
 8006c9c:	60a3      	str	r3, [r4, #8]
 8006c9e:	e7e8      	b.n	8006c72 <setvbuf+0x142>
 8006ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ca4:	e7b9      	b.n	8006c1a <setvbuf+0xea>
 8006ca6:	2500      	movs	r5, #0
 8006ca8:	e7b7      	b.n	8006c1a <setvbuf+0xea>
 8006caa:	bf00      	nop
 8006cac:	200002c0 	.word	0x200002c0
 8006cb0:	08007af4 	.word	0x08007af4
 8006cb4:	08007b14 	.word	0x08007b14
 8006cb8:	08007ad4 	.word	0x08007ad4

08006cbc <__sread>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc4:	f000 fd38 	bl	8007738 <_read_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	bfab      	itete	ge
 8006ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cce:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd0:	181b      	addge	r3, r3, r0
 8006cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cd6:	bfac      	ite	ge
 8006cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cda:	81a3      	strhlt	r3, [r4, #12]
 8006cdc:	bd10      	pop	{r4, pc}

08006cde <__swrite>:
 8006cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	461f      	mov	r7, r3
 8006ce4:	898b      	ldrh	r3, [r1, #12]
 8006ce6:	05db      	lsls	r3, r3, #23
 8006ce8:	4605      	mov	r5, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	4616      	mov	r6, r2
 8006cee:	d505      	bpl.n	8006cfc <__swrite+0x1e>
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f000 f9a6 	bl	8007048 <_lseek_r>
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d06:	81a3      	strh	r3, [r4, #12]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	f000 b909 	b.w	8006f28 <_write_r>

08006d16 <__sseek>:
 8006d16:	b510      	push	{r4, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1e:	f000 f993 	bl	8007048 <_lseek_r>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	bf15      	itete	ne
 8006d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d32:	81a3      	strheq	r3, [r4, #12]
 8006d34:	bf18      	it	ne
 8006d36:	81a3      	strhne	r3, [r4, #12]
 8006d38:	bd10      	pop	{r4, pc}

08006d3a <__sclose>:
 8006d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3e:	f000 b973 	b.w	8007028 <_close_r>

08006d42 <strncmp>:
 8006d42:	b510      	push	{r4, lr}
 8006d44:	b16a      	cbz	r2, 8006d62 <strncmp+0x20>
 8006d46:	3901      	subs	r1, #1
 8006d48:	1884      	adds	r4, r0, r2
 8006d4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d103      	bne.n	8006d5e <strncmp+0x1c>
 8006d56:	42a0      	cmp	r0, r4
 8006d58:	d001      	beq.n	8006d5e <strncmp+0x1c>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f5      	bne.n	8006d4a <strncmp+0x8>
 8006d5e:	1a98      	subs	r0, r3, r2
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	4610      	mov	r0, r2
 8006d64:	e7fc      	b.n	8006d60 <strncmp+0x1e>
	...

08006d68 <_strtol_l.isra.0>:
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6e:	d001      	beq.n	8006d74 <_strtol_l.isra.0+0xc>
 8006d70:	2b24      	cmp	r3, #36	; 0x24
 8006d72:	d906      	bls.n	8006d82 <_strtol_l.isra.0+0x1a>
 8006d74:	f7ff fb94 	bl	80064a0 <__errno>
 8006d78:	2316      	movs	r3, #22
 8006d7a:	6003      	str	r3, [r0, #0]
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d82:	4f3a      	ldr	r7, [pc, #232]	; (8006e6c <_strtol_l.isra.0+0x104>)
 8006d84:	468e      	mov	lr, r1
 8006d86:	4676      	mov	r6, lr
 8006d88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006d8c:	5de5      	ldrb	r5, [r4, r7]
 8006d8e:	f015 0508 	ands.w	r5, r5, #8
 8006d92:	d1f8      	bne.n	8006d86 <_strtol_l.isra.0+0x1e>
 8006d94:	2c2d      	cmp	r4, #45	; 0x2d
 8006d96:	d134      	bne.n	8006e02 <_strtol_l.isra.0+0x9a>
 8006d98:	f89e 4000 	ldrb.w	r4, [lr]
 8006d9c:	f04f 0801 	mov.w	r8, #1
 8006da0:	f106 0e02 	add.w	lr, r6, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d05c      	beq.n	8006e62 <_strtol_l.isra.0+0xfa>
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d10c      	bne.n	8006dc6 <_strtol_l.isra.0+0x5e>
 8006dac:	2c30      	cmp	r4, #48	; 0x30
 8006dae:	d10a      	bne.n	8006dc6 <_strtol_l.isra.0+0x5e>
 8006db0:	f89e 4000 	ldrb.w	r4, [lr]
 8006db4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006db8:	2c58      	cmp	r4, #88	; 0x58
 8006dba:	d14d      	bne.n	8006e58 <_strtol_l.isra.0+0xf0>
 8006dbc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f10e 0e02 	add.w	lr, lr, #2
 8006dc6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006dca:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006dce:	2600      	movs	r6, #0
 8006dd0:	fbbc f9f3 	udiv	r9, ip, r3
 8006dd4:	4635      	mov	r5, r6
 8006dd6:	fb03 ca19 	mls	sl, r3, r9, ip
 8006dda:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006dde:	2f09      	cmp	r7, #9
 8006de0:	d818      	bhi.n	8006e14 <_strtol_l.isra.0+0xac>
 8006de2:	463c      	mov	r4, r7
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	dd24      	ble.n	8006e32 <_strtol_l.isra.0+0xca>
 8006de8:	2e00      	cmp	r6, #0
 8006dea:	db1f      	blt.n	8006e2c <_strtol_l.isra.0+0xc4>
 8006dec:	45a9      	cmp	r9, r5
 8006dee:	d31d      	bcc.n	8006e2c <_strtol_l.isra.0+0xc4>
 8006df0:	d101      	bne.n	8006df6 <_strtol_l.isra.0+0x8e>
 8006df2:	45a2      	cmp	sl, r4
 8006df4:	db1a      	blt.n	8006e2c <_strtol_l.isra.0+0xc4>
 8006df6:	fb05 4503 	mla	r5, r5, r3, r4
 8006dfa:	2601      	movs	r6, #1
 8006dfc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006e00:	e7eb      	b.n	8006dda <_strtol_l.isra.0+0x72>
 8006e02:	2c2b      	cmp	r4, #43	; 0x2b
 8006e04:	bf08      	it	eq
 8006e06:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006e0a:	46a8      	mov	r8, r5
 8006e0c:	bf08      	it	eq
 8006e0e:	f106 0e02 	addeq.w	lr, r6, #2
 8006e12:	e7c7      	b.n	8006da4 <_strtol_l.isra.0+0x3c>
 8006e14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006e18:	2f19      	cmp	r7, #25
 8006e1a:	d801      	bhi.n	8006e20 <_strtol_l.isra.0+0xb8>
 8006e1c:	3c37      	subs	r4, #55	; 0x37
 8006e1e:	e7e1      	b.n	8006de4 <_strtol_l.isra.0+0x7c>
 8006e20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006e24:	2f19      	cmp	r7, #25
 8006e26:	d804      	bhi.n	8006e32 <_strtol_l.isra.0+0xca>
 8006e28:	3c57      	subs	r4, #87	; 0x57
 8006e2a:	e7db      	b.n	8006de4 <_strtol_l.isra.0+0x7c>
 8006e2c:	f04f 36ff 	mov.w	r6, #4294967295
 8006e30:	e7e4      	b.n	8006dfc <_strtol_l.isra.0+0x94>
 8006e32:	2e00      	cmp	r6, #0
 8006e34:	da05      	bge.n	8006e42 <_strtol_l.isra.0+0xda>
 8006e36:	2322      	movs	r3, #34	; 0x22
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	4665      	mov	r5, ip
 8006e3c:	b942      	cbnz	r2, 8006e50 <_strtol_l.isra.0+0xe8>
 8006e3e:	4628      	mov	r0, r5
 8006e40:	e79d      	b.n	8006d7e <_strtol_l.isra.0+0x16>
 8006e42:	f1b8 0f00 	cmp.w	r8, #0
 8006e46:	d000      	beq.n	8006e4a <_strtol_l.isra.0+0xe2>
 8006e48:	426d      	negs	r5, r5
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	d0f7      	beq.n	8006e3e <_strtol_l.isra.0+0xd6>
 8006e4e:	b10e      	cbz	r6, 8006e54 <_strtol_l.isra.0+0xec>
 8006e50:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006e54:	6011      	str	r1, [r2, #0]
 8006e56:	e7f2      	b.n	8006e3e <_strtol_l.isra.0+0xd6>
 8006e58:	2430      	movs	r4, #48	; 0x30
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1b3      	bne.n	8006dc6 <_strtol_l.isra.0+0x5e>
 8006e5e:	2308      	movs	r3, #8
 8006e60:	e7b1      	b.n	8006dc6 <_strtol_l.isra.0+0x5e>
 8006e62:	2c30      	cmp	r4, #48	; 0x30
 8006e64:	d0a4      	beq.n	8006db0 <_strtol_l.isra.0+0x48>
 8006e66:	230a      	movs	r3, #10
 8006e68:	e7ad      	b.n	8006dc6 <_strtol_l.isra.0+0x5e>
 8006e6a:	bf00      	nop
 8006e6c:	08007b39 	.word	0x08007b39

08006e70 <strtol>:
 8006e70:	4613      	mov	r3, r2
 8006e72:	460a      	mov	r2, r1
 8006e74:	4601      	mov	r1, r0
 8006e76:	4802      	ldr	r0, [pc, #8]	; (8006e80 <strtol+0x10>)
 8006e78:	6800      	ldr	r0, [r0, #0]
 8006e7a:	f7ff bf75 	b.w	8006d68 <_strtol_l.isra.0>
 8006e7e:	bf00      	nop
 8006e80:	200002c0 	.word	0x200002c0

08006e84 <__swbuf_r>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	460e      	mov	r6, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	b118      	cbz	r0, 8006e96 <__swbuf_r+0x12>
 8006e8e:	6983      	ldr	r3, [r0, #24]
 8006e90:	b90b      	cbnz	r3, 8006e96 <__swbuf_r+0x12>
 8006e92:	f7ff fc37 	bl	8006704 <__sinit>
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <__swbuf_r+0x98>)
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d12b      	bne.n	8006ef4 <__swbuf_r+0x70>
 8006e9c:	686c      	ldr	r4, [r5, #4]
 8006e9e:	69a3      	ldr	r3, [r4, #24]
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	071a      	lsls	r2, r3, #28
 8006ea6:	d52f      	bpl.n	8006f08 <__swbuf_r+0x84>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	b36b      	cbz	r3, 8006f08 <__swbuf_r+0x84>
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	6820      	ldr	r0, [r4, #0]
 8006eb0:	1ac0      	subs	r0, r0, r3
 8006eb2:	6963      	ldr	r3, [r4, #20]
 8006eb4:	b2f6      	uxtb	r6, r6
 8006eb6:	4283      	cmp	r3, r0
 8006eb8:	4637      	mov	r7, r6
 8006eba:	dc04      	bgt.n	8006ec6 <__swbuf_r+0x42>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f7ff fb7a 	bl	80065b8 <_fflush_r>
 8006ec4:	bb30      	cbnz	r0, 8006f14 <__swbuf_r+0x90>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	60a3      	str	r3, [r4, #8]
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	701e      	strb	r6, [r3, #0]
 8006ed4:	6963      	ldr	r3, [r4, #20]
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	4283      	cmp	r3, r0
 8006eda:	d004      	beq.n	8006ee6 <__swbuf_r+0x62>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	07db      	lsls	r3, r3, #31
 8006ee0:	d506      	bpl.n	8006ef0 <__swbuf_r+0x6c>
 8006ee2:	2e0a      	cmp	r6, #10
 8006ee4:	d104      	bne.n	8006ef0 <__swbuf_r+0x6c>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7ff fb65 	bl	80065b8 <_fflush_r>
 8006eee:	b988      	cbnz	r0, 8006f14 <__swbuf_r+0x90>
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <__swbuf_r+0x9c>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <__swbuf_r+0x7a>
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	e7cf      	b.n	8006e9e <__swbuf_r+0x1a>
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <__swbuf_r+0xa0>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68ec      	ldreq	r4, [r5, #12]
 8006f06:	e7ca      	b.n	8006e9e <__swbuf_r+0x1a>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f81e 	bl	8006f4c <__swsetup_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d0cb      	beq.n	8006eac <__swbuf_r+0x28>
 8006f14:	f04f 37ff 	mov.w	r7, #4294967295
 8006f18:	e7ea      	b.n	8006ef0 <__swbuf_r+0x6c>
 8006f1a:	bf00      	nop
 8006f1c:	08007af4 	.word	0x08007af4
 8006f20:	08007b14 	.word	0x08007b14
 8006f24:	08007ad4 	.word	0x08007ad4

08006f28 <_write_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <_write_r+0x20>)
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	4608      	mov	r0, r1
 8006f30:	4611      	mov	r1, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f7f9 fbda 	bl	80006f0 <_write>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_write_r+0x1e>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_write_r+0x1e>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20000534 	.word	0x20000534

08006f4c <__swsetup_r>:
 8006f4c:	4b32      	ldr	r3, [pc, #200]	; (8007018 <__swsetup_r+0xcc>)
 8006f4e:	b570      	push	{r4, r5, r6, lr}
 8006f50:	681d      	ldr	r5, [r3, #0]
 8006f52:	4606      	mov	r6, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	b125      	cbz	r5, 8006f62 <__swsetup_r+0x16>
 8006f58:	69ab      	ldr	r3, [r5, #24]
 8006f5a:	b913      	cbnz	r3, 8006f62 <__swsetup_r+0x16>
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7ff fbd1 	bl	8006704 <__sinit>
 8006f62:	4b2e      	ldr	r3, [pc, #184]	; (800701c <__swsetup_r+0xd0>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	d10f      	bne.n	8006f88 <__swsetup_r+0x3c>
 8006f68:	686c      	ldr	r4, [r5, #4]
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f70:	0719      	lsls	r1, r3, #28
 8006f72:	d42c      	bmi.n	8006fce <__swsetup_r+0x82>
 8006f74:	06dd      	lsls	r5, r3, #27
 8006f76:	d411      	bmi.n	8006f9c <__swsetup_r+0x50>
 8006f78:	2309      	movs	r3, #9
 8006f7a:	6033      	str	r3, [r6, #0]
 8006f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295
 8006f86:	e03e      	b.n	8007006 <__swsetup_r+0xba>
 8006f88:	4b25      	ldr	r3, [pc, #148]	; (8007020 <__swsetup_r+0xd4>)
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d101      	bne.n	8006f92 <__swsetup_r+0x46>
 8006f8e:	68ac      	ldr	r4, [r5, #8]
 8006f90:	e7eb      	b.n	8006f6a <__swsetup_r+0x1e>
 8006f92:	4b24      	ldr	r3, [pc, #144]	; (8007024 <__swsetup_r+0xd8>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	bf08      	it	eq
 8006f98:	68ec      	ldreq	r4, [r5, #12]
 8006f9a:	e7e6      	b.n	8006f6a <__swsetup_r+0x1e>
 8006f9c:	0758      	lsls	r0, r3, #29
 8006f9e:	d512      	bpl.n	8006fc6 <__swsetup_r+0x7a>
 8006fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fa2:	b141      	cbz	r1, 8006fb6 <__swsetup_r+0x6a>
 8006fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	d002      	beq.n	8006fb2 <__swsetup_r+0x66>
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7ff fc77 	bl	80068a0 <_free_r>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f043 0308 	orr.w	r3, r3, #8
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	b94b      	cbnz	r3, 8006fe6 <__swsetup_r+0x9a>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fdc:	d003      	beq.n	8006fe6 <__swsetup_r+0x9a>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f000 f867 	bl	80070b4 <__smakebuf_r>
 8006fe6:	89a0      	ldrh	r0, [r4, #12]
 8006fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fec:	f010 0301 	ands.w	r3, r0, #1
 8006ff0:	d00a      	beq.n	8007008 <__swsetup_r+0xbc>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60a3      	str	r3, [r4, #8]
 8006ff6:	6963      	ldr	r3, [r4, #20]
 8006ff8:	425b      	negs	r3, r3
 8006ffa:	61a3      	str	r3, [r4, #24]
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	b943      	cbnz	r3, 8007012 <__swsetup_r+0xc6>
 8007000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007004:	d1ba      	bne.n	8006f7c <__swsetup_r+0x30>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	0781      	lsls	r1, r0, #30
 800700a:	bf58      	it	pl
 800700c:	6963      	ldrpl	r3, [r4, #20]
 800700e:	60a3      	str	r3, [r4, #8]
 8007010:	e7f4      	b.n	8006ffc <__swsetup_r+0xb0>
 8007012:	2000      	movs	r0, #0
 8007014:	e7f7      	b.n	8007006 <__swsetup_r+0xba>
 8007016:	bf00      	nop
 8007018:	200002c0 	.word	0x200002c0
 800701c:	08007af4 	.word	0x08007af4
 8007020:	08007b14 	.word	0x08007b14
 8007024:	08007ad4 	.word	0x08007ad4

08007028 <_close_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d06      	ldr	r5, [pc, #24]	; (8007044 <_close_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f7fa f813 	bl	800105e <_close>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_close_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_close_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20000534 	.word	0x20000534

08007048 <_lseek_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d07      	ldr	r5, [pc, #28]	; (8007068 <_lseek_r+0x20>)
 800704c:	4604      	mov	r4, r0
 800704e:	4608      	mov	r0, r1
 8007050:	4611      	mov	r1, r2
 8007052:	2200      	movs	r2, #0
 8007054:	602a      	str	r2, [r5, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f7fa f828 	bl	80010ac <_lseek>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_lseek_r+0x1e>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_lseek_r+0x1e>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20000534 	.word	0x20000534

0800706c <__swhatbuf_r>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	460e      	mov	r6, r1
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	2900      	cmp	r1, #0
 8007076:	b096      	sub	sp, #88	; 0x58
 8007078:	4614      	mov	r4, r2
 800707a:	461d      	mov	r5, r3
 800707c:	da07      	bge.n	800708e <__swhatbuf_r+0x22>
 800707e:	2300      	movs	r3, #0
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	89b3      	ldrh	r3, [r6, #12]
 8007084:	061a      	lsls	r2, r3, #24
 8007086:	d410      	bmi.n	80070aa <__swhatbuf_r+0x3e>
 8007088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800708c:	e00e      	b.n	80070ac <__swhatbuf_r+0x40>
 800708e:	466a      	mov	r2, sp
 8007090:	f000 fb64 	bl	800775c <_fstat_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	dbf2      	blt.n	800707e <__swhatbuf_r+0x12>
 8007098:	9a01      	ldr	r2, [sp, #4]
 800709a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800709e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070a2:	425a      	negs	r2, r3
 80070a4:	415a      	adcs	r2, r3
 80070a6:	602a      	str	r2, [r5, #0]
 80070a8:	e7ee      	b.n	8007088 <__swhatbuf_r+0x1c>
 80070aa:	2340      	movs	r3, #64	; 0x40
 80070ac:	2000      	movs	r0, #0
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	b016      	add	sp, #88	; 0x58
 80070b2:	bd70      	pop	{r4, r5, r6, pc}

080070b4 <__smakebuf_r>:
 80070b4:	898b      	ldrh	r3, [r1, #12]
 80070b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070b8:	079d      	lsls	r5, r3, #30
 80070ba:	4606      	mov	r6, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	d507      	bpl.n	80070d0 <__smakebuf_r+0x1c>
 80070c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	6123      	str	r3, [r4, #16]
 80070c8:	2301      	movs	r3, #1
 80070ca:	6163      	str	r3, [r4, #20]
 80070cc:	b002      	add	sp, #8
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	ab01      	add	r3, sp, #4
 80070d2:	466a      	mov	r2, sp
 80070d4:	f7ff ffca 	bl	800706c <__swhatbuf_r>
 80070d8:	9900      	ldr	r1, [sp, #0]
 80070da:	4605      	mov	r5, r0
 80070dc:	4630      	mov	r0, r6
 80070de:	f7ff fc2f 	bl	8006940 <_malloc_r>
 80070e2:	b948      	cbnz	r0, 80070f8 <__smakebuf_r+0x44>
 80070e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e8:	059a      	lsls	r2, r3, #22
 80070ea:	d4ef      	bmi.n	80070cc <__smakebuf_r+0x18>
 80070ec:	f023 0303 	bic.w	r3, r3, #3
 80070f0:	f043 0302 	orr.w	r3, r3, #2
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	e7e3      	b.n	80070c0 <__smakebuf_r+0xc>
 80070f8:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <__smakebuf_r+0x7c>)
 80070fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	6020      	str	r0, [r4, #0]
 8007100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	6163      	str	r3, [r4, #20]
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	6120      	str	r0, [r4, #16]
 800710e:	b15b      	cbz	r3, 8007128 <__smakebuf_r+0x74>
 8007110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007114:	4630      	mov	r0, r6
 8007116:	f000 fb33 	bl	8007780 <_isatty_r>
 800711a:	b128      	cbz	r0, 8007128 <__smakebuf_r+0x74>
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	89a0      	ldrh	r0, [r4, #12]
 800712a:	4305      	orrs	r5, r0
 800712c:	81a5      	strh	r5, [r4, #12]
 800712e:	e7cd      	b.n	80070cc <__smakebuf_r+0x18>
 8007130:	0800669d 	.word	0x0800669d

08007134 <malloc>:
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <malloc+0xc>)
 8007136:	4601      	mov	r1, r0
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	f7ff bc01 	b.w	8006940 <_malloc_r>
 800713e:	bf00      	nop
 8007140:	200002c0 	.word	0x200002c0

08007144 <__malloc_lock>:
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <__malloc_lock+0x8>)
 8007146:	f7ff bba0 	b.w	800688a <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	2000052c 	.word	0x2000052c

08007150 <__malloc_unlock>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__malloc_unlock+0x8>)
 8007152:	f7ff bb9b 	b.w	800688c <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	2000052c 	.word	0x2000052c

0800715c <__sfputc_r>:
 800715c:	6893      	ldr	r3, [r2, #8]
 800715e:	3b01      	subs	r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	b410      	push	{r4}
 8007164:	6093      	str	r3, [r2, #8]
 8007166:	da08      	bge.n	800717a <__sfputc_r+0x1e>
 8007168:	6994      	ldr	r4, [r2, #24]
 800716a:	42a3      	cmp	r3, r4
 800716c:	db01      	blt.n	8007172 <__sfputc_r+0x16>
 800716e:	290a      	cmp	r1, #10
 8007170:	d103      	bne.n	800717a <__sfputc_r+0x1e>
 8007172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007176:	f7ff be85 	b.w	8006e84 <__swbuf_r>
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	1c58      	adds	r0, r3, #1
 800717e:	6010      	str	r0, [r2, #0]
 8007180:	7019      	strb	r1, [r3, #0]
 8007182:	4608      	mov	r0, r1
 8007184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007188:	4770      	bx	lr

0800718a <__sfputs_r>:
 800718a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718c:	4606      	mov	r6, r0
 800718e:	460f      	mov	r7, r1
 8007190:	4614      	mov	r4, r2
 8007192:	18d5      	adds	r5, r2, r3
 8007194:	42ac      	cmp	r4, r5
 8007196:	d101      	bne.n	800719c <__sfputs_r+0x12>
 8007198:	2000      	movs	r0, #0
 800719a:	e007      	b.n	80071ac <__sfputs_r+0x22>
 800719c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a0:	463a      	mov	r2, r7
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7ff ffda 	bl	800715c <__sfputc_r>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d1f3      	bne.n	8007194 <__sfputs_r+0xa>
 80071ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071b0 <_vfiprintf_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	460d      	mov	r5, r1
 80071b6:	b09d      	sub	sp, #116	; 0x74
 80071b8:	4614      	mov	r4, r2
 80071ba:	4698      	mov	r8, r3
 80071bc:	4606      	mov	r6, r0
 80071be:	b118      	cbz	r0, 80071c8 <_vfiprintf_r+0x18>
 80071c0:	6983      	ldr	r3, [r0, #24]
 80071c2:	b90b      	cbnz	r3, 80071c8 <_vfiprintf_r+0x18>
 80071c4:	f7ff fa9e 	bl	8006704 <__sinit>
 80071c8:	4b89      	ldr	r3, [pc, #548]	; (80073f0 <_vfiprintf_r+0x240>)
 80071ca:	429d      	cmp	r5, r3
 80071cc:	d11b      	bne.n	8007206 <_vfiprintf_r+0x56>
 80071ce:	6875      	ldr	r5, [r6, #4]
 80071d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071d2:	07d9      	lsls	r1, r3, #31
 80071d4:	d405      	bmi.n	80071e2 <_vfiprintf_r+0x32>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	059a      	lsls	r2, r3, #22
 80071da:	d402      	bmi.n	80071e2 <_vfiprintf_r+0x32>
 80071dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071de:	f7ff fb54 	bl	800688a <__retarget_lock_acquire_recursive>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	071b      	lsls	r3, r3, #28
 80071e6:	d501      	bpl.n	80071ec <_vfiprintf_r+0x3c>
 80071e8:	692b      	ldr	r3, [r5, #16]
 80071ea:	b9eb      	cbnz	r3, 8007228 <_vfiprintf_r+0x78>
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff feac 	bl	8006f4c <__swsetup_r>
 80071f4:	b1c0      	cbz	r0, 8007228 <_vfiprintf_r+0x78>
 80071f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071f8:	07dc      	lsls	r4, r3, #31
 80071fa:	d50e      	bpl.n	800721a <_vfiprintf_r+0x6a>
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	b01d      	add	sp, #116	; 0x74
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	4b7b      	ldr	r3, [pc, #492]	; (80073f4 <_vfiprintf_r+0x244>)
 8007208:	429d      	cmp	r5, r3
 800720a:	d101      	bne.n	8007210 <_vfiprintf_r+0x60>
 800720c:	68b5      	ldr	r5, [r6, #8]
 800720e:	e7df      	b.n	80071d0 <_vfiprintf_r+0x20>
 8007210:	4b79      	ldr	r3, [pc, #484]	; (80073f8 <_vfiprintf_r+0x248>)
 8007212:	429d      	cmp	r5, r3
 8007214:	bf08      	it	eq
 8007216:	68f5      	ldreq	r5, [r6, #12]
 8007218:	e7da      	b.n	80071d0 <_vfiprintf_r+0x20>
 800721a:	89ab      	ldrh	r3, [r5, #12]
 800721c:	0598      	lsls	r0, r3, #22
 800721e:	d4ed      	bmi.n	80071fc <_vfiprintf_r+0x4c>
 8007220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007222:	f7ff fb33 	bl	800688c <__retarget_lock_release_recursive>
 8007226:	e7e9      	b.n	80071fc <_vfiprintf_r+0x4c>
 8007228:	2300      	movs	r3, #0
 800722a:	9309      	str	r3, [sp, #36]	; 0x24
 800722c:	2320      	movs	r3, #32
 800722e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007232:	f8cd 800c 	str.w	r8, [sp, #12]
 8007236:	2330      	movs	r3, #48	; 0x30
 8007238:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073fc <_vfiprintf_r+0x24c>
 800723c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007240:	f04f 0901 	mov.w	r9, #1
 8007244:	4623      	mov	r3, r4
 8007246:	469a      	mov	sl, r3
 8007248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800724c:	b10a      	cbz	r2, 8007252 <_vfiprintf_r+0xa2>
 800724e:	2a25      	cmp	r2, #37	; 0x25
 8007250:	d1f9      	bne.n	8007246 <_vfiprintf_r+0x96>
 8007252:	ebba 0b04 	subs.w	fp, sl, r4
 8007256:	d00b      	beq.n	8007270 <_vfiprintf_r+0xc0>
 8007258:	465b      	mov	r3, fp
 800725a:	4622      	mov	r2, r4
 800725c:	4629      	mov	r1, r5
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff ff93 	bl	800718a <__sfputs_r>
 8007264:	3001      	adds	r0, #1
 8007266:	f000 80aa 	beq.w	80073be <_vfiprintf_r+0x20e>
 800726a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800726c:	445a      	add	r2, fp
 800726e:	9209      	str	r2, [sp, #36]	; 0x24
 8007270:	f89a 3000 	ldrb.w	r3, [sl]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80a2 	beq.w	80073be <_vfiprintf_r+0x20e>
 800727a:	2300      	movs	r3, #0
 800727c:	f04f 32ff 	mov.w	r2, #4294967295
 8007280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007284:	f10a 0a01 	add.w	sl, sl, #1
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	9307      	str	r3, [sp, #28]
 800728c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007290:	931a      	str	r3, [sp, #104]	; 0x68
 8007292:	4654      	mov	r4, sl
 8007294:	2205      	movs	r2, #5
 8007296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729a:	4858      	ldr	r0, [pc, #352]	; (80073fc <_vfiprintf_r+0x24c>)
 800729c:	f7f8 ffb0 	bl	8000200 <memchr>
 80072a0:	9a04      	ldr	r2, [sp, #16]
 80072a2:	b9d8      	cbnz	r0, 80072dc <_vfiprintf_r+0x12c>
 80072a4:	06d1      	lsls	r1, r2, #27
 80072a6:	bf44      	itt	mi
 80072a8:	2320      	movmi	r3, #32
 80072aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ae:	0713      	lsls	r3, r2, #28
 80072b0:	bf44      	itt	mi
 80072b2:	232b      	movmi	r3, #43	; 0x2b
 80072b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b8:	f89a 3000 	ldrb.w	r3, [sl]
 80072bc:	2b2a      	cmp	r3, #42	; 0x2a
 80072be:	d015      	beq.n	80072ec <_vfiprintf_r+0x13c>
 80072c0:	9a07      	ldr	r2, [sp, #28]
 80072c2:	4654      	mov	r4, sl
 80072c4:	2000      	movs	r0, #0
 80072c6:	f04f 0c0a 	mov.w	ip, #10
 80072ca:	4621      	mov	r1, r4
 80072cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072d0:	3b30      	subs	r3, #48	; 0x30
 80072d2:	2b09      	cmp	r3, #9
 80072d4:	d94e      	bls.n	8007374 <_vfiprintf_r+0x1c4>
 80072d6:	b1b0      	cbz	r0, 8007306 <_vfiprintf_r+0x156>
 80072d8:	9207      	str	r2, [sp, #28]
 80072da:	e014      	b.n	8007306 <_vfiprintf_r+0x156>
 80072dc:	eba0 0308 	sub.w	r3, r0, r8
 80072e0:	fa09 f303 	lsl.w	r3, r9, r3
 80072e4:	4313      	orrs	r3, r2
 80072e6:	9304      	str	r3, [sp, #16]
 80072e8:	46a2      	mov	sl, r4
 80072ea:	e7d2      	b.n	8007292 <_vfiprintf_r+0xe2>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	1d19      	adds	r1, r3, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	9103      	str	r1, [sp, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfbb      	ittet	lt
 80072f8:	425b      	neglt	r3, r3
 80072fa:	f042 0202 	orrlt.w	r2, r2, #2
 80072fe:	9307      	strge	r3, [sp, #28]
 8007300:	9307      	strlt	r3, [sp, #28]
 8007302:	bfb8      	it	lt
 8007304:	9204      	strlt	r2, [sp, #16]
 8007306:	7823      	ldrb	r3, [r4, #0]
 8007308:	2b2e      	cmp	r3, #46	; 0x2e
 800730a:	d10c      	bne.n	8007326 <_vfiprintf_r+0x176>
 800730c:	7863      	ldrb	r3, [r4, #1]
 800730e:	2b2a      	cmp	r3, #42	; 0x2a
 8007310:	d135      	bne.n	800737e <_vfiprintf_r+0x1ce>
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	1d1a      	adds	r2, r3, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	9203      	str	r2, [sp, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	bfb8      	it	lt
 800731e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007322:	3402      	adds	r4, #2
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800740c <_vfiprintf_r+0x25c>
 800732a:	7821      	ldrb	r1, [r4, #0]
 800732c:	2203      	movs	r2, #3
 800732e:	4650      	mov	r0, sl
 8007330:	f7f8 ff66 	bl	8000200 <memchr>
 8007334:	b140      	cbz	r0, 8007348 <_vfiprintf_r+0x198>
 8007336:	2340      	movs	r3, #64	; 0x40
 8007338:	eba0 000a 	sub.w	r0, r0, sl
 800733c:	fa03 f000 	lsl.w	r0, r3, r0
 8007340:	9b04      	ldr	r3, [sp, #16]
 8007342:	4303      	orrs	r3, r0
 8007344:	3401      	adds	r4, #1
 8007346:	9304      	str	r3, [sp, #16]
 8007348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800734c:	482c      	ldr	r0, [pc, #176]	; (8007400 <_vfiprintf_r+0x250>)
 800734e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007352:	2206      	movs	r2, #6
 8007354:	f7f8 ff54 	bl	8000200 <memchr>
 8007358:	2800      	cmp	r0, #0
 800735a:	d03f      	beq.n	80073dc <_vfiprintf_r+0x22c>
 800735c:	4b29      	ldr	r3, [pc, #164]	; (8007404 <_vfiprintf_r+0x254>)
 800735e:	bb1b      	cbnz	r3, 80073a8 <_vfiprintf_r+0x1f8>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	3307      	adds	r3, #7
 8007364:	f023 0307 	bic.w	r3, r3, #7
 8007368:	3308      	adds	r3, #8
 800736a:	9303      	str	r3, [sp, #12]
 800736c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736e:	443b      	add	r3, r7
 8007370:	9309      	str	r3, [sp, #36]	; 0x24
 8007372:	e767      	b.n	8007244 <_vfiprintf_r+0x94>
 8007374:	fb0c 3202 	mla	r2, ip, r2, r3
 8007378:	460c      	mov	r4, r1
 800737a:	2001      	movs	r0, #1
 800737c:	e7a5      	b.n	80072ca <_vfiprintf_r+0x11a>
 800737e:	2300      	movs	r3, #0
 8007380:	3401      	adds	r4, #1
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	4619      	mov	r1, r3
 8007386:	f04f 0c0a 	mov.w	ip, #10
 800738a:	4620      	mov	r0, r4
 800738c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007390:	3a30      	subs	r2, #48	; 0x30
 8007392:	2a09      	cmp	r2, #9
 8007394:	d903      	bls.n	800739e <_vfiprintf_r+0x1ee>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0c5      	beq.n	8007326 <_vfiprintf_r+0x176>
 800739a:	9105      	str	r1, [sp, #20]
 800739c:	e7c3      	b.n	8007326 <_vfiprintf_r+0x176>
 800739e:	fb0c 2101 	mla	r1, ip, r1, r2
 80073a2:	4604      	mov	r4, r0
 80073a4:	2301      	movs	r3, #1
 80073a6:	e7f0      	b.n	800738a <_vfiprintf_r+0x1da>
 80073a8:	ab03      	add	r3, sp, #12
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	462a      	mov	r2, r5
 80073ae:	4b16      	ldr	r3, [pc, #88]	; (8007408 <_vfiprintf_r+0x258>)
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	4630      	mov	r0, r6
 80073b4:	f3af 8000 	nop.w
 80073b8:	4607      	mov	r7, r0
 80073ba:	1c78      	adds	r0, r7, #1
 80073bc:	d1d6      	bne.n	800736c <_vfiprintf_r+0x1bc>
 80073be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073c0:	07d9      	lsls	r1, r3, #31
 80073c2:	d405      	bmi.n	80073d0 <_vfiprintf_r+0x220>
 80073c4:	89ab      	ldrh	r3, [r5, #12]
 80073c6:	059a      	lsls	r2, r3, #22
 80073c8:	d402      	bmi.n	80073d0 <_vfiprintf_r+0x220>
 80073ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073cc:	f7ff fa5e 	bl	800688c <__retarget_lock_release_recursive>
 80073d0:	89ab      	ldrh	r3, [r5, #12]
 80073d2:	065b      	lsls	r3, r3, #25
 80073d4:	f53f af12 	bmi.w	80071fc <_vfiprintf_r+0x4c>
 80073d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073da:	e711      	b.n	8007200 <_vfiprintf_r+0x50>
 80073dc:	ab03      	add	r3, sp, #12
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	462a      	mov	r2, r5
 80073e2:	4b09      	ldr	r3, [pc, #36]	; (8007408 <_vfiprintf_r+0x258>)
 80073e4:	a904      	add	r1, sp, #16
 80073e6:	4630      	mov	r0, r6
 80073e8:	f000 f880 	bl	80074ec <_printf_i>
 80073ec:	e7e4      	b.n	80073b8 <_vfiprintf_r+0x208>
 80073ee:	bf00      	nop
 80073f0:	08007af4 	.word	0x08007af4
 80073f4:	08007b14 	.word	0x08007b14
 80073f8:	08007ad4 	.word	0x08007ad4
 80073fc:	08007c39 	.word	0x08007c39
 8007400:	08007c43 	.word	0x08007c43
 8007404:	00000000 	.word	0x00000000
 8007408:	0800718b 	.word	0x0800718b
 800740c:	08007c3f 	.word	0x08007c3f

08007410 <_printf_common>:
 8007410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007414:	4616      	mov	r6, r2
 8007416:	4699      	mov	r9, r3
 8007418:	688a      	ldr	r2, [r1, #8]
 800741a:	690b      	ldr	r3, [r1, #16]
 800741c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007420:	4293      	cmp	r3, r2
 8007422:	bfb8      	it	lt
 8007424:	4613      	movlt	r3, r2
 8007426:	6033      	str	r3, [r6, #0]
 8007428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800742c:	4607      	mov	r7, r0
 800742e:	460c      	mov	r4, r1
 8007430:	b10a      	cbz	r2, 8007436 <_printf_common+0x26>
 8007432:	3301      	adds	r3, #1
 8007434:	6033      	str	r3, [r6, #0]
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	0699      	lsls	r1, r3, #26
 800743a:	bf42      	ittt	mi
 800743c:	6833      	ldrmi	r3, [r6, #0]
 800743e:	3302      	addmi	r3, #2
 8007440:	6033      	strmi	r3, [r6, #0]
 8007442:	6825      	ldr	r5, [r4, #0]
 8007444:	f015 0506 	ands.w	r5, r5, #6
 8007448:	d106      	bne.n	8007458 <_printf_common+0x48>
 800744a:	f104 0a19 	add.w	sl, r4, #25
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	6832      	ldr	r2, [r6, #0]
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	42ab      	cmp	r3, r5
 8007456:	dc26      	bgt.n	80074a6 <_printf_common+0x96>
 8007458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800745c:	1e13      	subs	r3, r2, #0
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	bf18      	it	ne
 8007462:	2301      	movne	r3, #1
 8007464:	0692      	lsls	r2, r2, #26
 8007466:	d42b      	bmi.n	80074c0 <_printf_common+0xb0>
 8007468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800746c:	4649      	mov	r1, r9
 800746e:	4638      	mov	r0, r7
 8007470:	47c0      	blx	r8
 8007472:	3001      	adds	r0, #1
 8007474:	d01e      	beq.n	80074b4 <_printf_common+0xa4>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	68e5      	ldr	r5, [r4, #12]
 800747a:	6832      	ldr	r2, [r6, #0]
 800747c:	f003 0306 	and.w	r3, r3, #6
 8007480:	2b04      	cmp	r3, #4
 8007482:	bf08      	it	eq
 8007484:	1aad      	subeq	r5, r5, r2
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	bf0c      	ite	eq
 800748c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007490:	2500      	movne	r5, #0
 8007492:	4293      	cmp	r3, r2
 8007494:	bfc4      	itt	gt
 8007496:	1a9b      	subgt	r3, r3, r2
 8007498:	18ed      	addgt	r5, r5, r3
 800749a:	2600      	movs	r6, #0
 800749c:	341a      	adds	r4, #26
 800749e:	42b5      	cmp	r5, r6
 80074a0:	d11a      	bne.n	80074d8 <_printf_common+0xc8>
 80074a2:	2000      	movs	r0, #0
 80074a4:	e008      	b.n	80074b8 <_printf_common+0xa8>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4652      	mov	r2, sl
 80074aa:	4649      	mov	r1, r9
 80074ac:	4638      	mov	r0, r7
 80074ae:	47c0      	blx	r8
 80074b0:	3001      	adds	r0, #1
 80074b2:	d103      	bne.n	80074bc <_printf_common+0xac>
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074bc:	3501      	adds	r5, #1
 80074be:	e7c6      	b.n	800744e <_printf_common+0x3e>
 80074c0:	18e1      	adds	r1, r4, r3
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	2030      	movs	r0, #48	; 0x30
 80074c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074ca:	4422      	add	r2, r4
 80074cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074d4:	3302      	adds	r3, #2
 80074d6:	e7c7      	b.n	8007468 <_printf_common+0x58>
 80074d8:	2301      	movs	r3, #1
 80074da:	4622      	mov	r2, r4
 80074dc:	4649      	mov	r1, r9
 80074de:	4638      	mov	r0, r7
 80074e0:	47c0      	blx	r8
 80074e2:	3001      	adds	r0, #1
 80074e4:	d0e6      	beq.n	80074b4 <_printf_common+0xa4>
 80074e6:	3601      	adds	r6, #1
 80074e8:	e7d9      	b.n	800749e <_printf_common+0x8e>
	...

080074ec <_printf_i>:
 80074ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	460c      	mov	r4, r1
 80074f2:	4691      	mov	r9, r2
 80074f4:	7e27      	ldrb	r7, [r4, #24]
 80074f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074f8:	2f78      	cmp	r7, #120	; 0x78
 80074fa:	4680      	mov	r8, r0
 80074fc:	469a      	mov	sl, r3
 80074fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007502:	d807      	bhi.n	8007514 <_printf_i+0x28>
 8007504:	2f62      	cmp	r7, #98	; 0x62
 8007506:	d80a      	bhi.n	800751e <_printf_i+0x32>
 8007508:	2f00      	cmp	r7, #0
 800750a:	f000 80d8 	beq.w	80076be <_printf_i+0x1d2>
 800750e:	2f58      	cmp	r7, #88	; 0x58
 8007510:	f000 80a3 	beq.w	800765a <_printf_i+0x16e>
 8007514:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800751c:	e03a      	b.n	8007594 <_printf_i+0xa8>
 800751e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007522:	2b15      	cmp	r3, #21
 8007524:	d8f6      	bhi.n	8007514 <_printf_i+0x28>
 8007526:	a001      	add	r0, pc, #4	; (adr r0, 800752c <_printf_i+0x40>)
 8007528:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800752c:	08007585 	.word	0x08007585
 8007530:	08007599 	.word	0x08007599
 8007534:	08007515 	.word	0x08007515
 8007538:	08007515 	.word	0x08007515
 800753c:	08007515 	.word	0x08007515
 8007540:	08007515 	.word	0x08007515
 8007544:	08007599 	.word	0x08007599
 8007548:	08007515 	.word	0x08007515
 800754c:	08007515 	.word	0x08007515
 8007550:	08007515 	.word	0x08007515
 8007554:	08007515 	.word	0x08007515
 8007558:	080076a5 	.word	0x080076a5
 800755c:	080075c9 	.word	0x080075c9
 8007560:	08007687 	.word	0x08007687
 8007564:	08007515 	.word	0x08007515
 8007568:	08007515 	.word	0x08007515
 800756c:	080076c7 	.word	0x080076c7
 8007570:	08007515 	.word	0x08007515
 8007574:	080075c9 	.word	0x080075c9
 8007578:	08007515 	.word	0x08007515
 800757c:	08007515 	.word	0x08007515
 8007580:	0800768f 	.word	0x0800768f
 8007584:	680b      	ldr	r3, [r1, #0]
 8007586:	1d1a      	adds	r2, r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	600a      	str	r2, [r1, #0]
 800758c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007594:	2301      	movs	r3, #1
 8007596:	e0a3      	b.n	80076e0 <_printf_i+0x1f4>
 8007598:	6825      	ldr	r5, [r4, #0]
 800759a:	6808      	ldr	r0, [r1, #0]
 800759c:	062e      	lsls	r6, r5, #24
 800759e:	f100 0304 	add.w	r3, r0, #4
 80075a2:	d50a      	bpl.n	80075ba <_printf_i+0xce>
 80075a4:	6805      	ldr	r5, [r0, #0]
 80075a6:	600b      	str	r3, [r1, #0]
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	da03      	bge.n	80075b4 <_printf_i+0xc8>
 80075ac:	232d      	movs	r3, #45	; 0x2d
 80075ae:	426d      	negs	r5, r5
 80075b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b4:	485e      	ldr	r0, [pc, #376]	; (8007730 <_printf_i+0x244>)
 80075b6:	230a      	movs	r3, #10
 80075b8:	e019      	b.n	80075ee <_printf_i+0x102>
 80075ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075be:	6805      	ldr	r5, [r0, #0]
 80075c0:	600b      	str	r3, [r1, #0]
 80075c2:	bf18      	it	ne
 80075c4:	b22d      	sxthne	r5, r5
 80075c6:	e7ef      	b.n	80075a8 <_printf_i+0xbc>
 80075c8:	680b      	ldr	r3, [r1, #0]
 80075ca:	6825      	ldr	r5, [r4, #0]
 80075cc:	1d18      	adds	r0, r3, #4
 80075ce:	6008      	str	r0, [r1, #0]
 80075d0:	0628      	lsls	r0, r5, #24
 80075d2:	d501      	bpl.n	80075d8 <_printf_i+0xec>
 80075d4:	681d      	ldr	r5, [r3, #0]
 80075d6:	e002      	b.n	80075de <_printf_i+0xf2>
 80075d8:	0669      	lsls	r1, r5, #25
 80075da:	d5fb      	bpl.n	80075d4 <_printf_i+0xe8>
 80075dc:	881d      	ldrh	r5, [r3, #0]
 80075de:	4854      	ldr	r0, [pc, #336]	; (8007730 <_printf_i+0x244>)
 80075e0:	2f6f      	cmp	r7, #111	; 0x6f
 80075e2:	bf0c      	ite	eq
 80075e4:	2308      	moveq	r3, #8
 80075e6:	230a      	movne	r3, #10
 80075e8:	2100      	movs	r1, #0
 80075ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ee:	6866      	ldr	r6, [r4, #4]
 80075f0:	60a6      	str	r6, [r4, #8]
 80075f2:	2e00      	cmp	r6, #0
 80075f4:	bfa2      	ittt	ge
 80075f6:	6821      	ldrge	r1, [r4, #0]
 80075f8:	f021 0104 	bicge.w	r1, r1, #4
 80075fc:	6021      	strge	r1, [r4, #0]
 80075fe:	b90d      	cbnz	r5, 8007604 <_printf_i+0x118>
 8007600:	2e00      	cmp	r6, #0
 8007602:	d04d      	beq.n	80076a0 <_printf_i+0x1b4>
 8007604:	4616      	mov	r6, r2
 8007606:	fbb5 f1f3 	udiv	r1, r5, r3
 800760a:	fb03 5711 	mls	r7, r3, r1, r5
 800760e:	5dc7      	ldrb	r7, [r0, r7]
 8007610:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007614:	462f      	mov	r7, r5
 8007616:	42bb      	cmp	r3, r7
 8007618:	460d      	mov	r5, r1
 800761a:	d9f4      	bls.n	8007606 <_printf_i+0x11a>
 800761c:	2b08      	cmp	r3, #8
 800761e:	d10b      	bne.n	8007638 <_printf_i+0x14c>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	07df      	lsls	r7, r3, #31
 8007624:	d508      	bpl.n	8007638 <_printf_i+0x14c>
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	6861      	ldr	r1, [r4, #4]
 800762a:	4299      	cmp	r1, r3
 800762c:	bfde      	ittt	le
 800762e:	2330      	movle	r3, #48	; 0x30
 8007630:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007634:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007638:	1b92      	subs	r2, r2, r6
 800763a:	6122      	str	r2, [r4, #16]
 800763c:	f8cd a000 	str.w	sl, [sp]
 8007640:	464b      	mov	r3, r9
 8007642:	aa03      	add	r2, sp, #12
 8007644:	4621      	mov	r1, r4
 8007646:	4640      	mov	r0, r8
 8007648:	f7ff fee2 	bl	8007410 <_printf_common>
 800764c:	3001      	adds	r0, #1
 800764e:	d14c      	bne.n	80076ea <_printf_i+0x1fe>
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	b004      	add	sp, #16
 8007656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765a:	4835      	ldr	r0, [pc, #212]	; (8007730 <_printf_i+0x244>)
 800765c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	680e      	ldr	r6, [r1, #0]
 8007664:	061f      	lsls	r7, r3, #24
 8007666:	f856 5b04 	ldr.w	r5, [r6], #4
 800766a:	600e      	str	r6, [r1, #0]
 800766c:	d514      	bpl.n	8007698 <_printf_i+0x1ac>
 800766e:	07d9      	lsls	r1, r3, #31
 8007670:	bf44      	itt	mi
 8007672:	f043 0320 	orrmi.w	r3, r3, #32
 8007676:	6023      	strmi	r3, [r4, #0]
 8007678:	b91d      	cbnz	r5, 8007682 <_printf_i+0x196>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	f023 0320 	bic.w	r3, r3, #32
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	2310      	movs	r3, #16
 8007684:	e7b0      	b.n	80075e8 <_printf_i+0xfc>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	f043 0320 	orr.w	r3, r3, #32
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	2378      	movs	r3, #120	; 0x78
 8007690:	4828      	ldr	r0, [pc, #160]	; (8007734 <_printf_i+0x248>)
 8007692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007696:	e7e3      	b.n	8007660 <_printf_i+0x174>
 8007698:	065e      	lsls	r6, r3, #25
 800769a:	bf48      	it	mi
 800769c:	b2ad      	uxthmi	r5, r5
 800769e:	e7e6      	b.n	800766e <_printf_i+0x182>
 80076a0:	4616      	mov	r6, r2
 80076a2:	e7bb      	b.n	800761c <_printf_i+0x130>
 80076a4:	680b      	ldr	r3, [r1, #0]
 80076a6:	6826      	ldr	r6, [r4, #0]
 80076a8:	6960      	ldr	r0, [r4, #20]
 80076aa:	1d1d      	adds	r5, r3, #4
 80076ac:	600d      	str	r5, [r1, #0]
 80076ae:	0635      	lsls	r5, r6, #24
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0x1cc>
 80076b4:	6018      	str	r0, [r3, #0]
 80076b6:	e002      	b.n	80076be <_printf_i+0x1d2>
 80076b8:	0671      	lsls	r1, r6, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0x1c8>
 80076bc:	8018      	strh	r0, [r3, #0]
 80076be:	2300      	movs	r3, #0
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	4616      	mov	r6, r2
 80076c4:	e7ba      	b.n	800763c <_printf_i+0x150>
 80076c6:	680b      	ldr	r3, [r1, #0]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	600a      	str	r2, [r1, #0]
 80076cc:	681e      	ldr	r6, [r3, #0]
 80076ce:	6862      	ldr	r2, [r4, #4]
 80076d0:	2100      	movs	r1, #0
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7f8 fd94 	bl	8000200 <memchr>
 80076d8:	b108      	cbz	r0, 80076de <_printf_i+0x1f2>
 80076da:	1b80      	subs	r0, r0, r6
 80076dc:	6060      	str	r0, [r4, #4]
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	6123      	str	r3, [r4, #16]
 80076e2:	2300      	movs	r3, #0
 80076e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e8:	e7a8      	b.n	800763c <_printf_i+0x150>
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	4632      	mov	r2, r6
 80076ee:	4649      	mov	r1, r9
 80076f0:	4640      	mov	r0, r8
 80076f2:	47d0      	blx	sl
 80076f4:	3001      	adds	r0, #1
 80076f6:	d0ab      	beq.n	8007650 <_printf_i+0x164>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	079b      	lsls	r3, r3, #30
 80076fc:	d413      	bmi.n	8007726 <_printf_i+0x23a>
 80076fe:	68e0      	ldr	r0, [r4, #12]
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	4298      	cmp	r0, r3
 8007704:	bfb8      	it	lt
 8007706:	4618      	movlt	r0, r3
 8007708:	e7a4      	b.n	8007654 <_printf_i+0x168>
 800770a:	2301      	movs	r3, #1
 800770c:	4632      	mov	r2, r6
 800770e:	4649      	mov	r1, r9
 8007710:	4640      	mov	r0, r8
 8007712:	47d0      	blx	sl
 8007714:	3001      	adds	r0, #1
 8007716:	d09b      	beq.n	8007650 <_printf_i+0x164>
 8007718:	3501      	adds	r5, #1
 800771a:	68e3      	ldr	r3, [r4, #12]
 800771c:	9903      	ldr	r1, [sp, #12]
 800771e:	1a5b      	subs	r3, r3, r1
 8007720:	42ab      	cmp	r3, r5
 8007722:	dcf2      	bgt.n	800770a <_printf_i+0x21e>
 8007724:	e7eb      	b.n	80076fe <_printf_i+0x212>
 8007726:	2500      	movs	r5, #0
 8007728:	f104 0619 	add.w	r6, r4, #25
 800772c:	e7f5      	b.n	800771a <_printf_i+0x22e>
 800772e:	bf00      	nop
 8007730:	08007c4a 	.word	0x08007c4a
 8007734:	08007c5b 	.word	0x08007c5b

08007738 <_read_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d07      	ldr	r5, [pc, #28]	; (8007758 <_read_r+0x20>)
 800773c:	4604      	mov	r4, r0
 800773e:	4608      	mov	r0, r1
 8007740:	4611      	mov	r1, r2
 8007742:	2200      	movs	r2, #0
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7f9 fc6c 	bl	8001024 <_read>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_read_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_read_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	20000534 	.word	0x20000534

0800775c <_fstat_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	; (800777c <_fstat_r+0x20>)
 8007760:	2300      	movs	r3, #0
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	f7f9 fc84 	bl	8001076 <_fstat>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d102      	bne.n	8007778 <_fstat_r+0x1c>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	b103      	cbz	r3, 8007778 <_fstat_r+0x1c>
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	bd38      	pop	{r3, r4, r5, pc}
 800777a:	bf00      	nop
 800777c:	20000534 	.word	0x20000534

08007780 <_isatty_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d06      	ldr	r5, [pc, #24]	; (800779c <_isatty_r+0x1c>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7f9 fc83 	bl	8001096 <_isatty>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_isatty_r+0x1a>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_isatty_r+0x1a>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20000534 	.word	0x20000534

080077a0 <_init>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	bf00      	nop
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr

080077ac <_fini>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	bf00      	nop
 80077b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b2:	bc08      	pop	{r3}
 80077b4:	469e      	mov	lr, r3
 80077b6:	4770      	bx	lr
