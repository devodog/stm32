
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d34  08006d34  00020324  2**0
                  CONTENTS
  4 .ARM          00000000  08006d34  08006d34  00020324  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d34  08006d34  00020324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  08006d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000324  08007060  00020324  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08007060  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155a6  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f5  00000000  00000000  000358fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00039128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1ed  00000000  00000000  00039f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013578  00000000  00000000  00058155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeb88  00000000  00000000  0006b6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a4  00000000  00000000  0011a2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000324 	.word	0x20000324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006940 	.word	0x08006940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000328 	.word	0x20000328
 80001cc:	08006940 	.word	0x08006940

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};
///////////////////////////////////////////////////
// Define cmd-line Command support functions below.
void LED(char* paramStr, int* paramValues) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 80002aa:	2202      	movs	r2, #2
 80002ac:	4939      	ldr	r1, [pc, #228]	; (8000394 <LED+0xf4>)
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f005 fe17 	bl	8005ee2 <strncmp>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d111      	bne.n	80002de <LED+0x3e>
		printf("\r\nLED ON");
 80002ba:	4837      	ldr	r0, [pc, #220]	; (8000398 <LED+0xf8>)
 80002bc:	f005 fc6a 	bl	8005b94 <iprintf>
		paramValues[0] = 1;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3308      	adds	r3, #8
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
      led2 = ON;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <LED+0xfc>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 80002dc:	e055      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 80002de:	2203      	movs	r2, #3
 80002e0:	492f      	ldr	r1, [pc, #188]	; (80003a0 <LED+0x100>)
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f005 fdfd 	bl	8005ee2 <strncmp>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d111      	bne.n	8000312 <LED+0x72>
		printf("\r\nLED OFF");
 80002ee:	482d      	ldr	r0, [pc, #180]	; (80003a4 <LED+0x104>)
 80002f0:	f005 fc50 	bl	8005b94 <iprintf>
		paramValues[0] = 0;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	3304      	adds	r3, #4
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	3308      	adds	r3, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <LED+0xfc>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
}
 8000310:	e03b      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000312:	2205      	movs	r2, #5
 8000314:	4924      	ldr	r1, [pc, #144]	; (80003a8 <LED+0x108>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f005 fde3 	bl	8005ee2 <strncmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d130      	bne.n	8000384 <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3306      	adds	r3, #6
 8000326:	4921      	ldr	r1, [pc, #132]	; (80003ac <LED+0x10c>)
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff51 	bl	80001d0 <strcmp>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01c      	beq.n	800036e <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	1d9a      	adds	r2, r3, #6
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f103 0408 	add.w	r4, r3, #8
 800033e:	4610      	mov	r0, r2
 8000340:	f005 f97a 	bl	8005638 <atoi>
 8000344:	4603      	mov	r3, r0
 8000346:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3306      	adds	r3, #6
 800034c:	4618      	mov	r0, r3
 800034e:	f005 f973 	bl	8005638 <atoi>
 8000352:	4603      	mov	r3, r0
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <LED+0x110>)
 8000356:	6013      	str	r3, [r2, #0]
         paramValues[0] = 0;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
         paramValues[1] = 0;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
         led2 = BLINKING;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <LED+0xfc>)
 8000368:	2202      	movs	r2, #2
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e003      	b.n	8000376 <LED+0xd6>
			paramValues[2] = 0;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3308      	adds	r3, #8
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <LED+0x110>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LED+0x114>)
 800037e:	f005 fc09 	bl	8005b94 <iprintf>
}
 8000382:	e002      	b.n	800038a <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LED+0x118>)
 8000386:	f005 fc05 	bl	8005b94 <iprintf>
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bd90      	pop	{r4, r7, pc}
 8000392:	bf00      	nop
 8000394:	08006958 	.word	0x08006958
 8000398:	0800695c 	.word	0x0800695c
 800039c:	20000350 	.word	0x20000350
 80003a0:	08006968 	.word	0x08006968
 80003a4:	0800696c 	.word	0x0800696c
 80003a8:	08006978 	.word	0x08006978
 80003ac:	08006980 	.word	0x08006980
 80003b0:	20000344 	.word	0x20000344
 80003b4:	08006984 	.word	0x08006984
 80003b8:	08006994 	.word	0x08006994

080003bc <ADC>:

void ADC(char* paramStr, int* paramValues){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "RO", 2) == 0) {
 80003c6:	2202      	movs	r2, #2
 80003c8:	4918      	ldr	r1, [pc, #96]	; (800042c <ADC+0x70>)
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f005 fd89 	bl	8005ee2 <strncmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d117      	bne.n	8000406 <ADC+0x4a>
      printf("\r\nADC READ ONCE");
 80003d6:	4816      	ldr	r0, [pc, #88]	; (8000430 <ADC+0x74>)
 80003d8:	f005 fbdc 	bl	8005b94 <iprintf>
      // Start ADC Conversion
      HAL_ADC_Start(&hadc1);
 80003dc:	4815      	ldr	r0, [pc, #84]	; (8000434 <ADC+0x78>)
 80003de:	f000 ffd7 	bl	8001390 <HAL_ADC_Start>
      // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 80003e2:	2101      	movs	r1, #1
 80003e4:	4813      	ldr	r0, [pc, #76]	; (8000434 <ADC+0x78>)
 80003e6:	f001 f841 	bl	800146c <HAL_ADC_PollForConversion>
      // Read The ADC Conversion Result - using 3300 + 400 offset to
      // calculate the analog value
      printf("\r\nAA Battery voltage: %ld mV", 3700*HAL_ADC_GetValue(&hadc1)/4096);
 80003ea:	4812      	ldr	r0, [pc, #72]	; (8000434 <ADC+0x78>)
 80003ec:	f001 f8fc 	bl	80015e8 <HAL_ADC_GetValue>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f640 6274 	movw	r2, #3700	; 0xe74
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	0b1b      	lsrs	r3, r3, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <ADC+0x7c>)
 8000400:	f005 fbc8 	bl	8005b94 <iprintf>
      printf("\r\nSome help text her...");
   }
   else {
      printf("\r\nUNKNOWN ADC COMMAND");
   }
}
 8000404:	e00e      	b.n	8000424 <ADC+0x68>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000406:	2202      	movs	r2, #2
 8000408:	490c      	ldr	r1, [pc, #48]	; (800043c <ADC+0x80>)
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f005 fd69 	bl	8005ee2 <strncmp>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d103      	bne.n	800041e <ADC+0x62>
      printf("\r\nSome help text her...");
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <ADC+0x84>)
 8000418:	f005 fbbc 	bl	8005b94 <iprintf>
}
 800041c:	e002      	b.n	8000424 <ADC+0x68>
      printf("\r\nUNKNOWN ADC COMMAND");
 800041e:	4809      	ldr	r0, [pc, #36]	; (8000444 <ADC+0x88>)
 8000420:	f005 fbb8 	bl	8005b94 <iprintf>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	080069ac 	.word	0x080069ac
 8000430:	080069b0 	.word	0x080069b0
 8000434:	20000360 	.word	0x20000360
 8000438:	080069c0 	.word	0x080069c0
 800043c:	080069e0 	.word	0x080069e0
 8000440:	080069e8 	.word	0x080069e8
 8000444:	08006a00 	.word	0x08006a00

08000448 <TIM>:

void TIM(char* paramStr, int* paramValues) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "OS", 2) == 0) {      
 8000452:	2202      	movs	r2, #2
 8000454:	4940      	ldr	r1, [pc, #256]	; (8000558 <TIM+0x110>)
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f005 fd43 	bl	8005ee2 <strncmp>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d120      	bne.n	80004a4 <TIM+0x5c>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[3]));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3303      	adds	r3, #3
 8000466:	4618      	mov	r0, r3
 8000468:	f005 f8e6 	bl	8005638 <atoi>
 800046c:	4602      	mov	r2, r0
 800046e:	4b3b      	ldr	r3, [pc, #236]	; (800055c <TIM+0x114>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	62da      	str	r2, [r3, #44]	; 0x2c
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3303      	adds	r3, #3
 8000478:	4618      	mov	r0, r3
 800047a:	f005 f8dd 	bl	8005638 <atoi>
 800047e:	4603      	mov	r3, r0
 8000480:	461a      	mov	r2, r3
 8000482:	4b36      	ldr	r3, [pc, #216]	; (800055c <TIM+0x114>)
 8000484:	60da      	str	r2, [r3, #12]
      
      //htim2.Init.Period = atoi(&paramStr[3]);
      // The above line has no effect since its part of the initialization process of the timer.
      // - need to update the register direct
      //
      printf("\r\nOne Shot timer with period: %d", (int)htim2.Init.Period);
 8000486:	4b35      	ldr	r3, [pc, #212]	; (800055c <TIM+0x114>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	4619      	mov	r1, r3
 800048c:	4834      	ldr	r0, [pc, #208]	; (8000560 <TIM+0x118>)
 800048e:	f005 fb81 	bl	8005b94 <iprintf>
      // To be tested...
      HAL_TIM_Base_Start_IT(&htim2);
 8000492:	4832      	ldr	r0, [pc, #200]	; (800055c <TIM+0x114>)
 8000494:	f003 fa8a 	bl	80039ac <HAL_TIM_Base_Start_IT>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049c:	4831      	ldr	r0, [pc, #196]	; (8000564 <TIM+0x11c>)
 800049e:	f001 ff43 	bl	8002328 <HAL_GPIO_TogglePin>
      printf("\r\nSome help text for the TIM command-set here...");
   }
   else {
      printf("\r\nUNKNOWN TIM COMMAND");
   }
}
 80004a2:	e054      	b.n	800054e <TIM+0x106>
   else if (strncmp(paramStr, "PERIOD", 6) == 0) {
 80004a4:	2206      	movs	r2, #6
 80004a6:	4930      	ldr	r1, [pc, #192]	; (8000568 <TIM+0x120>)
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f005 fd1a 	bl	8005ee2 <strncmp>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d118      	bne.n	80004e6 <TIM+0x9e>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[7]));
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3307      	adds	r3, #7
 80004b8:	4618      	mov	r0, r3
 80004ba:	f005 f8bd 	bl	8005638 <atoi>
 80004be:	4602      	mov	r2, r0
 80004c0:	4b26      	ldr	r3, [pc, #152]	; (800055c <TIM+0x114>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3307      	adds	r3, #7
 80004ca:	4618      	mov	r0, r3
 80004cc:	f005 f8b4 	bl	8005638 <atoi>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b21      	ldr	r3, [pc, #132]	; (800055c <TIM+0x114>)
 80004d6:	60da      	str	r2, [r3, #12]
      printf("\r\nAuto-reload period: %d", (int)htim2.Init.Period);
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <TIM+0x114>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4619      	mov	r1, r3
 80004de:	4823      	ldr	r0, [pc, #140]	; (800056c <TIM+0x124>)
 80004e0:	f005 fb58 	bl	8005b94 <iprintf>
}
 80004e4:	e033      	b.n	800054e <TIM+0x106>
   else if (strncmp(paramStr, "REPEAT", 6) == 0) {
 80004e6:	2206      	movs	r2, #6
 80004e8:	4921      	ldr	r1, [pc, #132]	; (8000570 <TIM+0x128>)
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f005 fcf9 	bl	8005ee2 <strncmp>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d11c      	bne.n	8000530 <TIM+0xe8>
      timRepeat = atoi(&paramStr[7]);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3307      	adds	r3, #7
 80004fa:	4618      	mov	r0, r3
 80004fc:	f005 f89c 	bl	8005638 <atoi>
 8000500:	4603      	mov	r3, r0
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <TIM+0x12c>)
 8000504:	6013      	str	r3, [r2, #0]
      timRepeatCount = 0;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <TIM+0x130>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim2);
 800050c:	4813      	ldr	r0, [pc, #76]	; (800055c <TIM+0x114>)
 800050e:	f003 fa4d 	bl	80039ac <HAL_TIM_Base_Start_IT>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	4813      	ldr	r0, [pc, #76]	; (8000564 <TIM+0x11c>)
 8000518:	f001 ff06 	bl	8002328 <HAL_GPIO_TogglePin>
      timMode = REPEAT;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <TIM+0x134>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
      printf("\r\nAuto-reload repeat % times", timRepeat);
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <TIM+0x12c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	4815      	ldr	r0, [pc, #84]	; (8000580 <TIM+0x138>)
 800052a:	f005 fb33 	bl	8005b94 <iprintf>
}
 800052e:	e00e      	b.n	800054e <TIM+0x106>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000530:	2202      	movs	r2, #2
 8000532:	4914      	ldr	r1, [pc, #80]	; (8000584 <TIM+0x13c>)
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f005 fcd4 	bl	8005ee2 <strncmp>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d103      	bne.n	8000548 <TIM+0x100>
      printf("\r\nSome help text for the TIM command-set here...");
 8000540:	4811      	ldr	r0, [pc, #68]	; (8000588 <TIM+0x140>)
 8000542:	f005 fb27 	bl	8005b94 <iprintf>
}
 8000546:	e002      	b.n	800054e <TIM+0x106>
      printf("\r\nUNKNOWN TIM COMMAND");
 8000548:	4810      	ldr	r0, [pc, #64]	; (800058c <TIM+0x144>)
 800054a:	f005 fb23 	bl	8005b94 <iprintf>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	08006a18 	.word	0x08006a18
 800055c:	2000048c 	.word	0x2000048c
 8000560:	08006a1c 	.word	0x08006a1c
 8000564:	48000400 	.word	0x48000400
 8000568:	08006a40 	.word	0x08006a40
 800056c:	08006a48 	.word	0x08006a48
 8000570:	08006a64 	.word	0x08006a64
 8000574:	20000000 	.word	0x20000000
 8000578:	20000340 	.word	0x20000340
 800057c:	20000351 	.word	0x20000351
 8000580:	08006a6c 	.word	0x08006a6c
 8000584:	080069e0 	.word	0x080069e0
 8000588:	08006a8c 	.word	0x08006a8c
 800058c:	08006ac0 	.word	0x08006ac0

08000590 <dummy>:

void dummy(char* paramStr, int* paramValues){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	printf("DUMMY\r\n");
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <dummy+0x18>)
 800059c:	f005 fb80 	bl	8005ca0 <puts>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08006ad8 	.word	0x08006ad8

080005ac <promt>:
  {"ADC", 4, 7, {"RO", "AVRAGE", "POLL", "HELP"}, {0, 10, 500, 0}, &ADC},
  {"TCD", 4, 7, {"OS", "PERIOD", "REPEAT", "HELP"}, {0, 10, 500, 0}, &TIM},
  {"DUMMY", 2, 6, {"TRUE", "FALSE"}, {0, 0}, &dummy}
};

void promt() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <promt+0x1c>)
 80005b2:	f005 faef 	bl	8005b94 <iprintf>
   fflush(stdout);
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <promt+0x20>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 f907 	bl	80057d0 <fflush>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08006ae0 	.word	0x08006ae0
 80005cc:	200002c0 	.word	0x200002c0

080005d0 <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
   int i = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 80005de:	2304      	movs	r3, #4
 80005e0:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 80005e2:	e03d      	b.n	8000660 <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	22ac      	movs	r2, #172	; 0xac
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <executeCmd+0xbc>)
 80005ee:	189c      	adds	r4, r3, r2
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	22ac      	movs	r2, #172	; 0xac
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a24      	ldr	r2, [pc, #144]	; (800068c <executeCmd+0xbc>)
 80005fa:	4413      	add	r3, r2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fdf1 	bl	80001e4 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	4620      	mov	r0, r4
 800060a:	f005 fc6a 	bl	8005ee2 <strncmp>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d122      	bne.n	800065a <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 8000614:	4a1d      	ldr	r2, [pc, #116]	; (800068c <executeCmd+0xbc>)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	21ac      	movs	r1, #172	; 0xac
 800061a:	fb01 f303 	mul.w	r3, r1, r3
 800061e:	4413      	add	r3, r2
 8000620:	33a8      	adds	r3, #168	; 0xa8
 8000622:	681c      	ldr	r4, [r3, #0]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	22ac      	movs	r2, #172	; 0xac
 8000628:	fb02 f303 	mul.w	r3, r2, r3
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <executeCmd+0xbc>)
 800062e:	4413      	add	r3, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fdd7 	bl	80001e4 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	3301      	adds	r3, #1
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	441a      	add	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	21ac      	movs	r1, #172	; 0xac
 8000642:	fb01 f303 	mul.w	r3, r1, r3
 8000646:	3380      	adds	r3, #128	; 0x80
 8000648:	4910      	ldr	r1, [pc, #64]	; (800068c <executeCmd+0xbc>)
 800064a:	440b      	add	r3, r1
 800064c:	4619      	mov	r1, r3
 800064e:	4610      	mov	r0, r2
 8000650:	47a0      	blx	r4
       /*** for test only...
 		 printf("\r\nparamValues[0]: %d, paramValues[1]: %d, paramValues[2]: %d",
               mcuCmds[i].paramValues[0],mcuCmds[i].paramValues[1],mcuCmds[i].paramValues[2]);
               ***/
 		 promt();
 8000652:	f7ff ffab 	bl	80005ac <promt>
     	 return 0;
 8000656:	2300      	movs	r3, #0
 8000658:	e014      	b.n	8000684 <executeCmd+0xb4>
   for (; i < numberOfCommands; i++) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	429a      	cmp	r2, r3
 8000666:	d8bd      	bhi.n	80005e4 <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	429a      	cmp	r2, r3
 800066e:	d808      	bhi.n	8000682 <executeCmd+0xb2>
      printf("\r\nThe command: %s[%d], is not recognized", termInput, numberOfCommands);
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	4806      	ldr	r0, [pc, #24]	; (8000690 <executeCmd+0xc0>)
 8000676:	f005 fa8d 	bl	8005b94 <iprintf>
      promt();
 800067a:	f7ff ff97 	bl	80005ac <promt>
      return -1;
 800067e:	23ff      	movs	r3, #255	; 0xff
 8000680:	e000      	b.n	8000684 <executeCmd+0xb4>
   }
   else {
	  return -2;
 8000682:	23fe      	movs	r3, #254	; 0xfe
   }
}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	20000004 	.word	0x20000004
 8000690:	08006aec 	.word	0x08006aec

08000694 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <_write+0x28>)
 80006ac:	f003 fdec 	bl	8004288 <HAL_UART_Transmit>
	return len;
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200003b0 	.word	0x200003b0

080006c0 <HAL_UART_RxCpltCallback>:
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
uint8_t timMode = ONE_SHOT;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <HAL_UART_RxCpltCallback+0x90>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b0d      	cmp	r3, #13
 80006ce:	d126      	bne.n	800071e <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_UART_RxCpltCallback+0x94>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	dd1a      	ble.n	800070e <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	481e      	ldr	r0, [pc, #120]	; (8000758 <HAL_UART_RxCpltCallback+0x98>)
 80006e0:	f001 fe0a 	bl	80022f8 <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_UART_RxCpltCallback+0x94>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	481c      	ldr	r0, [pc, #112]	; (800075c <HAL_UART_RxCpltCallback+0x9c>)
 80006ec:	f7ff ff70 	bl	80005d0 <executeCmd>
			bytesReceived = 0;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_UART_RxCpltCallback+0x94>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80006f6:	2250      	movs	r2, #80	; 0x50
 80006f8:	2100      	movs	r1, #0
 80006fa:	4818      	ldr	r0, [pc, #96]	; (800075c <HAL_UART_RxCpltCallback+0x9c>)
 80006fc:	f005 f997 	bl	8005a2e <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000706:	4814      	ldr	r0, [pc, #80]	; (8000758 <HAL_UART_RxCpltCallback+0x98>)
 8000708:	f001 fdf6 	bl	80022f8 <HAL_GPIO_WritePin>
 800070c:	e001      	b.n	8000712 <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 800070e:	f7ff ff4d 	bl	80005ac <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	490e      	ldr	r1, [pc, #56]	; (8000750 <HAL_UART_RxCpltCallback+0x90>)
 8000716:	4812      	ldr	r0, [pc, #72]	; (8000760 <HAL_UART_RxCpltCallback+0xa0>)
 8000718:	f003 fe40 	bl	800439c <HAL_UART_Receive_IT>
		return;
 800071c:	e015      	b.n	800074a <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	2201      	movs	r2, #1
 8000722:	490b      	ldr	r1, [pc, #44]	; (8000750 <HAL_UART_RxCpltCallback+0x90>)
 8000724:	480e      	ldr	r0, [pc, #56]	; (8000760 <HAL_UART_RxCpltCallback+0xa0>)
 8000726:	f003 fdaf 	bl	8004288 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_UART_RxCpltCallback+0x94>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_UART_RxCpltCallback+0x90>)
 8000730:	7811      	ldrb	r1, [r2, #0]
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <HAL_UART_RxCpltCallback+0x9c>)
 8000734:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <HAL_UART_RxCpltCallback+0x94>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <HAL_UART_RxCpltCallback+0x94>)
 800073e:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	4903      	ldr	r1, [pc, #12]	; (8000750 <HAL_UART_RxCpltCallback+0x90>)
 8000744:	4806      	ldr	r0, [pc, #24]	; (8000760 <HAL_UART_RxCpltCallback+0xa0>)
 8000746:	f003 fe29 	bl	800439c <HAL_UART_Receive_IT>
}
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000348 	.word	0x20000348
 8000754:	2000034c 	.word	0x2000034c
 8000758:	48000400 	.word	0x48000400
 800075c:	20000438 	.word	0x20000438
 8000760:	200003b0 	.word	0x200003b0

08000764 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
   if (timMode == ONE_SHOT) {
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d108      	bne.n	8000786 <HAL_TIM_PeriodElapsedCallback+0x22>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000778:	480e      	ldr	r0, [pc, #56]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800077a:	f001 fdd5 	bl	8002328 <HAL_GPIO_TogglePin>
      HAL_TIM_Base_Stop_IT(&htim2);
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000780:	f003 f968 	bl	8003a54 <HAL_TIM_Base_Stop_IT>
         HAL_TIM_Base_Stop_IT(&htim2);
      }
   }
   //printf("\r\nHAL_TIM_PeriodElapsedCallback");
   //promt();
}
 8000784:	e010      	b.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x44>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	480a      	ldr	r0, [pc, #40]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800078c:	f001 fdcc 	bl	8002328 <HAL_GPIO_TogglePin>
      if (timRepeatCount++ > timRepeat) {
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	4909      	ldr	r1, [pc, #36]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000798:	600a      	str	r2, [r1, #0]
 800079a:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800079c:	6812      	ldr	r2, [r2, #0]
 800079e:	4293      	cmp	r3, r2
 80007a0:	dd02      	ble.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x44>
         HAL_TIM_Base_Stop_IT(&htim2);
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80007a4:	f003 f956 	bl	8003a54 <HAL_TIM_Base_Stop_IT>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000351 	.word	0x20000351
 80007b4:	48000400 	.word	0x48000400
 80007b8:	2000048c 	.word	0x2000048c
 80007bc:	20000340 	.word	0x20000340
 80007c0:	20000000 	.word	0x20000000

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <main+0xb8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6898      	ldr	r0, [r3, #8]
 80007d0:	2300      	movs	r3, #0
 80007d2:	2202      	movs	r2, #2
 80007d4:	2100      	movs	r1, #0
 80007d6:	f005 fa7b 	bl	8005cd0 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fbc9 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f85d 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e2:	f000 f9a1 	bl	8000b28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007e6:	f000 f96f 	bl	8000ac8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80007ea:	f000 f8a7 	bl	800093c <MX_ADC1_Init>
  MX_TIM2_Init();
 80007ee:	f000 f91b 	bl	8000a28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	4922      	ldr	r1, [pc, #136]	; (8000880 <main+0xbc>)
 80007f6:	4823      	ldr	r0, [pc, #140]	; (8000884 <main+0xc0>)
 80007f8:	f003 fdd0 	bl	800439c <HAL_UART_Receive_IT>

  //HAL_TIM_Base_Start_IT(&htim2);

  uint8_t ledState = OFF;
 80007fc:	2300      	movs	r3, #0
 80007fe:	71fb      	strb	r3, [r7, #7]
  printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 8000800:	4821      	ldr	r0, [pc, #132]	; (8000888 <main+0xc4>)
 8000802:	f005 f9c7 	bl	8005b94 <iprintf>
  printf("\r\nBuild No. %d", BUILD);
 8000806:	2165      	movs	r1, #101	; 0x65
 8000808:	4820      	ldr	r0, [pc, #128]	; (800088c <main+0xc8>)
 800080a:	f005 f9c3 	bl	8005b94 <iprintf>
  promt();
 800080e:	f7ff fecd 	bl	80005ac <promt>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <main+0xcc>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	429a      	cmp	r2, r3
 800081a:	d013      	beq.n	8000844 <main+0x80>
			ledState = led2;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <main+0xcc>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	71fb      	strb	r3, [r7, #7]
			if (led2 == ON) {
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <main+0xcc>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d106      	bne.n	8000838 <main+0x74>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	4818      	ldr	r0, [pc, #96]	; (8000894 <main+0xd0>)
 8000832:	f001 fd61 	bl	80022f8 <HAL_GPIO_WritePin>
 8000836:	e005      	b.n	8000844 <main+0x80>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	4815      	ldr	r0, [pc, #84]	; (8000894 <main+0xd0>)
 8000840:	f001 fd5a 	bl	80022f8 <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <main+0xcc>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d1e2      	bne.n	8000812 <main+0x4e>
		   if (msValue > 0) {
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <main+0xd4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	dd0a      	ble.n	800086a <main+0xa6>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000858:	480e      	ldr	r0, [pc, #56]	; (8000894 <main+0xd0>)
 800085a:	f001 fd65 	bl	8002328 <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <main+0xd4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fbea 	bl	800103c <HAL_Delay>
 8000868:	e7d3      	b.n	8000812 <main+0x4e>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000870:	4808      	ldr	r0, [pc, #32]	; (8000894 <main+0xd0>)
 8000872:	f001 fd41 	bl	80022f8 <HAL_GPIO_WritePin>
			   ledState = OFF;
 8000876:	2300      	movs	r3, #0
 8000878:	71fb      	strb	r3, [r7, #7]
		if (led2 != ledState) {
 800087a:	e7ca      	b.n	8000812 <main+0x4e>
 800087c:	200002c0 	.word	0x200002c0
 8000880:	20000348 	.word	0x20000348
 8000884:	200003b0 	.word	0x200003b0
 8000888:	08006b18 	.word	0x08006b18
 800088c:	08006b54 	.word	0x08006b54
 8000890:	20000350 	.word	0x20000350
 8000894:	48000400 	.word	0x48000400
 8000898:	20000344 	.word	0x20000344

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09c      	sub	sp, #112	; 0x70
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 f8bf 	bl	8005a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2234      	movs	r2, #52	; 0x34
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 f8b1 	bl	8005a2e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 fd3b 	bl	800235c <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80008ec:	f000 f968 	bl	8000bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000904:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fc2e 	bl	800316c <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000916:	f000 f953 	bl	8000bc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800091a:	2301      	movs	r3, #1
 800091c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fe57 	bl	80035d8 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000930:	f000 f946 	bl	8000bc0 <Error_Handler>
  }
}
 8000934:	bf00      	nop
 8000936:	3770      	adds	r7, #112	; 0x70
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000954:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000958:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800095a:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <MX_ADC1_Init+0xe8>)
 800095c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000960:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000968:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <MX_ADC1_Init+0xe8>)
 800096a:	2201      	movs	r2, #1
 800096c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000970:	2201      	movs	r2, #1
 8000972:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <MX_ADC1_Init+0xe8>)
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000984:	2201      	movs	r2, #1
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_ADC1_Init+0xe8>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000990:	2203      	movs	r2, #3
 8000992:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_ADC1_Init+0xe8>)
 800099e:	2208      	movs	r2, #8
 80009a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ae:	481d      	ldr	r0, [pc, #116]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009b0:	f000 fb68 	bl	8001084 <HAL_ADC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 80009ba:	f000 f901 	bl	8000bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009be:	230f      	movs	r3, #15
 80009c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009dc:	f000 fe12 	bl	8001604 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009e6:	f000 f8eb 	bl	8000bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009f4:	f000 fe06 	bl	8001604 <HAL_ADC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80009fe:	f000 f8df 	bl	8000bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a02:	2303      	movs	r3, #3
 8000a04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000a0c:	f000 fdfa 	bl	8001604 <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a16:	f000 f8d3 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000360 	.word	0x20000360

08000a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000a48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000a5e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000a74:	f002 ff42 	bl	80038fc <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a7e:	f000 f89f 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000a90:	f003 f92e 	bl	8003cf0 <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000a9a:	f000 f891 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_TIM2_Init+0x9c>)
 8000aac:	f003 fb1a 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000ab6:	f000 f883 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000048c 	.word	0x2000048c

08000ac8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <MX_USART1_UART_Init+0x5c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ad4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b0c:	f003 fb6e 	bl	80041ec <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b16:	f000 f853 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200003b0 	.word	0x200003b0
 8000b24:	40013800 	.word	0x40013800

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_GPIO_Init+0x90>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000b8e:	f001 fbb3 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_GPIO_Init+0x94>)
 8000bac:	f001 fa32 	bl	8002014 <HAL_GPIO_Init>

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000400 	.word	0x48000400

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x44>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_MspInit+0x44>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_MspInit+0x44>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x44>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x44>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c34:	d124      	bne.n	8000c80 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_ADC_MspInit+0x74>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <HAL_ADC_MspInit+0x74>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_ADC_MspInit+0x74>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_ADC_MspInit+0x74>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_ADC_MspInit+0x74>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_ADC_MspInit+0x74>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f001 f9ca 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c9c:	d113      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_TIM_Base_MspInit+0x44>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <HAL_TIM_Base_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_TIM_Base_MspInit+0x44>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	201c      	movs	r0, #28
 8000cbc:	f001 f8fd 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc0:	201c      	movs	r0, #28
 8000cc2:	f001 f916 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <HAL_UART_MspInit+0x8c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12f      	bne.n	8000d56 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6193      	str	r3, [r2, #24]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000d14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d18:	6153      	str	r3, [r2, #20]
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_UART_MspInit+0x90>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d26:	2330      	movs	r3, #48	; 0x30
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d36:	2307      	movs	r3, #7
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <HAL_UART_MspInit+0x94>)
 8000d42:	f001 f967 	bl	8002014 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2025      	movs	r0, #37	; 0x25
 8000d4c:	f001 f8b5 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d50:	2025      	movs	r0, #37	; 0x25
 8000d52:	f001 f8ce 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013800 	.word	0x40013800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f920 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM2_IRQHandler+0x10>)
 8000dc6:	f002 fe74 	bl	8003ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000048c 	.word	0x2000048c

08000dd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <USART1_IRQHandler+0x10>)
 8000dda:	f003 fb23 	bl	8004424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200003b0 	.word	0x200003b0

08000de8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00a      	b.n	8000e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dfa:	f3af 8000 	nop.w
 8000dfe:	4601      	mov	r1, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	b2ca      	uxtb	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <_read+0x12>
	}

return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f004 fbc0 	bl	8005640 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20004000 	.word	0x20004000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000354 	.word	0x20000354
 8000ef4:	200004f0 	.word	0x200004f0

08000ef8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f20:	f7ff ffea 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f004 fd49 	bl	80059e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f7ff fc39 	bl	80007c4 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f54:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 8000f60:	08006d3c 	.word	0x08006d3c
  ldr r2, =_sbss
 8000f64:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 8000f68:	200004ec 	.word	0x200004ec

08000f6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x28>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 ff8f 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fe1e 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 ffa7 	bl	8001f0e <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 ff6f 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200002b4 	.word	0x200002b4
 8000ff4:	200002bc 	.word	0x200002bc
 8000ff8:	200002b8 	.word	0x200002b8

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200002bc 	.word	0x200002bc
 8001020:	200004d8 	.word	0x200004d8

08001024 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;  
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200004d8 	.word	0x200004d8

0800103c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002bc 	.word	0x200002bc

08001084 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09a      	sub	sp, #104	; 0x68
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e169      	b.n	8001378 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d176      	bne.n	80011a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d152      	bne.n	8001164 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fd9b 	bl	8000c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d13b      	bne.n	8001164 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fda3 	bl	8001c38 <ADC_Disable>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12f      	bne.n	8001164 <HAL_ADC_Init+0xe0>
 8001104:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001108:	2b00      	cmp	r3, #0
 800110a:	d12b      	bne.n	8001164 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001114:	f023 0302 	bic.w	r3, r3, #2
 8001118:	f043 0202 	orr.w	r2, r3, #2
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800112e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800113e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001140:	4b8f      	ldr	r3, [pc, #572]	; (8001380 <HAL_ADC_Init+0x2fc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a8f      	ldr	r2, [pc, #572]	; (8001384 <HAL_ADC_Init+0x300>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	0c9a      	lsrs	r2, r3, #18
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001156:	e002      	b.n	800115e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	3b01      	subs	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f9      	bne.n	8001158 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800117c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001180:	d110      	bne.n	80011a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f023 0312 	bic.w	r3, r3, #18
 800118a:	f043 0210 	orr.w	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f040 80d6 	bne.w	800135e <HAL_ADC_Init+0x2da>
 80011b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 80d1 	bne.w	800135e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 80c9 	bne.w	800135e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011d4:	f043 0202 	orr.w	r2, r3, #2
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <HAL_ADC_Init+0x304>)
 80011de:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d108      	bne.n	8001204 <HAL_ADC_Init+0x180>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_Init+0x180>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_ADC_Init+0x182>
 8001204:	2300      	movs	r3, #0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11c      	bne.n	8001244 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800120a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800120c:	2b00      	cmp	r3, #0
 800120e:	d010      	beq.n	8001232 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <HAL_ADC_Init+0x1a8>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_ADC_Init+0x1a8>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <HAL_ADC_Init+0x1aa>
 800122c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800122e:	2b00      	cmp	r3, #0
 8001230:	d108      	bne.n	8001244 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	431a      	orrs	r2, r3
 8001240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001242:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e5b      	ldrb	r3, [r3, #25]
 8001248:	035b      	lsls	r3, r3, #13
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800124e:	2a01      	cmp	r2, #1
 8001250:	d002      	beq.n	8001258 <HAL_ADC_Init+0x1d4>
 8001252:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001256:	e000      	b.n	800125a <HAL_ADC_Init+0x1d6>
 8001258:	2200      	movs	r2, #0
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4313      	orrs	r3, r2
 8001268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800126a:	4313      	orrs	r3, r2
 800126c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d11b      	bne.n	80012b0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e5b      	ldrb	r3, [r3, #25]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d109      	bne.n	8001294 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	3b01      	subs	r3, #1
 8001286:	045a      	lsls	r2, r3, #17
 8001288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800128a:	4313      	orrs	r3, r2
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	663b      	str	r3, [r7, #96]	; 0x60
 8001292:	e00d      	b.n	80012b0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d007      	beq.n	80012c8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	4313      	orrs	r3, r2
 80012c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c4:	4313      	orrs	r3, r2
 80012c6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d114      	bne.n	8001300 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012e4:	f023 0302 	bic.w	r3, r3, #2
 80012e8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e1b      	ldrb	r3, [r3, #24]
 80012ee:	039a      	lsls	r2, r3, #14
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4313      	orrs	r3, r2
 80012fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012fc:	4313      	orrs	r3, r2
 80012fe:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_ADC_Init+0x308>)
 8001308:	4013      	ands	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001310:	430b      	orrs	r3, r1
 8001312:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d10c      	bne.n	8001336 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f023 010f 	bic.w	r1, r3, #15
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
 8001334:	e007      	b.n	8001346 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 020f 	bic.w	r2, r2, #15
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f023 0303 	bic.w	r3, r3, #3
 8001354:	f043 0201 	orr.w	r2, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
 800135c:	e00a      	b.n	8001374 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f023 0312 	bic.w	r3, r3, #18
 8001366:	f043 0210 	orr.w	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800136e:	2301      	movs	r3, #1
 8001370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001374:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001378:	4618      	mov	r0, r3
 800137a:	3768      	adds	r7, #104	; 0x68
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200002b4 	.word	0x200002b4
 8001384:	431bde83 	.word	0x431bde83
 8001388:	50000300 	.word	0x50000300
 800138c:	fff0c007 	.word	0xfff0c007

08001390 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d158      	bne.n	800145c <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_ADC_Start+0x28>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e054      	b.n	8001462 <HAL_ADC_Start+0xd2>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fbd5 	bl	8001b70 <ADC_Enable>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d140      	bne.n	8001452 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001406:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800141a:	d106      	bne.n	800142a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	f023 0206 	bic.w	r2, r3, #6
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	645a      	str	r2, [r3, #68]	; 0x44
 8001428:	e002      	b.n	8001430 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	221c      	movs	r2, #28
 800143e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0204 	orr.w	r2, r2, #4
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e006      	b.n	8001460 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800145a:	e001      	b.n	8001460 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800145c:	2302      	movs	r3, #2
 800145e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b08      	cmp	r3, #8
 8001480:	d102      	bne.n	8001488 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001482:	2308      	movs	r3, #8
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e02e      	b.n	80014e6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_ADC_PollForConversion+0x178>)
 800148a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	2b00      	cmp	r3, #0
 8001496:	d112      	bne.n	80014be <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d11d      	bne.n	80014e2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f043 0220 	orr.w	r2, r3, #32
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e08d      	b.n	80015da <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f043 0220 	orr.w	r2, r3, #32
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e07b      	b.n	80015da <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014e2:	230c      	movs	r3, #12
 80014e4:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80014ee:	f7ff fd99 	bl	8001024 <HAL_GetTick>
 80014f2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014f4:	e021      	b.n	800153a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d01d      	beq.n	800153a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_ADC_PollForConversion+0xa8>
 8001504:	f7ff fd8e 	bl	8001024 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d212      	bcs.n	800153a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10b      	bne.n	800153a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f043 0204 	orr.w	r2, r3, #4
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e04f      	b.n	80015da <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0d6      	beq.n	80014f6 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800155e:	2b00      	cmp	r3, #0
 8001560:	d131      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001568:	2b00      	cmp	r3, #0
 800156a:	d12c      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b08      	cmp	r3, #8
 8001578:	d125      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d112      	bne.n	80015ae <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d112      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
 80015ac:	e00b      	b.n	80015c6 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f043 0220 	orr.w	r2, r3, #32
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	50000300 	.word	0x50000300

080015e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001604:	b480      	push	{r7}
 8001606:	b09b      	sub	sp, #108	; 0x6c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x22>
 8001622:	2302      	movs	r3, #2
 8001624:	e299      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x556>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f040 827d 	bne.w	8001b38 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d81c      	bhi.n	8001680 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	461a      	mov	r2, r3
 800165a:	231f      	movs	r3, #31
 800165c:	4093      	lsls	r3, r2
 800165e:	43db      	mvns	r3, r3
 8001660:	4019      	ands	r1, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa00 f203 	lsl.w	r2, r0, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
 800167e:	e063      	b.n	8001748 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b09      	cmp	r3, #9
 8001686:	d81e      	bhi.n	80016c6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	3b1e      	subs	r3, #30
 800169c:	221f      	movs	r2, #31
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4019      	ands	r1, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	3b1e      	subs	r3, #30
 80016b8:	fa00 f203 	lsl.w	r2, r0, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
 80016c4:	e040      	b.n	8001748 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b0e      	cmp	r3, #14
 80016cc:	d81e      	bhi.n	800170c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	3b3c      	subs	r3, #60	; 0x3c
 80016e2:	221f      	movs	r2, #31
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4019      	ands	r1, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	3b3c      	subs	r3, #60	; 0x3c
 80016fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
 800170a:	e01d      	b.n	8001748 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	3b5a      	subs	r3, #90	; 0x5a
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	4019      	ands	r1, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	3b5a      	subs	r3, #90	; 0x5a
 800173c:	fa00 f203 	lsl.w	r2, r0, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 80e5 	bne.w	8001922 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d91c      	bls.n	800179a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6999      	ldr	r1, [r3, #24]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	3b1e      	subs	r3, #30
 8001772:	2207      	movs	r2, #7
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	4019      	ands	r1, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	6898      	ldr	r0, [r3, #8]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	3b1e      	subs	r3, #30
 800178c:	fa00 f203 	lsl.w	r2, r0, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	619a      	str	r2, [r3, #24]
 8001798:	e019      	b.n	80017ce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6959      	ldr	r1, [r3, #20]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	2207      	movs	r2, #7
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4019      	ands	r1, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6898      	ldr	r0, [r3, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d84f      	bhi.n	8001890 <HAL_ADC_ConfigChannel+0x28c>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <HAL_ADC_ConfigChannel+0x1f4>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	08001809 	.word	0x08001809
 80017fc:	0800182b 	.word	0x0800182b
 8001800:	0800184d 	.word	0x0800184d
 8001804:	0800186f 	.word	0x0800186f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800180e:	4b99      	ldr	r3, [pc, #612]	; (8001a74 <HAL_ADC_ConfigChannel+0x470>)
 8001810:	4013      	ands	r3, r2
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	0691      	lsls	r1, r2, #26
 8001818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800181a:	430a      	orrs	r2, r1
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001826:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001828:	e07e      	b.n	8001928 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001830:	4b90      	ldr	r3, [pc, #576]	; (8001a74 <HAL_ADC_ConfigChannel+0x470>)
 8001832:	4013      	ands	r3, r2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	0691      	lsls	r1, r2, #26
 800183a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800183c:	430a      	orrs	r2, r1
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001848:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800184a:	e06d      	b.n	8001928 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_ADC_ConfigChannel+0x470>)
 8001854:	4013      	ands	r3, r2
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	0691      	lsls	r1, r2, #26
 800185c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800185e:	430a      	orrs	r2, r1
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800186a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800186c:	e05c      	b.n	8001928 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001874:	4b7f      	ldr	r3, [pc, #508]	; (8001a74 <HAL_ADC_ConfigChannel+0x470>)
 8001876:	4013      	ands	r3, r2
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	0691      	lsls	r1, r2, #26
 800187e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001880:	430a      	orrs	r2, r1
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800188c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800188e:	e04b      	b.n	8001928 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	069b      	lsls	r3, r3, #26
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d107      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018b2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	069b      	lsls	r3, r3, #26
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d107      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018d6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	069b      	lsls	r3, r3, #26
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d107      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018fa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	069b      	lsls	r3, r3, #26
 800190c:	429a      	cmp	r2, r3
 800190e:	d10a      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800191e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001920:	e001      	b.n	8001926 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001922:	bf00      	nop
 8001924:	e000      	b.n	8001928 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001926:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d108      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x344>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x344>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_ADC_ConfigChannel+0x346>
 8001948:	2300      	movs	r3, #0
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 80ff 	bne.w	8001b4e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d00f      	beq.n	8001978 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001976:	e049      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	409a      	lsls	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b09      	cmp	r3, #9
 8001998:	d91c      	bls.n	80019d4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6999      	ldr	r1, [r3, #24]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	3b1b      	subs	r3, #27
 80019ac:	2207      	movs	r2, #7
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4019      	ands	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6898      	ldr	r0, [r3, #8]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	3b1b      	subs	r3, #27
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	619a      	str	r2, [r3, #24]
 80019d2:	e01b      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6959      	ldr	r1, [r3, #20]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	2207      	movs	r2, #7
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6898      	ldr	r0, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_ADC_ConfigChannel+0x474>)
 8001a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d105      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d014      	beq.n	8001a4e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a28:	2b11      	cmp	r3, #17
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00a      	beq.n	8001a4e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	f040 8086 	bne.w	8001b4e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d17f      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10d      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x478>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d106      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x478>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e005      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x47a>
 8001a72:	bf00      	nop
 8001a74:	83fff000 	.word	0x83fff000
 8001a78:	50000300 	.word	0x50000300
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d150      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a82:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d010      	beq.n	8001aaa <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x4a0>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x4a0>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x4a2>
 8001aa4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d13c      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d11d      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x4ea>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aba:	d118      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_ADC_ConfigChannel+0x564>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <HAL_ADC_ConfigChannel+0x568>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0c9a      	lsrs	r2, r3, #18
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ade:	e002      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f9      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aec:	e02e      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b11      	cmp	r3, #17
 8001af4:	d10b      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x50a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afe:	d106      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b0c:	e01e      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d11a      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b20:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b22:	e013      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b36:	e00a      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f043 0220 	orr.w	r2, r3, #32
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b4a:	e000      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b4c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	376c      	adds	r7, #108	; 0x6c
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	200002b4 	.word	0x200002b4
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d108      	bne.n	8001b9c <ADC_Enable+0x2c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <ADC_Enable+0x2c>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <ADC_Enable+0x2e>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d143      	bne.n	8001c2a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <ADC_Enable+0xc4>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00d      	beq.n	8001bcc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0210 	orr.w	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e02f      	b.n	8001c2c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001bdc:	f7ff fa22 	bl	8001024 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001be2:	e01b      	b.n	8001c1c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001be4:	f7ff fa1e 	bl	8001024 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d914      	bls.n	8001c1c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d00d      	beq.n	8001c1c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f043 0210 	orr.w	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e007      	b.n	8001c2c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d1dc      	bne.n	8001be4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	8000003f 	.word	0x8000003f

08001c38 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <ADC_Disable+0x2c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <ADC_Disable+0x2c>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <ADC_Disable+0x2e>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d047      	beq.n	8001cfa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030d 	and.w	r3, r3, #13
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d10f      	bne.n	8001c98 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0202 	orr.w	r2, r2, #2
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f9c8 	bl	8001024 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c96:	e029      	b.n	8001cec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f043 0210 	orr.w	r2, r3, #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e023      	b.n	8001cfc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cb4:	f7ff f9b6 	bl	8001024 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d914      	bls.n	8001cec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10d      	bne.n	8001cec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e007      	b.n	8001cfc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d0dc      	beq.n	8001cb4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d008      	beq.n	8001f4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e020      	b.n	8001f8c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020e 	bic.w	r2, r2, #14
 8001f58:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d005      	beq.n	8001fba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e027      	b.n	800200a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 020e 	bic.w	r2, r2, #14
 8001fc8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
    } 
  }
  return status;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	e14e      	b.n	80022c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8140 	beq.w	80022bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d005      	beq.n	8002054 <HAL_GPIO_Init+0x40>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d130      	bne.n	80020b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800208a:	2201      	movs	r2, #1
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 0201 	and.w	r2, r3, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d017      	beq.n	80020f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d123      	bne.n	8002146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	6939      	ldr	r1, [r7, #16]
 8002142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0203 	and.w	r2, r3, #3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 809a 	beq.w	80022bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a54      	ldr	r2, [pc, #336]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a0:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ca:	d013      	beq.n	80021f4 <HAL_GPIO_Init+0x1e0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a46      	ldr	r2, [pc, #280]	; (80022e8 <HAL_GPIO_Init+0x2d4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00d      	beq.n	80021f0 <HAL_GPIO_Init+0x1dc>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a45      	ldr	r2, [pc, #276]	; (80022ec <HAL_GPIO_Init+0x2d8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d007      	beq.n	80021ec <HAL_GPIO_Init+0x1d8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a44      	ldr	r2, [pc, #272]	; (80022f0 <HAL_GPIO_Init+0x2dc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_GPIO_Init+0x1d4>
 80021e4:	2303      	movs	r3, #3
 80021e6:	e006      	b.n	80021f6 <HAL_GPIO_Init+0x1e2>
 80021e8:	2305      	movs	r3, #5
 80021ea:	e004      	b.n	80021f6 <HAL_GPIO_Init+0x1e2>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x1e2>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_GPIO_Init+0x1e2>
 80021f4:	2300      	movs	r3, #0
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	f002 0203 	and.w	r2, r2, #3
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	4093      	lsls	r3, r2
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002206:	4937      	ldr	r1, [pc, #220]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002214:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002238:	4a2e      	ldr	r2, [pc, #184]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002262:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002292:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022b6:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f aea9 	bne.w	8002024 <HAL_GPIO_Init+0x10>
  }
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010000 	.word	0x40010000
 80022e8:	48000400 	.word	0x48000400
 80022ec:	48000800 	.word	0x48000800
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002314:	e002      	b.n	800231c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4013      	ands	r3, r2
 8002340:	041a      	lsls	r2, r3, #16
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43d9      	mvns	r1, r3
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	400b      	ands	r3, r1
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	619a      	str	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002362:	af00      	add	r7, sp, #0
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f000 bef4 	b.w	800315e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 816a 	beq.w	800265a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002386:	4bb3      	ldr	r3, [pc, #716]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d00c      	beq.n	80023ac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002392:	4bb0      	ldr	r3, [pc, #704]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d159      	bne.n	8002452 <HAL_RCC_OscConfig+0xf6>
 800239e:	4bad      	ldr	r3, [pc, #692]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023aa:	d152      	bne.n	8002452 <HAL_RCC_OscConfig+0xf6>
 80023ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <HAL_RCC_OscConfig+0x82>
 80023d8:	4b9e      	ldr	r3, [pc, #632]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0xae>
 80023de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002406:	4b93      	ldr	r3, [pc, #588]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800240e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002412:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800241e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f042 0220 	orr.w	r2, r2, #32
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f002 021f 	and.w	r2, r2, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 810c 	beq.w	8002658 <HAL_RCC_OscConfig+0x2fc>
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8106 	bne.w	8002658 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f000 be86 	b.w	800315e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x110>
 800245e:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e030      	b.n	80024ce <HAL_RCC_OscConfig+0x172>
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x134>
 8002476:	4b77      	ldr	r3, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a76      	ldr	r2, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 800247c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b74      	ldr	r3, [pc, #464]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a73      	ldr	r2, [pc, #460]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01e      	b.n	80024ce <HAL_RCC_OscConfig+0x172>
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249a:	d10c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x15a>
 800249c:	4b6d      	ldr	r3, [pc, #436]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6c      	ldr	r2, [pc, #432]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a69      	ldr	r2, [pc, #420]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e00b      	b.n	80024ce <HAL_RCC_OscConfig+0x172>
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a66      	ldr	r2, [pc, #408]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a63      	ldr	r2, [pc, #396]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ce:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	f023 020f 	bic.w	r2, r3, #15
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	495d      	ldr	r1, [pc, #372]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d059      	beq.n	80025a0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd9a 	bl	8001024 <HAL_GetTick>
 80024f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f6:	f7fe fd95 	bl	8001024 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d902      	bls.n	800250c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	f000 be29 	b.w	800315e <HAL_RCC_OscConfig+0xe02>
 800250c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002510:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002520:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0x1e2>
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x20e>
 800253e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002542:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002556:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800255a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002566:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002572:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002576:	fa92 f2a2 	rbit	r2, r2
 800257a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800257e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ab      	beq.n	80024f6 <HAL_RCC_OscConfig+0x19a>
 800259e:	e05c      	b.n	800265a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fd40 	bl	8001024 <HAL_GetTick>
 80025a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025aa:	f7fe fd3b 	bl	8001024 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d902      	bls.n	80025c0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	f000 bdcf 	b.w	800315e <HAL_RCC_OscConfig+0xe02>
 80025c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0x296>
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x2c2>
 80025f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800260e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_RCC_OscConfig+0x2f8>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002622:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002626:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800262a:	fa92 f2a2 	rbit	r2, r2
 800262e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002632:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ab      	bne.n	80025aa <HAL_RCC_OscConfig+0x24e>
 8002652:	e002      	b.n	800265a <HAL_RCC_OscConfig+0x2fe>
 8002654:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 816f 	beq.w	8002948 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800266a:	4bd0      	ldr	r3, [pc, #832]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002676:	4bcd      	ldr	r3, [pc, #820]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b08      	cmp	r3, #8
 8002680:	d16c      	bne.n	800275c <HAL_RCC_OscConfig+0x400>
 8002682:	4bca      	ldr	r3, [pc, #808]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d166      	bne.n	800275c <HAL_RCC_OscConfig+0x400>
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_RCC_OscConfig+0x362>
 80026b8:	4bbc      	ldr	r3, [pc, #752]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	e013      	b.n	80026e6 <HAL_RCC_OscConfig+0x38a>
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026e2:	4bb2      	ldr	r3, [pc, #712]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2202      	movs	r2, #2
 80026e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026f0:	fa92 f2a2 	rbit	r2, r2
 80026f4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80026f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80026fc:	fab2 f282 	clz	r2, r2
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f042 0220 	orr.w	r2, r2, #32
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	f002 021f 	and.w	r2, r2, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <HAL_RCC_OscConfig+0x3cc>
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d002      	beq.n	8002728 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f000 bd1b 	b.w	800315e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	21f8      	movs	r1, #248	; 0xf8
 8002738:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002740:	fa91 f1a1 	rbit	r1, r1
 8002744:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002748:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800274c:	fab1 f181 	clz	r1, r1
 8002750:	b2c9      	uxtb	r1, r1
 8002752:	408b      	lsls	r3, r1
 8002754:	4995      	ldr	r1, [pc, #596]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	e0f5      	b.n	8002948 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8085 	beq.w	8002872 <HAL_RCC_OscConfig+0x516>
 8002768:	2301      	movs	r3, #1
 800276a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800277a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	461a      	mov	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fc46 	bl	8001024 <HAL_GetTick>
 8002798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe fc41 	bl	8001024 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f000 bcd5 	b.w	800315e <HAL_RCC_OscConfig+0xe02>
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d102      	bne.n	80027e4 <HAL_RCC_OscConfig+0x488>
 80027de:	4b73      	ldr	r3, [pc, #460]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e013      	b.n	800280c <HAL_RCC_OscConfig+0x4b0>
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002808:	4b68      	ldr	r3, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2202      	movs	r2, #2
 800280e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002812:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002816:	fa92 f2a2 	rbit	r2, r2
 800281a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800281e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0220 	orr.w	r2, r2, #32
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0af      	beq.n	800279e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	21f8      	movs	r1, #248	; 0xf8
 800284e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002856:	fa91 f1a1 	rbit	r1, r1
 800285a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800285e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002862:	fab1 f181 	clz	r1, r1
 8002866:	b2c9      	uxtb	r1, r1
 8002868:	408b      	lsls	r3, r1
 800286a:	4950      	ldr	r1, [pc, #320]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
 8002870:	e06a      	b.n	8002948 <HAL_RCC_OscConfig+0x5ec>
 8002872:	2301      	movs	r3, #1
 8002874:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002884:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002892:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	461a      	mov	r2, r3
 800289a:	2300      	movs	r3, #0
 800289c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe fbc1 	bl	8001024 <HAL_GetTick>
 80028a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fbbc 	bl	8001024 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d902      	bls.n	80028be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	f000 bc50 	b.w	800315e <HAL_RCC_OscConfig+0xe02>
 80028be:	2302      	movs	r3, #2
 80028c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_OscConfig+0x592>
 80028e8:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	e013      	b.n	8002916 <HAL_RCC_OscConfig+0x5ba>
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002900:	2302      	movs	r3, #2
 8002902:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002906:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <HAL_RCC_OscConfig+0x650>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2202      	movs	r2, #2
 8002918:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800291c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002928:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0220 	orr.w	r2, r2, #32
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1af      	bne.n	80028a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80da 	beq.w	8002b0c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d069      	beq.n	8002a36 <HAL_RCC_OscConfig+0x6da>
 8002962:	2301      	movs	r3, #1
 8002964:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_OscConfig+0x654>)
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7fe fb4a 	bl	8001024 <HAL_GetTick>
 8002990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002994:	e00e      	b.n	80029b4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002996:	f7fe fb45 	bl	8001024 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d906      	bls.n	80029b4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e3d9      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	10908120 	.word	0x10908120
 80029b4:	2302      	movs	r3, #2
 80029b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029ca:	2202      	movs	r2, #2
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029e2:	2202      	movs	r2, #2
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4ba5      	ldr	r3, [pc, #660]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 80029f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029fe:	2102      	movs	r1, #2
 8002a00:	6019      	str	r1, [r3, #0]
 8002a02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f1a3 	rbit	r1, r3
 8002a0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a10:	6019      	str	r1, [r3, #0]
  return result;
 8002a12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0b0      	beq.n	8002996 <HAL_RCC_OscConfig+0x63a>
 8002a34:	e06a      	b.n	8002b0c <HAL_RCC_OscConfig+0x7b0>
 8002a36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fa93 f2a3 	rbit	r2, r3
 8002a48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a4c:	601a      	str	r2, [r3, #0]
  return result;
 8002a4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x934>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	461a      	mov	r2, r3
 8002a64:	2300      	movs	r3, #0
 8002a66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fe fadc 	bl	8001024 <HAL_GetTick>
 8002a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	e009      	b.n	8002a86 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a72:	f7fe fad7 	bl	8001024 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e36b      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
 8002a86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	fa93 f2a3 	rbit	r2, r3
 8002a98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	fa93 f2a3 	rbit	r2, r3
 8002ab0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002acc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ace:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	6019      	str	r1, [r3, #0]
 8002ada:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f1a3 	rbit	r1, r3
 8002ae4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ae8:	6019      	str	r1, [r3, #0]
  return result;
 8002aea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1b2      	bne.n	8002a72 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8158 	beq.w	8002dcc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b22:	4b5a      	ldr	r3, [pc, #360]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	4b57      	ldr	r3, [pc, #348]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	4a56      	ldr	r2, [pc, #344]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	61d3      	str	r3, [r2, #28]
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f107 0308 	add.w	r3, r7, #8
 8002b4c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <HAL_RCC_OscConfig+0x938>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11a      	bne.n	8002b96 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b60:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x938>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <HAL_RCC_OscConfig+0x938>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fa5a 	bl	8001024 <HAL_GetTick>
 8002b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	e009      	b.n	8002b8a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe fa55 	bl	8001024 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e2e9      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <HAL_RCC_OscConfig+0x938>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ef      	beq.n	8002b76 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x852>
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	e02f      	b.n	8002c0e <HAL_RCC_OscConfig+0x8b2>
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x876>
 8002bb8:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a33      	ldr	r2, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6213      	str	r3, [r2, #32]
 8002bc4:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4a30      	ldr	r2, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	6213      	str	r3, [r2, #32]
 8002bd0:	e01d      	b.n	8002c0e <HAL_RCC_OscConfig+0x8b2>
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x89a>
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a2a      	ldr	r2, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCC_OscConfig+0x8b2>
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d06b      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7fe fa04 	bl	8001024 <HAL_GetTick>
 8002c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	e00b      	b.n	8002c3a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe f9ff 	bl	8001024 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e291      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
 8002c3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c3e:	2202      	movs	r2, #2
 8002c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	fa93 f2a3 	rbit	r2, r3
 8002c4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c56:	2202      	movs	r2, #2
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	fa93 f2a3 	rbit	r2, r3
 8002c64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c68:	601a      	str	r2, [r3, #0]
  return result;
 8002c6a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d109      	bne.n	8002c98 <HAL_RCC_OscConfig+0x93c>
 8002c84:	4b01      	ldr	r3, [pc, #4]	; (8002c8c <HAL_RCC_OscConfig+0x930>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	e014      	b.n	8002cb4 <HAL_RCC_OscConfig+0x958>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	10908120 	.word	0x10908120
 8002c94:	40007000 	.word	0x40007000
 8002c98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	4bbb      	ldr	r3, [pc, #748]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cb8:	2102      	movs	r1, #2
 8002cba:	6011      	str	r1, [r2, #0]
 8002cbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	fa92 f1a2 	rbit	r1, r2
 8002cc6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002cca:	6011      	str	r1, [r2, #0]
  return result;
 8002ccc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d099      	beq.n	8002c22 <HAL_RCC_OscConfig+0x8c6>
 8002cee:	e063      	b.n	8002db8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f998 	bl	8001024 <HAL_GetTick>
 8002cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f993 	bl	8001024 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e225      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
 8002d12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d16:	2202      	movs	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d40:	601a      	str	r2, [r3, #0]
  return result;
 8002d42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_OscConfig+0xa06>
 8002d5c:	4b90      	ldr	r3, [pc, #576]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	e00d      	b.n	8002d7e <HAL_RCC_OscConfig+0xa22>
 8002d62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d66:	2202      	movs	r2, #2
 8002d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	fa93 f2a3 	rbit	r2, r3
 8002d74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b89      	ldr	r3, [pc, #548]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d82:	2102      	movs	r1, #2
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	fa92 f1a2 	rbit	r1, r2
 8002d90:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d94:	6011      	str	r1, [r2, #0]
  return result;
 8002d96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f002 021f 	and.w	r2, r2, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f202 	lsl.w	r2, r1, r2
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1a0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b77      	ldr	r3, [pc, #476]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a76      	ldr	r2, [pc, #472]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 81c2 	beq.w	800315c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd8:	4b71      	ldr	r3, [pc, #452]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	f000 819c 	beq.w	800311e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	f040 8114 	bne.w	800301a <HAL_RCC_OscConfig+0xcbe>
 8002df2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e0a:	601a      	str	r2, [r3, #0]
  return result;
 8002e0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe f8fc 	bl	8001024 <HAL_GetTick>
 8002e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fe f8f7 	bl	8001024 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e18b      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
 8002e46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e5e:	601a      	str	r2, [r3, #0]
  return result;
 8002e60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_OscConfig+0xb24>
 8002e7a:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb5c>
 8002e80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fa93 f2a3 	rbit	r2, r3
 8002eae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ec0:	6011      	str	r1, [r2, #0]
 8002ec2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	fa92 f1a2 	rbit	r1, r2
 8002ecc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002ed0:	6011      	str	r1, [r2, #0]
  return result;
 8002ed2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	fab2 f282 	clz	r2, r2
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f002 021f 	and.w	r2, r2, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d19e      	bne.n	8002e32 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	4925      	ldr	r1, [pc, #148]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
 8002f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f28:	601a      	str	r2, [r3, #0]
  return result;
 8002f2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f2e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	461a      	mov	r2, r3
 8002f42:	2301      	movs	r3, #1
 8002f44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe f86d 	bl	8001024 <HAL_GetTick>
 8002f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4e:	e009      	b.n	8002f64 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe f868 	bl	8001024 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0fc      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
 8002f64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f7c:	601a      	str	r2, [r3, #0]
  return result;
 8002f7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xc48>
 8002f98:	4b01      	ldr	r3, [pc, #4]	; (8002fa0 <HAL_RCC_OscConfig+0xc44>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	e01e      	b.n	8002fdc <HAL_RCC_OscConfig+0xc80>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_OscConfig+0xe0c>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fe0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fe4:	6011      	str	r1, [r2, #0]
 8002fe6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	fa92 f1a2 	rbit	r1, r2
 8002ff0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ff4:	6011      	str	r1, [r2, #0]
  return result;
 8002ff6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d09b      	beq.n	8002f50 <HAL_RCC_OscConfig+0xbf4>
 8003018:	e0a0      	b.n	800315c <HAL_RCC_OscConfig+0xe00>
 800301a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800301e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	fa93 f2a3 	rbit	r2, r3
 800302e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003032:	601a      	str	r2, [r3, #0]
  return result;
 8003034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003038:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	461a      	mov	r2, r3
 800304c:	2300      	movs	r3, #0
 800304e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fd ffe8 	bl	8001024 <HAL_GetTick>
 8003054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003058:	e009      	b.n	800306e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fd ffe3 	bl	8001024 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e077      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
 800306e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003086:	601a      	str	r2, [r3, #0]
  return result;
 8003088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_OscConfig+0xd4c>
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_OscConfig+0xe0c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e01b      	b.n	80030e0 <HAL_RCC_OscConfig+0xd84>
 80030a8:	f107 0320 	add.w	r3, r7, #32
 80030ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f107 0320 	add.w	r3, r7, #32
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f107 0318 	add.w	r3, r7, #24
 80030c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f107 0318 	add.w	r3, r7, #24
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f107 0314 	add.w	r3, r7, #20
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_OscConfig+0xe0c>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	f107 0210 	add.w	r2, r7, #16
 80030e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030e8:	6011      	str	r1, [r2, #0]
 80030ea:	f107 0210 	add.w	r2, r7, #16
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	fa92 f1a2 	rbit	r1, r2
 80030f4:	f107 020c 	add.w	r2, r7, #12
 80030f8:	6011      	str	r1, [r2, #0]
  return result;
 80030fa:	f107 020c 	add.w	r2, r7, #12
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f042 0220 	orr.w	r2, r2, #32
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f002 021f 	and.w	r2, r2, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d19e      	bne.n	800305a <HAL_RCC_OscConfig+0xcfe>
 800311c:	e01e      	b.n	800315c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e018      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800312c:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_RCC_OscConfig+0xe0c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003134:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	429a      	cmp	r2, r3
 8003144:	d108      	bne.n	8003158 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003146:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800314a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000

0800316c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b09e      	sub	sp, #120	; 0x78
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e162      	b.n	800344a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b90      	ldr	r3, [pc, #576]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d910      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b8d      	ldr	r3, [pc, #564]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 0207 	bic.w	r2, r3, #7
 800319a:	498b      	ldr	r1, [pc, #556]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e14a      	b.n	800344a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	497f      	ldr	r1, [pc, #508]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80dc 	beq.w	8003398 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d13c      	bne.n	8003262 <HAL_RCC_ClockConfig+0xf6>
 80031e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d102      	bne.n	8003212 <HAL_RCC_ClockConfig+0xa6>
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	e00f      	b.n	8003232 <HAL_RCC_ClockConfig+0xc6>
 8003212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	667b      	str	r3, [r7, #100]	; 0x64
 8003220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003224:	663b      	str	r3, [r7, #96]	; 0x60
 8003226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800322e:	4b67      	ldr	r3, [pc, #412]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003236:	65ba      	str	r2, [r7, #88]	; 0x58
 8003238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800323a:	fa92 f2a2 	rbit	r2, r2
 800323e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003242:	fab2 f282 	clz	r2, r2
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	f042 0220 	orr.w	r2, r2, #32
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f002 021f 	and.w	r2, r2, #31
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d17b      	bne.n	8003356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0f3      	b.n	800344a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d13c      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x178>
 800326a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d102      	bne.n	8003294 <HAL_RCC_ClockConfig+0x128>
 800328e:	4b4f      	ldr	r3, [pc, #316]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	e00f      	b.n	80032b4 <HAL_RCC_ClockConfig+0x148>
 8003294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003298:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	647b      	str	r3, [r7, #68]	; 0x44
 80032a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a6:	643b      	str	r3, [r7, #64]	; 0x40
 80032a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b0:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80032ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032bc:	fa92 f2a2 	rbit	r2, r2
 80032c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c4:	fab2 f282 	clz	r2, r2
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	f042 0220 	orr.w	r2, r2, #32
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f002 021f 	and.w	r2, r2, #31
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d13a      	bne.n	8003356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0b2      	b.n	800344a <HAL_RCC_ClockConfig+0x2de>
 80032e4:	2302      	movs	r3, #2
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d102      	bne.n	800330c <HAL_RCC_ClockConfig+0x1a0>
 8003306:	4b31      	ldr	r3, [pc, #196]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	e00d      	b.n	8003328 <HAL_RCC_ClockConfig+0x1bc>
 800330c:	2302      	movs	r3, #2
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
 8003318:	2302      	movs	r3, #2
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	4b29      	ldr	r3, [pc, #164]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	2202      	movs	r2, #2
 800332a:	61ba      	str	r2, [r7, #24]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	fa92 f2a2 	rbit	r2, r2
 8003332:	617a      	str	r2, [r7, #20]
  return result;
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	fab2 f282 	clz	r2, r2
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f042 0220 	orr.w	r2, r2, #32
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	f002 021f 	and.w	r2, r2, #31
 8003346:	2101      	movs	r1, #1
 8003348:	fa01 f202 	lsl.w	r2, r1, r2
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e079      	b.n	800344a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	491a      	ldr	r1, [pc, #104]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7fd fe5c 	bl	8001024 <HAL_GetTick>
 800336c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fd fe58 	bl	8001024 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e061      	b.n	800344a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_RCC_ClockConfig+0x260>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d214      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 0207 	bic.w	r2, r3, #7
 80033ae:	4906      	ldr	r1, [pc, #24]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_RCC_ClockConfig+0x25c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e040      	b.n	800344a <HAL_RCC_ClockConfig+0x2de>
 80033c8:	40022000 	.word	0x40022000
 80033cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_RCC_ClockConfig+0x2e8>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	491a      	ldr	r1, [pc, #104]	; (8003454 <HAL_RCC_ClockConfig+0x2e8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_RCC_ClockConfig+0x2e8>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4912      	ldr	r1, [pc, #72]	; (8003454 <HAL_RCC_ClockConfig+0x2e8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800340e:	f000 f829 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8003412:	4601      	mov	r1, r0
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCC_ClockConfig+0x2e8>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341c:	22f0      	movs	r2, #240	; 0xf0
 800341e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	fa92 f2a2 	rbit	r2, r2
 8003426:	60fa      	str	r2, [r7, #12]
  return result;
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	fab2 f282 	clz	r2, r2
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	40d3      	lsrs	r3, r2
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x2ec>)
 8003434:	5cd3      	ldrb	r3, [r2, r3]
 8003436:	fa21 f303 	lsr.w	r3, r1, r3
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <HAL_RCC_ClockConfig+0x2f0>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_RCC_ClockConfig+0x2f4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fdaa 	bl	8000f9c <HAL_InitTick>
  
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3778      	adds	r7, #120	; 0x78
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	08006b64 	.word	0x08006b64
 800345c:	200002b4 	.word	0x200002b4
 8003460:	200002b8 	.word	0x200002b8

08003464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b08b      	sub	sp, #44	; 0x2c
 8003468:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800347e:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b04      	cmp	r3, #4
 800348c:	d002      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x30>
 800348e:	2b08      	cmp	r3, #8
 8003490:	d003      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x36>
 8003492:	e03c      	b.n	800350e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003496:	623b      	str	r3, [r7, #32]
      break;
 8003498:	e03c      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	607a      	str	r2, [r7, #4]
  return result;
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	fab2 f282 	clz	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	40d3      	lsrs	r3, r2
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	220f      	movs	r2, #15
 80034c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	60fa      	str	r2, [r7, #12]
  return result;
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	40d3      	lsrs	r3, r2
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	e004      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	4a0c      	ldr	r2, [pc, #48]	; (8003534 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	623b      	str	r3, [r7, #32]
      break;
 800350c:	e002      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003510:	623b      	str	r3, [r7, #32]
      break;
 8003512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003514:	6a3b      	ldr	r3, [r7, #32]
}
 8003516:	4618      	mov	r0, r3
 8003518:	372c      	adds	r7, #44	; 0x2c
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
 8003528:	007a1200 	.word	0x007a1200
 800352c:	08006b7c 	.word	0x08006b7c
 8003530:	08006b8c 	.word	0x08006b8c
 8003534:	003d0900 	.word	0x003d0900

08003538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_RCC_GetHCLKFreq+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	200002b4 	.word	0x200002b4

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003556:	f7ff ffef 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 800355a:	4601      	mov	r1, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003564:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	603a      	str	r2, [r7, #0]
  return result;
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	fab2 f282 	clz	r2, r2
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	40d3      	lsrs	r3, r2
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x40>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	08006b74 	.word	0x08006b74

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800359a:	f7ff ffcd 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 800359e:	4601      	mov	r1, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80035a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80035ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	fa92 f2a2 	rbit	r2, r2
 80035b4:	603a      	str	r2, [r7, #0]
  return result;
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	fab2 f282 	clz	r2, r2
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	40d3      	lsrs	r3, r2
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08006b74 	.word	0x08006b74

080035d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b092      	sub	sp, #72	; 0x48
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80d4 	beq.w	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fc:	4b4e      	ldr	r3, [pc, #312]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10e      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b4b      	ldr	r3, [pc, #300]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a4a      	ldr	r2, [pc, #296]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	61d3      	str	r3, [r2, #28]
 8003614:	4b48      	ldr	r3, [pc, #288]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b45      	ldr	r3, [pc, #276]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003632:	4b42      	ldr	r3, [pc, #264]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a41      	ldr	r2, [pc, #260]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fd fcf1 	bl	8001024 <HAL_GetTick>
 8003642:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	e008      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7fd fced 	bl	8001024 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b64      	cmp	r3, #100	; 0x64
 8003652:	d901      	bls.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e14b      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800366e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8084 	beq.w	800377e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003680:	429a      	cmp	r2, r3
 8003682:	d07c      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003684:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003692:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	461a      	mov	r2, r3
 80036ae:	2301      	movs	r3, #1
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	461a      	mov	r2, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036d6:	4a18      	ldr	r2, [pc, #96]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d04b      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fc9d 	bl	8001024 <HAL_GetTick>
 80036ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fc99 	bl	8001024 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0f5      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003704:	2302      	movs	r3, #2
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	2302      	movs	r3, #2
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	61fb      	str	r3, [r7, #28]
  return result;
 800371c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d108      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003732:	4b01      	ldr	r3, [pc, #4]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	e00d      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
 8003740:	10908100 	.word	0x10908100
 8003744:	2302      	movs	r3, #2
 8003746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	4b69      	ldr	r3, [pc, #420]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	2202      	movs	r2, #2
 8003756:	613a      	str	r2, [r7, #16]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	fa92 f2a2 	rbit	r2, r2
 800375e:	60fa      	str	r2, [r7, #12]
  return result;
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	fab2 f282 	clz	r2, r2
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f002 021f 	and.w	r2, r2, #31
 8003772:	2101      	movs	r1, #1
 8003774:	fa01 f202 	lsl.w	r2, r1, r2
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0b7      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800377e:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	495b      	ldr	r1, [pc, #364]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800378c:	4313      	orrs	r3, r2
 800378e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003790:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	4b57      	ldr	r3, [pc, #348]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4a56      	ldr	r2, [pc, #344]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b0:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f023 0203 	bic.w	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	494e      	ldr	r1, [pc, #312]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ce:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f023 0210 	bic.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	4947      	ldr	r1, [pc, #284]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037ec:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	493f      	ldr	r1, [pc, #252]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f023 0220 	bic.w	r2, r3, #32
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	4938      	ldr	r1, [pc, #224]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003818:	4313      	orrs	r3, r2
 800381a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003828:	4b33      	ldr	r3, [pc, #204]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	4930      	ldr	r1, [pc, #192]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003836:	4313      	orrs	r3, r2
 8003838:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003846:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4929      	ldr	r1, [pc, #164]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	4921      	ldr	r1, [pc, #132]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003872:	4313      	orrs	r3, r2
 8003874:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	491a      	ldr	r1, [pc, #104]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003890:	4313      	orrs	r3, r2
 8003892:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	4912      	ldr	r1, [pc, #72]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	490b      	ldr	r1, [pc, #44]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3748      	adds	r7, #72	; 0x48
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e049      	b.n	80039a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd f9b2 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 faca 	bl	8003ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e03b      	b.n	8003a3c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <HAL_TIM_Base_Start_IT+0x9c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_TIM_Base_Start_IT+0x4e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d004      	beq.n	80039fa <HAL_TIM_Base_Start_IT+0x4e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <HAL_TIM_Base_Start_IT+0xa0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d115      	bne.n	8003a26 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_TIM_Base_Start_IT+0xa4>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b06      	cmp	r3, #6
 8003a0a:	d015      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x8c>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a12:	d011      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a24:	e008      	b.n	8003a38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e000      	b.n	8003a3a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	00010007 	.word	0x00010007

08003a54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_TIM_Base_Stop_IT+0x48>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	f240 4344 	movw	r3, #1092	; 0x444
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_Base_Stop_IT+0x48>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d122      	bne.n	8003b0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d11b      	bne.n	8003b0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f06f 0202 	mvn.w	r2, #2
 8003ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f9ce 	bl	8003e96 <HAL_TIM_IC_CaptureCallback>
 8003afa:	e005      	b.n	8003b08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f9c0 	bl	8003e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9d1 	bl	8003eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d122      	bne.n	8003b62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d11b      	bne.n	8003b62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0204 	mvn.w	r2, #4
 8003b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f9a4 	bl	8003e96 <HAL_TIM_IC_CaptureCallback>
 8003b4e:	e005      	b.n	8003b5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f996 	bl	8003e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9a7 	bl	8003eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d122      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d11b      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f06f 0208 	mvn.w	r2, #8
 8003b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f97a 	bl	8003e96 <HAL_TIM_IC_CaptureCallback>
 8003ba2:	e005      	b.n	8003bb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f96c 	bl	8003e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f97d 	bl	8003eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d122      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d11b      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0210 	mvn.w	r2, #16
 8003bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2208      	movs	r2, #8
 8003be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f950 	bl	8003e96 <HAL_TIM_IC_CaptureCallback>
 8003bf6:	e005      	b.n	8003c04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f942 	bl	8003e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f953 	bl	8003eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10e      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0201 	mvn.w	r2, #1
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fc fd97 	bl	8000764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d10e      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b80      	cmp	r3, #128	; 0x80
 8003c50:	d107      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fab1 	bl	80041c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c70:	d10e      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 faa4 	bl	80041d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d10e      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d107      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f901 	bl	8003ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d107      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0220 	mvn.w	r2, #32
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fa64 	bl	80041b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIM_ConfigClockSource+0x1c>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e0b6      	b.n	8003e7a <HAL_TIM_ConfigClockSource+0x18a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d48:	d03e      	beq.n	8003dc8 <HAL_TIM_ConfigClockSource+0xd8>
 8003d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4e:	f200 8087 	bhi.w	8003e60 <HAL_TIM_ConfigClockSource+0x170>
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	f000 8086 	beq.w	8003e66 <HAL_TIM_ConfigClockSource+0x176>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	d87f      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x170>
 8003d60:	2b70      	cmp	r3, #112	; 0x70
 8003d62:	d01a      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0xaa>
 8003d64:	2b70      	cmp	r3, #112	; 0x70
 8003d66:	d87b      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x170>
 8003d68:	2b60      	cmp	r3, #96	; 0x60
 8003d6a:	d050      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x11e>
 8003d6c:	2b60      	cmp	r3, #96	; 0x60
 8003d6e:	d877      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x170>
 8003d70:	2b50      	cmp	r3, #80	; 0x50
 8003d72:	d03c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0xfe>
 8003d74:	2b50      	cmp	r3, #80	; 0x50
 8003d76:	d873      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x170>
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d058      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x13e>
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d86f      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x170>
 8003d80:	2b30      	cmp	r3, #48	; 0x30
 8003d82:	d064      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15e>
 8003d84:	2b30      	cmp	r3, #48	; 0x30
 8003d86:	d86b      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x170>
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d060      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15e>
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d867      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x170>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05c      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15e>
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d05a      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15e>
 8003d98:	e062      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6899      	ldr	r1, [r3, #8]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f000 f97b 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	609a      	str	r2, [r3, #8]
      break;
 8003dc6:	e04f      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6899      	ldr	r1, [r3, #8]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f000 f964 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dea:	609a      	str	r2, [r3, #8]
      break;
 8003dec:	e03c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f000 f8d8 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2150      	movs	r1, #80	; 0x50
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f931 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e02c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f000 f8f7 	bl	800400e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2160      	movs	r1, #96	; 0x60
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f921 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003e2c:	e01c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 f8b8 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2140      	movs	r1, #64	; 0x40
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f911 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e00c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 f908 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003e5e:	e003      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	e000      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a2e      	ldr	r2, [pc, #184]	; (8003fa0 <TIM_Base_SetConfig+0xcc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_Base_SetConfig+0x20>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef2:	d108      	bne.n	8003f06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <TIM_Base_SetConfig+0xcc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00f      	beq.n	8003f2e <TIM_Base_SetConfig+0x5a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d00b      	beq.n	8003f2e <TIM_Base_SetConfig+0x5a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <TIM_Base_SetConfig+0xd0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <TIM_Base_SetConfig+0x5a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <TIM_Base_SetConfig+0xd4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_Base_SetConfig+0x5a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <TIM_Base_SetConfig+0xd8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <TIM_Base_SetConfig+0xcc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_Base_SetConfig+0xb0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <TIM_Base_SetConfig+0xd0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_Base_SetConfig+0xb0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <TIM_Base_SetConfig+0xd4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <TIM_Base_SetConfig+0xd8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d103      	bne.n	8003f8c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	615a      	str	r2, [r3, #20]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 030a 	bic.w	r3, r3, #10
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0210 	bic.w	r2, r3, #16
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	f043 0307 	orr.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e04f      	b.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a21      	ldr	r2, [pc, #132]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d108      	bne.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800412c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d004      	beq.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a10      	ldr	r2, [pc, #64]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10c      	bne.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	4313      	orrs	r3, r2
 8004180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40014000 	.word	0x40014000

080041b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e040      	b.n	8004280 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc fd60 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2224      	movs	r2, #36	; 0x24
 8004218:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fc00 	bl	8004a30 <UART_SetConfig>
 8004230:	4603      	mov	r3, r0
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e022      	b.n	8004280 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fd2a 	bl	8004c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fdb1 	bl	8004de0 <UART_CheckIdleState>
 800427e:	4603      	mov	r3, r0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800429c:	2b20      	cmp	r3, #32
 800429e:	d178      	bne.n	8004392 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_UART_Transmit+0x24>
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e071      	b.n	8004394 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2221      	movs	r2, #33	; 0x21
 80042bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042be:	f7fc feb1 	bl	8001024 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042dc:	d108      	bne.n	80042f0 <HAL_UART_Transmit+0x68>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e003      	b.n	80042f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042f8:	e030      	b.n	800435c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fe13 	bl	8004f30 <UART_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e03c      	b.n	8004394 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	b292      	uxth	r2, r2
 800432e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	3302      	adds	r3, #2
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e008      	b.n	800434a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b292      	uxth	r2, r2
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1c8      	bne.n	80042fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fddc 	bl	8004f30 <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e005      	b.n	8004394 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d132      	bne.n	800441a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_UART_Receive_IT+0x24>
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e02b      	b.n	800441c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d018      	beq.n	800440a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	613b      	str	r3, [r7, #16]
   return(result);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	69f9      	ldr	r1, [r7, #28]
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	61bb      	str	r3, [r7, #24]
   return(result);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e6      	bne.n	80043d8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	461a      	mov	r2, r3
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fdf5 	bl	8005000 <UART_Start_Receive_IT>
 8004416:	4603      	mov	r3, r0
 8004418:	e000      	b.n	800441c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b0ba      	sub	sp, #232	; 0xe8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800444a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800444e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004452:	4013      	ands	r3, r2
 8004454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d115      	bne.n	800448c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00f      	beq.n	800448c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800446c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 82ab 	beq.w	80049d8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
      }
      return;
 800448a:	e2a5      	b.n	80049d8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800448c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8117 	beq.w	80046c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044a6:	4b85      	ldr	r3, [pc, #532]	; (80046bc <HAL_UART_IRQHandler+0x298>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 810a 	beq.w	80046c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d011      	beq.n	80044e0 <HAL_UART_IRQHandler+0xbc>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d6:	f043 0201 	orr.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d011      	beq.n	8004510 <HAL_UART_IRQHandler+0xec>
 80044ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2202      	movs	r2, #2
 80044fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004506:	f043 0204 	orr.w	r2, r3, #4
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d011      	beq.n	8004540 <HAL_UART_IRQHandler+0x11c>
 800451c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2204      	movs	r2, #4
 800452e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004536:	f043 0202 	orr.w	r2, r3, #2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d017      	beq.n	800457c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800454c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800455c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2208      	movs	r2, #8
 800456a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004572:	f043 0208 	orr.w	r2, r3, #8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800457c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_UART_IRQHandler+0x18a>
 8004588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800459c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8211 	beq.w	80049dc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d005      	beq.n	8004606 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04f      	beq.n	80046a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fdc0 	bl	800518c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d141      	bne.n	800469e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800464a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800465e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1d9      	bne.n	800461a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466a:	2b00      	cmp	r3, #0
 800466c:	d013      	beq.n	8004696 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004672:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <HAL_UART_IRQHandler+0x29c>)
 8004674:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd fc8c 	bl	8001f98 <HAL_DMA_Abort_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004690:	4610      	mov	r0, r2
 8004692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	e00f      	b.n	80046b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f9b4 	bl	8004a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	e00b      	b.n	80046b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f9b0 	bl	8004a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	e007      	b.n	80046b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f9ac 	bl	8004a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80046b4:	e192      	b.n	80049dc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b6:	bf00      	nop
    return;
 80046b8:	e190      	b.n	80049dc <HAL_UART_IRQHandler+0x5b8>
 80046ba:	bf00      	nop
 80046bc:	04000120 	.word	0x04000120
 80046c0:	08005255 	.word	0x08005255

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	f040 814b 	bne.w	8004964 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 8144 	beq.w	8004964 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 813d 	beq.w	8004964 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2210      	movs	r2, #16
 80046f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	f040 80b5 	bne.w	800486c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800470e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8164 	beq.w	80049e0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800471e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004722:	429a      	cmp	r2, r3
 8004724:	f080 815c 	bcs.w	80049e0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800472e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b20      	cmp	r3, #32
 800473a:	f000 8086 	beq.w	800484a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800475a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800476c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004774:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1da      	bne.n	800473e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047b8:	e841 2300 	strex	r3, r2, [r1]
 80047bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e1      	bne.n	8004788 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3308      	adds	r3, #8
 80047ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e3      	bne.n	80047c4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800482c:	65bb      	str	r3, [r7, #88]	; 0x58
 800482e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800483a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e4      	bne.n	800480a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004844:	4618      	mov	r0, r3
 8004846:	f7fd fb6e 	bl	8001f26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800485c:	b29b      	uxth	r3, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	b29b      	uxth	r3, r3
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f8d7 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800486a:	e0b9      	b.n	80049e0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004878:	b29b      	uxth	r3, r3
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80ab 	beq.w	80049e4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800488e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80a6 	beq.w	80049e4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048ba:	647b      	str	r3, [r7, #68]	; 0x44
 80048bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e4      	bne.n	8004898 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3308      	adds	r3, #8
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	623b      	str	r3, [r7, #32]
   return(result);
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048f2:	633a      	str	r2, [r7, #48]	; 0x30
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e3      	bne.n	80048ce <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	60fb      	str	r3, [r7, #12]
   return(result);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0310 	bic.w	r3, r3, #16
 800492e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	69b9      	ldr	r1, [r7, #24]
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	617b      	str	r3, [r7, #20]
   return(result);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e4      	bne.n	800491a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800495a:	4619      	mov	r1, r3
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f85b 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004962:	e03f      	b.n	80049e4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <HAL_UART_IRQHandler+0x56a>
 8004970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fe4c 	bl	8005624 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800498c:	e02d      	b.n	80049ea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00e      	beq.n	80049b8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800499a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01c      	beq.n	80049e8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
    }
    return;
 80049b6:	e017      	b.n	80049e8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d012      	beq.n	80049ea <HAL_UART_IRQHandler+0x5c6>
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00c      	beq.n	80049ea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fc55 	bl	8005280 <UART_EndTransmit_IT>
    return;
 80049d6:	e008      	b.n	80049ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80049d8:	bf00      	nop
 80049da:	e006      	b.n	80049ea <HAL_UART_IRQHandler+0x5c6>
    return;
 80049dc:	bf00      	nop
 80049de:	e004      	b.n	80049ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80049e0:	bf00      	nop
 80049e2:	e002      	b.n	80049ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80049e4:	bf00      	nop
 80049e6:	e000      	b.n	80049ea <HAL_UART_IRQHandler+0x5c6>
    return;
 80049e8:	bf00      	nop
  }

}
 80049ea:	37e8      	adds	r7, #232	; 0xe8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b8a      	ldr	r3, [pc, #552]	; (8004c84 <UART_SetConfig+0x254>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	6979      	ldr	r1, [r7, #20]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a78      	ldr	r2, [pc, #480]	; (8004c88 <UART_SetConfig+0x258>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d120      	bne.n	8004aee <UART_SetConfig+0xbe>
 8004aac:	4b77      	ldr	r3, [pc, #476]	; (8004c8c <UART_SetConfig+0x25c>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d817      	bhi.n	8004ae8 <UART_SetConfig+0xb8>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x90>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004add 	.word	0x08004add
 8004ac8:	08004ae3 	.word	0x08004ae3
 8004acc:	08004ad7 	.word	0x08004ad7
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e01d      	b.n	8004b12 <UART_SetConfig+0xe2>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e01a      	b.n	8004b12 <UART_SetConfig+0xe2>
 8004adc:	2304      	movs	r3, #4
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e017      	b.n	8004b12 <UART_SetConfig+0xe2>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e014      	b.n	8004b12 <UART_SetConfig+0xe2>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e011      	b.n	8004b12 <UART_SetConfig+0xe2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a67      	ldr	r2, [pc, #412]	; (8004c90 <UART_SetConfig+0x260>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d102      	bne.n	8004afe <UART_SetConfig+0xce>
 8004af8:	2300      	movs	r3, #0
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e009      	b.n	8004b12 <UART_SetConfig+0xe2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a64      	ldr	r2, [pc, #400]	; (8004c94 <UART_SetConfig+0x264>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d102      	bne.n	8004b0e <UART_SetConfig+0xde>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e001      	b.n	8004b12 <UART_SetConfig+0xe2>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1a:	d15a      	bne.n	8004bd2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004b1c:	7ffb      	ldrb	r3, [r7, #31]
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d827      	bhi.n	8004b72 <UART_SetConfig+0x142>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <UART_SetConfig+0xf8>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b5d 	.word	0x08004b5d
 8004b34:	08004b73 	.word	0x08004b73
 8004b38:	08004b63 	.word	0x08004b63
 8004b3c:	08004b73 	.word	0x08004b73
 8004b40:	08004b73 	.word	0x08004b73
 8004b44:	08004b73 	.word	0x08004b73
 8004b48:	08004b6b 	.word	0x08004b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7fe fd00 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004b50:	61b8      	str	r0, [r7, #24]
        break;
 8004b52:	e013      	b.n	8004b7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b54:	f7fe fd1e 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8004b58:	61b8      	str	r0, [r7, #24]
        break;
 8004b5a:	e00f      	b.n	8004b7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b5c:	4b4e      	ldr	r3, [pc, #312]	; (8004c98 <UART_SetConfig+0x268>)
 8004b5e:	61bb      	str	r3, [r7, #24]
        break;
 8004b60:	e00c      	b.n	8004b7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b62:	f7fe fc7f 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004b66:	61b8      	str	r0, [r7, #24]
        break;
 8004b68:	e008      	b.n	8004b7c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6e:	61bb      	str	r3, [r7, #24]
        break;
 8004b70:	e004      	b.n	8004b7c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	77bb      	strb	r3, [r7, #30]
        break;
 8004b7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d074      	beq.n	8004c6c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	005a      	lsls	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	441a      	add	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b0f      	cmp	r3, #15
 8004b9c:	d916      	bls.n	8004bcc <UART_SetConfig+0x19c>
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d212      	bcs.n	8004bcc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f023 030f 	bic.w	r3, r3, #15
 8004bae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	89fb      	ldrh	r3, [r7, #14]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	89fa      	ldrh	r2, [r7, #14]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	e04f      	b.n	8004c6c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77bb      	strb	r3, [r7, #30]
 8004bd0:	e04c      	b.n	8004c6c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd2:	7ffb      	ldrb	r3, [r7, #31]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d828      	bhi.n	8004c2a <UART_SetConfig+0x1fa>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x1b0>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c2b 	.word	0x08004c2b
 8004bf0:	08004c1b 	.word	0x08004c1b
 8004bf4:	08004c2b 	.word	0x08004c2b
 8004bf8:	08004c2b 	.word	0x08004c2b
 8004bfc:	08004c2b 	.word	0x08004c2b
 8004c00:	08004c23 	.word	0x08004c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fe fca4 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004c08:	61b8      	str	r0, [r7, #24]
        break;
 8004c0a:	e013      	b.n	8004c34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c0c:	f7fe fcc2 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8004c10:	61b8      	str	r0, [r7, #24]
        break;
 8004c12:	e00f      	b.n	8004c34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c14:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <UART_SetConfig+0x268>)
 8004c16:	61bb      	str	r3, [r7, #24]
        break;
 8004c18:	e00c      	b.n	8004c34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1a:	f7fe fc23 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004c1e:	61b8      	str	r0, [r7, #24]
        break;
 8004c20:	e008      	b.n	8004c34 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c26:	61bb      	str	r3, [r7, #24]
        break;
 8004c28:	e004      	b.n	8004c34 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	77bb      	strb	r3, [r7, #30]
        break;
 8004c32:	bf00      	nop
    }

    if (pclk != 0U)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d018      	beq.n	8004c6c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	085a      	lsrs	r2, r3, #1
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	441a      	add	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b0f      	cmp	r3, #15
 8004c52:	d909      	bls.n	8004c68 <UART_SetConfig+0x238>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5a:	d205      	bcs.n	8004c68 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	e001      	b.n	8004c6c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c78:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	efff69f3 	.word	0xefff69f3
 8004c88:	40013800 	.word	0x40013800
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40004400 	.word	0x40004400
 8004c94:	40004800 	.word	0x40004800
 8004c98:	007a1200 	.word	0x007a1200

08004c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01a      	beq.n	8004db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9a:	d10a      	bne.n	8004db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b098      	sub	sp, #96	; 0x60
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df0:	f7fc f918 	bl	8001024 <HAL_GetTick>
 8004df4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d12e      	bne.n	8004e62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f88c 	bl	8004f30 <UART_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d021      	beq.n	8004e62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e32:	653b      	str	r3, [r7, #80]	; 0x50
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e062      	b.n	8004f28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d149      	bne.n	8004f04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f856 	bl	8004f30 <UART_WaitOnFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d03c      	beq.n	8004f04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	623b      	str	r3, [r7, #32]
   return(result);
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e6      	bne.n	8004e8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3308      	adds	r3, #8
 8004eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004edc:	61fa      	str	r2, [r7, #28]
 8004ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	69b9      	ldr	r1, [r7, #24]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e5      	bne.n	8004ebc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e011      	b.n	8004f28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3758      	adds	r7, #88	; 0x58
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f40:	e049      	b.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d045      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7fc f86b 	bl	8001024 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e048      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d031      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d110      	bne.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f8ff 	bl	800518c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2208      	movs	r2, #8
 8004f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e029      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb0:	d111      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f8e5 	bl	800518c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e00f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d0a6      	beq.n	8004f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005000:	b480      	push	{r7}
 8005002:	b097      	sub	sp, #92	; 0x5c
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005032:	d10e      	bne.n	8005052 <UART_Start_Receive_IT+0x52>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <UART_Start_Receive_IT+0x48>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005042:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005046:	e02d      	b.n	80050a4 <UART_Start_Receive_IT+0xa4>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	22ff      	movs	r2, #255	; 0xff
 800504c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005050:	e028      	b.n	80050a4 <UART_Start_Receive_IT+0xa4>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <UART_Start_Receive_IT+0x76>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <UART_Start_Receive_IT+0x6c>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800506a:	e01b      	b.n	80050a4 <UART_Start_Receive_IT+0xa4>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	227f      	movs	r2, #127	; 0x7f
 8005070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005074:	e016      	b.n	80050a4 <UART_Start_Receive_IT+0xa4>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800507e:	d10d      	bne.n	800509c <UART_Start_Receive_IT+0x9c>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <UART_Start_Receive_IT+0x92>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	227f      	movs	r2, #127	; 0x7f
 800508c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005090:	e008      	b.n	80050a4 <UART_Start_Receive_IT+0xa4>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	223f      	movs	r2, #63	; 0x3f
 8005096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800509a:	e003      	b.n	80050a4 <UART_Start_Receive_IT+0xa4>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2222      	movs	r2, #34	; 0x22
 80050b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	657b      	str	r3, [r7, #84]	; 0x54
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80050d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e5      	bne.n	80050b4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f0:	d107      	bne.n	8005102 <UART_Start_Receive_IT+0x102>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a21      	ldr	r2, [pc, #132]	; (8005184 <UART_Start_Receive_IT+0x184>)
 80050fe:	669a      	str	r2, [r3, #104]	; 0x68
 8005100:	e002      	b.n	8005108 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a20      	ldr	r2, [pc, #128]	; (8005188 <UART_Start_Receive_IT+0x188>)
 8005106:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d019      	beq.n	8005144 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
 8005130:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e6      	bne.n	8005110 <UART_Start_Receive_IT+0x110>
 8005142:	e018      	b.n	8005176 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	613b      	str	r3, [r7, #16]
   return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f043 0320 	orr.w	r3, r3, #32
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	69f9      	ldr	r1, [r7, #28]
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e6      	bne.n	8005144 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	375c      	adds	r7, #92	; 0x5c
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	0800547d 	.word	0x0800547d
 8005188:	080052d5 	.word	0x080052d5

0800518c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b095      	sub	sp, #84	; 0x54
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
 80051b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e6      	bne.n	8005194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e5      	bne.n	80051c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d118      	bne.n	8005234 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 0310 	bic.w	r3, r3, #16
 8005216:	647b      	str	r3, [r7, #68]	; 0x44
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6979      	ldr	r1, [r7, #20]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	613b      	str	r3, [r7, #16]
   return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e6      	bne.n	8005202 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005248:	bf00      	nop
 800524a:	3754      	adds	r7, #84	; 0x54
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff fbc6 	bl	8004a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	60bb      	str	r3, [r7, #8]
   return(result);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6979      	ldr	r1, [r7, #20]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	613b      	str	r3, [r7, #16]
   return(result);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e6      	bne.n	8005288 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fb92 	bl	80049f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052cc:	bf00      	nop
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b09c      	sub	sp, #112	; 0x70
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ec:	2b22      	cmp	r3, #34	; 0x22
 80052ee:	f040 80b9 	bne.w	8005464 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005300:	b2d9      	uxtb	r1, r3
 8005302:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005306:	b2da      	uxtb	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	400a      	ands	r2, r1
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	f040 809c 	bne.w	8005474 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800534a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005350:	66bb      	str	r3, [r7, #104]	; 0x68
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800535a:	65bb      	str	r3, [r7, #88]	; 0x58
 800535c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e6      	bne.n	800533c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3308      	adds	r3, #8
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	667b      	str	r3, [r7, #100]	; 0x64
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800538e:	647a      	str	r2, [r7, #68]	; 0x44
 8005390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800539c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e5      	bne.n	800536e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d018      	beq.n	80053f6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	623b      	str	r3, [r7, #32]
   return(result);
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053d8:	663b      	str	r3, [r7, #96]	; 0x60
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053e2:	633b      	str	r3, [r7, #48]	; 0x30
 80053e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d12e      	bne.n	800545c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	60fb      	str	r3, [r7, #12]
   return(result);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f023 0310 	bic.w	r3, r3, #16
 8005418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	69b9      	ldr	r1, [r7, #24]
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	617b      	str	r3, [r7, #20]
   return(result);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e6      	bne.n	8005404 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b10      	cmp	r3, #16
 8005442:	d103      	bne.n	800544c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2210      	movs	r2, #16
 800544a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff fadf 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800545a:	e00b      	b.n	8005474 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fb f92f 	bl	80006c0 <HAL_UART_RxCpltCallback>
}
 8005462:	e007      	b.n	8005474 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0208 	orr.w	r2, r2, #8
 8005472:	619a      	str	r2, [r3, #24]
}
 8005474:	bf00      	nop
 8005476:	3770      	adds	r7, #112	; 0x70
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b09c      	sub	sp, #112	; 0x70
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800548a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005494:	2b22      	cmp	r3, #34	; 0x22
 8005496:	f040 80b9 	bne.w	800560c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80054aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80054ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80054b2:	4013      	ands	r3, r2
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	1c9a      	adds	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f040 809c 	bne.w	800561c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80054f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f8:	667b      	str	r3, [r7, #100]	; 0x64
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005502:	657b      	str	r3, [r7, #84]	; 0x54
 8005504:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e6      	bne.n	80054e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	663b      	str	r3, [r7, #96]	; 0x60
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005536:	643a      	str	r2, [r7, #64]	; 0x40
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800553c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e5      	bne.n	8005516 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d018      	beq.n	800559e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	61fb      	str	r3, [r7, #28]
   return(result);
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e6      	bne.n	800556c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d12e      	bne.n	8005604 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f023 0310 	bic.w	r3, r3, #16
 80055c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6979      	ldr	r1, [r7, #20]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	613b      	str	r3, [r7, #16]
   return(result);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e6      	bne.n	80055ac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d103      	bne.n	80055f4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2210      	movs	r2, #16
 80055f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff fa0b 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005602:	e00b      	b.n	800561c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fb f85b 	bl	80006c0 <HAL_UART_RxCpltCallback>
}
 800560a:	e007      	b.n	800561c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0208 	orr.w	r2, r2, #8
 800561a:	619a      	str	r2, [r3, #24]
}
 800561c:	bf00      	nop
 800561e:	3770      	adds	r7, #112	; 0x70
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <atoi>:
 8005638:	220a      	movs	r2, #10
 800563a:	2100      	movs	r1, #0
 800563c:	f000 bce8 	b.w	8006010 <strtol>

08005640 <__errno>:
 8005640:	4b01      	ldr	r3, [pc, #4]	; (8005648 <__errno+0x8>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	200002c0 	.word	0x200002c0

0800564c <__sflush_r>:
 800564c:	898a      	ldrh	r2, [r1, #12]
 800564e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005652:	4605      	mov	r5, r0
 8005654:	0710      	lsls	r0, r2, #28
 8005656:	460c      	mov	r4, r1
 8005658:	d458      	bmi.n	800570c <__sflush_r+0xc0>
 800565a:	684b      	ldr	r3, [r1, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	dc05      	bgt.n	800566c <__sflush_r+0x20>
 8005660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	dc02      	bgt.n	800566c <__sflush_r+0x20>
 8005666:	2000      	movs	r0, #0
 8005668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800566e:	2e00      	cmp	r6, #0
 8005670:	d0f9      	beq.n	8005666 <__sflush_r+0x1a>
 8005672:	2300      	movs	r3, #0
 8005674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005678:	682f      	ldr	r7, [r5, #0]
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	d032      	beq.n	80056e4 <__sflush_r+0x98>
 800567e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	075a      	lsls	r2, r3, #29
 8005684:	d505      	bpl.n	8005692 <__sflush_r+0x46>
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	1ac0      	subs	r0, r0, r3
 800568a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800568c:	b10b      	cbz	r3, 8005692 <__sflush_r+0x46>
 800568e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005690:	1ac0      	subs	r0, r0, r3
 8005692:	2300      	movs	r3, #0
 8005694:	4602      	mov	r2, r0
 8005696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005698:	6a21      	ldr	r1, [r4, #32]
 800569a:	4628      	mov	r0, r5
 800569c:	47b0      	blx	r6
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	d106      	bne.n	80056b2 <__sflush_r+0x66>
 80056a4:	6829      	ldr	r1, [r5, #0]
 80056a6:	291d      	cmp	r1, #29
 80056a8:	d82c      	bhi.n	8005704 <__sflush_r+0xb8>
 80056aa:	4a2a      	ldr	r2, [pc, #168]	; (8005754 <__sflush_r+0x108>)
 80056ac:	40ca      	lsrs	r2, r1
 80056ae:	07d6      	lsls	r6, r2, #31
 80056b0:	d528      	bpl.n	8005704 <__sflush_r+0xb8>
 80056b2:	2200      	movs	r2, #0
 80056b4:	6062      	str	r2, [r4, #4]
 80056b6:	04d9      	lsls	r1, r3, #19
 80056b8:	6922      	ldr	r2, [r4, #16]
 80056ba:	6022      	str	r2, [r4, #0]
 80056bc:	d504      	bpl.n	80056c8 <__sflush_r+0x7c>
 80056be:	1c42      	adds	r2, r0, #1
 80056c0:	d101      	bne.n	80056c6 <__sflush_r+0x7a>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	b903      	cbnz	r3, 80056c8 <__sflush_r+0x7c>
 80056c6:	6560      	str	r0, [r4, #84]	; 0x54
 80056c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ca:	602f      	str	r7, [r5, #0]
 80056cc:	2900      	cmp	r1, #0
 80056ce:	d0ca      	beq.n	8005666 <__sflush_r+0x1a>
 80056d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d4:	4299      	cmp	r1, r3
 80056d6:	d002      	beq.n	80056de <__sflush_r+0x92>
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 f9b1 	bl	8005a40 <_free_r>
 80056de:	2000      	movs	r0, #0
 80056e0:	6360      	str	r0, [r4, #52]	; 0x34
 80056e2:	e7c1      	b.n	8005668 <__sflush_r+0x1c>
 80056e4:	6a21      	ldr	r1, [r4, #32]
 80056e6:	2301      	movs	r3, #1
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b0      	blx	r6
 80056ec:	1c41      	adds	r1, r0, #1
 80056ee:	d1c7      	bne.n	8005680 <__sflush_r+0x34>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0c4      	beq.n	8005680 <__sflush_r+0x34>
 80056f6:	2b1d      	cmp	r3, #29
 80056f8:	d001      	beq.n	80056fe <__sflush_r+0xb2>
 80056fa:	2b16      	cmp	r3, #22
 80056fc:	d101      	bne.n	8005702 <__sflush_r+0xb6>
 80056fe:	602f      	str	r7, [r5, #0]
 8005700:	e7b1      	b.n	8005666 <__sflush_r+0x1a>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005708:	81a3      	strh	r3, [r4, #12]
 800570a:	e7ad      	b.n	8005668 <__sflush_r+0x1c>
 800570c:	690f      	ldr	r7, [r1, #16]
 800570e:	2f00      	cmp	r7, #0
 8005710:	d0a9      	beq.n	8005666 <__sflush_r+0x1a>
 8005712:	0793      	lsls	r3, r2, #30
 8005714:	680e      	ldr	r6, [r1, #0]
 8005716:	bf08      	it	eq
 8005718:	694b      	ldreq	r3, [r1, #20]
 800571a:	600f      	str	r7, [r1, #0]
 800571c:	bf18      	it	ne
 800571e:	2300      	movne	r3, #0
 8005720:	eba6 0807 	sub.w	r8, r6, r7
 8005724:	608b      	str	r3, [r1, #8]
 8005726:	f1b8 0f00 	cmp.w	r8, #0
 800572a:	dd9c      	ble.n	8005666 <__sflush_r+0x1a>
 800572c:	6a21      	ldr	r1, [r4, #32]
 800572e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005730:	4643      	mov	r3, r8
 8005732:	463a      	mov	r2, r7
 8005734:	4628      	mov	r0, r5
 8005736:	47b0      	blx	r6
 8005738:	2800      	cmp	r0, #0
 800573a:	dc06      	bgt.n	800574a <__sflush_r+0xfe>
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	e78e      	b.n	8005668 <__sflush_r+0x1c>
 800574a:	4407      	add	r7, r0
 800574c:	eba8 0800 	sub.w	r8, r8, r0
 8005750:	e7e9      	b.n	8005726 <__sflush_r+0xda>
 8005752:	bf00      	nop
 8005754:	20400001 	.word	0x20400001

08005758 <_fflush_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	690b      	ldr	r3, [r1, #16]
 800575c:	4605      	mov	r5, r0
 800575e:	460c      	mov	r4, r1
 8005760:	b913      	cbnz	r3, 8005768 <_fflush_r+0x10>
 8005762:	2500      	movs	r5, #0
 8005764:	4628      	mov	r0, r5
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	b118      	cbz	r0, 8005772 <_fflush_r+0x1a>
 800576a:	6983      	ldr	r3, [r0, #24]
 800576c:	b90b      	cbnz	r3, 8005772 <_fflush_r+0x1a>
 800576e:	f000 f899 	bl	80058a4 <__sinit>
 8005772:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <_fflush_r+0x6c>)
 8005774:	429c      	cmp	r4, r3
 8005776:	d11b      	bne.n	80057b0 <_fflush_r+0x58>
 8005778:	686c      	ldr	r4, [r5, #4]
 800577a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0ef      	beq.n	8005762 <_fflush_r+0xa>
 8005782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005784:	07d0      	lsls	r0, r2, #31
 8005786:	d404      	bmi.n	8005792 <_fflush_r+0x3a>
 8005788:	0599      	lsls	r1, r3, #22
 800578a:	d402      	bmi.n	8005792 <_fflush_r+0x3a>
 800578c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800578e:	f000 f94c 	bl	8005a2a <__retarget_lock_acquire_recursive>
 8005792:	4628      	mov	r0, r5
 8005794:	4621      	mov	r1, r4
 8005796:	f7ff ff59 	bl	800564c <__sflush_r>
 800579a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800579c:	07da      	lsls	r2, r3, #31
 800579e:	4605      	mov	r5, r0
 80057a0:	d4e0      	bmi.n	8005764 <_fflush_r+0xc>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	059b      	lsls	r3, r3, #22
 80057a6:	d4dd      	bmi.n	8005764 <_fflush_r+0xc>
 80057a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057aa:	f000 f93f 	bl	8005a2c <__retarget_lock_release_recursive>
 80057ae:	e7d9      	b.n	8005764 <_fflush_r+0xc>
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <_fflush_r+0x70>)
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d101      	bne.n	80057ba <_fflush_r+0x62>
 80057b6:	68ac      	ldr	r4, [r5, #8]
 80057b8:	e7df      	b.n	800577a <_fflush_r+0x22>
 80057ba:	4b04      	ldr	r3, [pc, #16]	; (80057cc <_fflush_r+0x74>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	bf08      	it	eq
 80057c0:	68ec      	ldreq	r4, [r5, #12]
 80057c2:	e7da      	b.n	800577a <_fflush_r+0x22>
 80057c4:	08006bbc 	.word	0x08006bbc
 80057c8:	08006bdc 	.word	0x08006bdc
 80057cc:	08006b9c 	.word	0x08006b9c

080057d0 <fflush>:
 80057d0:	4601      	mov	r1, r0
 80057d2:	b920      	cbnz	r0, 80057de <fflush+0xe>
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <fflush+0x18>)
 80057d6:	4905      	ldr	r1, [pc, #20]	; (80057ec <fflush+0x1c>)
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	f000 b8e1 	b.w	80059a0 <_fwalk_reent>
 80057de:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <fflush+0x20>)
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	f7ff bfb9 	b.w	8005758 <_fflush_r>
 80057e6:	bf00      	nop
 80057e8:	08006bfc 	.word	0x08006bfc
 80057ec:	08005759 	.word	0x08005759
 80057f0:	200002c0 	.word	0x200002c0

080057f4 <std>:
 80057f4:	2300      	movs	r3, #0
 80057f6:	b510      	push	{r4, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	e9c0 3300 	strd	r3, r3, [r0]
 80057fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005802:	6083      	str	r3, [r0, #8]
 8005804:	8181      	strh	r1, [r0, #12]
 8005806:	6643      	str	r3, [r0, #100]	; 0x64
 8005808:	81c2      	strh	r2, [r0, #14]
 800580a:	6183      	str	r3, [r0, #24]
 800580c:	4619      	mov	r1, r3
 800580e:	2208      	movs	r2, #8
 8005810:	305c      	adds	r0, #92	; 0x5c
 8005812:	f000 f90c 	bl	8005a2e <memset>
 8005816:	4b05      	ldr	r3, [pc, #20]	; (800582c <std+0x38>)
 8005818:	6263      	str	r3, [r4, #36]	; 0x24
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <std+0x3c>)
 800581c:	62a3      	str	r3, [r4, #40]	; 0x28
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <std+0x40>)
 8005820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <std+0x44>)
 8005824:	6224      	str	r4, [r4, #32]
 8005826:	6323      	str	r3, [r4, #48]	; 0x30
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	08005e5d 	.word	0x08005e5d
 8005830:	08005e7f 	.word	0x08005e7f
 8005834:	08005eb7 	.word	0x08005eb7
 8005838:	08005edb 	.word	0x08005edb

0800583c <_cleanup_r>:
 800583c:	4901      	ldr	r1, [pc, #4]	; (8005844 <_cleanup_r+0x8>)
 800583e:	f000 b8af 	b.w	80059a0 <_fwalk_reent>
 8005842:	bf00      	nop
 8005844:	08005759 	.word	0x08005759

08005848 <__sfmoreglue>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	1e4a      	subs	r2, r1, #1
 800584c:	2568      	movs	r5, #104	; 0x68
 800584e:	4355      	muls	r5, r2
 8005850:	460e      	mov	r6, r1
 8005852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005856:	f000 f943 	bl	8005ae0 <_malloc_r>
 800585a:	4604      	mov	r4, r0
 800585c:	b140      	cbz	r0, 8005870 <__sfmoreglue+0x28>
 800585e:	2100      	movs	r1, #0
 8005860:	e9c0 1600 	strd	r1, r6, [r0]
 8005864:	300c      	adds	r0, #12
 8005866:	60a0      	str	r0, [r4, #8]
 8005868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800586c:	f000 f8df 	bl	8005a2e <memset>
 8005870:	4620      	mov	r0, r4
 8005872:	bd70      	pop	{r4, r5, r6, pc}

08005874 <__sfp_lock_acquire>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__sfp_lock_acquire+0x8>)
 8005876:	f000 b8d8 	b.w	8005a2a <__retarget_lock_acquire_recursive>
 800587a:	bf00      	nop
 800587c:	200004e4 	.word	0x200004e4

08005880 <__sfp_lock_release>:
 8005880:	4801      	ldr	r0, [pc, #4]	; (8005888 <__sfp_lock_release+0x8>)
 8005882:	f000 b8d3 	b.w	8005a2c <__retarget_lock_release_recursive>
 8005886:	bf00      	nop
 8005888:	200004e4 	.word	0x200004e4

0800588c <__sinit_lock_acquire>:
 800588c:	4801      	ldr	r0, [pc, #4]	; (8005894 <__sinit_lock_acquire+0x8>)
 800588e:	f000 b8cc 	b.w	8005a2a <__retarget_lock_acquire_recursive>
 8005892:	bf00      	nop
 8005894:	200004df 	.word	0x200004df

08005898 <__sinit_lock_release>:
 8005898:	4801      	ldr	r0, [pc, #4]	; (80058a0 <__sinit_lock_release+0x8>)
 800589a:	f000 b8c7 	b.w	8005a2c <__retarget_lock_release_recursive>
 800589e:	bf00      	nop
 80058a0:	200004df 	.word	0x200004df

080058a4 <__sinit>:
 80058a4:	b510      	push	{r4, lr}
 80058a6:	4604      	mov	r4, r0
 80058a8:	f7ff fff0 	bl	800588c <__sinit_lock_acquire>
 80058ac:	69a3      	ldr	r3, [r4, #24]
 80058ae:	b11b      	cbz	r3, 80058b8 <__sinit+0x14>
 80058b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b4:	f7ff bff0 	b.w	8005898 <__sinit_lock_release>
 80058b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058bc:	6523      	str	r3, [r4, #80]	; 0x50
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <__sinit+0x68>)
 80058c0:	4a13      	ldr	r2, [pc, #76]	; (8005910 <__sinit+0x6c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	bf04      	itt	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	61a3      	streq	r3, [r4, #24]
 80058ce:	4620      	mov	r0, r4
 80058d0:	f000 f820 	bl	8005914 <__sfp>
 80058d4:	6060      	str	r0, [r4, #4]
 80058d6:	4620      	mov	r0, r4
 80058d8:	f000 f81c 	bl	8005914 <__sfp>
 80058dc:	60a0      	str	r0, [r4, #8]
 80058de:	4620      	mov	r0, r4
 80058e0:	f000 f818 	bl	8005914 <__sfp>
 80058e4:	2200      	movs	r2, #0
 80058e6:	60e0      	str	r0, [r4, #12]
 80058e8:	2104      	movs	r1, #4
 80058ea:	6860      	ldr	r0, [r4, #4]
 80058ec:	f7ff ff82 	bl	80057f4 <std>
 80058f0:	68a0      	ldr	r0, [r4, #8]
 80058f2:	2201      	movs	r2, #1
 80058f4:	2109      	movs	r1, #9
 80058f6:	f7ff ff7d 	bl	80057f4 <std>
 80058fa:	68e0      	ldr	r0, [r4, #12]
 80058fc:	2202      	movs	r2, #2
 80058fe:	2112      	movs	r1, #18
 8005900:	f7ff ff78 	bl	80057f4 <std>
 8005904:	2301      	movs	r3, #1
 8005906:	61a3      	str	r3, [r4, #24]
 8005908:	e7d2      	b.n	80058b0 <__sinit+0xc>
 800590a:	bf00      	nop
 800590c:	08006bfc 	.word	0x08006bfc
 8005910:	0800583d 	.word	0x0800583d

08005914 <__sfp>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	4607      	mov	r7, r0
 8005918:	f7ff ffac 	bl	8005874 <__sfp_lock_acquire>
 800591c:	4b1e      	ldr	r3, [pc, #120]	; (8005998 <__sfp+0x84>)
 800591e:	681e      	ldr	r6, [r3, #0]
 8005920:	69b3      	ldr	r3, [r6, #24]
 8005922:	b913      	cbnz	r3, 800592a <__sfp+0x16>
 8005924:	4630      	mov	r0, r6
 8005926:	f7ff ffbd 	bl	80058a4 <__sinit>
 800592a:	3648      	adds	r6, #72	; 0x48
 800592c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005930:	3b01      	subs	r3, #1
 8005932:	d503      	bpl.n	800593c <__sfp+0x28>
 8005934:	6833      	ldr	r3, [r6, #0]
 8005936:	b30b      	cbz	r3, 800597c <__sfp+0x68>
 8005938:	6836      	ldr	r6, [r6, #0]
 800593a:	e7f7      	b.n	800592c <__sfp+0x18>
 800593c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005940:	b9d5      	cbnz	r5, 8005978 <__sfp+0x64>
 8005942:	4b16      	ldr	r3, [pc, #88]	; (800599c <__sfp+0x88>)
 8005944:	60e3      	str	r3, [r4, #12]
 8005946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800594a:	6665      	str	r5, [r4, #100]	; 0x64
 800594c:	f000 f86c 	bl	8005a28 <__retarget_lock_init_recursive>
 8005950:	f7ff ff96 	bl	8005880 <__sfp_lock_release>
 8005954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800595c:	6025      	str	r5, [r4, #0]
 800595e:	61a5      	str	r5, [r4, #24]
 8005960:	2208      	movs	r2, #8
 8005962:	4629      	mov	r1, r5
 8005964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005968:	f000 f861 	bl	8005a2e <memset>
 800596c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005974:	4620      	mov	r0, r4
 8005976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005978:	3468      	adds	r4, #104	; 0x68
 800597a:	e7d9      	b.n	8005930 <__sfp+0x1c>
 800597c:	2104      	movs	r1, #4
 800597e:	4638      	mov	r0, r7
 8005980:	f7ff ff62 	bl	8005848 <__sfmoreglue>
 8005984:	4604      	mov	r4, r0
 8005986:	6030      	str	r0, [r6, #0]
 8005988:	2800      	cmp	r0, #0
 800598a:	d1d5      	bne.n	8005938 <__sfp+0x24>
 800598c:	f7ff ff78 	bl	8005880 <__sfp_lock_release>
 8005990:	230c      	movs	r3, #12
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	e7ee      	b.n	8005974 <__sfp+0x60>
 8005996:	bf00      	nop
 8005998:	08006bfc 	.word	0x08006bfc
 800599c:	ffff0001 	.word	0xffff0001

080059a0 <_fwalk_reent>:
 80059a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a4:	4606      	mov	r6, r0
 80059a6:	4688      	mov	r8, r1
 80059a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059ac:	2700      	movs	r7, #0
 80059ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059b2:	f1b9 0901 	subs.w	r9, r9, #1
 80059b6:	d505      	bpl.n	80059c4 <_fwalk_reent+0x24>
 80059b8:	6824      	ldr	r4, [r4, #0]
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	d1f7      	bne.n	80059ae <_fwalk_reent+0xe>
 80059be:	4638      	mov	r0, r7
 80059c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c4:	89ab      	ldrh	r3, [r5, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d907      	bls.n	80059da <_fwalk_reent+0x3a>
 80059ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059ce:	3301      	adds	r3, #1
 80059d0:	d003      	beq.n	80059da <_fwalk_reent+0x3a>
 80059d2:	4629      	mov	r1, r5
 80059d4:	4630      	mov	r0, r6
 80059d6:	47c0      	blx	r8
 80059d8:	4307      	orrs	r7, r0
 80059da:	3568      	adds	r5, #104	; 0x68
 80059dc:	e7e9      	b.n	80059b2 <_fwalk_reent+0x12>
	...

080059e0 <__libc_init_array>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4d0d      	ldr	r5, [pc, #52]	; (8005a18 <__libc_init_array+0x38>)
 80059e4:	4c0d      	ldr	r4, [pc, #52]	; (8005a1c <__libc_init_array+0x3c>)
 80059e6:	1b64      	subs	r4, r4, r5
 80059e8:	10a4      	asrs	r4, r4, #2
 80059ea:	2600      	movs	r6, #0
 80059ec:	42a6      	cmp	r6, r4
 80059ee:	d109      	bne.n	8005a04 <__libc_init_array+0x24>
 80059f0:	4d0b      	ldr	r5, [pc, #44]	; (8005a20 <__libc_init_array+0x40>)
 80059f2:	4c0c      	ldr	r4, [pc, #48]	; (8005a24 <__libc_init_array+0x44>)
 80059f4:	f000 ffa4 	bl	8006940 <_init>
 80059f8:	1b64      	subs	r4, r4, r5
 80059fa:	10a4      	asrs	r4, r4, #2
 80059fc:	2600      	movs	r6, #0
 80059fe:	42a6      	cmp	r6, r4
 8005a00:	d105      	bne.n	8005a0e <__libc_init_array+0x2e>
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a08:	4798      	blx	r3
 8005a0a:	3601      	adds	r6, #1
 8005a0c:	e7ee      	b.n	80059ec <__libc_init_array+0xc>
 8005a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a12:	4798      	blx	r3
 8005a14:	3601      	adds	r6, #1
 8005a16:	e7f2      	b.n	80059fe <__libc_init_array+0x1e>
 8005a18:	08006d34 	.word	0x08006d34
 8005a1c:	08006d34 	.word	0x08006d34
 8005a20:	08006d34 	.word	0x08006d34
 8005a24:	08006d38 	.word	0x08006d38

08005a28 <__retarget_lock_init_recursive>:
 8005a28:	4770      	bx	lr

08005a2a <__retarget_lock_acquire_recursive>:
 8005a2a:	4770      	bx	lr

08005a2c <__retarget_lock_release_recursive>:
 8005a2c:	4770      	bx	lr

08005a2e <memset>:
 8005a2e:	4402      	add	r2, r0
 8005a30:	4603      	mov	r3, r0
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d100      	bne.n	8005a38 <memset+0xa>
 8005a36:	4770      	bx	lr
 8005a38:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3c:	e7f9      	b.n	8005a32 <memset+0x4>
	...

08005a40 <_free_r>:
 8005a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d048      	beq.n	8005ad8 <_free_r+0x98>
 8005a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a4a:	9001      	str	r0, [sp, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a52:	bfb8      	it	lt
 8005a54:	18e4      	addlt	r4, r4, r3
 8005a56:	f000 fc45 	bl	80062e4 <__malloc_lock>
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <_free_r+0x9c>)
 8005a5c:	9801      	ldr	r0, [sp, #4]
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	4615      	mov	r5, r2
 8005a62:	b933      	cbnz	r3, 8005a72 <_free_r+0x32>
 8005a64:	6063      	str	r3, [r4, #4]
 8005a66:	6014      	str	r4, [r2, #0]
 8005a68:	b003      	add	sp, #12
 8005a6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a6e:	f000 bc3f 	b.w	80062f0 <__malloc_unlock>
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	d90b      	bls.n	8005a8e <_free_r+0x4e>
 8005a76:	6821      	ldr	r1, [r4, #0]
 8005a78:	1862      	adds	r2, r4, r1
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bf04      	itt	eq
 8005a7e:	681a      	ldreq	r2, [r3, #0]
 8005a80:	685b      	ldreq	r3, [r3, #4]
 8005a82:	6063      	str	r3, [r4, #4]
 8005a84:	bf04      	itt	eq
 8005a86:	1852      	addeq	r2, r2, r1
 8005a88:	6022      	streq	r2, [r4, #0]
 8005a8a:	602c      	str	r4, [r5, #0]
 8005a8c:	e7ec      	b.n	8005a68 <_free_r+0x28>
 8005a8e:	461a      	mov	r2, r3
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	b10b      	cbz	r3, 8005a98 <_free_r+0x58>
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	d9fa      	bls.n	8005a8e <_free_r+0x4e>
 8005a98:	6811      	ldr	r1, [r2, #0]
 8005a9a:	1855      	adds	r5, r2, r1
 8005a9c:	42a5      	cmp	r5, r4
 8005a9e:	d10b      	bne.n	8005ab8 <_free_r+0x78>
 8005aa0:	6824      	ldr	r4, [r4, #0]
 8005aa2:	4421      	add	r1, r4
 8005aa4:	1854      	adds	r4, r2, r1
 8005aa6:	42a3      	cmp	r3, r4
 8005aa8:	6011      	str	r1, [r2, #0]
 8005aaa:	d1dd      	bne.n	8005a68 <_free_r+0x28>
 8005aac:	681c      	ldr	r4, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	6053      	str	r3, [r2, #4]
 8005ab2:	4421      	add	r1, r4
 8005ab4:	6011      	str	r1, [r2, #0]
 8005ab6:	e7d7      	b.n	8005a68 <_free_r+0x28>
 8005ab8:	d902      	bls.n	8005ac0 <_free_r+0x80>
 8005aba:	230c      	movs	r3, #12
 8005abc:	6003      	str	r3, [r0, #0]
 8005abe:	e7d3      	b.n	8005a68 <_free_r+0x28>
 8005ac0:	6825      	ldr	r5, [r4, #0]
 8005ac2:	1961      	adds	r1, r4, r5
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	bf04      	itt	eq
 8005ac8:	6819      	ldreq	r1, [r3, #0]
 8005aca:	685b      	ldreq	r3, [r3, #4]
 8005acc:	6063      	str	r3, [r4, #4]
 8005ace:	bf04      	itt	eq
 8005ad0:	1949      	addeq	r1, r1, r5
 8005ad2:	6021      	streq	r1, [r4, #0]
 8005ad4:	6054      	str	r4, [r2, #4]
 8005ad6:	e7c7      	b.n	8005a68 <_free_r+0x28>
 8005ad8:	b003      	add	sp, #12
 8005ada:	bd30      	pop	{r4, r5, pc}
 8005adc:	20000358 	.word	0x20000358

08005ae0 <_malloc_r>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	1ccd      	adds	r5, r1, #3
 8005ae4:	f025 0503 	bic.w	r5, r5, #3
 8005ae8:	3508      	adds	r5, #8
 8005aea:	2d0c      	cmp	r5, #12
 8005aec:	bf38      	it	cc
 8005aee:	250c      	movcc	r5, #12
 8005af0:	2d00      	cmp	r5, #0
 8005af2:	4606      	mov	r6, r0
 8005af4:	db01      	blt.n	8005afa <_malloc_r+0x1a>
 8005af6:	42a9      	cmp	r1, r5
 8005af8:	d903      	bls.n	8005b02 <_malloc_r+0x22>
 8005afa:	230c      	movs	r3, #12
 8005afc:	6033      	str	r3, [r6, #0]
 8005afe:	2000      	movs	r0, #0
 8005b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b02:	f000 fbef 	bl	80062e4 <__malloc_lock>
 8005b06:	4921      	ldr	r1, [pc, #132]	; (8005b8c <_malloc_r+0xac>)
 8005b08:	680a      	ldr	r2, [r1, #0]
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	b99c      	cbnz	r4, 8005b36 <_malloc_r+0x56>
 8005b0e:	4f20      	ldr	r7, [pc, #128]	; (8005b90 <_malloc_r+0xb0>)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	b923      	cbnz	r3, 8005b1e <_malloc_r+0x3e>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4630      	mov	r0, r6
 8005b18:	f000 f8ca 	bl	8005cb0 <_sbrk_r>
 8005b1c:	6038      	str	r0, [r7, #0]
 8005b1e:	4629      	mov	r1, r5
 8005b20:	4630      	mov	r0, r6
 8005b22:	f000 f8c5 	bl	8005cb0 <_sbrk_r>
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d123      	bne.n	8005b72 <_malloc_r+0x92>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f000 fbde 	bl	80062f0 <__malloc_unlock>
 8005b34:	e7e3      	b.n	8005afe <_malloc_r+0x1e>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	1b5b      	subs	r3, r3, r5
 8005b3a:	d417      	bmi.n	8005b6c <_malloc_r+0x8c>
 8005b3c:	2b0b      	cmp	r3, #11
 8005b3e:	d903      	bls.n	8005b48 <_malloc_r+0x68>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	441c      	add	r4, r3
 8005b44:	6025      	str	r5, [r4, #0]
 8005b46:	e004      	b.n	8005b52 <_malloc_r+0x72>
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	42a2      	cmp	r2, r4
 8005b4c:	bf0c      	ite	eq
 8005b4e:	600b      	streq	r3, [r1, #0]
 8005b50:	6053      	strne	r3, [r2, #4]
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 fbcc 	bl	80062f0 <__malloc_unlock>
 8005b58:	f104 000b 	add.w	r0, r4, #11
 8005b5c:	1d23      	adds	r3, r4, #4
 8005b5e:	f020 0007 	bic.w	r0, r0, #7
 8005b62:	1ac2      	subs	r2, r0, r3
 8005b64:	d0cc      	beq.n	8005b00 <_malloc_r+0x20>
 8005b66:	1a1b      	subs	r3, r3, r0
 8005b68:	50a3      	str	r3, [r4, r2]
 8005b6a:	e7c9      	b.n	8005b00 <_malloc_r+0x20>
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	6864      	ldr	r4, [r4, #4]
 8005b70:	e7cc      	b.n	8005b0c <_malloc_r+0x2c>
 8005b72:	1cc4      	adds	r4, r0, #3
 8005b74:	f024 0403 	bic.w	r4, r4, #3
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d0e3      	beq.n	8005b44 <_malloc_r+0x64>
 8005b7c:	1a21      	subs	r1, r4, r0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 f896 	bl	8005cb0 <_sbrk_r>
 8005b84:	3001      	adds	r0, #1
 8005b86:	d1dd      	bne.n	8005b44 <_malloc_r+0x64>
 8005b88:	e7cf      	b.n	8005b2a <_malloc_r+0x4a>
 8005b8a:	bf00      	nop
 8005b8c:	20000358 	.word	0x20000358
 8005b90:	2000035c 	.word	0x2000035c

08005b94 <iprintf>:
 8005b94:	b40f      	push	{r0, r1, r2, r3}
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <iprintf+0x2c>)
 8005b98:	b513      	push	{r0, r1, r4, lr}
 8005b9a:	681c      	ldr	r4, [r3, #0]
 8005b9c:	b124      	cbz	r4, 8005ba8 <iprintf+0x14>
 8005b9e:	69a3      	ldr	r3, [r4, #24]
 8005ba0:	b913      	cbnz	r3, 8005ba8 <iprintf+0x14>
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f7ff fe7e 	bl	80058a4 <__sinit>
 8005ba8:	ab05      	add	r3, sp, #20
 8005baa:	9a04      	ldr	r2, [sp, #16]
 8005bac:	68a1      	ldr	r1, [r4, #8]
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 fbcd 	bl	8006350 <_vfiprintf_r>
 8005bb6:	b002      	add	sp, #8
 8005bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bbc:	b004      	add	sp, #16
 8005bbe:	4770      	bx	lr
 8005bc0:	200002c0 	.word	0x200002c0

08005bc4 <_puts_r>:
 8005bc4:	b570      	push	{r4, r5, r6, lr}
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	4605      	mov	r5, r0
 8005bca:	b118      	cbz	r0, 8005bd4 <_puts_r+0x10>
 8005bcc:	6983      	ldr	r3, [r0, #24]
 8005bce:	b90b      	cbnz	r3, 8005bd4 <_puts_r+0x10>
 8005bd0:	f7ff fe68 	bl	80058a4 <__sinit>
 8005bd4:	69ab      	ldr	r3, [r5, #24]
 8005bd6:	68ac      	ldr	r4, [r5, #8]
 8005bd8:	b913      	cbnz	r3, 8005be0 <_puts_r+0x1c>
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f7ff fe62 	bl	80058a4 <__sinit>
 8005be0:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <_puts_r+0xd0>)
 8005be2:	429c      	cmp	r4, r3
 8005be4:	d120      	bne.n	8005c28 <_puts_r+0x64>
 8005be6:	686c      	ldr	r4, [r5, #4]
 8005be8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bea:	07db      	lsls	r3, r3, #31
 8005bec:	d405      	bmi.n	8005bfa <_puts_r+0x36>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	0598      	lsls	r0, r3, #22
 8005bf2:	d402      	bmi.n	8005bfa <_puts_r+0x36>
 8005bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bf6:	f7ff ff18 	bl	8005a2a <__retarget_lock_acquire_recursive>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	0719      	lsls	r1, r3, #28
 8005bfe:	d51d      	bpl.n	8005c3c <_puts_r+0x78>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	b1db      	cbz	r3, 8005c3c <_puts_r+0x78>
 8005c04:	3e01      	subs	r6, #1
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	60a3      	str	r3, [r4, #8]
 8005c10:	bb39      	cbnz	r1, 8005c62 <_puts_r+0x9e>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da38      	bge.n	8005c88 <_puts_r+0xc4>
 8005c16:	4622      	mov	r2, r4
 8005c18:	210a      	movs	r1, #10
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fa02 	bl	8006024 <__swbuf_r>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d011      	beq.n	8005c48 <_puts_r+0x84>
 8005c24:	250a      	movs	r5, #10
 8005c26:	e011      	b.n	8005c4c <_puts_r+0x88>
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <_puts_r+0xd4>)
 8005c2a:	429c      	cmp	r4, r3
 8005c2c:	d101      	bne.n	8005c32 <_puts_r+0x6e>
 8005c2e:	68ac      	ldr	r4, [r5, #8]
 8005c30:	e7da      	b.n	8005be8 <_puts_r+0x24>
 8005c32:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <_puts_r+0xd8>)
 8005c34:	429c      	cmp	r4, r3
 8005c36:	bf08      	it	eq
 8005c38:	68ec      	ldreq	r4, [r5, #12]
 8005c3a:	e7d5      	b.n	8005be8 <_puts_r+0x24>
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 fa54 	bl	80060ec <__swsetup_r>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d0dd      	beq.n	8005c04 <_puts_r+0x40>
 8005c48:	f04f 35ff 	mov.w	r5, #4294967295
 8005c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c4e:	07da      	lsls	r2, r3, #31
 8005c50:	d405      	bmi.n	8005c5e <_puts_r+0x9a>
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	059b      	lsls	r3, r3, #22
 8005c56:	d402      	bmi.n	8005c5e <_puts_r+0x9a>
 8005c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5a:	f7ff fee7 	bl	8005a2c <__retarget_lock_release_recursive>
 8005c5e:	4628      	mov	r0, r5
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	da04      	bge.n	8005c70 <_puts_r+0xac>
 8005c66:	69a2      	ldr	r2, [r4, #24]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	dc06      	bgt.n	8005c7a <_puts_r+0xb6>
 8005c6c:	290a      	cmp	r1, #10
 8005c6e:	d004      	beq.n	8005c7a <_puts_r+0xb6>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	6022      	str	r2, [r4, #0]
 8005c76:	7019      	strb	r1, [r3, #0]
 8005c78:	e7c5      	b.n	8005c06 <_puts_r+0x42>
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f9d1 	bl	8006024 <__swbuf_r>
 8005c82:	3001      	adds	r0, #1
 8005c84:	d1bf      	bne.n	8005c06 <_puts_r+0x42>
 8005c86:	e7df      	b.n	8005c48 <_puts_r+0x84>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	250a      	movs	r5, #10
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	6022      	str	r2, [r4, #0]
 8005c90:	701d      	strb	r5, [r3, #0]
 8005c92:	e7db      	b.n	8005c4c <_puts_r+0x88>
 8005c94:	08006bbc 	.word	0x08006bbc
 8005c98:	08006bdc 	.word	0x08006bdc
 8005c9c:	08006b9c 	.word	0x08006b9c

08005ca0 <puts>:
 8005ca0:	4b02      	ldr	r3, [pc, #8]	; (8005cac <puts+0xc>)
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	f7ff bf8d 	b.w	8005bc4 <_puts_r>
 8005caa:	bf00      	nop
 8005cac:	200002c0 	.word	0x200002c0

08005cb0 <_sbrk_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4d06      	ldr	r5, [pc, #24]	; (8005ccc <_sbrk_r+0x1c>)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	602b      	str	r3, [r5, #0]
 8005cbc:	f7fb f8e6 	bl	8000e8c <_sbrk>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_sbrk_r+0x1a>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_sbrk_r+0x1a>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	200004e8 	.word	0x200004e8

08005cd0 <setvbuf>:
 8005cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cd4:	461d      	mov	r5, r3
 8005cd6:	4b5d      	ldr	r3, [pc, #372]	; (8005e4c <setvbuf+0x17c>)
 8005cd8:	681f      	ldr	r7, [r3, #0]
 8005cda:	4604      	mov	r4, r0
 8005cdc:	460e      	mov	r6, r1
 8005cde:	4690      	mov	r8, r2
 8005ce0:	b127      	cbz	r7, 8005cec <setvbuf+0x1c>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	b913      	cbnz	r3, 8005cec <setvbuf+0x1c>
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f7ff fddc 	bl	80058a4 <__sinit>
 8005cec:	4b58      	ldr	r3, [pc, #352]	; (8005e50 <setvbuf+0x180>)
 8005cee:	429c      	cmp	r4, r3
 8005cf0:	d167      	bne.n	8005dc2 <setvbuf+0xf2>
 8005cf2:	687c      	ldr	r4, [r7, #4]
 8005cf4:	f1b8 0f02 	cmp.w	r8, #2
 8005cf8:	d006      	beq.n	8005d08 <setvbuf+0x38>
 8005cfa:	f1b8 0f01 	cmp.w	r8, #1
 8005cfe:	f200 809f 	bhi.w	8005e40 <setvbuf+0x170>
 8005d02:	2d00      	cmp	r5, #0
 8005d04:	f2c0 809c 	blt.w	8005e40 <setvbuf+0x170>
 8005d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d0a:	07db      	lsls	r3, r3, #31
 8005d0c:	d405      	bmi.n	8005d1a <setvbuf+0x4a>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	0598      	lsls	r0, r3, #22
 8005d12:	d402      	bmi.n	8005d1a <setvbuf+0x4a>
 8005d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d16:	f7ff fe88 	bl	8005a2a <__retarget_lock_acquire_recursive>
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f7ff fd1b 	bl	8005758 <_fflush_r>
 8005d22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d24:	b141      	cbz	r1, 8005d38 <setvbuf+0x68>
 8005d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	d002      	beq.n	8005d34 <setvbuf+0x64>
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f7ff fe86 	bl	8005a40 <_free_r>
 8005d34:	2300      	movs	r3, #0
 8005d36:	6363      	str	r3, [r4, #52]	; 0x34
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61a3      	str	r3, [r4, #24]
 8005d3c:	6063      	str	r3, [r4, #4]
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	0619      	lsls	r1, r3, #24
 8005d42:	d503      	bpl.n	8005d4c <setvbuf+0x7c>
 8005d44:	6921      	ldr	r1, [r4, #16]
 8005d46:	4638      	mov	r0, r7
 8005d48:	f7ff fe7a 	bl	8005a40 <_free_r>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	f1b8 0f02 	cmp.w	r8, #2
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	d06c      	beq.n	8005e38 <setvbuf+0x168>
 8005d5e:	ab01      	add	r3, sp, #4
 8005d60:	466a      	mov	r2, sp
 8005d62:	4621      	mov	r1, r4
 8005d64:	4638      	mov	r0, r7
 8005d66:	f000 fa51 	bl	800620c <__swhatbuf_r>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	4318      	orrs	r0, r3
 8005d6e:	81a0      	strh	r0, [r4, #12]
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	d130      	bne.n	8005dd6 <setvbuf+0x106>
 8005d74:	9d00      	ldr	r5, [sp, #0]
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 faac 	bl	80062d4 <malloc>
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d155      	bne.n	8005e2e <setvbuf+0x15e>
 8005d82:	f8dd 9000 	ldr.w	r9, [sp]
 8005d86:	45a9      	cmp	r9, r5
 8005d88:	d14a      	bne.n	8005e20 <setvbuf+0x150>
 8005d8a:	f04f 35ff 	mov.w	r5, #4294967295
 8005d8e:	2200      	movs	r2, #0
 8005d90:	60a2      	str	r2, [r4, #8]
 8005d92:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005d96:	6022      	str	r2, [r4, #0]
 8005d98:	6122      	str	r2, [r4, #16]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da0:	6162      	str	r2, [r4, #20]
 8005da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005da4:	f043 0302 	orr.w	r3, r3, #2
 8005da8:	07d2      	lsls	r2, r2, #31
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	d405      	bmi.n	8005dba <setvbuf+0xea>
 8005dae:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005db2:	d102      	bne.n	8005dba <setvbuf+0xea>
 8005db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db6:	f7ff fe39 	bl	8005a2c <__retarget_lock_release_recursive>
 8005dba:	4628      	mov	r0, r5
 8005dbc:	b003      	add	sp, #12
 8005dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dc2:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <setvbuf+0x184>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	d101      	bne.n	8005dcc <setvbuf+0xfc>
 8005dc8:	68bc      	ldr	r4, [r7, #8]
 8005dca:	e793      	b.n	8005cf4 <setvbuf+0x24>
 8005dcc:	4b22      	ldr	r3, [pc, #136]	; (8005e58 <setvbuf+0x188>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	bf08      	it	eq
 8005dd2:	68fc      	ldreq	r4, [r7, #12]
 8005dd4:	e78e      	b.n	8005cf4 <setvbuf+0x24>
 8005dd6:	2e00      	cmp	r6, #0
 8005dd8:	d0cd      	beq.n	8005d76 <setvbuf+0xa6>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	b913      	cbnz	r3, 8005de4 <setvbuf+0x114>
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7ff fd60 	bl	80058a4 <__sinit>
 8005de4:	f1b8 0f01 	cmp.w	r8, #1
 8005de8:	bf08      	it	eq
 8005dea:	89a3      	ldrheq	r3, [r4, #12]
 8005dec:	6026      	str	r6, [r4, #0]
 8005dee:	bf04      	itt	eq
 8005df0:	f043 0301 	orreq.w	r3, r3, #1
 8005df4:	81a3      	strheq	r3, [r4, #12]
 8005df6:	89a2      	ldrh	r2, [r4, #12]
 8005df8:	f012 0308 	ands.w	r3, r2, #8
 8005dfc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005e00:	d01c      	beq.n	8005e3c <setvbuf+0x16c>
 8005e02:	07d3      	lsls	r3, r2, #31
 8005e04:	bf41      	itttt	mi
 8005e06:	2300      	movmi	r3, #0
 8005e08:	426d      	negmi	r5, r5
 8005e0a:	60a3      	strmi	r3, [r4, #8]
 8005e0c:	61a5      	strmi	r5, [r4, #24]
 8005e0e:	bf58      	it	pl
 8005e10:	60a5      	strpl	r5, [r4, #8]
 8005e12:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005e14:	f015 0501 	ands.w	r5, r5, #1
 8005e18:	d115      	bne.n	8005e46 <setvbuf+0x176>
 8005e1a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005e1e:	e7c8      	b.n	8005db2 <setvbuf+0xe2>
 8005e20:	4648      	mov	r0, r9
 8005e22:	f000 fa57 	bl	80062d4 <malloc>
 8005e26:	4606      	mov	r6, r0
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d0ae      	beq.n	8005d8a <setvbuf+0xba>
 8005e2c:	464d      	mov	r5, r9
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	81a3      	strh	r3, [r4, #12]
 8005e36:	e7d0      	b.n	8005dda <setvbuf+0x10a>
 8005e38:	2500      	movs	r5, #0
 8005e3a:	e7a8      	b.n	8005d8e <setvbuf+0xbe>
 8005e3c:	60a3      	str	r3, [r4, #8]
 8005e3e:	e7e8      	b.n	8005e12 <setvbuf+0x142>
 8005e40:	f04f 35ff 	mov.w	r5, #4294967295
 8005e44:	e7b9      	b.n	8005dba <setvbuf+0xea>
 8005e46:	2500      	movs	r5, #0
 8005e48:	e7b7      	b.n	8005dba <setvbuf+0xea>
 8005e4a:	bf00      	nop
 8005e4c:	200002c0 	.word	0x200002c0
 8005e50:	08006bbc 	.word	0x08006bbc
 8005e54:	08006bdc 	.word	0x08006bdc
 8005e58:	08006b9c 	.word	0x08006b9c

08005e5c <__sread>:
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	460c      	mov	r4, r1
 8005e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e64:	f000 fd38 	bl	80068d8 <_read_r>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	bfab      	itete	ge
 8005e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e70:	181b      	addge	r3, r3, r0
 8005e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e76:	bfac      	ite	ge
 8005e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e7a:	81a3      	strhlt	r3, [r4, #12]
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <__swrite>:
 8005e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e82:	461f      	mov	r7, r3
 8005e84:	898b      	ldrh	r3, [r1, #12]
 8005e86:	05db      	lsls	r3, r3, #23
 8005e88:	4605      	mov	r5, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	d505      	bpl.n	8005e9c <__swrite+0x1e>
 8005e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e94:	2302      	movs	r3, #2
 8005e96:	2200      	movs	r2, #0
 8005e98:	f000 f9a6 	bl	80061e8 <_lseek_r>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	463b      	mov	r3, r7
 8005eac:	4628      	mov	r0, r5
 8005eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb2:	f000 b909 	b.w	80060c8 <_write_r>

08005eb6 <__sseek>:
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	460c      	mov	r4, r1
 8005eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebe:	f000 f993 	bl	80061e8 <_lseek_r>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	bf15      	itete	ne
 8005ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ed2:	81a3      	strheq	r3, [r4, #12]
 8005ed4:	bf18      	it	ne
 8005ed6:	81a3      	strhne	r3, [r4, #12]
 8005ed8:	bd10      	pop	{r4, pc}

08005eda <__sclose>:
 8005eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ede:	f000 b973 	b.w	80061c8 <_close_r>

08005ee2 <strncmp>:
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	b16a      	cbz	r2, 8005f02 <strncmp+0x20>
 8005ee6:	3901      	subs	r1, #1
 8005ee8:	1884      	adds	r4, r0, r2
 8005eea:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005eee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d103      	bne.n	8005efe <strncmp+0x1c>
 8005ef6:	42a0      	cmp	r0, r4
 8005ef8:	d001      	beq.n	8005efe <strncmp+0x1c>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f5      	bne.n	8005eea <strncmp+0x8>
 8005efe:	1a98      	subs	r0, r3, r2
 8005f00:	bd10      	pop	{r4, pc}
 8005f02:	4610      	mov	r0, r2
 8005f04:	e7fc      	b.n	8005f00 <strncmp+0x1e>
	...

08005f08 <_strtol_l.isra.0>:
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0e:	d001      	beq.n	8005f14 <_strtol_l.isra.0+0xc>
 8005f10:	2b24      	cmp	r3, #36	; 0x24
 8005f12:	d906      	bls.n	8005f22 <_strtol_l.isra.0+0x1a>
 8005f14:	f7ff fb94 	bl	8005640 <__errno>
 8005f18:	2316      	movs	r3, #22
 8005f1a:	6003      	str	r3, [r0, #0]
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f22:	4f3a      	ldr	r7, [pc, #232]	; (800600c <_strtol_l.isra.0+0x104>)
 8005f24:	468e      	mov	lr, r1
 8005f26:	4676      	mov	r6, lr
 8005f28:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005f2c:	5de5      	ldrb	r5, [r4, r7]
 8005f2e:	f015 0508 	ands.w	r5, r5, #8
 8005f32:	d1f8      	bne.n	8005f26 <_strtol_l.isra.0+0x1e>
 8005f34:	2c2d      	cmp	r4, #45	; 0x2d
 8005f36:	d134      	bne.n	8005fa2 <_strtol_l.isra.0+0x9a>
 8005f38:	f89e 4000 	ldrb.w	r4, [lr]
 8005f3c:	f04f 0801 	mov.w	r8, #1
 8005f40:	f106 0e02 	add.w	lr, r6, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d05c      	beq.n	8006002 <_strtol_l.isra.0+0xfa>
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d10c      	bne.n	8005f66 <_strtol_l.isra.0+0x5e>
 8005f4c:	2c30      	cmp	r4, #48	; 0x30
 8005f4e:	d10a      	bne.n	8005f66 <_strtol_l.isra.0+0x5e>
 8005f50:	f89e 4000 	ldrb.w	r4, [lr]
 8005f54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f58:	2c58      	cmp	r4, #88	; 0x58
 8005f5a:	d14d      	bne.n	8005ff8 <_strtol_l.isra.0+0xf0>
 8005f5c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005f60:	2310      	movs	r3, #16
 8005f62:	f10e 0e02 	add.w	lr, lr, #2
 8005f66:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005f6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005f6e:	2600      	movs	r6, #0
 8005f70:	fbbc f9f3 	udiv	r9, ip, r3
 8005f74:	4635      	mov	r5, r6
 8005f76:	fb03 ca19 	mls	sl, r3, r9, ip
 8005f7a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005f7e:	2f09      	cmp	r7, #9
 8005f80:	d818      	bhi.n	8005fb4 <_strtol_l.isra.0+0xac>
 8005f82:	463c      	mov	r4, r7
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	dd24      	ble.n	8005fd2 <_strtol_l.isra.0+0xca>
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	db1f      	blt.n	8005fcc <_strtol_l.isra.0+0xc4>
 8005f8c:	45a9      	cmp	r9, r5
 8005f8e:	d31d      	bcc.n	8005fcc <_strtol_l.isra.0+0xc4>
 8005f90:	d101      	bne.n	8005f96 <_strtol_l.isra.0+0x8e>
 8005f92:	45a2      	cmp	sl, r4
 8005f94:	db1a      	blt.n	8005fcc <_strtol_l.isra.0+0xc4>
 8005f96:	fb05 4503 	mla	r5, r5, r3, r4
 8005f9a:	2601      	movs	r6, #1
 8005f9c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005fa0:	e7eb      	b.n	8005f7a <_strtol_l.isra.0+0x72>
 8005fa2:	2c2b      	cmp	r4, #43	; 0x2b
 8005fa4:	bf08      	it	eq
 8005fa6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005faa:	46a8      	mov	r8, r5
 8005fac:	bf08      	it	eq
 8005fae:	f106 0e02 	addeq.w	lr, r6, #2
 8005fb2:	e7c7      	b.n	8005f44 <_strtol_l.isra.0+0x3c>
 8005fb4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005fb8:	2f19      	cmp	r7, #25
 8005fba:	d801      	bhi.n	8005fc0 <_strtol_l.isra.0+0xb8>
 8005fbc:	3c37      	subs	r4, #55	; 0x37
 8005fbe:	e7e1      	b.n	8005f84 <_strtol_l.isra.0+0x7c>
 8005fc0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005fc4:	2f19      	cmp	r7, #25
 8005fc6:	d804      	bhi.n	8005fd2 <_strtol_l.isra.0+0xca>
 8005fc8:	3c57      	subs	r4, #87	; 0x57
 8005fca:	e7db      	b.n	8005f84 <_strtol_l.isra.0+0x7c>
 8005fcc:	f04f 36ff 	mov.w	r6, #4294967295
 8005fd0:	e7e4      	b.n	8005f9c <_strtol_l.isra.0+0x94>
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	da05      	bge.n	8005fe2 <_strtol_l.isra.0+0xda>
 8005fd6:	2322      	movs	r3, #34	; 0x22
 8005fd8:	6003      	str	r3, [r0, #0]
 8005fda:	4665      	mov	r5, ip
 8005fdc:	b942      	cbnz	r2, 8005ff0 <_strtol_l.isra.0+0xe8>
 8005fde:	4628      	mov	r0, r5
 8005fe0:	e79d      	b.n	8005f1e <_strtol_l.isra.0+0x16>
 8005fe2:	f1b8 0f00 	cmp.w	r8, #0
 8005fe6:	d000      	beq.n	8005fea <_strtol_l.isra.0+0xe2>
 8005fe8:	426d      	negs	r5, r5
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	d0f7      	beq.n	8005fde <_strtol_l.isra.0+0xd6>
 8005fee:	b10e      	cbz	r6, 8005ff4 <_strtol_l.isra.0+0xec>
 8005ff0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005ff4:	6011      	str	r1, [r2, #0]
 8005ff6:	e7f2      	b.n	8005fde <_strtol_l.isra.0+0xd6>
 8005ff8:	2430      	movs	r4, #48	; 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1b3      	bne.n	8005f66 <_strtol_l.isra.0+0x5e>
 8005ffe:	2308      	movs	r3, #8
 8006000:	e7b1      	b.n	8005f66 <_strtol_l.isra.0+0x5e>
 8006002:	2c30      	cmp	r4, #48	; 0x30
 8006004:	d0a4      	beq.n	8005f50 <_strtol_l.isra.0+0x48>
 8006006:	230a      	movs	r3, #10
 8006008:	e7ad      	b.n	8005f66 <_strtol_l.isra.0+0x5e>
 800600a:	bf00      	nop
 800600c:	08006c01 	.word	0x08006c01

08006010 <strtol>:
 8006010:	4613      	mov	r3, r2
 8006012:	460a      	mov	r2, r1
 8006014:	4601      	mov	r1, r0
 8006016:	4802      	ldr	r0, [pc, #8]	; (8006020 <strtol+0x10>)
 8006018:	6800      	ldr	r0, [r0, #0]
 800601a:	f7ff bf75 	b.w	8005f08 <_strtol_l.isra.0>
 800601e:	bf00      	nop
 8006020:	200002c0 	.word	0x200002c0

08006024 <__swbuf_r>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	460e      	mov	r6, r1
 8006028:	4614      	mov	r4, r2
 800602a:	4605      	mov	r5, r0
 800602c:	b118      	cbz	r0, 8006036 <__swbuf_r+0x12>
 800602e:	6983      	ldr	r3, [r0, #24]
 8006030:	b90b      	cbnz	r3, 8006036 <__swbuf_r+0x12>
 8006032:	f7ff fc37 	bl	80058a4 <__sinit>
 8006036:	4b21      	ldr	r3, [pc, #132]	; (80060bc <__swbuf_r+0x98>)
 8006038:	429c      	cmp	r4, r3
 800603a:	d12b      	bne.n	8006094 <__swbuf_r+0x70>
 800603c:	686c      	ldr	r4, [r5, #4]
 800603e:	69a3      	ldr	r3, [r4, #24]
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	071a      	lsls	r2, r3, #28
 8006046:	d52f      	bpl.n	80060a8 <__swbuf_r+0x84>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	b36b      	cbz	r3, 80060a8 <__swbuf_r+0x84>
 800604c:	6923      	ldr	r3, [r4, #16]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1ac0      	subs	r0, r0, r3
 8006052:	6963      	ldr	r3, [r4, #20]
 8006054:	b2f6      	uxtb	r6, r6
 8006056:	4283      	cmp	r3, r0
 8006058:	4637      	mov	r7, r6
 800605a:	dc04      	bgt.n	8006066 <__swbuf_r+0x42>
 800605c:	4621      	mov	r1, r4
 800605e:	4628      	mov	r0, r5
 8006060:	f7ff fb7a 	bl	8005758 <_fflush_r>
 8006064:	bb30      	cbnz	r0, 80060b4 <__swbuf_r+0x90>
 8006066:	68a3      	ldr	r3, [r4, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	60a3      	str	r3, [r4, #8]
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	6022      	str	r2, [r4, #0]
 8006072:	701e      	strb	r6, [r3, #0]
 8006074:	6963      	ldr	r3, [r4, #20]
 8006076:	3001      	adds	r0, #1
 8006078:	4283      	cmp	r3, r0
 800607a:	d004      	beq.n	8006086 <__swbuf_r+0x62>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	07db      	lsls	r3, r3, #31
 8006080:	d506      	bpl.n	8006090 <__swbuf_r+0x6c>
 8006082:	2e0a      	cmp	r6, #10
 8006084:	d104      	bne.n	8006090 <__swbuf_r+0x6c>
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f7ff fb65 	bl	8005758 <_fflush_r>
 800608e:	b988      	cbnz	r0, 80060b4 <__swbuf_r+0x90>
 8006090:	4638      	mov	r0, r7
 8006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <__swbuf_r+0x9c>)
 8006096:	429c      	cmp	r4, r3
 8006098:	d101      	bne.n	800609e <__swbuf_r+0x7a>
 800609a:	68ac      	ldr	r4, [r5, #8]
 800609c:	e7cf      	b.n	800603e <__swbuf_r+0x1a>
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <__swbuf_r+0xa0>)
 80060a0:	429c      	cmp	r4, r3
 80060a2:	bf08      	it	eq
 80060a4:	68ec      	ldreq	r4, [r5, #12]
 80060a6:	e7ca      	b.n	800603e <__swbuf_r+0x1a>
 80060a8:	4621      	mov	r1, r4
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 f81e 	bl	80060ec <__swsetup_r>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d0cb      	beq.n	800604c <__swbuf_r+0x28>
 80060b4:	f04f 37ff 	mov.w	r7, #4294967295
 80060b8:	e7ea      	b.n	8006090 <__swbuf_r+0x6c>
 80060ba:	bf00      	nop
 80060bc:	08006bbc 	.word	0x08006bbc
 80060c0:	08006bdc 	.word	0x08006bdc
 80060c4:	08006b9c 	.word	0x08006b9c

080060c8 <_write_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d07      	ldr	r5, [pc, #28]	; (80060e8 <_write_r+0x20>)
 80060cc:	4604      	mov	r4, r0
 80060ce:	4608      	mov	r0, r1
 80060d0:	4611      	mov	r1, r2
 80060d2:	2200      	movs	r2, #0
 80060d4:	602a      	str	r2, [r5, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f7fa fadc 	bl	8000694 <_write>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_write_r+0x1e>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_write_r+0x1e>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	200004e8 	.word	0x200004e8

080060ec <__swsetup_r>:
 80060ec:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <__swsetup_r+0xcc>)
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	681d      	ldr	r5, [r3, #0]
 80060f2:	4606      	mov	r6, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	b125      	cbz	r5, 8006102 <__swsetup_r+0x16>
 80060f8:	69ab      	ldr	r3, [r5, #24]
 80060fa:	b913      	cbnz	r3, 8006102 <__swsetup_r+0x16>
 80060fc:	4628      	mov	r0, r5
 80060fe:	f7ff fbd1 	bl	80058a4 <__sinit>
 8006102:	4b2e      	ldr	r3, [pc, #184]	; (80061bc <__swsetup_r+0xd0>)
 8006104:	429c      	cmp	r4, r3
 8006106:	d10f      	bne.n	8006128 <__swsetup_r+0x3c>
 8006108:	686c      	ldr	r4, [r5, #4]
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006110:	0719      	lsls	r1, r3, #28
 8006112:	d42c      	bmi.n	800616e <__swsetup_r+0x82>
 8006114:	06dd      	lsls	r5, r3, #27
 8006116:	d411      	bmi.n	800613c <__swsetup_r+0x50>
 8006118:	2309      	movs	r3, #9
 800611a:	6033      	str	r3, [r6, #0]
 800611c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	f04f 30ff 	mov.w	r0, #4294967295
 8006126:	e03e      	b.n	80061a6 <__swsetup_r+0xba>
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <__swsetup_r+0xd4>)
 800612a:	429c      	cmp	r4, r3
 800612c:	d101      	bne.n	8006132 <__swsetup_r+0x46>
 800612e:	68ac      	ldr	r4, [r5, #8]
 8006130:	e7eb      	b.n	800610a <__swsetup_r+0x1e>
 8006132:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <__swsetup_r+0xd8>)
 8006134:	429c      	cmp	r4, r3
 8006136:	bf08      	it	eq
 8006138:	68ec      	ldreq	r4, [r5, #12]
 800613a:	e7e6      	b.n	800610a <__swsetup_r+0x1e>
 800613c:	0758      	lsls	r0, r3, #29
 800613e:	d512      	bpl.n	8006166 <__swsetup_r+0x7a>
 8006140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006142:	b141      	cbz	r1, 8006156 <__swsetup_r+0x6a>
 8006144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006148:	4299      	cmp	r1, r3
 800614a:	d002      	beq.n	8006152 <__swsetup_r+0x66>
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff fc77 	bl	8005a40 <_free_r>
 8006152:	2300      	movs	r3, #0
 8006154:	6363      	str	r3, [r4, #52]	; 0x34
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800615c:	81a3      	strh	r3, [r4, #12]
 800615e:	2300      	movs	r3, #0
 8006160:	6063      	str	r3, [r4, #4]
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	f043 0308 	orr.w	r3, r3, #8
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	b94b      	cbnz	r3, 8006186 <__swsetup_r+0x9a>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800617c:	d003      	beq.n	8006186 <__swsetup_r+0x9a>
 800617e:	4621      	mov	r1, r4
 8006180:	4630      	mov	r0, r6
 8006182:	f000 f867 	bl	8006254 <__smakebuf_r>
 8006186:	89a0      	ldrh	r0, [r4, #12]
 8006188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800618c:	f010 0301 	ands.w	r3, r0, #1
 8006190:	d00a      	beq.n	80061a8 <__swsetup_r+0xbc>
 8006192:	2300      	movs	r3, #0
 8006194:	60a3      	str	r3, [r4, #8]
 8006196:	6963      	ldr	r3, [r4, #20]
 8006198:	425b      	negs	r3, r3
 800619a:	61a3      	str	r3, [r4, #24]
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	b943      	cbnz	r3, 80061b2 <__swsetup_r+0xc6>
 80061a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061a4:	d1ba      	bne.n	800611c <__swsetup_r+0x30>
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	0781      	lsls	r1, r0, #30
 80061aa:	bf58      	it	pl
 80061ac:	6963      	ldrpl	r3, [r4, #20]
 80061ae:	60a3      	str	r3, [r4, #8]
 80061b0:	e7f4      	b.n	800619c <__swsetup_r+0xb0>
 80061b2:	2000      	movs	r0, #0
 80061b4:	e7f7      	b.n	80061a6 <__swsetup_r+0xba>
 80061b6:	bf00      	nop
 80061b8:	200002c0 	.word	0x200002c0
 80061bc:	08006bbc 	.word	0x08006bbc
 80061c0:	08006bdc 	.word	0x08006bdc
 80061c4:	08006b9c 	.word	0x08006b9c

080061c8 <_close_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4d06      	ldr	r5, [pc, #24]	; (80061e4 <_close_r+0x1c>)
 80061cc:	2300      	movs	r3, #0
 80061ce:	4604      	mov	r4, r0
 80061d0:	4608      	mov	r0, r1
 80061d2:	602b      	str	r3, [r5, #0]
 80061d4:	f7fa fe25 	bl	8000e22 <_close>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_close_r+0x1a>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_close_r+0x1a>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	200004e8 	.word	0x200004e8

080061e8 <_lseek_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d07      	ldr	r5, [pc, #28]	; (8006208 <_lseek_r+0x20>)
 80061ec:	4604      	mov	r4, r0
 80061ee:	4608      	mov	r0, r1
 80061f0:	4611      	mov	r1, r2
 80061f2:	2200      	movs	r2, #0
 80061f4:	602a      	str	r2, [r5, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f7fa fe3a 	bl	8000e70 <_lseek>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d102      	bne.n	8006206 <_lseek_r+0x1e>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b103      	cbz	r3, 8006206 <_lseek_r+0x1e>
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	bd38      	pop	{r3, r4, r5, pc}
 8006208:	200004e8 	.word	0x200004e8

0800620c <__swhatbuf_r>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	460e      	mov	r6, r1
 8006210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006214:	2900      	cmp	r1, #0
 8006216:	b096      	sub	sp, #88	; 0x58
 8006218:	4614      	mov	r4, r2
 800621a:	461d      	mov	r5, r3
 800621c:	da07      	bge.n	800622e <__swhatbuf_r+0x22>
 800621e:	2300      	movs	r3, #0
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	89b3      	ldrh	r3, [r6, #12]
 8006224:	061a      	lsls	r2, r3, #24
 8006226:	d410      	bmi.n	800624a <__swhatbuf_r+0x3e>
 8006228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800622c:	e00e      	b.n	800624c <__swhatbuf_r+0x40>
 800622e:	466a      	mov	r2, sp
 8006230:	f000 fb64 	bl	80068fc <_fstat_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	dbf2      	blt.n	800621e <__swhatbuf_r+0x12>
 8006238:	9a01      	ldr	r2, [sp, #4]
 800623a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800623e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006242:	425a      	negs	r2, r3
 8006244:	415a      	adcs	r2, r3
 8006246:	602a      	str	r2, [r5, #0]
 8006248:	e7ee      	b.n	8006228 <__swhatbuf_r+0x1c>
 800624a:	2340      	movs	r3, #64	; 0x40
 800624c:	2000      	movs	r0, #0
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	b016      	add	sp, #88	; 0x58
 8006252:	bd70      	pop	{r4, r5, r6, pc}

08006254 <__smakebuf_r>:
 8006254:	898b      	ldrh	r3, [r1, #12]
 8006256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006258:	079d      	lsls	r5, r3, #30
 800625a:	4606      	mov	r6, r0
 800625c:	460c      	mov	r4, r1
 800625e:	d507      	bpl.n	8006270 <__smakebuf_r+0x1c>
 8006260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	2301      	movs	r3, #1
 800626a:	6163      	str	r3, [r4, #20]
 800626c:	b002      	add	sp, #8
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	ab01      	add	r3, sp, #4
 8006272:	466a      	mov	r2, sp
 8006274:	f7ff ffca 	bl	800620c <__swhatbuf_r>
 8006278:	9900      	ldr	r1, [sp, #0]
 800627a:	4605      	mov	r5, r0
 800627c:	4630      	mov	r0, r6
 800627e:	f7ff fc2f 	bl	8005ae0 <_malloc_r>
 8006282:	b948      	cbnz	r0, 8006298 <__smakebuf_r+0x44>
 8006284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006288:	059a      	lsls	r2, r3, #22
 800628a:	d4ef      	bmi.n	800626c <__smakebuf_r+0x18>
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	f043 0302 	orr.w	r3, r3, #2
 8006294:	81a3      	strh	r3, [r4, #12]
 8006296:	e7e3      	b.n	8006260 <__smakebuf_r+0xc>
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <__smakebuf_r+0x7c>)
 800629a:	62b3      	str	r3, [r6, #40]	; 0x28
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	6020      	str	r0, [r4, #0]
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	6163      	str	r3, [r4, #20]
 80062aa:	9b01      	ldr	r3, [sp, #4]
 80062ac:	6120      	str	r0, [r4, #16]
 80062ae:	b15b      	cbz	r3, 80062c8 <__smakebuf_r+0x74>
 80062b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b4:	4630      	mov	r0, r6
 80062b6:	f000 fb33 	bl	8006920 <_isatty_r>
 80062ba:	b128      	cbz	r0, 80062c8 <__smakebuf_r+0x74>
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	89a0      	ldrh	r0, [r4, #12]
 80062ca:	4305      	orrs	r5, r0
 80062cc:	81a5      	strh	r5, [r4, #12]
 80062ce:	e7cd      	b.n	800626c <__smakebuf_r+0x18>
 80062d0:	0800583d 	.word	0x0800583d

080062d4 <malloc>:
 80062d4:	4b02      	ldr	r3, [pc, #8]	; (80062e0 <malloc+0xc>)
 80062d6:	4601      	mov	r1, r0
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	f7ff bc01 	b.w	8005ae0 <_malloc_r>
 80062de:	bf00      	nop
 80062e0:	200002c0 	.word	0x200002c0

080062e4 <__malloc_lock>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__malloc_lock+0x8>)
 80062e6:	f7ff bba0 	b.w	8005a2a <__retarget_lock_acquire_recursive>
 80062ea:	bf00      	nop
 80062ec:	200004e0 	.word	0x200004e0

080062f0 <__malloc_unlock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__malloc_unlock+0x8>)
 80062f2:	f7ff bb9b 	b.w	8005a2c <__retarget_lock_release_recursive>
 80062f6:	bf00      	nop
 80062f8:	200004e0 	.word	0x200004e0

080062fc <__sfputc_r>:
 80062fc:	6893      	ldr	r3, [r2, #8]
 80062fe:	3b01      	subs	r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	b410      	push	{r4}
 8006304:	6093      	str	r3, [r2, #8]
 8006306:	da08      	bge.n	800631a <__sfputc_r+0x1e>
 8006308:	6994      	ldr	r4, [r2, #24]
 800630a:	42a3      	cmp	r3, r4
 800630c:	db01      	blt.n	8006312 <__sfputc_r+0x16>
 800630e:	290a      	cmp	r1, #10
 8006310:	d103      	bne.n	800631a <__sfputc_r+0x1e>
 8006312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006316:	f7ff be85 	b.w	8006024 <__swbuf_r>
 800631a:	6813      	ldr	r3, [r2, #0]
 800631c:	1c58      	adds	r0, r3, #1
 800631e:	6010      	str	r0, [r2, #0]
 8006320:	7019      	strb	r1, [r3, #0]
 8006322:	4608      	mov	r0, r1
 8006324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006328:	4770      	bx	lr

0800632a <__sfputs_r>:
 800632a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632c:	4606      	mov	r6, r0
 800632e:	460f      	mov	r7, r1
 8006330:	4614      	mov	r4, r2
 8006332:	18d5      	adds	r5, r2, r3
 8006334:	42ac      	cmp	r4, r5
 8006336:	d101      	bne.n	800633c <__sfputs_r+0x12>
 8006338:	2000      	movs	r0, #0
 800633a:	e007      	b.n	800634c <__sfputs_r+0x22>
 800633c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006340:	463a      	mov	r2, r7
 8006342:	4630      	mov	r0, r6
 8006344:	f7ff ffda 	bl	80062fc <__sfputc_r>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d1f3      	bne.n	8006334 <__sfputs_r+0xa>
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006350 <_vfiprintf_r>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	460d      	mov	r5, r1
 8006356:	b09d      	sub	sp, #116	; 0x74
 8006358:	4614      	mov	r4, r2
 800635a:	4698      	mov	r8, r3
 800635c:	4606      	mov	r6, r0
 800635e:	b118      	cbz	r0, 8006368 <_vfiprintf_r+0x18>
 8006360:	6983      	ldr	r3, [r0, #24]
 8006362:	b90b      	cbnz	r3, 8006368 <_vfiprintf_r+0x18>
 8006364:	f7ff fa9e 	bl	80058a4 <__sinit>
 8006368:	4b89      	ldr	r3, [pc, #548]	; (8006590 <_vfiprintf_r+0x240>)
 800636a:	429d      	cmp	r5, r3
 800636c:	d11b      	bne.n	80063a6 <_vfiprintf_r+0x56>
 800636e:	6875      	ldr	r5, [r6, #4]
 8006370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006372:	07d9      	lsls	r1, r3, #31
 8006374:	d405      	bmi.n	8006382 <_vfiprintf_r+0x32>
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	059a      	lsls	r2, r3, #22
 800637a:	d402      	bmi.n	8006382 <_vfiprintf_r+0x32>
 800637c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800637e:	f7ff fb54 	bl	8005a2a <__retarget_lock_acquire_recursive>
 8006382:	89ab      	ldrh	r3, [r5, #12]
 8006384:	071b      	lsls	r3, r3, #28
 8006386:	d501      	bpl.n	800638c <_vfiprintf_r+0x3c>
 8006388:	692b      	ldr	r3, [r5, #16]
 800638a:	b9eb      	cbnz	r3, 80063c8 <_vfiprintf_r+0x78>
 800638c:	4629      	mov	r1, r5
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff feac 	bl	80060ec <__swsetup_r>
 8006394:	b1c0      	cbz	r0, 80063c8 <_vfiprintf_r+0x78>
 8006396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006398:	07dc      	lsls	r4, r3, #31
 800639a:	d50e      	bpl.n	80063ba <_vfiprintf_r+0x6a>
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	b01d      	add	sp, #116	; 0x74
 80063a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a6:	4b7b      	ldr	r3, [pc, #492]	; (8006594 <_vfiprintf_r+0x244>)
 80063a8:	429d      	cmp	r5, r3
 80063aa:	d101      	bne.n	80063b0 <_vfiprintf_r+0x60>
 80063ac:	68b5      	ldr	r5, [r6, #8]
 80063ae:	e7df      	b.n	8006370 <_vfiprintf_r+0x20>
 80063b0:	4b79      	ldr	r3, [pc, #484]	; (8006598 <_vfiprintf_r+0x248>)
 80063b2:	429d      	cmp	r5, r3
 80063b4:	bf08      	it	eq
 80063b6:	68f5      	ldreq	r5, [r6, #12]
 80063b8:	e7da      	b.n	8006370 <_vfiprintf_r+0x20>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	0598      	lsls	r0, r3, #22
 80063be:	d4ed      	bmi.n	800639c <_vfiprintf_r+0x4c>
 80063c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063c2:	f7ff fb33 	bl	8005a2c <__retarget_lock_release_recursive>
 80063c6:	e7e9      	b.n	800639c <_vfiprintf_r+0x4c>
 80063c8:	2300      	movs	r3, #0
 80063ca:	9309      	str	r3, [sp, #36]	; 0x24
 80063cc:	2320      	movs	r3, #32
 80063ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80063d6:	2330      	movs	r3, #48	; 0x30
 80063d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800659c <_vfiprintf_r+0x24c>
 80063dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063e0:	f04f 0901 	mov.w	r9, #1
 80063e4:	4623      	mov	r3, r4
 80063e6:	469a      	mov	sl, r3
 80063e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063ec:	b10a      	cbz	r2, 80063f2 <_vfiprintf_r+0xa2>
 80063ee:	2a25      	cmp	r2, #37	; 0x25
 80063f0:	d1f9      	bne.n	80063e6 <_vfiprintf_r+0x96>
 80063f2:	ebba 0b04 	subs.w	fp, sl, r4
 80063f6:	d00b      	beq.n	8006410 <_vfiprintf_r+0xc0>
 80063f8:	465b      	mov	r3, fp
 80063fa:	4622      	mov	r2, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	4630      	mov	r0, r6
 8006400:	f7ff ff93 	bl	800632a <__sfputs_r>
 8006404:	3001      	adds	r0, #1
 8006406:	f000 80aa 	beq.w	800655e <_vfiprintf_r+0x20e>
 800640a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800640c:	445a      	add	r2, fp
 800640e:	9209      	str	r2, [sp, #36]	; 0x24
 8006410:	f89a 3000 	ldrb.w	r3, [sl]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 80a2 	beq.w	800655e <_vfiprintf_r+0x20e>
 800641a:	2300      	movs	r3, #0
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006424:	f10a 0a01 	add.w	sl, sl, #1
 8006428:	9304      	str	r3, [sp, #16]
 800642a:	9307      	str	r3, [sp, #28]
 800642c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006430:	931a      	str	r3, [sp, #104]	; 0x68
 8006432:	4654      	mov	r4, sl
 8006434:	2205      	movs	r2, #5
 8006436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643a:	4858      	ldr	r0, [pc, #352]	; (800659c <_vfiprintf_r+0x24c>)
 800643c:	f7f9 fee0 	bl	8000200 <memchr>
 8006440:	9a04      	ldr	r2, [sp, #16]
 8006442:	b9d8      	cbnz	r0, 800647c <_vfiprintf_r+0x12c>
 8006444:	06d1      	lsls	r1, r2, #27
 8006446:	bf44      	itt	mi
 8006448:	2320      	movmi	r3, #32
 800644a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800644e:	0713      	lsls	r3, r2, #28
 8006450:	bf44      	itt	mi
 8006452:	232b      	movmi	r3, #43	; 0x2b
 8006454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006458:	f89a 3000 	ldrb.w	r3, [sl]
 800645c:	2b2a      	cmp	r3, #42	; 0x2a
 800645e:	d015      	beq.n	800648c <_vfiprintf_r+0x13c>
 8006460:	9a07      	ldr	r2, [sp, #28]
 8006462:	4654      	mov	r4, sl
 8006464:	2000      	movs	r0, #0
 8006466:	f04f 0c0a 	mov.w	ip, #10
 800646a:	4621      	mov	r1, r4
 800646c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006470:	3b30      	subs	r3, #48	; 0x30
 8006472:	2b09      	cmp	r3, #9
 8006474:	d94e      	bls.n	8006514 <_vfiprintf_r+0x1c4>
 8006476:	b1b0      	cbz	r0, 80064a6 <_vfiprintf_r+0x156>
 8006478:	9207      	str	r2, [sp, #28]
 800647a:	e014      	b.n	80064a6 <_vfiprintf_r+0x156>
 800647c:	eba0 0308 	sub.w	r3, r0, r8
 8006480:	fa09 f303 	lsl.w	r3, r9, r3
 8006484:	4313      	orrs	r3, r2
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	46a2      	mov	sl, r4
 800648a:	e7d2      	b.n	8006432 <_vfiprintf_r+0xe2>
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	1d19      	adds	r1, r3, #4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	9103      	str	r1, [sp, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	bfbb      	ittet	lt
 8006498:	425b      	neglt	r3, r3
 800649a:	f042 0202 	orrlt.w	r2, r2, #2
 800649e:	9307      	strge	r3, [sp, #28]
 80064a0:	9307      	strlt	r3, [sp, #28]
 80064a2:	bfb8      	it	lt
 80064a4:	9204      	strlt	r2, [sp, #16]
 80064a6:	7823      	ldrb	r3, [r4, #0]
 80064a8:	2b2e      	cmp	r3, #46	; 0x2e
 80064aa:	d10c      	bne.n	80064c6 <_vfiprintf_r+0x176>
 80064ac:	7863      	ldrb	r3, [r4, #1]
 80064ae:	2b2a      	cmp	r3, #42	; 0x2a
 80064b0:	d135      	bne.n	800651e <_vfiprintf_r+0x1ce>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	1d1a      	adds	r2, r3, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	9203      	str	r2, [sp, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bfb8      	it	lt
 80064be:	f04f 33ff 	movlt.w	r3, #4294967295
 80064c2:	3402      	adds	r4, #2
 80064c4:	9305      	str	r3, [sp, #20]
 80064c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065ac <_vfiprintf_r+0x25c>
 80064ca:	7821      	ldrb	r1, [r4, #0]
 80064cc:	2203      	movs	r2, #3
 80064ce:	4650      	mov	r0, sl
 80064d0:	f7f9 fe96 	bl	8000200 <memchr>
 80064d4:	b140      	cbz	r0, 80064e8 <_vfiprintf_r+0x198>
 80064d6:	2340      	movs	r3, #64	; 0x40
 80064d8:	eba0 000a 	sub.w	r0, r0, sl
 80064dc:	fa03 f000 	lsl.w	r0, r3, r0
 80064e0:	9b04      	ldr	r3, [sp, #16]
 80064e2:	4303      	orrs	r3, r0
 80064e4:	3401      	adds	r4, #1
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ec:	482c      	ldr	r0, [pc, #176]	; (80065a0 <_vfiprintf_r+0x250>)
 80064ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064f2:	2206      	movs	r2, #6
 80064f4:	f7f9 fe84 	bl	8000200 <memchr>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d03f      	beq.n	800657c <_vfiprintf_r+0x22c>
 80064fc:	4b29      	ldr	r3, [pc, #164]	; (80065a4 <_vfiprintf_r+0x254>)
 80064fe:	bb1b      	cbnz	r3, 8006548 <_vfiprintf_r+0x1f8>
 8006500:	9b03      	ldr	r3, [sp, #12]
 8006502:	3307      	adds	r3, #7
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	3308      	adds	r3, #8
 800650a:	9303      	str	r3, [sp, #12]
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	443b      	add	r3, r7
 8006510:	9309      	str	r3, [sp, #36]	; 0x24
 8006512:	e767      	b.n	80063e4 <_vfiprintf_r+0x94>
 8006514:	fb0c 3202 	mla	r2, ip, r2, r3
 8006518:	460c      	mov	r4, r1
 800651a:	2001      	movs	r0, #1
 800651c:	e7a5      	b.n	800646a <_vfiprintf_r+0x11a>
 800651e:	2300      	movs	r3, #0
 8006520:	3401      	adds	r4, #1
 8006522:	9305      	str	r3, [sp, #20]
 8006524:	4619      	mov	r1, r3
 8006526:	f04f 0c0a 	mov.w	ip, #10
 800652a:	4620      	mov	r0, r4
 800652c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006530:	3a30      	subs	r2, #48	; 0x30
 8006532:	2a09      	cmp	r2, #9
 8006534:	d903      	bls.n	800653e <_vfiprintf_r+0x1ee>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0c5      	beq.n	80064c6 <_vfiprintf_r+0x176>
 800653a:	9105      	str	r1, [sp, #20]
 800653c:	e7c3      	b.n	80064c6 <_vfiprintf_r+0x176>
 800653e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006542:	4604      	mov	r4, r0
 8006544:	2301      	movs	r3, #1
 8006546:	e7f0      	b.n	800652a <_vfiprintf_r+0x1da>
 8006548:	ab03      	add	r3, sp, #12
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	462a      	mov	r2, r5
 800654e:	4b16      	ldr	r3, [pc, #88]	; (80065a8 <_vfiprintf_r+0x258>)
 8006550:	a904      	add	r1, sp, #16
 8006552:	4630      	mov	r0, r6
 8006554:	f3af 8000 	nop.w
 8006558:	4607      	mov	r7, r0
 800655a:	1c78      	adds	r0, r7, #1
 800655c:	d1d6      	bne.n	800650c <_vfiprintf_r+0x1bc>
 800655e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006560:	07d9      	lsls	r1, r3, #31
 8006562:	d405      	bmi.n	8006570 <_vfiprintf_r+0x220>
 8006564:	89ab      	ldrh	r3, [r5, #12]
 8006566:	059a      	lsls	r2, r3, #22
 8006568:	d402      	bmi.n	8006570 <_vfiprintf_r+0x220>
 800656a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800656c:	f7ff fa5e 	bl	8005a2c <__retarget_lock_release_recursive>
 8006570:	89ab      	ldrh	r3, [r5, #12]
 8006572:	065b      	lsls	r3, r3, #25
 8006574:	f53f af12 	bmi.w	800639c <_vfiprintf_r+0x4c>
 8006578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800657a:	e711      	b.n	80063a0 <_vfiprintf_r+0x50>
 800657c:	ab03      	add	r3, sp, #12
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	462a      	mov	r2, r5
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <_vfiprintf_r+0x258>)
 8006584:	a904      	add	r1, sp, #16
 8006586:	4630      	mov	r0, r6
 8006588:	f000 f880 	bl	800668c <_printf_i>
 800658c:	e7e4      	b.n	8006558 <_vfiprintf_r+0x208>
 800658e:	bf00      	nop
 8006590:	08006bbc 	.word	0x08006bbc
 8006594:	08006bdc 	.word	0x08006bdc
 8006598:	08006b9c 	.word	0x08006b9c
 800659c:	08006d01 	.word	0x08006d01
 80065a0:	08006d0b 	.word	0x08006d0b
 80065a4:	00000000 	.word	0x00000000
 80065a8:	0800632b 	.word	0x0800632b
 80065ac:	08006d07 	.word	0x08006d07

080065b0 <_printf_common>:
 80065b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b4:	4616      	mov	r6, r2
 80065b6:	4699      	mov	r9, r3
 80065b8:	688a      	ldr	r2, [r1, #8]
 80065ba:	690b      	ldr	r3, [r1, #16]
 80065bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065c0:	4293      	cmp	r3, r2
 80065c2:	bfb8      	it	lt
 80065c4:	4613      	movlt	r3, r2
 80065c6:	6033      	str	r3, [r6, #0]
 80065c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065cc:	4607      	mov	r7, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	b10a      	cbz	r2, 80065d6 <_printf_common+0x26>
 80065d2:	3301      	adds	r3, #1
 80065d4:	6033      	str	r3, [r6, #0]
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	0699      	lsls	r1, r3, #26
 80065da:	bf42      	ittt	mi
 80065dc:	6833      	ldrmi	r3, [r6, #0]
 80065de:	3302      	addmi	r3, #2
 80065e0:	6033      	strmi	r3, [r6, #0]
 80065e2:	6825      	ldr	r5, [r4, #0]
 80065e4:	f015 0506 	ands.w	r5, r5, #6
 80065e8:	d106      	bne.n	80065f8 <_printf_common+0x48>
 80065ea:	f104 0a19 	add.w	sl, r4, #25
 80065ee:	68e3      	ldr	r3, [r4, #12]
 80065f0:	6832      	ldr	r2, [r6, #0]
 80065f2:	1a9b      	subs	r3, r3, r2
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	dc26      	bgt.n	8006646 <_printf_common+0x96>
 80065f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065fc:	1e13      	subs	r3, r2, #0
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	bf18      	it	ne
 8006602:	2301      	movne	r3, #1
 8006604:	0692      	lsls	r2, r2, #26
 8006606:	d42b      	bmi.n	8006660 <_printf_common+0xb0>
 8006608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800660c:	4649      	mov	r1, r9
 800660e:	4638      	mov	r0, r7
 8006610:	47c0      	blx	r8
 8006612:	3001      	adds	r0, #1
 8006614:	d01e      	beq.n	8006654 <_printf_common+0xa4>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	68e5      	ldr	r5, [r4, #12]
 800661a:	6832      	ldr	r2, [r6, #0]
 800661c:	f003 0306 	and.w	r3, r3, #6
 8006620:	2b04      	cmp	r3, #4
 8006622:	bf08      	it	eq
 8006624:	1aad      	subeq	r5, r5, r2
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	6922      	ldr	r2, [r4, #16]
 800662a:	bf0c      	ite	eq
 800662c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006630:	2500      	movne	r5, #0
 8006632:	4293      	cmp	r3, r2
 8006634:	bfc4      	itt	gt
 8006636:	1a9b      	subgt	r3, r3, r2
 8006638:	18ed      	addgt	r5, r5, r3
 800663a:	2600      	movs	r6, #0
 800663c:	341a      	adds	r4, #26
 800663e:	42b5      	cmp	r5, r6
 8006640:	d11a      	bne.n	8006678 <_printf_common+0xc8>
 8006642:	2000      	movs	r0, #0
 8006644:	e008      	b.n	8006658 <_printf_common+0xa8>
 8006646:	2301      	movs	r3, #1
 8006648:	4652      	mov	r2, sl
 800664a:	4649      	mov	r1, r9
 800664c:	4638      	mov	r0, r7
 800664e:	47c0      	blx	r8
 8006650:	3001      	adds	r0, #1
 8006652:	d103      	bne.n	800665c <_printf_common+0xac>
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665c:	3501      	adds	r5, #1
 800665e:	e7c6      	b.n	80065ee <_printf_common+0x3e>
 8006660:	18e1      	adds	r1, r4, r3
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	2030      	movs	r0, #48	; 0x30
 8006666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800666a:	4422      	add	r2, r4
 800666c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006674:	3302      	adds	r3, #2
 8006676:	e7c7      	b.n	8006608 <_printf_common+0x58>
 8006678:	2301      	movs	r3, #1
 800667a:	4622      	mov	r2, r4
 800667c:	4649      	mov	r1, r9
 800667e:	4638      	mov	r0, r7
 8006680:	47c0      	blx	r8
 8006682:	3001      	adds	r0, #1
 8006684:	d0e6      	beq.n	8006654 <_printf_common+0xa4>
 8006686:	3601      	adds	r6, #1
 8006688:	e7d9      	b.n	800663e <_printf_common+0x8e>
	...

0800668c <_printf_i>:
 800668c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006690:	460c      	mov	r4, r1
 8006692:	4691      	mov	r9, r2
 8006694:	7e27      	ldrb	r7, [r4, #24]
 8006696:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006698:	2f78      	cmp	r7, #120	; 0x78
 800669a:	4680      	mov	r8, r0
 800669c:	469a      	mov	sl, r3
 800669e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a2:	d807      	bhi.n	80066b4 <_printf_i+0x28>
 80066a4:	2f62      	cmp	r7, #98	; 0x62
 80066a6:	d80a      	bhi.n	80066be <_printf_i+0x32>
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	f000 80d8 	beq.w	800685e <_printf_i+0x1d2>
 80066ae:	2f58      	cmp	r7, #88	; 0x58
 80066b0:	f000 80a3 	beq.w	80067fa <_printf_i+0x16e>
 80066b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066bc:	e03a      	b.n	8006734 <_printf_i+0xa8>
 80066be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066c2:	2b15      	cmp	r3, #21
 80066c4:	d8f6      	bhi.n	80066b4 <_printf_i+0x28>
 80066c6:	a001      	add	r0, pc, #4	; (adr r0, 80066cc <_printf_i+0x40>)
 80066c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80066cc:	08006725 	.word	0x08006725
 80066d0:	08006739 	.word	0x08006739
 80066d4:	080066b5 	.word	0x080066b5
 80066d8:	080066b5 	.word	0x080066b5
 80066dc:	080066b5 	.word	0x080066b5
 80066e0:	080066b5 	.word	0x080066b5
 80066e4:	08006739 	.word	0x08006739
 80066e8:	080066b5 	.word	0x080066b5
 80066ec:	080066b5 	.word	0x080066b5
 80066f0:	080066b5 	.word	0x080066b5
 80066f4:	080066b5 	.word	0x080066b5
 80066f8:	08006845 	.word	0x08006845
 80066fc:	08006769 	.word	0x08006769
 8006700:	08006827 	.word	0x08006827
 8006704:	080066b5 	.word	0x080066b5
 8006708:	080066b5 	.word	0x080066b5
 800670c:	08006867 	.word	0x08006867
 8006710:	080066b5 	.word	0x080066b5
 8006714:	08006769 	.word	0x08006769
 8006718:	080066b5 	.word	0x080066b5
 800671c:	080066b5 	.word	0x080066b5
 8006720:	0800682f 	.word	0x0800682f
 8006724:	680b      	ldr	r3, [r1, #0]
 8006726:	1d1a      	adds	r2, r3, #4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	600a      	str	r2, [r1, #0]
 800672c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006734:	2301      	movs	r3, #1
 8006736:	e0a3      	b.n	8006880 <_printf_i+0x1f4>
 8006738:	6825      	ldr	r5, [r4, #0]
 800673a:	6808      	ldr	r0, [r1, #0]
 800673c:	062e      	lsls	r6, r5, #24
 800673e:	f100 0304 	add.w	r3, r0, #4
 8006742:	d50a      	bpl.n	800675a <_printf_i+0xce>
 8006744:	6805      	ldr	r5, [r0, #0]
 8006746:	600b      	str	r3, [r1, #0]
 8006748:	2d00      	cmp	r5, #0
 800674a:	da03      	bge.n	8006754 <_printf_i+0xc8>
 800674c:	232d      	movs	r3, #45	; 0x2d
 800674e:	426d      	negs	r5, r5
 8006750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006754:	485e      	ldr	r0, [pc, #376]	; (80068d0 <_printf_i+0x244>)
 8006756:	230a      	movs	r3, #10
 8006758:	e019      	b.n	800678e <_printf_i+0x102>
 800675a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800675e:	6805      	ldr	r5, [r0, #0]
 8006760:	600b      	str	r3, [r1, #0]
 8006762:	bf18      	it	ne
 8006764:	b22d      	sxthne	r5, r5
 8006766:	e7ef      	b.n	8006748 <_printf_i+0xbc>
 8006768:	680b      	ldr	r3, [r1, #0]
 800676a:	6825      	ldr	r5, [r4, #0]
 800676c:	1d18      	adds	r0, r3, #4
 800676e:	6008      	str	r0, [r1, #0]
 8006770:	0628      	lsls	r0, r5, #24
 8006772:	d501      	bpl.n	8006778 <_printf_i+0xec>
 8006774:	681d      	ldr	r5, [r3, #0]
 8006776:	e002      	b.n	800677e <_printf_i+0xf2>
 8006778:	0669      	lsls	r1, r5, #25
 800677a:	d5fb      	bpl.n	8006774 <_printf_i+0xe8>
 800677c:	881d      	ldrh	r5, [r3, #0]
 800677e:	4854      	ldr	r0, [pc, #336]	; (80068d0 <_printf_i+0x244>)
 8006780:	2f6f      	cmp	r7, #111	; 0x6f
 8006782:	bf0c      	ite	eq
 8006784:	2308      	moveq	r3, #8
 8006786:	230a      	movne	r3, #10
 8006788:	2100      	movs	r1, #0
 800678a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800678e:	6866      	ldr	r6, [r4, #4]
 8006790:	60a6      	str	r6, [r4, #8]
 8006792:	2e00      	cmp	r6, #0
 8006794:	bfa2      	ittt	ge
 8006796:	6821      	ldrge	r1, [r4, #0]
 8006798:	f021 0104 	bicge.w	r1, r1, #4
 800679c:	6021      	strge	r1, [r4, #0]
 800679e:	b90d      	cbnz	r5, 80067a4 <_printf_i+0x118>
 80067a0:	2e00      	cmp	r6, #0
 80067a2:	d04d      	beq.n	8006840 <_printf_i+0x1b4>
 80067a4:	4616      	mov	r6, r2
 80067a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80067aa:	fb03 5711 	mls	r7, r3, r1, r5
 80067ae:	5dc7      	ldrb	r7, [r0, r7]
 80067b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067b4:	462f      	mov	r7, r5
 80067b6:	42bb      	cmp	r3, r7
 80067b8:	460d      	mov	r5, r1
 80067ba:	d9f4      	bls.n	80067a6 <_printf_i+0x11a>
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d10b      	bne.n	80067d8 <_printf_i+0x14c>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	07df      	lsls	r7, r3, #31
 80067c4:	d508      	bpl.n	80067d8 <_printf_i+0x14c>
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	6861      	ldr	r1, [r4, #4]
 80067ca:	4299      	cmp	r1, r3
 80067cc:	bfde      	ittt	le
 80067ce:	2330      	movle	r3, #48	; 0x30
 80067d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067d8:	1b92      	subs	r2, r2, r6
 80067da:	6122      	str	r2, [r4, #16]
 80067dc:	f8cd a000 	str.w	sl, [sp]
 80067e0:	464b      	mov	r3, r9
 80067e2:	aa03      	add	r2, sp, #12
 80067e4:	4621      	mov	r1, r4
 80067e6:	4640      	mov	r0, r8
 80067e8:	f7ff fee2 	bl	80065b0 <_printf_common>
 80067ec:	3001      	adds	r0, #1
 80067ee:	d14c      	bne.n	800688a <_printf_i+0x1fe>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	b004      	add	sp, #16
 80067f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fa:	4835      	ldr	r0, [pc, #212]	; (80068d0 <_printf_i+0x244>)
 80067fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	680e      	ldr	r6, [r1, #0]
 8006804:	061f      	lsls	r7, r3, #24
 8006806:	f856 5b04 	ldr.w	r5, [r6], #4
 800680a:	600e      	str	r6, [r1, #0]
 800680c:	d514      	bpl.n	8006838 <_printf_i+0x1ac>
 800680e:	07d9      	lsls	r1, r3, #31
 8006810:	bf44      	itt	mi
 8006812:	f043 0320 	orrmi.w	r3, r3, #32
 8006816:	6023      	strmi	r3, [r4, #0]
 8006818:	b91d      	cbnz	r5, 8006822 <_printf_i+0x196>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	f023 0320 	bic.w	r3, r3, #32
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	2310      	movs	r3, #16
 8006824:	e7b0      	b.n	8006788 <_printf_i+0xfc>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	f043 0320 	orr.w	r3, r3, #32
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	2378      	movs	r3, #120	; 0x78
 8006830:	4828      	ldr	r0, [pc, #160]	; (80068d4 <_printf_i+0x248>)
 8006832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006836:	e7e3      	b.n	8006800 <_printf_i+0x174>
 8006838:	065e      	lsls	r6, r3, #25
 800683a:	bf48      	it	mi
 800683c:	b2ad      	uxthmi	r5, r5
 800683e:	e7e6      	b.n	800680e <_printf_i+0x182>
 8006840:	4616      	mov	r6, r2
 8006842:	e7bb      	b.n	80067bc <_printf_i+0x130>
 8006844:	680b      	ldr	r3, [r1, #0]
 8006846:	6826      	ldr	r6, [r4, #0]
 8006848:	6960      	ldr	r0, [r4, #20]
 800684a:	1d1d      	adds	r5, r3, #4
 800684c:	600d      	str	r5, [r1, #0]
 800684e:	0635      	lsls	r5, r6, #24
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	d501      	bpl.n	8006858 <_printf_i+0x1cc>
 8006854:	6018      	str	r0, [r3, #0]
 8006856:	e002      	b.n	800685e <_printf_i+0x1d2>
 8006858:	0671      	lsls	r1, r6, #25
 800685a:	d5fb      	bpl.n	8006854 <_printf_i+0x1c8>
 800685c:	8018      	strh	r0, [r3, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	6123      	str	r3, [r4, #16]
 8006862:	4616      	mov	r6, r2
 8006864:	e7ba      	b.n	80067dc <_printf_i+0x150>
 8006866:	680b      	ldr	r3, [r1, #0]
 8006868:	1d1a      	adds	r2, r3, #4
 800686a:	600a      	str	r2, [r1, #0]
 800686c:	681e      	ldr	r6, [r3, #0]
 800686e:	6862      	ldr	r2, [r4, #4]
 8006870:	2100      	movs	r1, #0
 8006872:	4630      	mov	r0, r6
 8006874:	f7f9 fcc4 	bl	8000200 <memchr>
 8006878:	b108      	cbz	r0, 800687e <_printf_i+0x1f2>
 800687a:	1b80      	subs	r0, r0, r6
 800687c:	6060      	str	r0, [r4, #4]
 800687e:	6863      	ldr	r3, [r4, #4]
 8006880:	6123      	str	r3, [r4, #16]
 8006882:	2300      	movs	r3, #0
 8006884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006888:	e7a8      	b.n	80067dc <_printf_i+0x150>
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	4632      	mov	r2, r6
 800688e:	4649      	mov	r1, r9
 8006890:	4640      	mov	r0, r8
 8006892:	47d0      	blx	sl
 8006894:	3001      	adds	r0, #1
 8006896:	d0ab      	beq.n	80067f0 <_printf_i+0x164>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	079b      	lsls	r3, r3, #30
 800689c:	d413      	bmi.n	80068c6 <_printf_i+0x23a>
 800689e:	68e0      	ldr	r0, [r4, #12]
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	4298      	cmp	r0, r3
 80068a4:	bfb8      	it	lt
 80068a6:	4618      	movlt	r0, r3
 80068a8:	e7a4      	b.n	80067f4 <_printf_i+0x168>
 80068aa:	2301      	movs	r3, #1
 80068ac:	4632      	mov	r2, r6
 80068ae:	4649      	mov	r1, r9
 80068b0:	4640      	mov	r0, r8
 80068b2:	47d0      	blx	sl
 80068b4:	3001      	adds	r0, #1
 80068b6:	d09b      	beq.n	80067f0 <_printf_i+0x164>
 80068b8:	3501      	adds	r5, #1
 80068ba:	68e3      	ldr	r3, [r4, #12]
 80068bc:	9903      	ldr	r1, [sp, #12]
 80068be:	1a5b      	subs	r3, r3, r1
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	dcf2      	bgt.n	80068aa <_printf_i+0x21e>
 80068c4:	e7eb      	b.n	800689e <_printf_i+0x212>
 80068c6:	2500      	movs	r5, #0
 80068c8:	f104 0619 	add.w	r6, r4, #25
 80068cc:	e7f5      	b.n	80068ba <_printf_i+0x22e>
 80068ce:	bf00      	nop
 80068d0:	08006d12 	.word	0x08006d12
 80068d4:	08006d23 	.word	0x08006d23

080068d8 <_read_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d07      	ldr	r5, [pc, #28]	; (80068f8 <_read_r+0x20>)
 80068dc:	4604      	mov	r4, r0
 80068de:	4608      	mov	r0, r1
 80068e0:	4611      	mov	r1, r2
 80068e2:	2200      	movs	r2, #0
 80068e4:	602a      	str	r2, [r5, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	f7fa fa7e 	bl	8000de8 <_read>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_read_r+0x1e>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_read_r+0x1e>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	200004e8 	.word	0x200004e8

080068fc <_fstat_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d07      	ldr	r5, [pc, #28]	; (800691c <_fstat_r+0x20>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	4611      	mov	r1, r2
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	f7fa fa96 	bl	8000e3a <_fstat>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d102      	bne.n	8006918 <_fstat_r+0x1c>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	b103      	cbz	r3, 8006918 <_fstat_r+0x1c>
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	200004e8 	.word	0x200004e8

08006920 <_isatty_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d06      	ldr	r5, [pc, #24]	; (800693c <_isatty_r+0x1c>)
 8006924:	2300      	movs	r3, #0
 8006926:	4604      	mov	r4, r0
 8006928:	4608      	mov	r0, r1
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	f7fa fa95 	bl	8000e5a <_isatty>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_isatty_r+0x1a>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	b103      	cbz	r3, 800693a <_isatty_r+0x1a>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	200004e8 	.word	0x200004e8

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
