
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008588  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca4  08008ca4  000203c8  2**0
                  CONTENTS
  4 .ARM          00000000  08008ca4  08008ca4  000203c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ca4  08008ca4  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08008cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200003c8  08009074  000203c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  08009074  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001662f  00000000  00000000  0002043b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ccc  00000000  00000000  00036a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00039738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7a  00000000  00000000  0003a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e294  00000000  00000000  0003b802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182bb  00000000  00000000  00059a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0144  00000000  00000000  00071d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005674  00000000  00000000  00121e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012750c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c8 	.word	0x200003c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008700 	.word	0x08008700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	08008700 	.word	0x08008700

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};
///////////////////////////////////////////////////
// Define cmd-line Command support functions below.
void LED(char* paramStr, int* paramValues) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 80002aa:	2202      	movs	r2, #2
 80002ac:	4939      	ldr	r1, [pc, #228]	; (8000394 <LED+0xf4>)
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f007 fd38 	bl	8007d24 <strncmp>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d111      	bne.n	80002de <LED+0x3e>
		printf("\r\nLED ON");
 80002ba:	4837      	ldr	r0, [pc, #220]	; (8000398 <LED+0xf8>)
 80002bc:	f007 fb36 	bl	800792c <iprintf>
		paramValues[0] = 1;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3308      	adds	r3, #8
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
      led2 = ON;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <LED+0xfc>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 80002dc:	e055      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 80002de:	2203      	movs	r2, #3
 80002e0:	492f      	ldr	r1, [pc, #188]	; (80003a0 <LED+0x100>)
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f007 fd1e 	bl	8007d24 <strncmp>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d111      	bne.n	8000312 <LED+0x72>
		printf("\r\nLED OFF");
 80002ee:	482d      	ldr	r0, [pc, #180]	; (80003a4 <LED+0x104>)
 80002f0:	f007 fb1c 	bl	800792c <iprintf>
		paramValues[0] = 0;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	3304      	adds	r3, #4
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	3308      	adds	r3, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <LED+0xfc>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
}
 8000310:	e03b      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000312:	2205      	movs	r2, #5
 8000314:	4924      	ldr	r1, [pc, #144]	; (80003a8 <LED+0x108>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f007 fd04 	bl	8007d24 <strncmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d130      	bne.n	8000384 <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3306      	adds	r3, #6
 8000326:	4921      	ldr	r1, [pc, #132]	; (80003ac <LED+0x10c>)
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff51 	bl	80001d0 <strcmp>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01c      	beq.n	800036e <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	1d9a      	adds	r2, r3, #6
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f103 0408 	add.w	r4, r3, #8
 800033e:	4610      	mov	r0, r2
 8000340:	f007 f8e0 	bl	8007504 <atoi>
 8000344:	4603      	mov	r3, r0
 8000346:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3306      	adds	r3, #6
 800034c:	4618      	mov	r0, r3
 800034e:	f007 f8d9 	bl	8007504 <atoi>
 8000352:	4603      	mov	r3, r0
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <LED+0x110>)
 8000356:	6013      	str	r3, [r2, #0]
         paramValues[0] = 0;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
         paramValues[1] = 0;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
         led2 = BLINKING;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <LED+0xfc>)
 8000368:	2202      	movs	r2, #2
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e003      	b.n	8000376 <LED+0xd6>
			paramValues[2] = 0;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3308      	adds	r3, #8
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <LED+0x110>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LED+0x114>)
 800037e:	f007 fad5 	bl	800792c <iprintf>
}
 8000382:	e002      	b.n	800038a <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LED+0x118>)
 8000386:	f007 fad1 	bl	800792c <iprintf>
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bd90      	pop	{r4, r7, pc}
 8000392:	bf00      	nop
 8000394:	08008718 	.word	0x08008718
 8000398:	0800871c 	.word	0x0800871c
 800039c:	20000608 	.word	0x20000608
 80003a0:	08008728 	.word	0x08008728
 80003a4:	0800872c 	.word	0x0800872c
 80003a8:	08008738 	.word	0x08008738
 80003ac:	08008740 	.word	0x08008740
 80003b0:	200003e8 	.word	0x200003e8
 80003b4:	08008744 	.word	0x08008744
 80003b8:	08008754 	.word	0x08008754

080003bc <ADC>:

void ADC(char* paramStr, int* paramValues){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "RO", 2) == 0) {
 80003c6:	2202      	movs	r2, #2
 80003c8:	491c      	ldr	r1, [pc, #112]	; (800043c <ADC+0x80>)
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f007 fcaa 	bl	8007d24 <strncmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d11b      	bne.n	800040e <ADC+0x52>
      printf("\r\nADC READ ONCE");
 80003d6:	481a      	ldr	r0, [pc, #104]	; (8000440 <ADC+0x84>)
 80003d8:	f007 faa8 	bl	800792c <iprintf>
      // Start ADC Conversion
      HAL_ADC_Start(&hadc1);
 80003dc:	4819      	ldr	r0, [pc, #100]	; (8000444 <ADC+0x88>)
 80003de:	f001 fa5f 	bl	80018a0 <HAL_ADC_Start>
      HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80003e2:	2100      	movs	r1, #0
 80003e4:	4817      	ldr	r0, [pc, #92]	; (8000444 <ADC+0x88>)
 80003e6:	f001 fb94 	bl	8001b12 <HAL_ADCEx_Calibration_Start>

      // Poll ADC1 Peripheral & TimeOut = 1mSec
      HAL_ADC_PollForConversion(&hadc1, 1);
 80003ea:	2101      	movs	r1, #1
 80003ec:	4815      	ldr	r0, [pc, #84]	; (8000444 <ADC+0x88>)
 80003ee:	f001 fac5 	bl	800197c <HAL_ADC_PollForConversion>
      // Read The ADC Conversion Result - using 3300 + 400 offset to
      // calculate the analog value
      printf("\r\nAA Battery voltage: %ld mV", 3700*HAL_ADC_GetValue(&hadc1)/4096);
 80003f2:	4814      	ldr	r0, [pc, #80]	; (8000444 <ADC+0x88>)
 80003f4:	f001 fb80 	bl	8001af8 <HAL_ADC_GetValue>
 80003f8:	4603      	mov	r3, r0
 80003fa:	f640 6274 	movw	r2, #3700	; 0xe74
 80003fe:	fb02 f303 	mul.w	r3, r2, r3
 8000402:	0b1b      	lsrs	r3, r3, #12
 8000404:	4619      	mov	r1, r3
 8000406:	4810      	ldr	r0, [pc, #64]	; (8000448 <ADC+0x8c>)
 8000408:	f007 fa90 	bl	800792c <iprintf>
            "AVRAGE (not implemented)\r\nPOLL (not implemented)\r\nHELP = this printout.");
   }
   else {
      printf("\r\nUNKNOWN ADC COMMAND");
   }
}
 800040c:	e011      	b.n	8000432 <ADC+0x76>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 800040e:	2202      	movs	r2, #2
 8000410:	490e      	ldr	r1, [pc, #56]	; (800044c <ADC+0x90>)
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f007 fc86 	bl	8007d24 <strncmp>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d106      	bne.n	800042c <ADC+0x70>
      printf("\r\nThe ADC command takes the following parameters\r\n");
 800041e:	480c      	ldr	r0, [pc, #48]	; (8000450 <ADC+0x94>)
 8000420:	f007 faea 	bl	80079f8 <puts>
      printf("RO = Read Once\r\n" \
 8000424:	480b      	ldr	r0, [pc, #44]	; (8000454 <ADC+0x98>)
 8000426:	f007 fa81 	bl	800792c <iprintf>
}
 800042a:	e002      	b.n	8000432 <ADC+0x76>
      printf("\r\nUNKNOWN ADC COMMAND");
 800042c:	480a      	ldr	r0, [pc, #40]	; (8000458 <ADC+0x9c>)
 800042e:	f007 fa7d 	bl	800792c <iprintf>
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	0800876c 	.word	0x0800876c
 8000440:	08008770 	.word	0x08008770
 8000444:	200003ec 	.word	0x200003ec
 8000448:	08008780 	.word	0x08008780
 800044c:	080087a0 	.word	0x080087a0
 8000450:	080087a8 	.word	0x080087a8
 8000454:	080087dc 	.word	0x080087dc
 8000458:	08008834 	.word	0x08008834

0800045c <TIM>:

void TIM(char* paramStr, int* paramValues) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "OS", 2) == 0) {      
 8000466:	2202      	movs	r2, #2
 8000468:	493b      	ldr	r1, [pc, #236]	; (8000558 <TIM+0xfc>)
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f007 fc5a 	bl	8007d24 <strncmp>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d11b      	bne.n	80004ae <TIM+0x52>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[3]));
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3303      	adds	r3, #3
 800047a:	4618      	mov	r0, r3
 800047c:	f007 f842 	bl	8007504 <atoi>
 8000480:	4602      	mov	r2, r0
 8000482:	4b36      	ldr	r3, [pc, #216]	; (800055c <TIM+0x100>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	62da      	str	r2, [r3, #44]	; 0x2c
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3303      	adds	r3, #3
 800048c:	4618      	mov	r0, r3
 800048e:	f007 f839 	bl	8007504 <atoi>
 8000492:	4603      	mov	r3, r0
 8000494:	461a      	mov	r2, r3
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <TIM+0x100>)
 8000498:	60da      	str	r2, [r3, #12]
      printf("\r\nOne Shot timer with period: %d", (int)htim2.Init.Period);
 800049a:	4b30      	ldr	r3, [pc, #192]	; (800055c <TIM+0x100>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4619      	mov	r1, r3
 80004a0:	482f      	ldr	r0, [pc, #188]	; (8000560 <TIM+0x104>)
 80004a2:	f007 fa43 	bl	800792c <iprintf>
      // The timer2 struct is updated accordingly to the __HAL_TIM_SET_AUTORELOAD() function.
      
      HAL_TIM_Base_Start_IT(&htim2);
 80004a6:	482d      	ldr	r0, [pc, #180]	; (800055c <TIM+0x100>)
 80004a8:	f004 fc46 	bl	8004d38 <HAL_TIM_Base_Start_IT>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
   }
   else {
      printf("\r\nUNKNOWN TCD COMMAND");
   }
}
 80004ac:	e04f      	b.n	800054e <TIM+0xf2>
   else if (strncmp(paramStr, "PERIOD", 6) == 0) {
 80004ae:	2206      	movs	r2, #6
 80004b0:	492c      	ldr	r1, [pc, #176]	; (8000564 <TIM+0x108>)
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f007 fc36 	bl	8007d24 <strncmp>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d118      	bne.n	80004f0 <TIM+0x94>
      __HAL_TIM_SET_AUTORELOAD(&htim2, atoi(&paramStr[7]));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3307      	adds	r3, #7
 80004c2:	4618      	mov	r0, r3
 80004c4:	f007 f81e 	bl	8007504 <atoi>
 80004c8:	4602      	mov	r2, r0
 80004ca:	4b24      	ldr	r3, [pc, #144]	; (800055c <TIM+0x100>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3307      	adds	r3, #7
 80004d4:	4618      	mov	r0, r3
 80004d6:	f007 f815 	bl	8007504 <atoi>
 80004da:	4603      	mov	r3, r0
 80004dc:	461a      	mov	r2, r3
 80004de:	4b1f      	ldr	r3, [pc, #124]	; (800055c <TIM+0x100>)
 80004e0:	60da      	str	r2, [r3, #12]
      printf("\r\nAuto-reload period: %d", (int)htim2.Init.Period);
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <TIM+0x100>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	4619      	mov	r1, r3
 80004e8:	481f      	ldr	r0, [pc, #124]	; (8000568 <TIM+0x10c>)
 80004ea:	f007 fa1f 	bl	800792c <iprintf>
}
 80004ee:	e02e      	b.n	800054e <TIM+0xf2>
   else if (strncmp(paramStr, "REPEAT", 6) == 0) {
 80004f0:	2206      	movs	r2, #6
 80004f2:	491e      	ldr	r1, [pc, #120]	; (800056c <TIM+0x110>)
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f007 fc15 	bl	8007d24 <strncmp>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d117      	bne.n	8000530 <TIM+0xd4>
      timRepeat = atoi(&paramStr[7]);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3307      	adds	r3, #7
 8000504:	4618      	mov	r0, r3
 8000506:	f006 fffd 	bl	8007504 <atoi>
 800050a:	4603      	mov	r3, r0
 800050c:	4a18      	ldr	r2, [pc, #96]	; (8000570 <TIM+0x114>)
 800050e:	6013      	str	r3, [r2, #0]
      timRepeatCount = 0;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <TIM+0x118>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim2);
 8000516:	4811      	ldr	r0, [pc, #68]	; (800055c <TIM+0x100>)
 8000518:	f004 fc0e 	bl	8004d38 <HAL_TIM_Base_Start_IT>
      timMode = REPEAT;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <TIM+0x11c>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
      printf("\r\nAuto-reload repeat % times", timRepeat);
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <TIM+0x114>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	4814      	ldr	r0, [pc, #80]	; (800057c <TIM+0x120>)
 800052a:	f007 f9ff 	bl	800792c <iprintf>
}
 800052e:	e00e      	b.n	800054e <TIM+0xf2>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000530:	2202      	movs	r2, #2
 8000532:	4913      	ldr	r1, [pc, #76]	; (8000580 <TIM+0x124>)
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f007 fbf5 	bl	8007d24 <strncmp>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d103      	bne.n	8000548 <TIM+0xec>
      printf("\r\nSome help text for the Timer CountDown (TCD) command-set here...");
 8000540:	4810      	ldr	r0, [pc, #64]	; (8000584 <TIM+0x128>)
 8000542:	f007 f9f3 	bl	800792c <iprintf>
}
 8000546:	e002      	b.n	800054e <TIM+0xf2>
      printf("\r\nUNKNOWN TCD COMMAND");
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <TIM+0x12c>)
 800054a:	f007 f9ef 	bl	800792c <iprintf>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	0800884c 	.word	0x0800884c
 800055c:	20000490 	.word	0x20000490
 8000560:	08008850 	.word	0x08008850
 8000564:	08008874 	.word	0x08008874
 8000568:	0800887c 	.word	0x0800887c
 800056c:	08008898 	.word	0x08008898
 8000570:	20000000 	.word	0x20000000
 8000574:	200003e4 	.word	0x200003e4
 8000578:	20000609 	.word	0x20000609
 800057c:	080088a0 	.word	0x080088a0
 8000580:	080087a0 	.word	0x080087a0
 8000584:	080088c0 	.word	0x080088c0
 8000588:	08008904 	.word	0x08008904

0800058c <SYS>:

void SYS(char* paramStr, int* paramValues){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "BN", 2) == 0) {
 8000596:	2202      	movs	r2, #2
 8000598:	4914      	ldr	r1, [pc, #80]	; (80005ec <SYS+0x60>)
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f007 fbc2 	bl	8007d24 <strncmp>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d104      	bne.n	80005b0 <SYS+0x24>
      printf("\r\nBuild no.:%d", BUILD);
 80005a6:	219d      	movs	r1, #157	; 0x9d
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <SYS+0x64>)
 80005aa:	f007 f9bf 	bl	800792c <iprintf>
   }
   else if (strncmp(paramStr, "VER", 2) == 0) {
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
   }

}
 80005ae:	e019      	b.n	80005e4 <SYS+0x58>
   else if (strncmp(paramStr, "BD", 2) == 0) {
 80005b0:	2202      	movs	r2, #2
 80005b2:	4910      	ldr	r1, [pc, #64]	; (80005f4 <SYS+0x68>)
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f007 fbb5 	bl	8007d24 <strncmp>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d104      	bne.n	80005ca <SYS+0x3e>
      printf("\r\nBuild date: %s", BUILD_DATE_AND_TIME);
 80005c0:	490d      	ldr	r1, [pc, #52]	; (80005f8 <SYS+0x6c>)
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <SYS+0x70>)
 80005c4:	f007 f9b2 	bl	800792c <iprintf>
}
 80005c8:	e00c      	b.n	80005e4 <SYS+0x58>
   else if (strncmp(paramStr, "VER", 2) == 0) {
 80005ca:	2202      	movs	r2, #2
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <SYS+0x74>)
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f007 fba8 	bl	8007d24 <strncmp>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d104      	bne.n	80005e4 <SYS+0x58>
      printf("\r\nVersion:%d.%d", MAJOR_VERSION, MINOR_VERSION);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <SYS+0x78>)
 80005e0:	f007 f9a4 	bl	800792c <iprintf>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	0800891c 	.word	0x0800891c
 80005f0:	08008920 	.word	0x08008920
 80005f4:	08008930 	.word	0x08008930
 80005f8:	08008934 	.word	0x08008934
 80005fc:	08008950 	.word	0x08008950
 8000600:	08008964 	.word	0x08008964
 8000604:	08008968 	.word	0x08008968

08000608 <CO2>:

void CO2(char* paramStr, int* paramValues) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b08e      	sub	sp, #56	; 0x38
 800060c:	af04      	add	r7, sp, #16
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
   if (strncmp(paramStr, "READ", 2) == 0) {
 8000612:	2202      	movs	r2, #2
 8000614:	494d      	ldr	r1, [pc, #308]	; (800074c <CO2+0x144>)
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f007 fb84 	bl	8007d24 <strncmp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d14b      	bne.n	80006ba <CO2+0xb2>
      uint8_t data[20]={0};
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
      HAL_I2C_Mem_Read(&hi2c1, SENSIRION_ADDRESS, GET_DATA_READY_STATUS, I2C_MEMADD_SIZE_16BIT, &data[0], 2, 1000);
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2302      	movs	r3, #2
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2302      	movs	r3, #2
 8000646:	f240 2202 	movw	r2, #514	; 0x202
 800064a:	21c2      	movs	r1, #194	; 0xc2
 800064c:	4840      	ldr	r0, [pc, #256]	; (8000750 <CO2+0x148>)
 800064e:	f002 faff 	bl	8002c50 <HAL_I2C_Mem_Read>
      if ((data[0]==0)&&(data[1]==1)) {
 8000652:	7b3b      	ldrb	r3, [r7, #12]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d127      	bne.n	80006a8 <CO2+0xa0>
 8000658:	7b7b      	ldrb	r3, [r7, #13]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d124      	bne.n	80006a8 <CO2+0xa0>
         HAL_I2C_Mem_Read(&hi2c1, SENSIRION_ADDRESS, READ_MEASURMENT, I2C_MEMADD_SIZE_16BIT, &data[0], 18, 1000);
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2312      	movs	r3, #18
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2302      	movs	r3, #2
 8000670:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000674:	21c2      	movs	r1, #194	; 0xc2
 8000676:	4836      	ldr	r0, [pc, #216]	; (8000750 <CO2+0x148>)
 8000678:	f002 faea 	bl	8002c50 <HAL_I2C_Mem_Read>
         printf("\r\n");
 800067c:	4835      	ldr	r0, [pc, #212]	; (8000754 <CO2+0x14c>)
 800067e:	f007 f9bb 	bl	80079f8 <puts>
         for (int i = 0; i<18; i++) {
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
 8000686:	e00b      	b.n	80006a0 <CO2+0x98>
            printf("0x%02x", data[i]);
 8000688:	f107 020c 	add.w	r2, r7, #12
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	4413      	add	r3, r2
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	4830      	ldr	r0, [pc, #192]	; (8000758 <CO2+0x150>)
 8000696:	f007 f949 	bl	800792c <iprintf>
         for (int i = 0; i<18; i++) {
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	3301      	adds	r3, #1
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	2b11      	cmp	r3, #17
 80006a4:	ddf0      	ble.n	8000688 <CO2+0x80>
 80006a6:	e04d      	b.n	8000744 <CO2+0x13c>
         }
      }
      else {
         printf("\r\nSensor data not ready...(0x%02x 0x%02x 0x%02x)", data[0], data[1], data[2]);
 80006a8:	7b3b      	ldrb	r3, [r7, #12]
 80006aa:	4619      	mov	r1, r3
 80006ac:	7b7b      	ldrb	r3, [r7, #13]
 80006ae:	461a      	mov	r2, r3
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
 80006b2:	482a      	ldr	r0, [pc, #168]	; (800075c <CO2+0x154>)
 80006b4:	f007 f93a 	bl	800792c <iprintf>
      printf("\r\nSome help text for the CO2 Measurement command-set here...");
   }
   else {
      printf("\r\nUNKNOWN TCD COMMAND");
   }
}
 80006b8:	e044      	b.n	8000744 <CO2+0x13c>
   else if (strncmp(paramStr, "VERSION", 6) == 0) {
 80006ba:	2206      	movs	r2, #6
 80006bc:	4928      	ldr	r1, [pc, #160]	; (8000760 <CO2+0x158>)
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f007 fb30 	bl	8007d24 <strncmp>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d12c      	bne.n	8000724 <CO2+0x11c>
      uint8_t firmwareVersion[4] = {0xd1,0,0,0};
 80006ca:	23d1      	movs	r3, #209	; 0xd1
 80006cc:	60bb      	str	r3, [r7, #8]
      uint16_t firmware = 0xD100;
 80006ce:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 80006d2:	847b      	strh	r3, [r7, #34]	; 0x22
      HAL_I2C_Master_Transmit(&hi2c1, SENSIRION_ADDRESS, firmwareVersion, 2, 1000);
 80006d4:	f107 0208 	add.w	r2, r7, #8
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2302      	movs	r3, #2
 80006e0:	21c2      	movs	r1, #194	; 0xc2
 80006e2:	481b      	ldr	r0, [pc, #108]	; (8000750 <CO2+0x148>)
 80006e4:	f002 f9c0 	bl	8002a68 <HAL_I2C_Master_Transmit>
      if (HAL_I2C_Mem_Read(&hi2c1, SENSIRION_ADDRESS, firmware, I2C_MEMADD_SIZE_16BIT, &firmwareVersion[0], 3, 1000) != HAL_OK) {
 80006e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80006ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ee:	9302      	str	r3, [sp, #8]
 80006f0:	2303      	movs	r3, #3
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2302      	movs	r3, #2
 80006fc:	21c2      	movs	r1, #194	; 0xc2
 80006fe:	4814      	ldr	r0, [pc, #80]	; (8000750 <CO2+0x148>)
 8000700:	f002 faa6 	bl	8002c50 <HAL_I2C_Mem_Read>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <CO2+0x10a>
         printf("\r\nHAL_I2C_Mem_Read() FAILED!");
 800070a:	4816      	ldr	r0, [pc, #88]	; (8000764 <CO2+0x15c>)
 800070c:	f007 f90e 	bl	800792c <iprintf>
}
 8000710:	e018      	b.n	8000744 <CO2+0x13c>
         printf("\r\nSensiron SCD30 Ver.:0x%02x.0x%02x crc=0x%02x", firmwareVersion[0],firmwareVersion[1], firmwareVersion[2]);
 8000712:	7a3b      	ldrb	r3, [r7, #8]
 8000714:	4619      	mov	r1, r3
 8000716:	7a7b      	ldrb	r3, [r7, #9]
 8000718:	461a      	mov	r2, r3
 800071a:	7abb      	ldrb	r3, [r7, #10]
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <CO2+0x160>)
 800071e:	f007 f905 	bl	800792c <iprintf>
}
 8000722:	e00f      	b.n	8000744 <CO2+0x13c>
   else if (strncmp(paramStr, "HELP", 2) == 0){
 8000724:	2202      	movs	r2, #2
 8000726:	4911      	ldr	r1, [pc, #68]	; (800076c <CO2+0x164>)
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f007 fafb 	bl	8007d24 <strncmp>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <CO2+0x134>
      printf("\r\nSome help text for the CO2 Measurement command-set here...");
 8000734:	480e      	ldr	r0, [pc, #56]	; (8000770 <CO2+0x168>)
 8000736:	f007 f8f9 	bl	800792c <iprintf>
}
 800073a:	e003      	b.n	8000744 <CO2+0x13c>
      printf("\r\nUNKNOWN TCD COMMAND");
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <CO2+0x16c>)
 800073e:	f007 f8f5 	bl	800792c <iprintf>
}
 8000742:	e7ff      	b.n	8000744 <CO2+0x13c>
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	08008978 	.word	0x08008978
 8000750:	2000043c 	.word	0x2000043c
 8000754:	08008980 	.word	0x08008980
 8000758:	08008984 	.word	0x08008984
 800075c:	0800898c 	.word	0x0800898c
 8000760:	080089c0 	.word	0x080089c0
 8000764:	080089c8 	.word	0x080089c8
 8000768:	080089e8 	.word	0x080089e8
 800076c:	080087a0 	.word	0x080087a0
 8000770:	08008a18 	.word	0x08008a18
 8000774:	08008904 	.word	0x08008904

08000778 <promt>:
  {"TCD", 4, 7, {"OS", "PERIOD", "REPEAT", "HELP"}, {0, 500, 10, 0}, &TIM},
  {"CO2", 4, 7, {"READ", "VERSION", "COUNT", "HELP"}, {0, 1000, 60, 0}, &CO2},
  {"SYS", 3, 4, {"BN", "BD", "VER"}, {0, 0, 0}, &SYS}
};

void promt() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <promt+0x1c>)
 800077e:	f007 f8d5 	bl	800792c <iprintf>
   fflush(stdout);
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <promt+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	4618      	mov	r0, r3
 800078a:	f006 fff9 	bl	8007780 <fflush>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	08008a58 	.word	0x08008a58
 8000798:	200003c4 	.word	0x200003c4

0800079c <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
   int i = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 80007aa:	2305      	movs	r3, #5
 80007ac:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 80007ae:	e03d      	b.n	800082c <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	22ac      	movs	r2, #172	; 0xac
 80007b4:	fb02 f303 	mul.w	r3, r2, r3
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <executeCmd+0xbc>)
 80007ba:	189c      	adds	r4, r3, r2
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	22ac      	movs	r2, #172	; 0xac
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	4a24      	ldr	r2, [pc, #144]	; (8000858 <executeCmd+0xbc>)
 80007c6:	4413      	add	r3, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd0b 	bl	80001e4 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4620      	mov	r0, r4
 80007d6:	f007 faa5 	bl	8007d24 <strncmp>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d122      	bne.n	8000826 <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 80007e0:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <executeCmd+0xbc>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	21ac      	movs	r1, #172	; 0xac
 80007e6:	fb01 f303 	mul.w	r3, r1, r3
 80007ea:	4413      	add	r3, r2
 80007ec:	33a8      	adds	r3, #168	; 0xa8
 80007ee:	681c      	ldr	r4, [r3, #0]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	22ac      	movs	r2, #172	; 0xac
 80007f4:	fb02 f303 	mul.w	r3, r2, r3
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <executeCmd+0xbc>)
 80007fa:	4413      	add	r3, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fcf1 	bl	80001e4 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	3301      	adds	r3, #1
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	441a      	add	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	21ac      	movs	r1, #172	; 0xac
 800080e:	fb01 f303 	mul.w	r3, r1, r3
 8000812:	3380      	adds	r3, #128	; 0x80
 8000814:	4910      	ldr	r1, [pc, #64]	; (8000858 <executeCmd+0xbc>)
 8000816:	440b      	add	r3, r1
 8000818:	4619      	mov	r1, r3
 800081a:	4610      	mov	r0, r2
 800081c:	47a0      	blx	r4
       /*** for test only...
 		 printf("\r\nparamValues[0]: %d, paramValues[1]: %d, paramValues[2]: %d",
               mcuCmds[i].paramValues[0],mcuCmds[i].paramValues[1],mcuCmds[i].paramValues[2]);
               ***/
 		 promt();
 800081e:	f7ff ffab 	bl	8000778 <promt>
     	 return 0;
 8000822:	2300      	movs	r3, #0
 8000824:	e014      	b.n	8000850 <executeCmd+0xb4>
   for (; i < numberOfCommands; i++) {
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3301      	adds	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8bd      	bhi.n	80007b0 <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	429a      	cmp	r2, r3
 800083a:	d808      	bhi.n	800084e <executeCmd+0xb2>
      printf("\r\nThe command: %s[%d], is not recognized", termInput, numberOfCommands);
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <executeCmd+0xc0>)
 8000842:	f007 f873 	bl	800792c <iprintf>
      promt();
 8000846:	f7ff ff97 	bl	8000778 <promt>
      return -1;
 800084a:	23ff      	movs	r3, #255	; 0xff
 800084c:	e000      	b.n	8000850 <executeCmd+0xb4>
   }
   else {
	  return -2;
 800084e:	23fe      	movs	r3, #254	; 0xfe
   }
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	20000004 	.word	0x20000004
 800085c:	08008a64 	.word	0x08008a64

08000860 <_write>:
static void MX_TIM2_Init(void);
static void MX_TIM17_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b29a      	uxth	r2, r3
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <_write+0x28>)
 8000878:	f005 fc6c 	bl	8006154 <HAL_UART_Transmit>
	return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000528 	.word	0x20000528

0800088c <HAL_UART_RxCpltCallback>:
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
uint8_t timMode = ONE_SHOT;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <HAL_UART_RxCpltCallback+0x90>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b0d      	cmp	r3, #13
 800089a:	d126      	bne.n	80008ea <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <HAL_UART_RxCpltCallback+0x94>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	dd1a      	ble.n	80008da <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008aa:	481e      	ldr	r0, [pc, #120]	; (8000924 <HAL_UART_RxCpltCallback+0x98>)
 80008ac:	f002 f81a 	bl	80028e4 <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <HAL_UART_RxCpltCallback+0x94>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	481c      	ldr	r0, [pc, #112]	; (8000928 <HAL_UART_RxCpltCallback+0x9c>)
 80008b8:	f7ff ff70 	bl	800079c <executeCmd>
			bytesReceived = 0;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_UART_RxCpltCallback+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80008c2:	2250      	movs	r2, #80	; 0x50
 80008c4:	2100      	movs	r1, #0
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <HAL_UART_RxCpltCallback+0x9c>)
 80008c8:	f007 fa24 	bl	8007d14 <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <HAL_UART_RxCpltCallback+0x98>)
 80008d4:	f002 f806 	bl	80028e4 <HAL_GPIO_WritePin>
 80008d8:	e001      	b.n	80008de <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 80008da:	f7ff ff4d 	bl	8000778 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	490e      	ldr	r1, [pc, #56]	; (800091c <HAL_UART_RxCpltCallback+0x90>)
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <HAL_UART_RxCpltCallback+0xa0>)
 80008e4:	f005 fcc0 	bl	8006268 <HAL_UART_Receive_IT>
		return;
 80008e8:	e015      	b.n	8000916 <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 80008ea:	2364      	movs	r3, #100	; 0x64
 80008ec:	2201      	movs	r2, #1
 80008ee:	490b      	ldr	r1, [pc, #44]	; (800091c <HAL_UART_RxCpltCallback+0x90>)
 80008f0:	480e      	ldr	r0, [pc, #56]	; (800092c <HAL_UART_RxCpltCallback+0xa0>)
 80008f2:	f005 fc2f 	bl	8006154 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_UART_RxCpltCallback+0x94>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_UART_RxCpltCallback+0x90>)
 80008fc:	7811      	ldrb	r1, [r2, #0]
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_UART_RxCpltCallback+0x9c>)
 8000900:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <HAL_UART_RxCpltCallback+0x94>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a05      	ldr	r2, [pc, #20]	; (8000920 <HAL_UART_RxCpltCallback+0x94>)
 800090a:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 800090c:	2201      	movs	r2, #1
 800090e:	4903      	ldr	r1, [pc, #12]	; (800091c <HAL_UART_RxCpltCallback+0x90>)
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_UART_RxCpltCallback+0xa0>)
 8000912:	f005 fca9 	bl	8006268 <HAL_UART_Receive_IT>
}
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200005b0 	.word	0x200005b0
 8000920:	20000604 	.word	0x20000604
 8000924:	48000400 	.word	0x48000400
 8000928:	200005b4 	.word	0x200005b4
 800092c:	20000528 	.word	0x20000528

08000930 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
   if (timMode == ONE_SHOT) {
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d108      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x22>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000944:	480e      	ldr	r0, [pc, #56]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000946:	f001 ffe5 	bl	8002914 <HAL_GPIO_TogglePin>
      HAL_TIM_Base_Stop_IT(&htim2);
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800094c:	f004 fa48 	bl	8004de0 <HAL_TIM_Base_Stop_IT>
         HAL_TIM_Base_Stop_IT(&htim2);
      }
   }
   //printf("\r\nHAL_TIM_PeriodElapsedCallback");
   //promt();
}
 8000950:	e010      	b.n	8000974 <HAL_TIM_PeriodElapsedCallback+0x44>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000958:	f001 ffdc 	bl	8002914 <HAL_GPIO_TogglePin>
      if (timRepeatCount++ > timRepeat) {
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	4909      	ldr	r1, [pc, #36]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000964:	600a      	str	r2, [r1, #0]
 8000966:	4a09      	ldr	r2, [pc, #36]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	4293      	cmp	r3, r2
 800096c:	dd02      	ble.n	8000974 <HAL_TIM_PeriodElapsedCallback+0x44>
         HAL_TIM_Base_Stop_IT(&htim2);
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000970:	f004 fa36 	bl	8004de0 <HAL_TIM_Base_Stop_IT>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000609 	.word	0x20000609
 8000980:	48000400 	.word	0x48000400
 8000984:	20000490 	.word	0x20000490
 8000988:	200003e4 	.word	0x200003e4
 800098c:	20000000 	.word	0x20000000

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <main+0x14c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6898      	ldr	r0, [r3, #8]
 800099c:	2300      	movs	r3, #0
 800099e:	2202      	movs	r2, #2
 80009a0:	2100      	movs	r1, #0
 80009a2:	f007 f831 	bl	8007a08 <setvbuf>
  unsigned char firmwareVersion[4]={0,0,0,0};
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fd69 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f8af 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f000 fab1 	bl	8000f18 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009b6:	f000 fa7f 	bl	8000eb8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80009ba:	f000 f8ff 	bl	8000bbc <MX_ADC1_Init>
  MX_TIM2_Init();
 80009be:	f000 f9b3 	bl	8000d28 <MX_TIM2_Init>
  MX_TIM17_Init();
 80009c2:	f000 fa01 	bl	8000dc8 <MX_TIM17_Init>
  MX_I2C1_Init();
 80009c6:	f000 f96f 	bl	8000ca8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80009ca:	2201      	movs	r2, #1
 80009cc:	4944      	ldr	r1, [pc, #272]	; (8000ae0 <main+0x150>)
 80009ce:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <main+0x154>)
 80009d0:	f005 fc4a 	bl	8006268 <HAL_UART_Receive_IT>

  //HAL_TIM_Base_Start_IT(&htim2);

  uint8_t ledState = OFF;
 80009d4:	2300      	movs	r3, #0
 80009d6:	75fb      	strb	r3, [r7, #23]
  printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 80009d8:	4843      	ldr	r0, [pc, #268]	; (8000ae8 <main+0x158>)
 80009da:	f006 ffa7 	bl	800792c <iprintf>
  printf("\r\nBuild No. %d", BUILD);
 80009de:	219d      	movs	r1, #157	; 0x9d
 80009e0:	4842      	ldr	r0, [pc, #264]	; (8000aec <main+0x15c>)
 80009e2:	f006 ffa3 	bl	800792c <iprintf>

  // Check if a I2C device is connected.
  // The hardware are already initialized by the code generated by the configurator...
  // sensirion_i2c_init();
  unsigned long res = HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  res = HAL_I2C_Mem_Read(&hi2c1, SENSIRION_ADDRESS, firmware, I2C_MEMADD_SIZE_16BIT, firmwareVersion, 3, 1);
 80009ea:	2301      	movs	r3, #1
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	2303      	movs	r3, #3
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2302      	movs	r3, #2
 80009f8:	f44f 4251 	mov.w	r2, #53504	; 0xd100
 80009fc:	21c2      	movs	r1, #194	; 0xc2
 80009fe:	483c      	ldr	r0, [pc, #240]	; (8000af0 <main+0x160>)
 8000a00:	f002 f926 	bl	8002c50 <HAL_I2C_Mem_Read>
 8000a04:	4603      	mov	r3, r0
 8000a06:	60bb      	str	r3, [r7, #8]
  if (res != HAL_OK) {
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d004      	beq.n	8000a18 <main+0x88>
     printf("\r\nHAL_I2C_Mem_Read() FAILED! Code = 0x%02x", (unsigned int)res);
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	4838      	ldr	r0, [pc, #224]	; (8000af4 <main+0x164>)
 8000a12:	f006 ff8b 	bl	800792c <iprintf>
 8000a16:	e007      	b.n	8000a28 <main+0x98>
  }
  else {
     printf("\r\nSensiron SCD30 Ver.:0x%02x.0x%02x crc=0x%02x", firmwareVersion[0],firmwareVersion[1], firmwareVersion[2]);
 8000a18:	793b      	ldrb	r3, [r7, #4]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	797b      	ldrb	r3, [r7, #5]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	4835      	ldr	r0, [pc, #212]	; (8000af8 <main+0x168>)
 8000a24:	f006 ff82 	bl	800792c <iprintf>
  //HAL_I2C_Mem_Read(&hi2c1, SENSIRION_ADDRESS, firmware, I2C_MEMADD_SIZE_16BIT, firmwareVersion, 3, 1000);
  //if ((firmwareVersion[0]!=0)||(firmwareVersion[1]!=0)) {
     //uint8_t dataBuffer[10] = {0, 0};
     //HAL_I2C_Mem_Write(&hi2c1, SENSIRION_ADDRESS, continuous_measurement, I2C_MEMADD_SIZE_16BIT, dataBuffer, 2, 1000);
  //}
  promt();
 8000a28:	f7ff fea6 	bl	8000778 <promt>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4833      	ldr	r0, [pc, #204]	; (8000afc <main+0x16c>)
 8000a30:	f004 fa66 	bl	8004f00 <HAL_TIM_PWM_Start>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 8000a34:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <main+0x170>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	7dfa      	ldrb	r2, [r7, #23]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d013      	beq.n	8000a66 <main+0xd6>
			ledState = led2;
 8000a3e:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <main+0x170>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	75fb      	strb	r3, [r7, #23]
			if (led2 == ON) {
 8000a44:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <main+0x170>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d106      	bne.n	8000a5a <main+0xca>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a52:	482c      	ldr	r0, [pc, #176]	; (8000b04 <main+0x174>)
 8000a54:	f001 ff46 	bl	80028e4 <HAL_GPIO_WritePin>
 8000a58:	e005      	b.n	8000a66 <main+0xd6>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	4828      	ldr	r0, [pc, #160]	; (8000b04 <main+0x174>)
 8000a62:	f001 ff3f 	bl	80028e4 <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <main+0x170>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d116      	bne.n	8000a9c <main+0x10c>
		   if (msValue > 0) {
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <main+0x178>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dd0a      	ble.n	8000a8c <main+0xfc>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	4822      	ldr	r0, [pc, #136]	; (8000b04 <main+0x174>)
 8000a7c:	f001 ff4a 	bl	8002914 <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <main+0x178>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fd61 	bl	800154c <HAL_Delay>
 8000a8a:	e007      	b.n	8000a9c <main+0x10c>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a92:	481c      	ldr	r0, [pc, #112]	; (8000b04 <main+0x174>)
 8000a94:	f001 ff26 	bl	80028e4 <HAL_GPIO_WritePin>
			   ledState = OFF;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	75fb      	strb	r3, [r7, #23]
			}
		}

		// PWM range from 0% to 100%
      for(int i=0; i<=100; i++){
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	e008      	b.n	8000ab4 <main+0x124>
         TIM17->CCR1 = i;
 8000aa2:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <main+0x17c>)
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	6353      	str	r3, [r2, #52]	; 0x34
         HAL_Delay(5);
 8000aa8:	2005      	movs	r0, #5
 8000aaa:	f000 fd4f 	bl	800154c <HAL_Delay>
      for(int i=0; i<=100; i++){
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2b64      	cmp	r3, #100	; 0x64
 8000ab8:	ddf3      	ble.n	8000aa2 <main+0x112>
      }

      // PWM range from 100% to 0%
      for(int i=100; i>=0; i--){
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e008      	b.n	8000ad2 <main+0x142>
         TIM17->CCR1 = i;
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <main+0x17c>)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6353      	str	r3, [r2, #52]	; 0x34
         HAL_Delay(15);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 fd40 	bl	800154c <HAL_Delay>
      for(int i=100; i>=0; i--){
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	daf3      	bge.n	8000ac0 <main+0x130>
		if (led2 != ledState) {
 8000ad8:	e7ac      	b.n	8000a34 <main+0xa4>
 8000ada:	bf00      	nop
 8000adc:	200003c4 	.word	0x200003c4
 8000ae0:	200005b0 	.word	0x200005b0
 8000ae4:	20000528 	.word	0x20000528
 8000ae8:	08008a90 	.word	0x08008a90
 8000aec:	08008acc 	.word	0x08008acc
 8000af0:	2000043c 	.word	0x2000043c
 8000af4:	08008adc 	.word	0x08008adc
 8000af8:	08008b08 	.word	0x08008b08
 8000afc:	200004dc 	.word	0x200004dc
 8000b00:	20000608 	.word	0x20000608
 8000b04:	48000400 	.word	0x48000400
 8000b08:	200003e8 	.word	0x200003e8
 8000b0c:	40014800 	.word	0x40014800

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09c      	sub	sp, #112	; 0x70
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b1a:	2228      	movs	r2, #40	; 0x28
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f007 f8f8 	bl	8007d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2234      	movs	r2, #52	; 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 f8ea 	bl	8007d14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 fc91 	bl	800347c <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000b60:	f000 fa26 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fcba 	bl	80044f8 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000b8a:	f000 fa11 	bl	8000fb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SystemClock_Config+0xa8>)
 8000b90:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fedf 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000bac:	f000 fa00 	bl	8000fb0 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3770      	adds	r7, #112	; 0x70
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	00100021 	.word	0x00100021

08000bbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bd2:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000bd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000bdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000be0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c10:	2203      	movs	r2, #3
 8000c12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c1e:	2208      	movs	r2, #8
 8000c20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2e:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c30:	f000 fcb0 	bl	8001594 <HAL_ADC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000c3a:	f000 f9b9 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c3e:	230f      	movs	r3, #15
 8000c40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c5c:	f000 ffcc 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c66:	f000 f9a3 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4619      	mov	r1, r3
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c74:	f000 ffc0 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000c7e:	f000 f997 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c82:	2303      	movs	r3, #3
 8000c84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_ADC1_Init+0xe8>)
 8000c8c:	f000 ffb4 	bl	8001bf8 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c96:	f000 f98b 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200003ec 	.word	0x200003ec

08000ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_I2C1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <MX_I2C1_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ce6:	f001 fe2f 	bl	8002948 <HAL_I2C_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cf0:	f000 f95e 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cf8:	f002 fb28 	bl	800334c <HAL_I2CEx_ConfigAnalogFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000d02:	f000 f955 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000d0a:	f002 fb6a 	bl	80033e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d14:	f000 f94c 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000043c 	.word	0x2000043c
 8000d20:	40005400 	.word	0x40005400
 8000d24:	2000090e 	.word	0x2000090e

08000d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000d5e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d72:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000d74:	f003 ff88 	bl	8004c88 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d7e:	f000 f917 	bl	8000fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000d90:	f004 fbd0 	bl	8005534 <HAL_TIM_ConfigClockSource>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000d9a:	f000 f909 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM2_Init+0x9c>)
 8000dac:	f005 f888 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000db6:	f000 f8fb 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000490 	.word	0x20000490

08000dc8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b092      	sub	sp, #72	; 0x48
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	222c      	movs	r2, #44	; 0x2c
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f006 ff93 	bl	8007d14 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000df0:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <MX_TIM17_Init+0xec>)
 8000df2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 80-1;
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000df6:	224f      	movs	r2, #79	; 0x4f
 8000df8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100-1;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000e02:	2263      	movs	r2, #99	; 0x63
 8000e04:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000e1a:	f003 ff35 	bl	8004c88 <HAL_TIM_Base_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000e24:	f000 f8c4 	bl	8000fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000e2a:	f004 f808 	bl	8004e3e <HAL_TIM_PWM_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000e34:	f000 f8bc 	bl	8000fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e38:	2360      	movs	r3, #96	; 0x60
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000e5e:	f004 fa55 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000e68:	f000 f8a2 	bl	8000fb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000e94:	f005 f87a 	bl	8005f8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000e9e:	f000 f887 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM17_Init+0xe8>)
 8000ea4:	f000 f966 	bl	8001174 <HAL_TIM_MspPostInit>

}
 8000ea8:	bf00      	nop
 8000eaa:	3748      	adds	r7, #72	; 0x48
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200004dc 	.word	0x200004dc
 8000eb4:	40014800 	.word	0x40014800

08000eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_USART1_UART_Init+0x5c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ec4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART1_UART_Init+0x58>)
 8000efc:	f005 f8dc 	bl	80060b8 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f06:	f000 f853 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000528 	.word	0x20000528
 8000f14:	40013800 	.word	0x40013800

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_GPIO_Init+0x90>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <MX_GPIO_Init+0x94>)
 8000f7e:	f001 fcb1 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_GPIO_Init+0x94>)
 8000f9c:	f001 fb30 	bl	8002600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000400 	.word	0x48000400

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fb8:	e7fe      	b.n	8000fb8 <Error_Handler+0x8>
	...

08000fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_MspInit+0x44>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <HAL_MspInit+0x44>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_MspInit+0x44>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_MspInit+0x44>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_MspInit+0x44>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_MspInit+0x44>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001024:	d124      	bne.n	8001070 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_ADC_MspInit+0x74>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_ADC_MspInit+0x74>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6153      	str	r3, [r2, #20]
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_ADC_MspInit+0x74>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_ADC_MspInit+0x74>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_ADC_MspInit+0x74>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_ADC_MspInit+0x74>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	2303      	movs	r3, #3
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f001 fac8 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a18      	ldr	r2, [pc, #96]	; (80010fc <HAL_I2C_MspInit+0x80>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d129      	bne.n	80010f2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f001 fa93 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40005400 	.word	0x40005400
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d114      	bne.n	8001140 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_TIM_Base_MspInit+0x68>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a14      	ldr	r2, [pc, #80]	; (800116c <HAL_TIM_Base_MspInit+0x68>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_TIM_Base_MspInit+0x68>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	201c      	movs	r0, #28
 8001134:	f001 f9b7 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001138:	201c      	movs	r0, #28
 800113a:	f001 f9d0 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800113e:	e010      	b.n	8001162 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_TIM_Base_MspInit+0x6c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d10b      	bne.n	8001162 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_TIM_Base_MspInit+0x68>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_TIM_Base_MspInit+0x68>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_TIM_Base_MspInit+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	40014800 	.word	0x40014800

08001174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <HAL_TIM_MspPostInit+0x64>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d11b      	bne.n	80011ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_TIM_MspPostInit+0x68>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <HAL_TIM_MspPostInit+0x68>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_TIM_MspPostInit+0x68>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB5     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ae:	2320      	movs	r3, #32
 80011b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80011be:	230a      	movs	r3, #10
 80011c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_TIM_MspPostInit+0x6c>)
 80011ca:	f001 fa19 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40014800 	.word	0x40014800
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000400 	.word	0x48000400

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_UART_MspInit+0x8c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12f      	bne.n	8001266 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_UART_MspInit+0x90>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <HAL_UART_MspInit+0x90>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_UART_MspInit+0x90>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_UART_MspInit+0x90>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_UART_MspInit+0x90>)
 8001224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_UART_MspInit+0x90>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001236:	2330      	movs	r3, #48	; 0x30
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001246:	2307      	movs	r3, #7
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4809      	ldr	r0, [pc, #36]	; (8001278 <HAL_UART_MspInit+0x94>)
 8001252:	f001 f9d5 	bl	8002600 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2025      	movs	r0, #37	; 0x25
 800125c:	f001 f923 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001260:	2025      	movs	r0, #37	; 0x25
 8001262:	f001 f93c 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40013800 	.word	0x40013800
 8001274:	40021000 	.word	0x40021000
 8001278:	48000800 	.word	0x48000800

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f920 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM2_IRQHandler+0x10>)
 80012d6:	f003 fef9 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000490 	.word	0x20000490

080012e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <USART1_IRQHandler+0x10>)
 80012ea:	f005 f801 	bl	80062f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000528 	.word	0x20000528

080012f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800130a:	f3af 8000 	nop.w
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
	}

return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	return -1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135a:	605a      	str	r2, [r3, #4]
	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_isatty>:

int _isatty(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	return 1;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f006 fd02 	bl	8007dd4 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20004000 	.word	0x20004000
 80013fc:	00000400 	.word	0x00000400
 8001400:	2000060c 	.word	0x2000060c
 8001404:	20000760 	.word	0x20000760

08001408 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001430:	f7ff ffea 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0a      	ldr	r4, [pc, #40]	; (8001478 <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f006 fcc1 	bl	8007de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145e:	f7ff fa97 	bl	8000990 <main>

08001462 <LoopForever>:

LoopForever:
    b LoopForever
 8001462:	e7fe      	b.n	8001462 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001464:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8001470:	08008cac 	.word	0x08008cac
  ldr r2, =_sbss
 8001474:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8001478:	20000760 	.word	0x20000760

0800147c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_IRQHandler>
	...

08001480 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 fffd 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fd8e 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f815 	bl	80024fa <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 ffdd 	bl	80024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000360 	.word	0x20000360
 8001504:	20000368 	.word	0x20000368
 8001508:	20000364 	.word	0x20000364

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000368 	.word	0x20000368
 8001530:	20000610 	.word	0x20000610

08001534 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;  
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000610 	.word	0x20000610

0800154c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000368 	.word	0x20000368

08001594 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b09a      	sub	sp, #104	; 0x68
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e169      	b.n	8001888 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d176      	bne.n	80016b4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d152      	bne.n	8001674 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fd0b 	bl	8001004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d13b      	bne.n	8001674 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fe11 	bl	8002224 <ADC_Disable>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d12f      	bne.n	8001674 <HAL_ADC_Init+0xe0>
 8001614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001618:	2b00      	cmp	r3, #0
 800161a:	d12b      	bne.n	8001674 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001624:	f023 0302 	bic.w	r3, r3, #2
 8001628:	f043 0202 	orr.w	r2, r3, #2
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800163e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800164e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001650:	4b8f      	ldr	r3, [pc, #572]	; (8001890 <HAL_ADC_Init+0x2fc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a8f      	ldr	r2, [pc, #572]	; (8001894 <HAL_ADC_Init+0x300>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9a      	lsrs	r2, r3, #18
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001666:	e002      	b.n	800166e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	3b01      	subs	r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f9      	bne.n	8001668 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800168c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001690:	d110      	bne.n	80016b4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f023 0312 	bic.w	r3, r3, #18
 800169a:	f043 0210 	orr.w	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 80d6 	bne.w	800186e <HAL_ADC_Init+0x2da>
 80016c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80d1 	bne.w	800186e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 80c9 	bne.w	800186e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016e4:	f043 0202 	orr.w	r2, r3, #2
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_ADC_Init+0x304>)
 80016ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <HAL_ADC_Init+0x180>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_ADC_Init+0x180>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_ADC_Init+0x182>
 8001714:	2300      	movs	r3, #0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11c      	bne.n	8001754 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800171a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800171c:	2b00      	cmp	r3, #0
 800171e:	d010      	beq.n	8001742 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_ADC_Init+0x1a8>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_ADC_Init+0x1a8>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_ADC_Init+0x1aa>
 800173c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	431a      	orrs	r2, r3
 8001750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001752:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e5b      	ldrb	r3, [r3, #25]
 8001758:	035b      	lsls	r3, r3, #13
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800175e:	2a01      	cmp	r2, #1
 8001760:	d002      	beq.n	8001768 <HAL_ADC_Init+0x1d4>
 8001762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001766:	e000      	b.n	800176a <HAL_ADC_Init+0x1d6>
 8001768:	2200      	movs	r2, #0
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4313      	orrs	r3, r2
 8001778:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800177a:	4313      	orrs	r3, r2
 800177c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d11b      	bne.n	80017c0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7e5b      	ldrb	r3, [r3, #25]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	3b01      	subs	r3, #1
 8001796:	045a      	lsls	r2, r3, #17
 8001798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800179a:	4313      	orrs	r3, r2
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	663b      	str	r3, [r7, #96]	; 0x60
 80017a2:	e00d      	b.n	80017c0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017ac:	f043 0220 	orr.w	r2, r3, #32
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d007      	beq.n	80017d8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	4313      	orrs	r3, r2
 80017d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017d4:	4313      	orrs	r3, r2
 80017d6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d114      	bne.n	8001810 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f4:	f023 0302 	bic.w	r3, r3, #2
 80017f8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7e1b      	ldrb	r3, [r3, #24]
 80017fe:	039a      	lsls	r2, r3, #14
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4313      	orrs	r3, r2
 800180a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800180c:	4313      	orrs	r3, r2
 800180e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_ADC_Init+0x308>)
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001820:	430b      	orrs	r3, r1
 8001822:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d10c      	bne.n	8001846 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f023 010f 	bic.w	r1, r3, #15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	1e5a      	subs	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
 8001844:	e007      	b.n	8001856 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 020f 	bic.w	r2, r2, #15
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f023 0303 	bic.w	r3, r3, #3
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
 800186c:	e00a      	b.n	8001884 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f023 0312 	bic.w	r3, r3, #18
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800187e:	2301      	movs	r3, #1
 8001880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001884:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001888:	4618      	mov	r0, r3
 800188a:	3768      	adds	r7, #104	; 0x68
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000360 	.word	0x20000360
 8001894:	431bde83 	.word	0x431bde83
 8001898:	50000300 	.word	0x50000300
 800189c:	fff0c007 	.word	0xfff0c007

080018a0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d158      	bne.n	800196c <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_Start+0x28>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e054      	b.n	8001972 <HAL_ADC_Start+0xd2>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fc43 	bl	800215c <ADC_Enable>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d140      	bne.n	8001962 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001916:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192a:	d106      	bne.n	800193a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f023 0206 	bic.w	r2, r3, #6
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
 8001938:	e002      	b.n	8001940 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	221c      	movs	r2, #28
 800194e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0204 	orr.w	r2, r2, #4
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	e006      	b.n	8001970 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800196a:	e001      	b.n	8001970 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800196c:	2302      	movs	r3, #2
 800196e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	2b08      	cmp	r3, #8
 8001990:	d102      	bne.n	8001998 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001992:	2308      	movs	r3, #8
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e02e      	b.n	80019f6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001998:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <HAL_ADC_PollForConversion+0x178>)
 800199a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d112      	bne.n	80019ce <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d11d      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f043 0220 	orr.w	r2, r3, #32
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e08d      	b.n	8001aea <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f043 0220 	orr.w	r2, r3, #32
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07b      	b.n	8001aea <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80019f2:	230c      	movs	r3, #12
 80019f4:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80019fe:	f7ff fd99 	bl	8001534 <HAL_GetTick>
 8001a02:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a04:	e021      	b.n	8001a4a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d01d      	beq.n	8001a4a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_ADC_PollForConversion+0xa8>
 8001a14:	f7ff fd8e 	bl	8001534 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d212      	bcs.n	8001a4a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10b      	bne.n	8001a4a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f043 0204 	orr.w	r2, r3, #4
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e04f      	b.n	8001aea <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0d6      	beq.n	8001a06 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d131      	bne.n	8001ad6 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d12c      	bne.n	8001ad6 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d125      	bne.n	8001ad6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d112      	bne.n	8001abe <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d112      	bne.n	8001ad6 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
 8001abc:	e00b      	b.n	8001ad6 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f043 0220 	orr.w	r2, r3, #32
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d103      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	50000300 	.word	0x50000300

08001af8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ADCEx_Calibration_Start+0x1c>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e05f      	b.n	8001bee <HAL_ADCEx_Calibration_Start+0xdc>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fb74 	bl	8002224 <ADC_Disable>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d14e      	bne.n	8001be4 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001b5a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b70:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b80:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001b82:	f7ff fcd7 	bl	8001534 <HAL_GetTick>
 8001b86:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b88:	e01c      	b.n	8001bc4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b8a:	f7ff fcd3 	bl	8001534 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b0a      	cmp	r3, #10
 8001b96:	d915      	bls.n	8001bc4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f023 0312 	bic.w	r3, r3, #18
 8001bb0:	f043 0210 	orr.w	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e014      	b.n	8001bee <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bd2:	d0da      	beq.n	8001b8a <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f023 0303 	bic.w	r3, r3, #3
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b09b      	sub	sp, #108	; 0x6c
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x22>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e295      	b.n	8002146 <HAL_ADC_ConfigChannel+0x54e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f040 8279 	bne.w	8002124 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d81c      	bhi.n	8001c74 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	231f      	movs	r3, #31
 8001c50:	4093      	lsls	r3, r2
 8001c52:	43db      	mvns	r3, r3
 8001c54:	4019      	ands	r1, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
 8001c72:	e063      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d81e      	bhi.n	8001cba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	3b1e      	subs	r3, #30
 8001c90:	221f      	movs	r2, #31
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	4019      	ands	r1, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	3b1e      	subs	r3, #30
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb8:	e040      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b0e      	cmp	r3, #14
 8001cc0:	d81e      	bhi.n	8001d00 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	3b3c      	subs	r3, #60	; 0x3c
 8001cd6:	221f      	movs	r2, #31
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4019      	ands	r1, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	3b3c      	subs	r3, #60	; 0x3c
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8001cfe:	e01d      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	3b5a      	subs	r3, #90	; 0x5a
 8001d14:	221f      	movs	r2, #31
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4019      	ands	r1, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	3b5a      	subs	r3, #90	; 0x5a
 8001d30:	fa00 f203 	lsl.w	r2, r0, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 80e5 	bne.w	8001f16 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d91c      	bls.n	8001d8e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6999      	ldr	r1, [r3, #24]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	3b1e      	subs	r3, #30
 8001d66:	2207      	movs	r2, #7
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	4019      	ands	r1, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6898      	ldr	r0, [r3, #8]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3b1e      	subs	r3, #30
 8001d80:	fa00 f203 	lsl.w	r2, r0, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	619a      	str	r2, [r3, #24]
 8001d8c:	e019      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6959      	ldr	r1, [r3, #20]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2207      	movs	r2, #7
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4019      	ands	r1, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6898      	ldr	r0, [r3, #8]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	08db      	lsrs	r3, r3, #3
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d84f      	bhi.n	8001e84 <HAL_ADC_ConfigChannel+0x28c>
 8001de4:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <HAL_ADC_ConfigChannel+0x1f4>)
 8001de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dea:	bf00      	nop
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	08001e1f 	.word	0x08001e1f
 8001df4:	08001e41 	.word	0x08001e41
 8001df8:	08001e63 	.word	0x08001e63
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e02:	4b97      	ldr	r3, [pc, #604]	; (8002060 <HAL_ADC_ConfigChannel+0x468>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	0691      	lsls	r1, r2, #26
 8001e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e1a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e1c:	e07b      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e24:	4b8e      	ldr	r3, [pc, #568]	; (8002060 <HAL_ADC_ConfigChannel+0x468>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	0691      	lsls	r1, r2, #26
 8001e2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e30:	430a      	orrs	r2, r1
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e3c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e3e:	e06a      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e46:	4b86      	ldr	r3, [pc, #536]	; (8002060 <HAL_ADC_ConfigChannel+0x468>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	0691      	lsls	r1, r2, #26
 8001e50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e52:	430a      	orrs	r2, r1
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e5e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e60:	e059      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e68:	4b7d      	ldr	r3, [pc, #500]	; (8002060 <HAL_ADC_ConfigChannel+0x468>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	0691      	lsls	r1, r2, #26
 8001e72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e74:	430a      	orrs	r2, r1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e80:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e82:	e048      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	069b      	lsls	r3, r3, #26
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d107      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ea6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	069b      	lsls	r3, r3, #26
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d107      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eca:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ed2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	069b      	lsls	r3, r3, #26
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d107      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eee:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	069b      	lsls	r3, r3, #26
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f12:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f14:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d108      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x33e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x33e>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x340>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 80fe 	bne.w	800213a <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d00f      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2201      	movs	r2, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001f64:	e049      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	409a      	lsls	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b09      	cmp	r3, #9
 8001f86:	d91c      	bls.n	8001fc2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6999      	ldr	r1, [r3, #24]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	3b1b      	subs	r3, #27
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4019      	ands	r1, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6898      	ldr	r0, [r3, #8]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b1b      	subs	r3, #27
 8001fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	619a      	str	r2, [r3, #24]
 8001fc0:	e01b      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6959      	ldr	r1, [r3, #20]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	4019      	ands	r1, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6898      	ldr	r0, [r3, #8]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_ADC_ConfigChannel+0x46c>)
 8001ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d105      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d014      	beq.n	800203c <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002016:	2b11      	cmp	r3, #17
 8002018:	d105      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800201a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800202a:	2b12      	cmp	r3, #18
 800202c:	f040 8085 	bne.w	800213a <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002038:	2b00      	cmp	r3, #0
 800203a:	d17e      	bne.n	800213a <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10c      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x470>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x470>
 800205c:	2301      	movs	r3, #1
 800205e:	e004      	b.n	800206a <HAL_ADC_ConfigChannel+0x472>
 8002060:	83fff000 	.word	0x83fff000
 8002064:	50000300 	.word	0x50000300
 8002068:	2300      	movs	r3, #0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d150      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800206e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d107      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x498>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x498>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_ADC_ConfigChannel+0x49a>
 8002090:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002092:	2b00      	cmp	r3, #0
 8002094:	d13c      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d11d      	bne.n	80020da <HAL_ADC_ConfigChannel+0x4e2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a6:	d118      	bne.n	80020da <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80020a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_ADC_ConfigChannel+0x55c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <HAL_ADC_ConfigChannel+0x560>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0c9a      	lsrs	r2, r3, #18
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020ca:	e002      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f9      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020d8:	e02e      	b.n	8002138 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b11      	cmp	r3, #17
 80020e0:	d10b      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x502>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ea:	d106      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80020ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80020f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020f8:	e01e      	b.n	8002138 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d11a      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800210a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800210e:	e013      	b.n	8002138 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002122:	e00a      	b.n	800213a <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f043 0220 	orr.w	r2, r3, #32
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002136:	e000      	b.n	800213a <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002138:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002142:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002146:	4618      	mov	r0, r3
 8002148:	376c      	adds	r7, #108	; 0x6c
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000360 	.word	0x20000360
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <ADC_Enable+0x2c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <ADC_Enable+0x2c>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <ADC_Enable+0x2e>
 8002188:	2300      	movs	r3, #0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d143      	bne.n	8002216 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <ADC_Enable+0xc4>)
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f043 0210 	orr.w	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e02f      	b.n	8002218 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80021c8:	f7ff f9b4 	bl	8001534 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021ce:	e01b      	b.n	8002208 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021d0:	f7ff f9b0 	bl	8001534 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d914      	bls.n	8002208 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d00d      	beq.n	8002208 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e007      	b.n	8002218 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d1dc      	bne.n	80021d0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	8000003f 	.word	0x8000003f

08002224 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d108      	bne.n	8002250 <ADC_Disable+0x2c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <ADC_Disable+0x2c>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <ADC_Disable+0x2e>
 8002250:	2300      	movs	r3, #0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d047      	beq.n	80022e6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030d 	and.w	r3, r3, #13
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10f      	bne.n	8002284 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0202 	orr.w	r2, r2, #2
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2203      	movs	r2, #3
 800227a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800227c:	f7ff f95a 	bl	8001534 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002282:	e029      	b.n	80022d8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f043 0210 	orr.w	r2, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e023      	b.n	80022e8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022a0:	f7ff f948 	bl	8001534 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d914      	bls.n	80022d8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10d      	bne.n	80022d8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d0dc      	beq.n	80022a0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800231c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	; (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <__NVIC_GetPriorityGrouping+0x18>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 0307 	and.w	r3, r3, #7
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	db0b      	blt.n	800237e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <__NVIC_EnableIRQ+0x38>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	2001      	movs	r0, #1
 8002376:	fa00 f202 	lsl.w	r2, r0, r2
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100

08002390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db0a      	blt.n	80023ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <__NVIC_SetPriority+0x4c>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b8:	e00a      	b.n	80023d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <__NVIC_SetPriority+0x50>)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3b04      	subs	r3, #4
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	440b      	add	r3, r1
 80023ce:	761a      	strb	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	bf28      	it	cs
 8002402:	2304      	movcs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3304      	adds	r3, #4
 800240a:	2b06      	cmp	r3, #6
 800240c:	d902      	bls.n	8002414 <NVIC_EncodePriority+0x30>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b03      	subs	r3, #3
 8002412:	e000      	b.n	8002416 <NVIC_EncodePriority+0x32>
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43d9      	mvns	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	4313      	orrs	r3, r2
         );
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff8e 	bl	8002390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff29 	bl	80022f0 <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff3e 	bl	8002338 <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff8e 	bl	80023e4 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5d 	bl	8002390 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff31 	bl	8002354 <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa2 	bl	800244c <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002520:	2b02      	cmp	r3, #2
 8002522:	d008      	beq.n	8002536 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2204      	movs	r2, #4
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e020      	b.n	8002578 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 020e 	bic.w	r2, r2, #14
 8002544:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002596:	2b02      	cmp	r3, #2
 8002598:	d005      	beq.n	80025a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2204      	movs	r2, #4
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e027      	b.n	80025f6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 020e 	bic.w	r2, r2, #14
 80025b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
    } 
  }
  return status;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260e:	e14e      	b.n	80028ae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8140 	beq.w	80028a8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d005      	beq.n	8002640 <HAL_GPIO_Init+0x40>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d130      	bne.n	80026a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002676:	2201      	movs	r2, #1
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	f003 0201 	and.w	r2, r3, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d017      	beq.n	80026de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d123      	bne.n	8002732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	220f      	movs	r2, #15
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	08da      	lsrs	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3208      	adds	r2, #8
 800272c:	6939      	ldr	r1, [r7, #16]
 800272e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0203 	and.w	r2, r3, #3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 809a 	beq.w	80028a8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002774:	4b55      	ldr	r3, [pc, #340]	; (80028cc <HAL_GPIO_Init+0x2cc>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a54      	ldr	r2, [pc, #336]	; (80028cc <HAL_GPIO_Init+0x2cc>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6193      	str	r3, [r2, #24]
 8002780:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_GPIO_Init+0x2cc>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800278c:	4a50      	ldr	r2, [pc, #320]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027b6:	d013      	beq.n	80027e0 <HAL_GPIO_Init+0x1e0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a46      	ldr	r2, [pc, #280]	; (80028d4 <HAL_GPIO_Init+0x2d4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00d      	beq.n	80027dc <HAL_GPIO_Init+0x1dc>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <HAL_GPIO_Init+0x2d8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <HAL_GPIO_Init+0x1d8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a44      	ldr	r2, [pc, #272]	; (80028dc <HAL_GPIO_Init+0x2dc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_GPIO_Init+0x1d4>
 80027d0:	2303      	movs	r3, #3
 80027d2:	e006      	b.n	80027e2 <HAL_GPIO_Init+0x1e2>
 80027d4:	2305      	movs	r3, #5
 80027d6:	e004      	b.n	80027e2 <HAL_GPIO_Init+0x1e2>
 80027d8:	2302      	movs	r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x1e2>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_GPIO_Init+0x1e2>
 80027e0:	2300      	movs	r3, #0
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	f002 0203 	and.w	r2, r2, #3
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	4093      	lsls	r3, r2
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027f2:	4937      	ldr	r1, [pc, #220]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002800:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002824:	4a2e      	ldr	r2, [pc, #184]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	43db      	mvns	r3, r3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800284e:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_GPIO_Init+0x2e0>)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f47f aea9 	bne.w	8002610 <HAL_GPIO_Init+0x10>
  }
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010000 	.word	0x40010000
 80028d4:	48000400 	.word	0x48000400
 80028d8:	48000800 	.word	0x48000800
 80028dc:	48000c00 	.word	0x48000c00
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002900:	e002      	b.n	8002908 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4013      	ands	r3, r2
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43d9      	mvns	r1, r3
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	400b      	ands	r3, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e081      	b.n	8002a5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fb84 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	e006      	b.n	80029d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d104      	bne.n	80029e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69d9      	ldr	r1, [r3, #28]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	817b      	strh	r3, [r7, #10]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 80da 	bne.w	8002c3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_I2C_Master_Transmit+0x30>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0d3      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fd48 	bl	8001534 <HAL_GetTick>
 8002aa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2319      	movs	r3, #25
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa5e 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0be      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2210      	movs	r2, #16
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2bff      	cmp	r3, #255	; 0xff
 8002af2:	d90e      	bls.n	8002b12 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	22ff      	movs	r2, #255	; 0xff
 8002af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	8979      	ldrh	r1, [r7, #10]
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fbec 	bl	80032e8 <I2C_TransferConfig>
 8002b10:	e06c      	b.n	8002bec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fbdb 	bl	80032e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b32:	e05b      	b.n	8002bec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	6a39      	ldr	r1, [r7, #32]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fa6a 	bl	8003012 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e07b      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d034      	beq.n	8002bec <HAL_I2C_Master_Transmit+0x184>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d130      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f9ed 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e04d      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2bff      	cmp	r3, #255	; 0xff
 8002bac:	d90e      	bls.n	8002bcc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	22ff      	movs	r2, #255	; 0xff
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	8979      	ldrh	r1, [r7, #10]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fb8f 	bl	80032e8 <I2C_TransferConfig>
 8002bca:	e00f      	b.n	8002bec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	8979      	ldrh	r1, [r7, #10]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fb7e 	bl	80032e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d19e      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fa50 	bl	80030a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e01a      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_I2C_Master_Transmit+0x1e4>)
 8002c1e:	400b      	ands	r3, r1
 8002c20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	80002000 	.word	0x80002000
 8002c4c:	fe00e800 	.word	0xfe00e800

08002c50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	f040 80fd 	bne.w	8002e72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x34>
 8002c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0f1      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2C_Mem_Read+0x4e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0ea      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fc45 	bl	8001534 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2319      	movs	r3, #25
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f95b 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d5      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2222      	movs	r2, #34	; 0x22
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf0:	88f8      	ldrh	r0, [r7, #6]
 8002cf2:	893a      	ldrh	r2, [r7, #8]
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4603      	mov	r3, r0
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f8bf 	bl	8002e84 <I2C_RequestMemoryRead>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0ad      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2bff      	cmp	r3, #255	; 0xff
 8002d20:	d90e      	bls.n	8002d40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	8979      	ldrh	r1, [r7, #10]
 8002d30:	4b52      	ldr	r3, [pc, #328]	; (8002e7c <HAL_I2C_Mem_Read+0x22c>)
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fad5 	bl	80032e8 <I2C_TransferConfig>
 8002d3e:	e00f      	b.n	8002d60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	8979      	ldrh	r1, [r7, #10]
 8002d52:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <HAL_I2C_Mem_Read+0x22c>)
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fac4 	bl	80032e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	2200      	movs	r2, #0
 8002d68:	2104      	movs	r1, #4
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f902 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07c      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d034      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x1d0>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d130      	bne.n	8002e20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f8d3 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e04d      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2bff      	cmp	r3, #255	; 0xff
 8002de0:	d90e      	bls.n	8002e00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	22ff      	movs	r2, #255	; 0xff
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	2300      	movs	r3, #0
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fa75 	bl	80032e8 <I2C_TransferConfig>
 8002dfe:	e00f      	b.n	8002e20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	8979      	ldrh	r1, [r7, #10]
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fa64 	bl	80032e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d19a      	bne.n	8002d60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f936 	bl	80030a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e01a      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_I2C_Mem_Read+0x230>)
 8002e52:	400b      	ands	r3, r1
 8002e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	80002400 	.word	0x80002400
 8002e80:	fe00e800 	.word	0xfe00e800

08002e84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	817b      	strh	r3, [r7, #10]
 8002e96:	460b      	mov	r3, r1
 8002e98:	813b      	strh	r3, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	8979      	ldrh	r1, [r7, #10]
 8002ea4:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <I2C_RequestMemoryRead+0xa4>)
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fa1c 	bl	80032e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f8ac 	bl	8003012 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e02c      	b.n	8002f1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed4:	e015      	b.n	8002f02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed6:	893b      	ldrh	r3, [r7, #8]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f892 	bl	8003012 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e012      	b.n	8002f1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef8:	893b      	ldrh	r3, [r7, #8]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2140      	movs	r1, #64	; 0x40
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f831 	bl	8002f74 <I2C_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	80002000 	.word	0x80002000

08002f2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d103      	bne.n	8002f4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d007      	beq.n	8002f68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	619a      	str	r2, [r3, #24]
  }
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f84:	e031      	b.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d02d      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fe fad1 	bl	8001534 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d122      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d113      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00f      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	429a      	cmp	r2, r3
 8003006:	d0be      	beq.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800301e:	e033      	b.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f87f 	bl	8003128 <I2C_IsErrorOccurred>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e031      	b.n	8003098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d025      	beq.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7fe fa7a 	bl	8001534 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11a      	bne.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d013      	beq.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e007      	b.n	8003098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	d1c4      	bne.n	8003020 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ac:	e02f      	b.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f838 	bl	8003128 <I2C_IsErrorOccurred>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e02d      	b.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe fa37 	bl	8001534 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11a      	bne.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d013      	beq.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e007      	b.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d1c8      	bne.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d068      	beq.n	8003226 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2210      	movs	r2, #16
 800315a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800315c:	e049      	b.n	80031f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d045      	beq.n	80031f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fe f9e5 	bl	8001534 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_IsErrorOccurred+0x54>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d13a      	bne.n	80031f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800318e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319e:	d121      	bne.n	80031e4 <I2C_IsErrorOccurred+0xbc>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a6:	d01d      	beq.n	80031e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d01a      	beq.n	80031e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031be:	f7fe f9b9 	bl	8001534 <HAL_GetTick>
 80031c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c4:	e00e      	b.n	80031e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031c6:	f7fe f9b5 	bl	8001534 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b19      	cmp	r3, #25
 80031d2:	d907      	bls.n	80031e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	f043 0320 	orr.w	r3, r3, #32
 80031da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80031e2:	e006      	b.n	80031f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d1e9      	bne.n	80031c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d003      	beq.n	8003208 <I2C_IsErrorOccurred+0xe0>
 8003200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0aa      	beq.n	800315e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2220      	movs	r2, #32
 8003216:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003248:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f043 0308 	orr.w	r3, r3, #8
 8003260:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01c      	beq.n	80032d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff fe45 	bl	8002f2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <I2C_IsErrorOccurred+0x1bc>)
 80032ae:	400b      	ands	r3, r1
 80032b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	fe00e800 	.word	0xfe00e800

080032e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	817b      	strh	r3, [r7, #10]
 80032f6:	4613      	mov	r3, r2
 80032f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003300:	7a7b      	ldrb	r3, [r7, #9]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003308:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	4313      	orrs	r3, r2
 8003312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003316:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	0d5b      	lsrs	r3, r3, #21
 8003322:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <I2C_TransferConfig+0x60>)
 8003328:	430b      	orrs	r3, r1
 800332a:	43db      	mvns	r3, r3
 800332c:	ea02 0103 	and.w	r1, r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	03ff63ff 	.word	0x03ff63ff

0800334c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	d138      	bne.n	80033d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800336c:	2302      	movs	r3, #2
 800336e:	e032      	b.n	80033d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800339e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e000      	b.n	80033d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d139      	bne.n	800346c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003402:	2302      	movs	r3, #2
 8003404:	e033      	b.n	800346e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2224      	movs	r2, #36	; 0x24
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003434:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003482:	af00      	add	r7, sp, #0
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f001 b823 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 817d 	beq.w	80037b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034b8:	4bbc      	ldr	r3, [pc, #752]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d00c      	beq.n	80034de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034c4:	4bb9      	ldr	r3, [pc, #740]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d15c      	bne.n	800358a <HAL_RCC_OscConfig+0x10e>
 80034d0:	4bb6      	ldr	r3, [pc, #728]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034dc:	d155      	bne.n	800358a <HAL_RCC_OscConfig+0x10e>
 80034de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0x94>
 800350a:	4ba8      	ldr	r3, [pc, #672]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	e015      	b.n	800353c <HAL_RCC_OscConfig+0xc0>
 8003510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003514:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003528:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800352c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003538:	4b9c      	ldr	r3, [pc, #624]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003540:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003544:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003548:	fa92 f2a2 	rbit	r2, r2
 800354c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003550:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003554:	fab2 f282 	clz	r2, r2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f042 0220 	orr.w	r2, r2, #32
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f002 021f 	and.w	r2, r2, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 811f 	beq.w	80037b0 <HAL_RCC_OscConfig+0x334>
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 8116 	bne.w	80037b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f000 bfaf 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x12e>
 800359c:	4b83      	ldr	r3, [pc, #524]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a82      	ldr	r2, [pc, #520]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	e036      	b.n	8003618 <HAL_RCC_OscConfig+0x19c>
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x158>
 80035ba:	4b7c      	ldr	r3, [pc, #496]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7b      	ldr	r2, [pc, #492]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b79      	ldr	r3, [pc, #484]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a78      	ldr	r2, [pc, #480]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e021      	b.n	8003618 <HAL_RCC_OscConfig+0x19c>
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x184>
 80035e6:	4b71      	ldr	r3, [pc, #452]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a70      	ldr	r2, [pc, #448]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b6e      	ldr	r3, [pc, #440]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6d      	ldr	r2, [pc, #436]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0x19c>
 8003600:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a69      	ldr	r2, [pc, #420]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b67      	ldr	r3, [pc, #412]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a66      	ldr	r2, [pc, #408]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003618:	4b64      	ldr	r3, [pc, #400]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	f023 020f 	bic.w	r2, r3, #15
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	495f      	ldr	r1, [pc, #380]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 800362e:	4313      	orrs	r3, r2
 8003630:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d059      	beq.n	80036f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fd ff77 	bl	8001534 <HAL_GetTick>
 8003646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364c:	f7fd ff72 	bl	8001534 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b64      	cmp	r3, #100	; 0x64
 800365a:	d902      	bls.n	8003662 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	f000 bf43 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>
 8003662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003666:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003676:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d102      	bne.n	8003694 <HAL_RCC_OscConfig+0x218>
 800368e:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	e015      	b.n	80036c0 <HAL_RCC_OscConfig+0x244>
 8003694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003698:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036bc:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80036c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80036cc:	fa92 f2a2 	rbit	r2, r2
 80036d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80036d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80036d8:	fab2 f282 	clz	r2, r2
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f042 0220 	orr.w	r2, r2, #32
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f002 021f 	and.w	r2, r2, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ab      	beq.n	800364c <HAL_RCC_OscConfig+0x1d0>
 80036f4:	e05d      	b.n	80037b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7fd ff1d 	bl	8001534 <HAL_GetTick>
 80036fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003700:	f7fd ff18 	bl	8001534 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b64      	cmp	r3, #100	; 0x64
 800370e:	d902      	bls.n	8003716 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	f000 bee9 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>
 8003716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800371a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800372a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d102      	bne.n	8003748 <HAL_RCC_OscConfig+0x2cc>
 8003742:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	e015      	b.n	8003774 <HAL_RCC_OscConfig+0x2f8>
 8003748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800374c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800375c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003760:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003764:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_RCC_OscConfig+0x330>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003778:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800377c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003780:	fa92 f2a2 	rbit	r2, r2
 8003784:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003788:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f042 0220 	orr.w	r2, r2, #32
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f002 021f 	and.w	r2, r2, #31
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ab      	bne.n	8003700 <HAL_RCC_OscConfig+0x284>
 80037a8:	e003      	b.n	80037b2 <HAL_RCC_OscConfig+0x336>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 817d 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037c8:	4ba6      	ldr	r3, [pc, #664]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00b      	beq.n	80037ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037d4:	4ba3      	ldr	r3, [pc, #652]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d172      	bne.n	80038c6 <HAL_RCC_OscConfig+0x44a>
 80037e0:	4ba0      	ldr	r3, [pc, #640]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d16c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x44a>
 80037ec:	2302      	movs	r3, #2
 80037ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80037fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0x3a0>
 8003816:	4b93      	ldr	r3, [pc, #588]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e013      	b.n	8003844 <HAL_RCC_OscConfig+0x3c8>
 800381c:	2302      	movs	r3, #2
 800381e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800382e:	2302      	movs	r3, #2
 8003830:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003834:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003840:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2202      	movs	r2, #2
 8003846:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800384a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800384e:	fa92 f2a2 	rbit	r2, r2
 8003852:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003856:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	f042 0220 	orr.w	r2, r2, #32
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f002 021f 	and.w	r2, r2, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCC_OscConfig+0x410>
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d002      	beq.n	800388c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f000 be2e 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b75      	ldr	r3, [pc, #468]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	21f8      	movs	r1, #248	; 0xf8
 80038a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80038aa:	fa91 f1a1 	rbit	r1, r1
 80038ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80038b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80038b6:	fab1 f181 	clz	r1, r1
 80038ba:	b2c9      	uxtb	r1, r1
 80038bc:	408b      	lsls	r3, r1
 80038be:	4969      	ldr	r1, [pc, #420]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c4:	e0fd      	b.n	8003ac2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8088 	beq.w	80039e8 <HAL_RCC_OscConfig+0x56c>
 80038d8:	2301      	movs	r3, #1
 80038da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80038ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	461a      	mov	r2, r3
 8003900:	2301      	movs	r3, #1
 8003902:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fd fe16 	bl	8001534 <HAL_GetTick>
 8003908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390e:	f7fd fe11 	bl	8001534 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d902      	bls.n	8003924 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	f000 bde2 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>
 8003924:	2302      	movs	r3, #2
 8003926:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003936:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_RCC_OscConfig+0x4d8>
 800394e:	4b45      	ldr	r3, [pc, #276]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	e013      	b.n	800397c <HAL_RCC_OscConfig+0x500>
 8003954:	2302      	movs	r3, #2
 8003956:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003966:	2302      	movs	r3, #2
 8003968:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800396c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003978:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2202      	movs	r2, #2
 800397e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003982:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003986:	fa92 f2a2 	rbit	r2, r2
 800398a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800398e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003992:	fab2 f282 	clz	r2, r2
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	f042 0220 	orr.w	r2, r2, #32
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	f002 021f 	and.w	r2, r2, #31
 80039a2:	2101      	movs	r1, #1
 80039a4:	fa01 f202 	lsl.w	r2, r1, r2
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0af      	beq.n	800390e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	21f8      	movs	r1, #248	; 0xf8
 80039c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039cc:	fa91 f1a1 	rbit	r1, r1
 80039d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80039d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80039d8:	fab1 f181 	clz	r1, r1
 80039dc:	b2c9      	uxtb	r1, r1
 80039de:	408b      	lsls	r3, r1
 80039e0:	4920      	ldr	r1, [pc, #128]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
 80039e6:	e06c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x646>
 80039e8:	2301      	movs	r3, #1
 80039ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80039fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fd8e 	bl	8001534 <HAL_GetTick>
 8003a18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a1e:	f7fd fd89 	bl	8001534 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	f000 bd5a 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>
 8003a34:	2302      	movs	r3, #2
 8003a36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d104      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5ec>
 8003a5e:	4b01      	ldr	r3, [pc, #4]	; (8003a64 <HAL_RCC_OscConfig+0x5e8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	e015      	b.n	8003a90 <HAL_RCC_OscConfig+0x614>
 8003a64:	40021000 	.word	0x40021000
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a8c:	4bc8      	ldr	r3, [pc, #800]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2202      	movs	r2, #2
 8003a92:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a9a:	fa92 f2a2 	rbit	r2, r2
 8003a9e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003aa2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003aa6:	fab2 f282 	clz	r2, r2
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	f042 0220 	orr.w	r2, r2, #32
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	f002 021f 	and.w	r2, r2, #31
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ad      	bne.n	8003a1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8110 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d079      	beq.n	8003bdc <HAL_RCC_OscConfig+0x760>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	4bab      	ldr	r3, [pc, #684]	; (8003db4 <HAL_RCC_OscConfig+0x938>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2301      	movs	r3, #1
 8003b10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fd fd0f 	bl	8001534 <HAL_GetTick>
 8003b16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1c:	f7fd fd0a 	bl	8001534 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d902      	bls.n	8003b32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	f000 bcdb 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>
 8003b32:	2302      	movs	r3, #2
 8003b34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b70:	2202      	movs	r2, #2
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8c:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b98:	2102      	movs	r1, #2
 8003b9a:	6019      	str	r1, [r3, #0]
 8003b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	fa93 f1a3 	rbit	r1, r3
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bb2:	6019      	str	r1, [r3, #0]
  return result;
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0a0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x6a0>
 8003bda:	e08d      	b.n	8003cf8 <HAL_RCC_OscConfig+0x87c>
 8003bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bfe:	601a      	str	r2, [r3, #0]
  return result;
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x938>)
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fd fc89 	bl	8001534 <HAL_GetTick>
 8003c22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fd fc84 	bl	8001534 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d902      	bls.n	8003c3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	f000 bc55 	b.w	80044e8 <HAL_RCC_OscConfig+0x106c>
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c46:	2202      	movs	r2, #2
 8003c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	fa93 f2a3 	rbit	r2, r3
 8003c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c8e:	2202      	movs	r2, #2
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	fa93 f2a3 	rbit	r2, r3
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ca8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	6019      	str	r1, [r3, #0]
 8003cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	fa93 f1a3 	rbit	r1, r3
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cd0:	6019      	str	r1, [r3, #0]
  return result;
 8003cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d197      	bne.n	8003c28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 81a1 	beq.w	8004050 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d116      	bne.n	8003d4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d20:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	4a22      	ldr	r2, [pc, #136]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	61d3      	str	r3, [r2, #28]
 8003d2c:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d38:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d42:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_RCC_OscConfig+0x93c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <HAL_RCC_OscConfig+0x93c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <HAL_RCC_OscConfig+0x93c>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fd fbe5 	bl	8001534 <HAL_GetTick>
 8003d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6e:	e009      	b.n	8003d84 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fd fbe0 	bl	8001534 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b64      	cmp	r3, #100	; 0x64
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e3b1      	b.n	80044e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_OscConfig+0x93c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCC_OscConfig+0x940>
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4a02      	ldr	r2, [pc, #8]	; (8003db0 <HAL_RCC_OscConfig+0x934>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6213      	str	r3, [r2, #32]
 8003dac:	e03c      	b.n	8003e28 <HAL_RCC_OscConfig+0x9ac>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	10908120 	.word	0x10908120
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x96a>
 8003dcc:	4bc1      	ldr	r3, [pc, #772]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4ac0      	ldr	r2, [pc, #768]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	6213      	str	r3, [r2, #32]
 8003dd8:	4bbe      	ldr	r3, [pc, #760]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4abd      	ldr	r2, [pc, #756]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003dde:	f023 0304 	bic.w	r3, r3, #4
 8003de2:	6213      	str	r3, [r2, #32]
 8003de4:	e020      	b.n	8003e28 <HAL_RCC_OscConfig+0x9ac>
 8003de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x994>
 8003df6:	4bb7      	ldr	r3, [pc, #732]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4ab6      	ldr	r2, [pc, #728]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	6213      	str	r3, [r2, #32]
 8003e02:	4bb4      	ldr	r3, [pc, #720]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4ab3      	ldr	r2, [pc, #716]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6213      	str	r3, [r2, #32]
 8003e0e:	e00b      	b.n	8003e28 <HAL_RCC_OscConfig+0x9ac>
 8003e10:	4bb0      	ldr	r3, [pc, #704]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4aaf      	ldr	r2, [pc, #700]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	6213      	str	r3, [r2, #32]
 8003e1c:	4bad      	ldr	r3, [pc, #692]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	4aac      	ldr	r2, [pc, #688]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003e22:	f023 0304 	bic.w	r3, r3, #4
 8003e26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8081 	beq.w	8003f3c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3a:	f7fd fb7b 	bl	8001534 <HAL_GetTick>
 8003e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd fb76 	bl	8001534 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e345      	b.n	80044e8 <HAL_RCC_OscConfig+0x106c>
 8003e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e64:	2202      	movs	r2, #2
 8003e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f2a3 	rbit	r2, r3
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e88:	2202      	movs	r2, #2
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ea2:	601a      	str	r2, [r3, #0]
  return result;
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003eac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xa4c>
 8003ec2:	4b84      	ldr	r3, [pc, #528]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	e013      	b.n	8003ef0 <HAL_RCC_OscConfig+0xa74>
 8003ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ecc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	fa93 f2a3 	rbit	r2, r3
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	4b79      	ldr	r3, [pc, #484]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ef4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ef8:	2102      	movs	r1, #2
 8003efa:	6011      	str	r1, [r2, #0]
 8003efc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	fa92 f1a2 	rbit	r1, r2
 8003f0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f0e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f12:	6011      	str	r1, [r2, #0]
  return result;
 8003f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f18:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	fab2 f282 	clz	r2, r2
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	f002 021f 	and.w	r2, r2, #31
 8003f2e:	2101      	movs	r1, #1
 8003f30:	fa01 f202 	lsl.w	r2, r1, r2
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d084      	beq.n	8003e44 <HAL_RCC_OscConfig+0x9c8>
 8003f3a:	e07f      	b.n	800403c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3c:	f7fd fafa 	bl	8001534 <HAL_GetTick>
 8003f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f44:	e00b      	b.n	8003f5e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fd faf5 	bl	8001534 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e2c4      	b.n	80044e8 <HAL_RCC_OscConfig+0x106c>
 8003f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f66:	2202      	movs	r2, #2
 8003f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fa93 f2a3 	rbit	r2, r3
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fa4:	601a      	str	r2, [r3, #0]
  return result;
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d102      	bne.n	8003fca <HAL_RCC_OscConfig+0xb4e>
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	e013      	b.n	8003ff2 <HAL_RCC_OscConfig+0xb76>
 8003fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	fa93 f2a3 	rbit	r2, r3
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ff6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004002:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	fa92 f1a2 	rbit	r1, r2
 800400c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004010:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004014:	6011      	str	r1, [r2, #0]
  return result;
 8004016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800401a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	fab2 f282 	clz	r2, r2
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	f002 021f 	and.w	r2, r2, #31
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f202 	lsl.w	r2, r1, r2
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d184      	bne.n	8003f46 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800403c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800404e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8242 	beq.w	80044e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004062:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <HAL_RCC_OscConfig+0xc58>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b08      	cmp	r3, #8
 800406c:	f000 8213 	beq.w	8004496 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	2b02      	cmp	r3, #2
 800407e:	f040 8162 	bne.w	8004346 <HAL_RCC_OscConfig+0xeca>
 8004082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004086:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800408a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800408e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004094:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	fa93 f2a3 	rbit	r2, r3
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040a6:	601a      	str	r2, [r3, #0]
  return result;
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	461a      	mov	r2, r3
 80040c4:	2300      	movs	r3, #0
 80040c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fd fa34 	bl	8001534 <HAL_GetTick>
 80040cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d0:	e00c      	b.n	80040ec <HAL_RCC_OscConfig+0xc70>
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd fa2c 	bl	8001534 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1fd      	b.n	80044e8 <HAL_RCC_OscConfig+0x106c>
 80040ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80040f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	fa93 f2a3 	rbit	r2, r3
 8004108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004110:	601a      	str	r2, [r3, #0]
  return result;
 8004112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004116:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800411a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d102      	bne.n	8004136 <HAL_RCC_OscConfig+0xcba>
 8004130:	4bb0      	ldr	r3, [pc, #704]	; (80043f4 <HAL_RCC_OscConfig+0xf78>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	e027      	b.n	8004186 <HAL_RCC_OscConfig+0xd0a>
 8004136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800413e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004148:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	fa93 f2a3 	rbit	r2, r3
 8004152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004156:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004160:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	fa93 f2a3 	rbit	r2, r3
 8004178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	4b9c      	ldr	r3, [pc, #624]	; (80043f4 <HAL_RCC_OscConfig+0xf78>)
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800418a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800418e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004192:	6011      	str	r1, [r2, #0]
 8004194:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004198:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	fa92 f1a2 	rbit	r1, r2
 80041a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041aa:	6011      	str	r1, [r2, #0]
  return result;
 80041ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	fab2 f282 	clz	r2, r2
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	f042 0220 	orr.w	r2, r2, #32
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f002 021f 	and.w	r2, r2, #31
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f202 	lsl.w	r2, r1, r2
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d182      	bne.n	80040d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d2:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0xf78>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	430b      	orrs	r3, r1
 80041f4:	497f      	ldr	r1, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0xf78>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
 80041fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	fa93 f2a3 	rbit	r2, r3
 8004216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800421e:	601a      	str	r2, [r3, #0]
  return result;
 8004220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004224:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004228:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004234:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	461a      	mov	r2, r3
 800423c:	2301      	movs	r3, #1
 800423e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fd f978 	bl	8001534 <HAL_GetTick>
 8004244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004248:	e009      	b.n	800425e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424a:	f7fd f973 	bl	8001534 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e144      	b.n	80044e8 <HAL_RCC_OscConfig+0x106c>
 800425e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004262:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800426a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004270:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	fa93 f2a3 	rbit	r2, r3
 800427a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004282:	601a      	str	r2, [r3, #0]
  return result;
 8004284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004288:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800428c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d102      	bne.n	80042a8 <HAL_RCC_OscConfig+0xe2c>
 80042a2:	4b54      	ldr	r3, [pc, #336]	; (80043f4 <HAL_RCC_OscConfig+0xf78>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	e027      	b.n	80042f8 <HAL_RCC_OscConfig+0xe7c>
 80042a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	fa93 f2a3 	rbit	r2, r3
 80042c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80042d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	fa93 f2a3 	rbit	r2, r3
 80042ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <HAL_RCC_OscConfig+0xf78>)
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042fc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004304:	6011      	str	r1, [r2, #0]
 8004306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800430a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	fa92 f1a2 	rbit	r1, r2
 8004314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004318:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800431c:	6011      	str	r1, [r2, #0]
  return result;
 800431e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004322:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	fab2 f282 	clz	r2, r2
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	f042 0220 	orr.w	r2, r2, #32
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	f002 021f 	and.w	r2, r2, #31
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f202 	lsl.w	r2, r1, r2
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d082      	beq.n	800424a <HAL_RCC_OscConfig+0xdce>
 8004344:	e0cf      	b.n	80044e6 <HAL_RCC_OscConfig+0x106a>
 8004346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800434e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	fa93 f2a3 	rbit	r2, r3
 8004362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004366:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800436a:	601a      	str	r2, [r3, #0]
  return result;
 800436c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004370:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004374:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004380:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fd f8d2 	bl	8001534 <HAL_GetTick>
 8004390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004394:	e009      	b.n	80043aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004396:	f7fd f8cd 	bl	8001534 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e09e      	b.n	80044e8 <HAL_RCC_OscConfig+0x106c>
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043bc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	fa93 f2a3 	rbit	r2, r3
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80043ce:	601a      	str	r2, [r3, #0]
  return result;
 80043d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80043d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d104      	bne.n	80043f8 <HAL_RCC_OscConfig+0xf7c>
 80043ee:	4b01      	ldr	r3, [pc, #4]	; (80043f4 <HAL_RCC_OscConfig+0xf78>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	e029      	b.n	8004448 <HAL_RCC_OscConfig+0xfcc>
 80043f4:	40021000 	.word	0x40021000
 80043f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	fa93 f2a3 	rbit	r2, r3
 8004414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004418:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004430:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	fa93 f2a3 	rbit	r2, r3
 800443a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <HAL_RCC_OscConfig+0x1078>)
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800444c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004450:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004454:	6011      	str	r1, [r2, #0]
 8004456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800445a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	fa92 f1a2 	rbit	r1, r2
 8004464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004468:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800446c:	6011      	str	r1, [r2, #0]
  return result;
 800446e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004472:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	fab2 f282 	clz	r2, r2
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	f042 0220 	orr.w	r2, r2, #32
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	f002 021f 	and.w	r2, r2, #31
 8004488:	2101      	movs	r1, #1
 800448a:	fa01 f202 	lsl.w	r2, r1, r2
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d180      	bne.n	8004396 <HAL_RCC_OscConfig+0xf1a>
 8004494:	e027      	b.n	80044e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e01e      	b.n	80044e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <HAL_RCC_OscConfig+0x1078>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d10b      	bne.n	80044e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80044ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044de:	429a      	cmp	r2, r3
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000

080044f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b09e      	sub	sp, #120	; 0x78
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e162      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	4b90      	ldr	r3, [pc, #576]	; (8004754 <HAL_RCC_ClockConfig+0x25c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d910      	bls.n	8004540 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b8d      	ldr	r3, [pc, #564]	; (8004754 <HAL_RCC_ClockConfig+0x25c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 0207 	bic.w	r2, r3, #7
 8004526:	498b      	ldr	r1, [pc, #556]	; (8004754 <HAL_RCC_ClockConfig+0x25c>)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b89      	ldr	r3, [pc, #548]	; (8004754 <HAL_RCC_ClockConfig+0x25c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e14a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454c:	4b82      	ldr	r3, [pc, #520]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	497f      	ldr	r1, [pc, #508]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80dc 	beq.w	8004724 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d13c      	bne.n	80045ee <HAL_RCC_ClockConfig+0xf6>
 8004574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004578:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d102      	bne.n	800459e <HAL_RCC_ClockConfig+0xa6>
 8004598:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	e00f      	b.n	80045be <HAL_RCC_ClockConfig+0xc6>
 800459e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	667b      	str	r3, [r7, #100]	; 0x64
 80045ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045b0:	663b      	str	r3, [r7, #96]	; 0x60
 80045b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b4:	fa93 f3a3 	rbit	r3, r3
 80045b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80045c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045c6:	fa92 f2a2 	rbit	r2, r2
 80045ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80045cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045ce:	fab2 f282 	clz	r2, r2
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	f042 0220 	orr.w	r2, r2, #32
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	f002 021f 	and.w	r2, r2, #31
 80045de:	2101      	movs	r1, #1
 80045e0:	fa01 f202 	lsl.w	r2, r1, r2
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d17b      	bne.n	80046e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0f3      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d13c      	bne.n	8004670 <HAL_RCC_ClockConfig+0x178>
 80045f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d102      	bne.n	8004620 <HAL_RCC_ClockConfig+0x128>
 800461a:	4b4f      	ldr	r3, [pc, #316]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	e00f      	b.n	8004640 <HAL_RCC_ClockConfig+0x148>
 8004620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004628:	fa93 f3a3 	rbit	r3, r3
 800462c:	647b      	str	r3, [r7, #68]	; 0x44
 800462e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004632:	643b      	str	r3, [r7, #64]	; 0x40
 8004634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463c:	4b46      	ldr	r3, [pc, #280]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004644:	63ba      	str	r2, [r7, #56]	; 0x38
 8004646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004648:	fa92 f2a2 	rbit	r2, r2
 800464c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800464e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004650:	fab2 f282 	clz	r2, r2
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	f042 0220 	orr.w	r2, r2, #32
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	f002 021f 	and.w	r2, r2, #31
 8004660:	2101      	movs	r1, #1
 8004662:	fa01 f202 	lsl.w	r2, r1, r2
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d13a      	bne.n	80046e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0b2      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2de>
 8004670:	2302      	movs	r3, #2
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d102      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
 8004692:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	e00d      	b.n	80046b4 <HAL_RCC_ClockConfig+0x1bc>
 8004698:	2302      	movs	r3, #2
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
 80046a4:	2302      	movs	r3, #2
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	4b29      	ldr	r3, [pc, #164]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	2202      	movs	r2, #2
 80046b6:	61ba      	str	r2, [r7, #24]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	fa92 f2a2 	rbit	r2, r2
 80046be:	617a      	str	r2, [r7, #20]
  return result;
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	fab2 f282 	clz	r2, r2
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	f042 0220 	orr.w	r2, r2, #32
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f002 021f 	and.w	r2, r2, #31
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f202 	lsl.w	r2, r1, r2
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e079      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e2:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	491a      	ldr	r1, [pc, #104]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fc ff1e 	bl	8001534 <HAL_GetTick>
 80046f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fc ff1a 	bl	8001534 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e061      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_RCC_ClockConfig+0x260>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 020c 	and.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	429a      	cmp	r2, r3
 8004722:	d1eb      	bne.n	80046fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_ClockConfig+0x25c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d214      	bcs.n	800475c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCC_ClockConfig+0x25c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 0207 	bic.w	r2, r3, #7
 800473a:	4906      	ldr	r1, [pc, #24]	; (8004754 <HAL_RCC_ClockConfig+0x25c>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <HAL_RCC_ClockConfig+0x25c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d005      	beq.n	800475c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e040      	b.n	80047d6 <HAL_RCC_ClockConfig+0x2de>
 8004754:	40022000 	.word	0x40022000
 8004758:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004768:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_RCC_ClockConfig+0x2e8>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	491a      	ldr	r1, [pc, #104]	; (80047e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004786:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4912      	ldr	r1, [pc, #72]	; (80047e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800479a:	f000 f829 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 800479e:	4601      	mov	r1, r0
 80047a0:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <HAL_RCC_ClockConfig+0x2e8>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a8:	22f0      	movs	r2, #240	; 0xf0
 80047aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	fa92 f2a2 	rbit	r2, r2
 80047b2:	60fa      	str	r2, [r7, #12]
  return result;
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	fab2 f282 	clz	r2, r2
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	40d3      	lsrs	r3, r2
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <HAL_RCC_ClockConfig+0x2ec>)
 80047c0:	5cd3      	ldrb	r3, [r2, r3]
 80047c2:	fa21 f303 	lsr.w	r3, r1, r3
 80047c6:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <HAL_RCC_ClockConfig+0x2f0>)
 80047c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCC_ClockConfig+0x2f4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fc fe6c 	bl	80014ac <HAL_InitTick>
  
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3778      	adds	r7, #120	; 0x78
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000
 80047e4:	08008b38 	.word	0x08008b38
 80047e8:	20000360 	.word	0x20000360
 80047ec:	20000364 	.word	0x20000364

080047f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b08b      	sub	sp, #44	; 0x2c
 80047f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	2300      	movs	r3, #0
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800480a:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b04      	cmp	r3, #4
 8004818:	d002      	beq.n	8004820 <HAL_RCC_GetSysClockFreq+0x30>
 800481a:	2b08      	cmp	r3, #8
 800481c:	d003      	beq.n	8004826 <HAL_RCC_GetSysClockFreq+0x36>
 800481e:	e03c      	b.n	800489a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004820:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004822:	623b      	str	r3, [r7, #32]
      break;
 8004824:	e03c      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800482c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004830:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	fa92 f2a2 	rbit	r2, r2
 8004838:	607a      	str	r2, [r7, #4]
  return result;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	fab2 f282 	clz	r2, r2
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	40d3      	lsrs	r3, r2
 8004844:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004846:	5cd3      	ldrb	r3, [r2, r3]
 8004848:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	220f      	movs	r2, #15
 8004854:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	fa92 f2a2 	rbit	r2, r2
 800485c:	60fa      	str	r2, [r7, #12]
  return result;
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	fab2 f282 	clz	r2, r2
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	40d3      	lsrs	r3, r2
 8004868:	4a14      	ldr	r2, [pc, #80]	; (80048bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004878:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
 8004888:	e004      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	623b      	str	r3, [r7, #32]
      break;
 8004898:	e002      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800489c:	623b      	str	r3, [r7, #32]
      break;
 800489e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048a0:	6a3b      	ldr	r3, [r7, #32]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	372c      	adds	r7, #44	; 0x2c
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	007a1200 	.word	0x007a1200
 80048b8:	08008b50 	.word	0x08008b50
 80048bc:	08008b60 	.word	0x08008b60
 80048c0:	003d0900 	.word	0x003d0900

080048c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000360 	.word	0x20000360

080048dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80048e2:	f7ff ffef 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 80048e6:	4601      	mov	r1, r0
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	fa92 f2a2 	rbit	r2, r2
 80048fc:	603a      	str	r2, [r7, #0]
  return result;
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	fab2 f282 	clz	r2, r2
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	40d3      	lsrs	r3, r2
 8004908:	4a04      	ldr	r2, [pc, #16]	; (800491c <HAL_RCC_GetPCLK1Freq+0x40>)
 800490a:	5cd3      	ldrb	r3, [r2, r3]
 800490c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	08008b48 	.word	0x08008b48

08004920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004926:	f7ff ffcd 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 800492a:	4601      	mov	r1, r0
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004934:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004938:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	fa92 f2a2 	rbit	r2, r2
 8004940:	603a      	str	r2, [r7, #0]
  return result;
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	fab2 f282 	clz	r2, r2
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	40d3      	lsrs	r3, r2
 800494c:	4a04      	ldr	r2, [pc, #16]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x40>)
 800494e:	5cd3      	ldrb	r3, [r2, r3]
 8004950:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	08008b48 	.word	0x08008b48

08004964 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b092      	sub	sp, #72	; 0x48
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004974:	2300      	movs	r3, #0
 8004976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80d4 	beq.w	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004988:	4b4e      	ldr	r3, [pc, #312]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10e      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004994:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	4a4a      	ldr	r2, [pc, #296]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	61d3      	str	r3, [r2, #28]
 80049a0:	4b48      	ldr	r3, [pc, #288]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b45      	ldr	r3, [pc, #276]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b42      	ldr	r3, [pc, #264]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a41      	ldr	r2, [pc, #260]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7fc fdb3 	bl	8001534 <HAL_GetTick>
 80049ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e008      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d2:	f7fc fdaf 	bl	8001534 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b64      	cmp	r3, #100	; 0x64
 80049de:	d901      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e14b      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	4b38      	ldr	r3, [pc, #224]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049f0:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8084 	beq.w	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d07c      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a10:	4b2c      	ldr	r3, [pc, #176]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b26      	ldr	r3, [pc, #152]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	fa93 f3a3 	rbit	r3, r3
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04b      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fc fd5f 	bl	8001534 <HAL_GetTick>
 8004a76:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fc fd5b 	bl	8001534 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e0f5      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004a90:	2302      	movs	r3, #2
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	fa93 f3a3 	rbit	r3, r3
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	61fb      	str	r3, [r7, #28]
  return result;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d108      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004abe:	4b01      	ldr	r3, [pc, #4]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	e00d      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	10908100 	.word	0x10908100
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	4b69      	ldr	r3, [pc, #420]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	613a      	str	r2, [r7, #16]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	fa92 f2a2 	rbit	r2, r2
 8004aea:	60fa      	str	r2, [r7, #12]
  return result;
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	fab2 f282 	clz	r2, r2
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	f002 021f 	and.w	r2, r2, #31
 8004afe:	2101      	movs	r1, #1
 8004b00:	fa01 f202 	lsl.w	r2, r1, r2
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0b7      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b0a:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	495b      	ldr	r1, [pc, #364]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d105      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b24:	4b57      	ldr	r3, [pc, #348]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4a56      	ldr	r2, [pc, #344]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b3c:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	f023 0203 	bic.w	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	494e      	ldr	r1, [pc, #312]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d008      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b5a:	4b4a      	ldr	r3, [pc, #296]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f023 0210 	bic.w	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4947      	ldr	r1, [pc, #284]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	493f      	ldr	r1, [pc, #252]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b96:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f023 0220 	bic.w	r2, r3, #32
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	4938      	ldr	r1, [pc, #224]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb4:	4b33      	ldr	r3, [pc, #204]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	4930      	ldr	r1, [pc, #192]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	4929      	ldr	r1, [pc, #164]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004bf0:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4921      	ldr	r1, [pc, #132]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	491a      	ldr	r1, [pc, #104]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c2c:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	4912      	ldr	r1, [pc, #72]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	490b      	ldr	r1, [pc, #44]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4903      	ldr	r1, [pc, #12]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3748      	adds	r7, #72	; 0x48
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e049      	b.n	8004d2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fa28 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fd26 	bl	8005718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d001      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e03b      	b.n	8004dc8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_TIM_Base_Start_IT+0x4e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d004      	beq.n	8004d86 <HAL_TIM_Base_Start_IT+0x4e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d115      	bne.n	8004db2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <HAL_TIM_Base_Start_IT+0xa4>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b06      	cmp	r3, #6
 8004d96:	d015      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x8c>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9e:	d011      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db0:	e008      	b.n	8004dc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e000      	b.n	8004dc6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	00010007 	.word	0x00010007

08004de0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <HAL_TIM_Base_Stop_IT+0x48>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	f240 4344 	movw	r3, #1092	; 0x444
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_Base_Stop_IT+0x48>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e049      	b.n	8004ee4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f841 	bl	8004eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f000 fc4b 	bl	8005718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d109      	bne.n	8004f24 <HAL_TIM_PWM_Start+0x24>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e03c      	b.n	8004f9e <HAL_TIM_PWM_Start+0x9e>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d109      	bne.n	8004f3e <HAL_TIM_PWM_Start+0x3e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	bf14      	ite	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	2300      	moveq	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	e02f      	b.n	8004f9e <HAL_TIM_PWM_Start+0x9e>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d109      	bne.n	8004f58 <HAL_TIM_PWM_Start+0x58>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	e022      	b.n	8004f9e <HAL_TIM_PWM_Start+0x9e>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b0c      	cmp	r3, #12
 8004f5c:	d109      	bne.n	8004f72 <HAL_TIM_PWM_Start+0x72>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	bf14      	ite	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	e015      	b.n	8004f9e <HAL_TIM_PWM_Start+0x9e>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d109      	bne.n	8004f8c <HAL_TIM_PWM_Start+0x8c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e008      	b.n	8004f9e <HAL_TIM_PWM_Start+0x9e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	bf14      	ite	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	2300      	moveq	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e083      	b.n	80050ae <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0xb6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb4:	e023      	b.n	8004ffe <HAL_TIM_PWM_Start+0xfe>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0xc6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc4:	e01b      	b.n	8004ffe <HAL_TIM_PWM_Start+0xfe>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0xd6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd4:	e013      	b.n	8004ffe <HAL_TIM_PWM_Start+0xfe>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d104      	bne.n	8004fe6 <HAL_TIM_PWM_Start+0xe6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fe4:	e00b      	b.n	8004ffe <HAL_TIM_PWM_Start+0xfe>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0xf6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff4:	e003      	b.n	8004ffe <HAL_TIM_PWM_Start+0xfe>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2201      	movs	r2, #1
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 ff34 	bl	8005e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <HAL_TIM_PWM_Start+0x1b8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00e      	beq.n	8005034 <HAL_TIM_PWM_Start+0x134>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a28      	ldr	r2, [pc, #160]	; (80050bc <HAL_TIM_PWM_Start+0x1bc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d009      	beq.n	8005034 <HAL_TIM_PWM_Start+0x134>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a26      	ldr	r2, [pc, #152]	; (80050c0 <HAL_TIM_PWM_Start+0x1c0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_TIM_PWM_Start+0x134>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a25      	ldr	r2, [pc, #148]	; (80050c4 <HAL_TIM_PWM_Start+0x1c4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_TIM_PWM_Start+0x138>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_TIM_PWM_Start+0x13a>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800504c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <HAL_TIM_PWM_Start+0x1b8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d009      	beq.n	800506c <HAL_TIM_PWM_Start+0x16c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d004      	beq.n	800506c <HAL_TIM_PWM_Start+0x16c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <HAL_TIM_PWM_Start+0x1bc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d115      	bne.n	8005098 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_TIM_PWM_Start+0x1c8>)
 8005074:	4013      	ands	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b06      	cmp	r3, #6
 800507c:	d015      	beq.n	80050aa <HAL_TIM_PWM_Start+0x1aa>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005084:	d011      	beq.n	80050aa <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0201 	orr.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005096:	e008      	b.n	80050aa <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e000      	b.n	80050ac <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	00010007 	.word	0x00010007

080050cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d122      	bne.n	8005128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0202 	mvn.w	r2, #2
 80050f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fae3 	bl	80056da <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fad5 	bl	80056c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fae6 	bl	80056ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d122      	bne.n	800517c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b04      	cmp	r3, #4
 8005142:	d11b      	bne.n	800517c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0204 	mvn.w	r2, #4
 800514c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fab9 	bl	80056da <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 faab 	bl	80056c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fabc 	bl	80056ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b08      	cmp	r3, #8
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b08      	cmp	r3, #8
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0208 	mvn.w	r2, #8
 80051a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2204      	movs	r2, #4
 80051a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa8f 	bl	80056da <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa81 	bl	80056c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fa92 	bl	80056ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d122      	bne.n	8005224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d11b      	bne.n	8005224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0210 	mvn.w	r2, #16
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2208      	movs	r2, #8
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa65 	bl	80056da <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa57 	bl	80056c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa68 	bl	80056ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0201 	mvn.w	r2, #1
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fb fb70 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d10e      	bne.n	800527c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	2b80      	cmp	r3, #128	; 0x80
 800526a:	d107      	bne.n	800527c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 ff0a 	bl	8006090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528a:	d10e      	bne.n	80052aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d107      	bne.n	80052aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fefd 	bl	80060a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d10e      	bne.n	80052d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d107      	bne.n	80052d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fa16 	bl	8005702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d10e      	bne.n	8005302 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d107      	bne.n	8005302 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f06f 0220 	mvn.w	r2, #32
 80052fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 febd 	bl	800607c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005326:	2302      	movs	r3, #2
 8005328:	e0ff      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b14      	cmp	r3, #20
 8005336:	f200 80f0 	bhi.w	800551a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005395 	.word	0x08005395
 8005344:	0800551b 	.word	0x0800551b
 8005348:	0800551b 	.word	0x0800551b
 800534c:	0800551b 	.word	0x0800551b
 8005350:	080053d5 	.word	0x080053d5
 8005354:	0800551b 	.word	0x0800551b
 8005358:	0800551b 	.word	0x0800551b
 800535c:	0800551b 	.word	0x0800551b
 8005360:	08005417 	.word	0x08005417
 8005364:	0800551b 	.word	0x0800551b
 8005368:	0800551b 	.word	0x0800551b
 800536c:	0800551b 	.word	0x0800551b
 8005370:	08005457 	.word	0x08005457
 8005374:	0800551b 	.word	0x0800551b
 8005378:	0800551b 	.word	0x0800551b
 800537c:	0800551b 	.word	0x0800551b
 8005380:	08005499 	.word	0x08005499
 8005384:	0800551b 	.word	0x0800551b
 8005388:	0800551b 	.word	0x0800551b
 800538c:	0800551b 	.word	0x0800551b
 8005390:	080054d9 	.word	0x080054d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fa2a 	bl	80057f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	619a      	str	r2, [r3, #24]
      break;
 80053d2:	e0a5      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fa90 	bl	8005900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6999      	ldr	r1, [r3, #24]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	619a      	str	r2, [r3, #24]
      break;
 8005414:	e084      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 faef 	bl	8005a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0208 	orr.w	r2, r2, #8
 8005430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0204 	bic.w	r2, r2, #4
 8005440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69d9      	ldr	r1, [r3, #28]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	61da      	str	r2, [r3, #28]
      break;
 8005454:	e064      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fb4d 	bl	8005afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69d9      	ldr	r1, [r3, #28]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	021a      	lsls	r2, r3, #8
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	61da      	str	r2, [r3, #28]
      break;
 8005496:	e043      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fb90 	bl	8005bc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054d6:	e023      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fbce 	bl	8005c80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005502:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005518:	e002      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
      break;
 800551e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_TIM_ConfigClockSource+0x1c>
 800554c:	2302      	movs	r3, #2
 800554e:	e0b6      	b.n	80056be <HAL_TIM_ConfigClockSource+0x18a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558c:	d03e      	beq.n	800560c <HAL_TIM_ConfigClockSource+0xd8>
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005592:	f200 8087 	bhi.w	80056a4 <HAL_TIM_ConfigClockSource+0x170>
 8005596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559a:	f000 8086 	beq.w	80056aa <HAL_TIM_ConfigClockSource+0x176>
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a2:	d87f      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x170>
 80055a4:	2b70      	cmp	r3, #112	; 0x70
 80055a6:	d01a      	beq.n	80055de <HAL_TIM_ConfigClockSource+0xaa>
 80055a8:	2b70      	cmp	r3, #112	; 0x70
 80055aa:	d87b      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x170>
 80055ac:	2b60      	cmp	r3, #96	; 0x60
 80055ae:	d050      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x11e>
 80055b0:	2b60      	cmp	r3, #96	; 0x60
 80055b2:	d877      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x170>
 80055b4:	2b50      	cmp	r3, #80	; 0x50
 80055b6:	d03c      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0xfe>
 80055b8:	2b50      	cmp	r3, #80	; 0x50
 80055ba:	d873      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x170>
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d058      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x13e>
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d86f      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x170>
 80055c4:	2b30      	cmp	r3, #48	; 0x30
 80055c6:	d064      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15e>
 80055c8:	2b30      	cmp	r3, #48	; 0x30
 80055ca:	d86b      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x170>
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d060      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15e>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d867      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x170>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d05c      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15e>
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d05a      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15e>
 80055dc:	e062      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ee:	f000 fc21 	bl	8005e34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	609a      	str	r2, [r3, #8]
      break;
 800560a:	e04f      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	f000 fc0a 	bl	8005e34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562e:	609a      	str	r2, [r3, #8]
      break;
 8005630:	e03c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	461a      	mov	r2, r3
 8005640:	f000 fb7e 	bl	8005d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2150      	movs	r1, #80	; 0x50
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fbd7 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005650:	e02c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800565e:	461a      	mov	r2, r3
 8005660:	f000 fb9d 	bl	8005d9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2160      	movs	r1, #96	; 0x60
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fbc7 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005670:	e01c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	461a      	mov	r2, r3
 8005680:	f000 fb5e 	bl	8005d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2140      	movs	r1, #64	; 0x40
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fbb7 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005690:	e00c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 fbae 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 80056a2:	e003      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
      break;
 80056a8:	e000      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80056aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a2e      	ldr	r2, [pc, #184]	; (80057e4 <TIM_Base_SetConfig+0xcc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0x20>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005736:	d108      	bne.n	800574a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <TIM_Base_SetConfig+0xcc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x5a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x5a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <TIM_Base_SetConfig+0xd0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x5a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a21      	ldr	r2, [pc, #132]	; (80057ec <TIM_Base_SetConfig+0xd4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x5a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <TIM_Base_SetConfig+0xd8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0e      	ldr	r2, [pc, #56]	; (80057e4 <TIM_Base_SetConfig+0xcc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <TIM_Base_SetConfig+0xb0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <TIM_Base_SetConfig+0xd0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_Base_SetConfig+0xb0>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a0c      	ldr	r2, [pc, #48]	; (80057ec <TIM_Base_SetConfig+0xd4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_Base_SetConfig+0xb0>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a0b      	ldr	r2, [pc, #44]	; (80057f0 <TIM_Base_SetConfig+0xd8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d103      	bne.n	80057d0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	615a      	str	r2, [r3, #20]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f023 0302 	bic.w	r3, r3, #2
 8005840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <TIM_OC1_SetConfig+0xfc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00b      	beq.n	800586c <TIM_OC1_SetConfig+0x78>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a27      	ldr	r2, [pc, #156]	; (80058f4 <TIM_OC1_SetConfig+0x100>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_OC1_SetConfig+0x78>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <TIM_OC1_SetConfig+0x104>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC1_SetConfig+0x78>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a25      	ldr	r2, [pc, #148]	; (80058fc <TIM_OC1_SetConfig+0x108>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10c      	bne.n	8005886 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f023 0308 	bic.w	r3, r3, #8
 8005872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f023 0304 	bic.w	r3, r3, #4
 8005884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <TIM_OC1_SetConfig+0xfc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_OC1_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <TIM_OC1_SetConfig+0x100>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_OC1_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <TIM_OC1_SetConfig+0x104>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC1_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a16      	ldr	r2, [pc, #88]	; (80058fc <TIM_OC1_SetConfig+0x108>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d111      	bne.n	80058ca <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	621a      	str	r2, [r3, #32]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0210 	bic.w	r2, r3, #16
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0320 	bic.w	r3, r3, #32
 800594e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a24      	ldr	r2, [pc, #144]	; (80059f0 <TIM_OC2_SetConfig+0xf0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10d      	bne.n	8005980 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <TIM_OC2_SetConfig+0xf0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00b      	beq.n	80059a0 <TIM_OC2_SetConfig+0xa0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1a      	ldr	r2, [pc, #104]	; (80059f4 <TIM_OC2_SetConfig+0xf4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <TIM_OC2_SetConfig+0xa0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <TIM_OC2_SetConfig+0xf8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC2_SetConfig+0xa0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <TIM_OC2_SetConfig+0xfc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d113      	bne.n	80059c8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	621a      	str	r2, [r3, #32]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800

08005a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a23      	ldr	r2, [pc, #140]	; (8005aec <TIM_OC3_SetConfig+0xec>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d10d      	bne.n	8005a7e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a7c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <TIM_OC3_SetConfig+0xec>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_OC3_SetConfig+0x9e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <TIM_OC3_SetConfig+0xf0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_OC3_SetConfig+0x9e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <TIM_OC3_SetConfig+0xf4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC3_SetConfig+0x9e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <TIM_OC3_SetConfig+0xf8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d113      	bne.n	8005ac6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	031b      	lsls	r3, r3, #12
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <TIM_OC4_SetConfig+0xb8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_OC4_SetConfig+0x7c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <TIM_OC4_SetConfig+0xbc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_OC4_SetConfig+0x7c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <TIM_OC4_SetConfig+0xc0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC4_SetConfig+0x7c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <TIM_OC4_SetConfig+0xc4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d109      	bne.n	8005b8c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	019b      	lsls	r3, r3, #6
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800

08005bc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	041b      	lsls	r3, r3, #16
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <TIM_OC5_SetConfig+0xac>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <TIM_OC5_SetConfig+0x72>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a14      	ldr	r2, [pc, #80]	; (8005c74 <TIM_OC5_SetConfig+0xb0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d007      	beq.n	8005c36 <TIM_OC5_SetConfig+0x72>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a13      	ldr	r2, [pc, #76]	; (8005c78 <TIM_OC5_SetConfig+0xb4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_OC5_SetConfig+0x72>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a12      	ldr	r2, [pc, #72]	; (8005c7c <TIM_OC5_SetConfig+0xb8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d109      	bne.n	8005c4a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	621a      	str	r2, [r3, #32]
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40014000 	.word	0x40014000
 8005c78:	40014400 	.word	0x40014400
 8005c7c:	40014800 	.word	0x40014800

08005c80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	051b      	lsls	r3, r3, #20
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <TIM_OC6_SetConfig+0xb0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00b      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x74>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a15      	ldr	r2, [pc, #84]	; (8005d34 <TIM_OC6_SetConfig+0xb4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x74>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <TIM_OC6_SetConfig+0xb8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x74>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <TIM_OC6_SetConfig+0xbc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d109      	bne.n	8005d08 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	029b      	lsls	r3, r3, #10
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800

08005d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0201 	bic.w	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 030a 	bic.w	r3, r3, #10
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0210 	bic.w	r2, r3, #16
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	031b      	lsls	r3, r3, #12
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f043 0307 	orr.w	r3, r3, #7
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	021a      	lsls	r2, r3, #8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2201      	movs	r2, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	401a      	ands	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1a      	ldr	r2, [r3, #32]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e04f      	b.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d108      	bne.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f40:	d004      	beq.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10c      	bne.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40014000 	.word	0x40014000

08005f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e060      	b.n	800606a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a14      	ldr	r2, [pc, #80]	; (8006078 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d115      	bne.n	8006058 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	051b      	lsls	r3, r3, #20
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40012c00 	.word	0x40012c00

0800607c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e040      	b.n	800614c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fb f882 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	; 0x24
 80060e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fc00 	bl	80068fc <UART_SetConfig>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e022      	b.n	800614c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fd2a 	bl	8006b68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fdb1 	bl	8006cac <UART_CheckIdleState>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006168:	2b20      	cmp	r3, #32
 800616a:	d178      	bne.n	800625e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_UART_Transmit+0x24>
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e071      	b.n	8006260 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2221      	movs	r2, #33	; 0x21
 8006188:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800618a:	f7fb f9d3 	bl	8001534 <HAL_GetTick>
 800618e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	88fa      	ldrh	r2, [r7, #6]
 800619c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a8:	d108      	bne.n	80061bc <HAL_UART_Transmit+0x68>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	e003      	b.n	80061c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061c4:	e030      	b.n	8006228 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2200      	movs	r2, #0
 80061ce:	2180      	movs	r1, #128	; 0x80
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fe13 	bl	8006dfc <UART_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e03c      	b.n	8006260 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10b      	bne.n	8006204 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	881a      	ldrh	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f8:	b292      	uxth	r2, r2
 80061fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	3302      	adds	r3, #2
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	e008      	b.n	8006216 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	781a      	ldrb	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	b292      	uxth	r2, r2
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	3301      	adds	r3, #1
 8006214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1c8      	bne.n	80061c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2200      	movs	r2, #0
 800623c:	2140      	movs	r1, #64	; 0x40
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fddc 	bl	8006dfc <UART_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e005      	b.n	8006260 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e000      	b.n	8006260 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800625e:	2302      	movs	r3, #2
  }
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	; 0x28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800627c:	2b20      	cmp	r3, #32
 800627e:	d132      	bne.n	80062e6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_UART_Receive_IT+0x24>
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e02b      	b.n	80062e8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d018      	beq.n	80062d6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	613b      	str	r3, [r7, #16]
   return(result);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	69f9      	ldr	r1, [r7, #28]
 80062c8:	6a3a      	ldr	r2, [r7, #32]
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e6      	bne.n	80062a4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	461a      	mov	r2, r3
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fdf5 	bl	8006ecc <UART_Start_Receive_IT>
 80062e2:	4603      	mov	r3, r0
 80062e4:	e000      	b.n	80062e8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
  }
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3728      	adds	r7, #40	; 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b0ba      	sub	sp, #232	; 0xe8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006316:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800631a:	f640 030f 	movw	r3, #2063	; 0x80f
 800631e:	4013      	ands	r3, r2
 8006320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d115      	bne.n	8006358 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00f      	beq.n	8006358 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 82ab 	beq.w	80068a4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
      }
      return;
 8006356:	e2a5      	b.n	80068a4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8117 	beq.w	8006590 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800636e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006372:	4b85      	ldr	r3, [pc, #532]	; (8006588 <HAL_UART_IRQHandler+0x298>)
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 810a 	beq.w	8006590 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d011      	beq.n	80063ac <HAL_UART_IRQHandler+0xbc>
 8006388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2201      	movs	r2, #1
 800639a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a2:	f043 0201 	orr.w	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_UART_IRQHandler+0xec>
 80063b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2202      	movs	r2, #2
 80063ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d2:	f043 0204 	orr.w	r2, r3, #4
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <HAL_UART_IRQHandler+0x11c>
 80063e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2204      	movs	r2, #4
 80063fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006402:	f043 0202 	orr.w	r2, r3, #2
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d017      	beq.n	8006448 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006428:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2208      	movs	r2, #8
 8006436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643e:	f043 0208 	orr.w	r2, r3, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006450:	2b00      	cmp	r3, #0
 8006452:	d012      	beq.n	800647a <HAL_UART_IRQHandler+0x18a>
 8006454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8211 	beq.w	80068a8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b40      	cmp	r3, #64	; 0x40
 80064c4:	d005      	beq.n	80064d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d04f      	beq.n	8006572 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fdc0 	bl	8007058 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d141      	bne.n	800656a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006512:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800651e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800652a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1d9      	bne.n	80064e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006536:	2b00      	cmp	r3, #0
 8006538:	d013      	beq.n	8006562 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <HAL_UART_IRQHandler+0x29c>)
 8006540:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006546:	4618      	mov	r0, r3
 8006548:	f7fc f81c 	bl	8002584 <HAL_DMA_Abort_IT>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d017      	beq.n	8006582 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800655c:	4610      	mov	r0, r2
 800655e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006560:	e00f      	b.n	8006582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f9b4 	bl	80068d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	e00b      	b.n	8006582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9b0 	bl	80068d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	e007      	b.n	8006582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f9ac 	bl	80068d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006580:	e192      	b.n	80068a8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006582:	bf00      	nop
    return;
 8006584:	e190      	b.n	80068a8 <HAL_UART_IRQHandler+0x5b8>
 8006586:	bf00      	nop
 8006588:	04000120 	.word	0x04000120
 800658c:	08007121 	.word	0x08007121

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006594:	2b01      	cmp	r3, #1
 8006596:	f040 814b 	bne.w	8006830 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8144 	beq.w	8006830 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 813d 	beq.w	8006830 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2210      	movs	r2, #16
 80065bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c8:	2b40      	cmp	r3, #64	; 0x40
 80065ca:	f040 80b5 	bne.w	8006738 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 8164 	beq.w	80068ac <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065ee:	429a      	cmp	r2, r3
 80065f0:	f080 815c 	bcs.w	80068ac <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b20      	cmp	r3, #32
 8006606:	f000 8086 	beq.w	8006716 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800661e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006626:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006638:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006640:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800664c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1da      	bne.n	800660a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3308      	adds	r3, #8
 8006674:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006678:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800667c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006680:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800668a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e1      	bne.n	8006654 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3308      	adds	r3, #8
 8006696:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e3      	bne.n	8006690 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80066fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e4      	bne.n	80066d6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006710:	4618      	mov	r0, r3
 8006712:	f7fb fefe 	bl	8002512 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006728:	b29b      	uxth	r3, r3
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	b29b      	uxth	r3, r3
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f8d7 	bl	80068e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006736:	e0b9      	b.n	80068ac <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006744:	b29b      	uxth	r3, r3
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80ab 	beq.w	80068b0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800675a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 80a6 	beq.w	80068b0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006786:	647b      	str	r3, [r7, #68]	; 0x44
 8006788:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800678c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e4      	bne.n	8006764 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	623b      	str	r3, [r7, #32]
   return(result);
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3308      	adds	r3, #8
 80067ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067be:	633a      	str	r2, [r7, #48]	; 0x30
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e3      	bne.n	800679a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0310 	bic.w	r3, r3, #16
 80067fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	69b9      	ldr	r1, [r7, #24]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	617b      	str	r3, [r7, #20]
   return(result);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e4      	bne.n	80067e6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006822:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f85b 	bl	80068e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800682e:	e03f      	b.n	80068b0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00e      	beq.n	800685a <HAL_UART_IRQHandler+0x56a>
 800683c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fe4c 	bl	80074f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006858:	e02d      	b.n	80068b6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00e      	beq.n	8006884 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686e:	2b00      	cmp	r3, #0
 8006870:	d008      	beq.n	8006884 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01c      	beq.n	80068b4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	4798      	blx	r3
    }
    return;
 8006882:	e017      	b.n	80068b4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <HAL_UART_IRQHandler+0x5c6>
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00c      	beq.n	80068b6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fc55 	bl	800714c <UART_EndTransmit_IT>
    return;
 80068a2:	e008      	b.n	80068b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80068a4:	bf00      	nop
 80068a6:	e006      	b.n	80068b6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80068a8:	bf00      	nop
 80068aa:	e004      	b.n	80068b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80068ac:	bf00      	nop
 80068ae:	e002      	b.n	80068b6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80068b0:	bf00      	nop
 80068b2:	e000      	b.n	80068b6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80068b4:	bf00      	nop
  }

}
 80068b6:	37e8      	adds	r7, #232	; 0xe8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b8a      	ldr	r3, [pc, #552]	; (8006b50 <UART_SetConfig+0x254>)
 8006928:	4013      	ands	r3, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	430b      	orrs	r3, r1
 8006932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	430a      	orrs	r2, r1
 800696c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a78      	ldr	r2, [pc, #480]	; (8006b54 <UART_SetConfig+0x258>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d120      	bne.n	80069ba <UART_SetConfig+0xbe>
 8006978:	4b77      	ldr	r3, [pc, #476]	; (8006b58 <UART_SetConfig+0x25c>)
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b03      	cmp	r3, #3
 8006982:	d817      	bhi.n	80069b4 <UART_SetConfig+0xb8>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x90>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069a9 	.word	0x080069a9
 8006994:	080069af 	.word	0x080069af
 8006998:	080069a3 	.word	0x080069a3
 800699c:	2300      	movs	r3, #0
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e01d      	b.n	80069de <UART_SetConfig+0xe2>
 80069a2:	2302      	movs	r3, #2
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e01a      	b.n	80069de <UART_SetConfig+0xe2>
 80069a8:	2304      	movs	r3, #4
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e017      	b.n	80069de <UART_SetConfig+0xe2>
 80069ae:	2308      	movs	r3, #8
 80069b0:	77fb      	strb	r3, [r7, #31]
 80069b2:	e014      	b.n	80069de <UART_SetConfig+0xe2>
 80069b4:	2310      	movs	r3, #16
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	e011      	b.n	80069de <UART_SetConfig+0xe2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a67      	ldr	r2, [pc, #412]	; (8006b5c <UART_SetConfig+0x260>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d102      	bne.n	80069ca <UART_SetConfig+0xce>
 80069c4:	2300      	movs	r3, #0
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e009      	b.n	80069de <UART_SetConfig+0xe2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a64      	ldr	r2, [pc, #400]	; (8006b60 <UART_SetConfig+0x264>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d102      	bne.n	80069da <UART_SetConfig+0xde>
 80069d4:	2300      	movs	r3, #0
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e001      	b.n	80069de <UART_SetConfig+0xe2>
 80069da:	2310      	movs	r3, #16
 80069dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e6:	d15a      	bne.n	8006a9e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80069e8:	7ffb      	ldrb	r3, [r7, #31]
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d827      	bhi.n	8006a3e <UART_SetConfig+0x142>
 80069ee:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <UART_SetConfig+0xf8>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a21 	.word	0x08006a21
 80069fc:	08006a29 	.word	0x08006a29
 8006a00:	08006a3f 	.word	0x08006a3f
 8006a04:	08006a2f 	.word	0x08006a2f
 8006a08:	08006a3f 	.word	0x08006a3f
 8006a0c:	08006a3f 	.word	0x08006a3f
 8006a10:	08006a3f 	.word	0x08006a3f
 8006a14:	08006a37 	.word	0x08006a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a18:	f7fd ff60 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8006a1c:	61b8      	str	r0, [r7, #24]
        break;
 8006a1e:	e013      	b.n	8006a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a20:	f7fd ff7e 	bl	8004920 <HAL_RCC_GetPCLK2Freq>
 8006a24:	61b8      	str	r0, [r7, #24]
        break;
 8006a26:	e00f      	b.n	8006a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a28:	4b4e      	ldr	r3, [pc, #312]	; (8006b64 <UART_SetConfig+0x268>)
 8006a2a:	61bb      	str	r3, [r7, #24]
        break;
 8006a2c:	e00c      	b.n	8006a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2e:	f7fd fedf 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 8006a32:	61b8      	str	r0, [r7, #24]
        break;
 8006a34:	e008      	b.n	8006a48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3a:	61bb      	str	r3, [r7, #24]
        break;
 8006a3c:	e004      	b.n	8006a48 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	77bb      	strb	r3, [r7, #30]
        break;
 8006a46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d074      	beq.n	8006b38 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	005a      	lsls	r2, r3, #1
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	441a      	add	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b0f      	cmp	r3, #15
 8006a68:	d916      	bls.n	8006a98 <UART_SetConfig+0x19c>
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a70:	d212      	bcs.n	8006a98 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f023 030f 	bic.w	r3, r3, #15
 8006a7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	89fb      	ldrh	r3, [r7, #14]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	89fa      	ldrh	r2, [r7, #14]
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	e04f      	b.n	8006b38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	77bb      	strb	r3, [r7, #30]
 8006a9c:	e04c      	b.n	8006b38 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a9e:	7ffb      	ldrb	r3, [r7, #31]
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d828      	bhi.n	8006af6 <UART_SetConfig+0x1fa>
 8006aa4:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <UART_SetConfig+0x1b0>)
 8006aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aaa:	bf00      	nop
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	08006af7 	.word	0x08006af7
 8006abc:	08006ae7 	.word	0x08006ae7
 8006ac0:	08006af7 	.word	0x08006af7
 8006ac4:	08006af7 	.word	0x08006af7
 8006ac8:	08006af7 	.word	0x08006af7
 8006acc:	08006aef 	.word	0x08006aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad0:	f7fd ff04 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8006ad4:	61b8      	str	r0, [r7, #24]
        break;
 8006ad6:	e013      	b.n	8006b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad8:	f7fd ff22 	bl	8004920 <HAL_RCC_GetPCLK2Freq>
 8006adc:	61b8      	str	r0, [r7, #24]
        break;
 8006ade:	e00f      	b.n	8006b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae0:	4b20      	ldr	r3, [pc, #128]	; (8006b64 <UART_SetConfig+0x268>)
 8006ae2:	61bb      	str	r3, [r7, #24]
        break;
 8006ae4:	e00c      	b.n	8006b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae6:	f7fd fe83 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 8006aea:	61b8      	str	r0, [r7, #24]
        break;
 8006aec:	e008      	b.n	8006b00 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006af2:	61bb      	str	r3, [r7, #24]
        break;
 8006af4:	e004      	b.n	8006b00 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	77bb      	strb	r3, [r7, #30]
        break;
 8006afe:	bf00      	nop
    }

    if (pclk != 0U)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d018      	beq.n	8006b38 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	085a      	lsrs	r2, r3, #1
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	441a      	add	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b0f      	cmp	r3, #15
 8006b1e:	d909      	bls.n	8006b34 <UART_SetConfig+0x238>
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b26:	d205      	bcs.n	8006b34 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60da      	str	r2, [r3, #12]
 8006b32:	e001      	b.n	8006b38 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b44:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	efff69f3 	.word	0xefff69f3
 8006b54:	40013800 	.word	0x40013800
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40004400 	.word	0x40004400
 8006b60:	40004800 	.word	0x40004800
 8006b64:	007a1200 	.word	0x007a1200

08006b68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00a      	beq.n	8006c1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01a      	beq.n	8006c7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c66:	d10a      	bne.n	8006c7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b098      	sub	sp, #96	; 0x60
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cbc:	f7fa fc3a 	bl	8001534 <HAL_GetTick>
 8006cc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d12e      	bne.n	8006d2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f88c 	bl	8006dfc <UART_WaitOnFlagUntilTimeout>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d021      	beq.n	8006d2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d08:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e062      	b.n	8006df4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d149      	bne.n	8006dd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f856 	bl	8006dfc <UART_WaitOnFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d03c      	beq.n	8006dd0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	623b      	str	r3, [r7, #32]
   return(result);
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d74:	633b      	str	r3, [r7, #48]	; 0x30
 8006d76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e6      	bne.n	8006d56 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0301 	bic.w	r3, r3, #1
 8006d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006da8:	61fa      	str	r2, [r7, #28]
 8006daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	69b9      	ldr	r1, [r7, #24]
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	617b      	str	r3, [r7, #20]
   return(result);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e011      	b.n	8006df4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3758      	adds	r7, #88	; 0x58
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0c:	e049      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d045      	beq.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e16:	f7fa fb8d 	bl	8001534 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e048      	b.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d031      	beq.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d110      	bne.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2208      	movs	r2, #8
 8006e52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f8ff 	bl	8007058 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e029      	b.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7c:	d111      	bne.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f8e5 	bl	8007058 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e00f      	b.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	bf0c      	ite	eq
 8006eb2:	2301      	moveq	r3, #1
 8006eb4:	2300      	movne	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d0a6      	beq.n	8006e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b097      	sub	sp, #92	; 0x5c
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efe:	d10e      	bne.n	8006f1e <UART_Start_Receive_IT+0x52>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <UART_Start_Receive_IT+0x48>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f12:	e02d      	b.n	8006f70 <UART_Start_Receive_IT+0xa4>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	22ff      	movs	r2, #255	; 0xff
 8006f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f1c:	e028      	b.n	8006f70 <UART_Start_Receive_IT+0xa4>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10d      	bne.n	8006f42 <UART_Start_Receive_IT+0x76>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <UART_Start_Receive_IT+0x6c>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	22ff      	movs	r2, #255	; 0xff
 8006f32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f36:	e01b      	b.n	8006f70 <UART_Start_Receive_IT+0xa4>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	227f      	movs	r2, #127	; 0x7f
 8006f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f40:	e016      	b.n	8006f70 <UART_Start_Receive_IT+0xa4>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f4a:	d10d      	bne.n	8006f68 <UART_Start_Receive_IT+0x9c>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <UART_Start_Receive_IT+0x92>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	227f      	movs	r2, #127	; 0x7f
 8006f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f5c:	e008      	b.n	8006f70 <UART_Start_Receive_IT+0xa4>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	223f      	movs	r2, #63	; 0x3f
 8006f62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f66:	e003      	b.n	8006f70 <UART_Start_Receive_IT+0xa4>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2222      	movs	r2, #34	; 0x22
 8006f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	657b      	str	r3, [r7, #84]	; 0x54
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fa0:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e5      	bne.n	8006f80 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbc:	d107      	bne.n	8006fce <UART_Start_Receive_IT+0x102>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d103      	bne.n	8006fce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a21      	ldr	r2, [pc, #132]	; (8007050 <UART_Start_Receive_IT+0x184>)
 8006fca:	669a      	str	r2, [r3, #104]	; 0x68
 8006fcc:	e002      	b.n	8006fd4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a20      	ldr	r2, [pc, #128]	; (8007054 <UART_Start_Receive_IT+0x188>)
 8006fd2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d019      	beq.n	8007010 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_Start_Receive_IT+0x110>
 800700e:	e018      	b.n	8007042 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f043 0320 	orr.w	r3, r3, #32
 8007024:	653b      	str	r3, [r7, #80]	; 0x50
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702e:	623b      	str	r3, [r7, #32]
 8007030:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	69f9      	ldr	r1, [r7, #28]
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	61bb      	str	r3, [r7, #24]
   return(result);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e6      	bne.n	8007010 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	375c      	adds	r7, #92	; 0x5c
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	08007349 	.word	0x08007349
 8007054:	080071a1 	.word	0x080071a1

08007058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b095      	sub	sp, #84	; 0x54
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007074:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707e:	643b      	str	r3, [r7, #64]	; 0x40
 8007080:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e6      	bne.n	8007060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	f023 0301 	bic.w	r3, r3, #1
 80070a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e5      	bne.n	8007092 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d118      	bne.n	8007100 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	60bb      	str	r3, [r7, #8]
   return(result);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 0310 	bic.w	r3, r3, #16
 80070e2:	647b      	str	r3, [r7, #68]	; 0x44
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6979      	ldr	r1, [r7, #20]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	613b      	str	r3, [r7, #16]
   return(result);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e6      	bne.n	80070ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007114:	bf00      	nop
 8007116:	3754      	adds	r7, #84	; 0x54
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff fbc6 	bl	80068d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	60bb      	str	r3, [r7, #8]
   return(result);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007168:	61fb      	str	r3, [r7, #28]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	613b      	str	r3, [r7, #16]
   return(result);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fb92 	bl	80068bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007198:	bf00      	nop
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b09c      	sub	sp, #112	; 0x70
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b8:	2b22      	cmp	r3, #34	; 0x22
 80071ba:	f040 80b9 	bne.w	8007330 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80071cc:	b2d9      	uxtb	r1, r3
 80071ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d8:	400a      	ands	r2, r1
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	f040 809c 	bne.w	8007340 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800721c:	66bb      	str	r3, [r7, #104]	; 0x68
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007226:	65bb      	str	r3, [r7, #88]	; 0x58
 8007228:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800722c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e6      	bne.n	8007208 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	667b      	str	r3, [r7, #100]	; 0x64
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800725a:	647a      	str	r2, [r7, #68]	; 0x44
 800725c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e5      	bne.n	800723a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d018      	beq.n	80072c2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	623b      	str	r3, [r7, #32]
   return(result);
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072a4:	663b      	str	r3, [r7, #96]	; 0x60
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ae:	633b      	str	r3, [r7, #48]	; 0x30
 80072b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e6      	bne.n	8007290 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d12e      	bne.n	8007328 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f023 0310 	bic.w	r3, r3, #16
 80072e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	69b9      	ldr	r1, [r7, #24]
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	617b      	str	r3, [r7, #20]
   return(result);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e6      	bne.n	80072d0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f003 0310 	and.w	r3, r3, #16
 800730c:	2b10      	cmp	r3, #16
 800730e:	d103      	bne.n	8007318 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2210      	movs	r2, #16
 8007316:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff fadf 	bl	80068e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007326:	e00b      	b.n	8007340 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7f9 faaf 	bl	800088c <HAL_UART_RxCpltCallback>
}
 800732e:	e007      	b.n	8007340 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0208 	orr.w	r2, r2, #8
 800733e:	619a      	str	r2, [r3, #24]
}
 8007340:	bf00      	nop
 8007342:	3770      	adds	r7, #112	; 0x70
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b09c      	sub	sp, #112	; 0x70
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007356:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007360:	2b22      	cmp	r3, #34	; 0x22
 8007362:	f040 80b9 	bne.w	80074d8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800736c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007374:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007376:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800737a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800737e:	4013      	ands	r3, r2
 8007380:	b29a      	uxth	r2, r3
 8007382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007384:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	1c9a      	adds	r2, r3, #2
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 809c 	bne.w	80074e8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80073be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073c4:	667b      	str	r3, [r7, #100]	; 0x64
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ce:	657b      	str	r3, [r7, #84]	; 0x54
 80073d0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e6      	bne.n	80073b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	f023 0301 	bic.w	r3, r3, #1
 80073f8:	663b      	str	r3, [r7, #96]	; 0x60
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007402:	643a      	str	r2, [r7, #64]	; 0x40
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d018      	beq.n	800746a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	61fb      	str	r3, [r7, #28]
   return(result);
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800744c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007458:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800745c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e6      	bne.n	8007438 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746e:	2b01      	cmp	r3, #1
 8007470:	d12e      	bne.n	80074d0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	60bb      	str	r3, [r7, #8]
   return(result);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f023 0310 	bic.w	r3, r3, #16
 800748c:	65bb      	str	r3, [r7, #88]	; 0x58
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6979      	ldr	r1, [r7, #20]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	613b      	str	r3, [r7, #16]
   return(result);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e6      	bne.n	8007478 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d103      	bne.n	80074c0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2210      	movs	r2, #16
 80074be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff fa0b 	bl	80068e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074ce:	e00b      	b.n	80074e8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7f9 f9db 	bl	800088c <HAL_UART_RxCpltCallback>
}
 80074d6:	e007      	b.n	80074e8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699a      	ldr	r2, [r3, #24]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0208 	orr.w	r2, r2, #8
 80074e6:	619a      	str	r2, [r3, #24]
}
 80074e8:	bf00      	nop
 80074ea:	3770      	adds	r7, #112	; 0x70
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <atoi>:
 8007504:	220a      	movs	r2, #10
 8007506:	2100      	movs	r1, #0
 8007508:	f000 b882 	b.w	8007610 <strtol>

0800750c <_strtol_l.constprop.0>:
 800750c:	2b01      	cmp	r3, #1
 800750e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007512:	d001      	beq.n	8007518 <_strtol_l.constprop.0+0xc>
 8007514:	2b24      	cmp	r3, #36	; 0x24
 8007516:	d906      	bls.n	8007526 <_strtol_l.constprop.0+0x1a>
 8007518:	f000 fc5c 	bl	8007dd4 <__errno>
 800751c:	2316      	movs	r3, #22
 800751e:	6003      	str	r3, [r0, #0]
 8007520:	2000      	movs	r0, #0
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800760c <_strtol_l.constprop.0+0x100>
 800752a:	460d      	mov	r5, r1
 800752c:	462e      	mov	r6, r5
 800752e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007532:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007536:	f017 0708 	ands.w	r7, r7, #8
 800753a:	d1f7      	bne.n	800752c <_strtol_l.constprop.0+0x20>
 800753c:	2c2d      	cmp	r4, #45	; 0x2d
 800753e:	d132      	bne.n	80075a6 <_strtol_l.constprop.0+0x9a>
 8007540:	782c      	ldrb	r4, [r5, #0]
 8007542:	2701      	movs	r7, #1
 8007544:	1cb5      	adds	r5, r6, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d05b      	beq.n	8007602 <_strtol_l.constprop.0+0xf6>
 800754a:	2b10      	cmp	r3, #16
 800754c:	d109      	bne.n	8007562 <_strtol_l.constprop.0+0x56>
 800754e:	2c30      	cmp	r4, #48	; 0x30
 8007550:	d107      	bne.n	8007562 <_strtol_l.constprop.0+0x56>
 8007552:	782c      	ldrb	r4, [r5, #0]
 8007554:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007558:	2c58      	cmp	r4, #88	; 0x58
 800755a:	d14d      	bne.n	80075f8 <_strtol_l.constprop.0+0xec>
 800755c:	786c      	ldrb	r4, [r5, #1]
 800755e:	2310      	movs	r3, #16
 8007560:	3502      	adds	r5, #2
 8007562:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007566:	f108 38ff 	add.w	r8, r8, #4294967295
 800756a:	f04f 0e00 	mov.w	lr, #0
 800756e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007572:	4676      	mov	r6, lr
 8007574:	fb03 8a19 	mls	sl, r3, r9, r8
 8007578:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800757c:	f1bc 0f09 	cmp.w	ip, #9
 8007580:	d816      	bhi.n	80075b0 <_strtol_l.constprop.0+0xa4>
 8007582:	4664      	mov	r4, ip
 8007584:	42a3      	cmp	r3, r4
 8007586:	dd24      	ble.n	80075d2 <_strtol_l.constprop.0+0xc6>
 8007588:	f1be 3fff 	cmp.w	lr, #4294967295
 800758c:	d008      	beq.n	80075a0 <_strtol_l.constprop.0+0x94>
 800758e:	45b1      	cmp	r9, r6
 8007590:	d31c      	bcc.n	80075cc <_strtol_l.constprop.0+0xc0>
 8007592:	d101      	bne.n	8007598 <_strtol_l.constprop.0+0x8c>
 8007594:	45a2      	cmp	sl, r4
 8007596:	db19      	blt.n	80075cc <_strtol_l.constprop.0+0xc0>
 8007598:	fb06 4603 	mla	r6, r6, r3, r4
 800759c:	f04f 0e01 	mov.w	lr, #1
 80075a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075a4:	e7e8      	b.n	8007578 <_strtol_l.constprop.0+0x6c>
 80075a6:	2c2b      	cmp	r4, #43	; 0x2b
 80075a8:	bf04      	itt	eq
 80075aa:	782c      	ldrbeq	r4, [r5, #0]
 80075ac:	1cb5      	addeq	r5, r6, #2
 80075ae:	e7ca      	b.n	8007546 <_strtol_l.constprop.0+0x3a>
 80075b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80075b4:	f1bc 0f19 	cmp.w	ip, #25
 80075b8:	d801      	bhi.n	80075be <_strtol_l.constprop.0+0xb2>
 80075ba:	3c37      	subs	r4, #55	; 0x37
 80075bc:	e7e2      	b.n	8007584 <_strtol_l.constprop.0+0x78>
 80075be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80075c2:	f1bc 0f19 	cmp.w	ip, #25
 80075c6:	d804      	bhi.n	80075d2 <_strtol_l.constprop.0+0xc6>
 80075c8:	3c57      	subs	r4, #87	; 0x57
 80075ca:	e7db      	b.n	8007584 <_strtol_l.constprop.0+0x78>
 80075cc:	f04f 3eff 	mov.w	lr, #4294967295
 80075d0:	e7e6      	b.n	80075a0 <_strtol_l.constprop.0+0x94>
 80075d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80075d6:	d105      	bne.n	80075e4 <_strtol_l.constprop.0+0xd8>
 80075d8:	2322      	movs	r3, #34	; 0x22
 80075da:	6003      	str	r3, [r0, #0]
 80075dc:	4646      	mov	r6, r8
 80075de:	b942      	cbnz	r2, 80075f2 <_strtol_l.constprop.0+0xe6>
 80075e0:	4630      	mov	r0, r6
 80075e2:	e79e      	b.n	8007522 <_strtol_l.constprop.0+0x16>
 80075e4:	b107      	cbz	r7, 80075e8 <_strtol_l.constprop.0+0xdc>
 80075e6:	4276      	negs	r6, r6
 80075e8:	2a00      	cmp	r2, #0
 80075ea:	d0f9      	beq.n	80075e0 <_strtol_l.constprop.0+0xd4>
 80075ec:	f1be 0f00 	cmp.w	lr, #0
 80075f0:	d000      	beq.n	80075f4 <_strtol_l.constprop.0+0xe8>
 80075f2:	1e69      	subs	r1, r5, #1
 80075f4:	6011      	str	r1, [r2, #0]
 80075f6:	e7f3      	b.n	80075e0 <_strtol_l.constprop.0+0xd4>
 80075f8:	2430      	movs	r4, #48	; 0x30
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1b1      	bne.n	8007562 <_strtol_l.constprop.0+0x56>
 80075fe:	2308      	movs	r3, #8
 8007600:	e7af      	b.n	8007562 <_strtol_l.constprop.0+0x56>
 8007602:	2c30      	cmp	r4, #48	; 0x30
 8007604:	d0a5      	beq.n	8007552 <_strtol_l.constprop.0+0x46>
 8007606:	230a      	movs	r3, #10
 8007608:	e7ab      	b.n	8007562 <_strtol_l.constprop.0+0x56>
 800760a:	bf00      	nop
 800760c:	08008b71 	.word	0x08008b71

08007610 <strtol>:
 8007610:	4613      	mov	r3, r2
 8007612:	460a      	mov	r2, r1
 8007614:	4601      	mov	r1, r0
 8007616:	4802      	ldr	r0, [pc, #8]	; (8007620 <strtol+0x10>)
 8007618:	6800      	ldr	r0, [r0, #0]
 800761a:	f7ff bf77 	b.w	800750c <_strtol_l.constprop.0>
 800761e:	bf00      	nop
 8007620:	200003c4 	.word	0x200003c4

08007624 <__sflush_r>:
 8007624:	898a      	ldrh	r2, [r1, #12]
 8007626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762a:	4605      	mov	r5, r0
 800762c:	0710      	lsls	r0, r2, #28
 800762e:	460c      	mov	r4, r1
 8007630:	d458      	bmi.n	80076e4 <__sflush_r+0xc0>
 8007632:	684b      	ldr	r3, [r1, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	dc05      	bgt.n	8007644 <__sflush_r+0x20>
 8007638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	dc02      	bgt.n	8007644 <__sflush_r+0x20>
 800763e:	2000      	movs	r0, #0
 8007640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007646:	2e00      	cmp	r6, #0
 8007648:	d0f9      	beq.n	800763e <__sflush_r+0x1a>
 800764a:	2300      	movs	r3, #0
 800764c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007650:	682f      	ldr	r7, [r5, #0]
 8007652:	6a21      	ldr	r1, [r4, #32]
 8007654:	602b      	str	r3, [r5, #0]
 8007656:	d032      	beq.n	80076be <__sflush_r+0x9a>
 8007658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	075a      	lsls	r2, r3, #29
 800765e:	d505      	bpl.n	800766c <__sflush_r+0x48>
 8007660:	6863      	ldr	r3, [r4, #4]
 8007662:	1ac0      	subs	r0, r0, r3
 8007664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007666:	b10b      	cbz	r3, 800766c <__sflush_r+0x48>
 8007668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800766a:	1ac0      	subs	r0, r0, r3
 800766c:	2300      	movs	r3, #0
 800766e:	4602      	mov	r2, r0
 8007670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007672:	6a21      	ldr	r1, [r4, #32]
 8007674:	4628      	mov	r0, r5
 8007676:	47b0      	blx	r6
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	d106      	bne.n	800768c <__sflush_r+0x68>
 800767e:	6829      	ldr	r1, [r5, #0]
 8007680:	291d      	cmp	r1, #29
 8007682:	d82b      	bhi.n	80076dc <__sflush_r+0xb8>
 8007684:	4a29      	ldr	r2, [pc, #164]	; (800772c <__sflush_r+0x108>)
 8007686:	410a      	asrs	r2, r1
 8007688:	07d6      	lsls	r6, r2, #31
 800768a:	d427      	bmi.n	80076dc <__sflush_r+0xb8>
 800768c:	2200      	movs	r2, #0
 800768e:	6062      	str	r2, [r4, #4]
 8007690:	04d9      	lsls	r1, r3, #19
 8007692:	6922      	ldr	r2, [r4, #16]
 8007694:	6022      	str	r2, [r4, #0]
 8007696:	d504      	bpl.n	80076a2 <__sflush_r+0x7e>
 8007698:	1c42      	adds	r2, r0, #1
 800769a:	d101      	bne.n	80076a0 <__sflush_r+0x7c>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b903      	cbnz	r3, 80076a2 <__sflush_r+0x7e>
 80076a0:	6560      	str	r0, [r4, #84]	; 0x54
 80076a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076a4:	602f      	str	r7, [r5, #0]
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d0c9      	beq.n	800763e <__sflush_r+0x1a>
 80076aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076ae:	4299      	cmp	r1, r3
 80076b0:	d002      	beq.n	80076b8 <__sflush_r+0x94>
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 fbbc 	bl	8007e30 <_free_r>
 80076b8:	2000      	movs	r0, #0
 80076ba:	6360      	str	r0, [r4, #52]	; 0x34
 80076bc:	e7c0      	b.n	8007640 <__sflush_r+0x1c>
 80076be:	2301      	movs	r3, #1
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b0      	blx	r6
 80076c4:	1c41      	adds	r1, r0, #1
 80076c6:	d1c8      	bne.n	800765a <__sflush_r+0x36>
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0c5      	beq.n	800765a <__sflush_r+0x36>
 80076ce:	2b1d      	cmp	r3, #29
 80076d0:	d001      	beq.n	80076d6 <__sflush_r+0xb2>
 80076d2:	2b16      	cmp	r3, #22
 80076d4:	d101      	bne.n	80076da <__sflush_r+0xb6>
 80076d6:	602f      	str	r7, [r5, #0]
 80076d8:	e7b1      	b.n	800763e <__sflush_r+0x1a>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	e7ad      	b.n	8007640 <__sflush_r+0x1c>
 80076e4:	690f      	ldr	r7, [r1, #16]
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	d0a9      	beq.n	800763e <__sflush_r+0x1a>
 80076ea:	0793      	lsls	r3, r2, #30
 80076ec:	680e      	ldr	r6, [r1, #0]
 80076ee:	bf08      	it	eq
 80076f0:	694b      	ldreq	r3, [r1, #20]
 80076f2:	600f      	str	r7, [r1, #0]
 80076f4:	bf18      	it	ne
 80076f6:	2300      	movne	r3, #0
 80076f8:	eba6 0807 	sub.w	r8, r6, r7
 80076fc:	608b      	str	r3, [r1, #8]
 80076fe:	f1b8 0f00 	cmp.w	r8, #0
 8007702:	dd9c      	ble.n	800763e <__sflush_r+0x1a>
 8007704:	6a21      	ldr	r1, [r4, #32]
 8007706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007708:	4643      	mov	r3, r8
 800770a:	463a      	mov	r2, r7
 800770c:	4628      	mov	r0, r5
 800770e:	47b0      	blx	r6
 8007710:	2800      	cmp	r0, #0
 8007712:	dc06      	bgt.n	8007722 <__sflush_r+0xfe>
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800771a:	81a3      	strh	r3, [r4, #12]
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	e78e      	b.n	8007640 <__sflush_r+0x1c>
 8007722:	4407      	add	r7, r0
 8007724:	eba8 0800 	sub.w	r8, r8, r0
 8007728:	e7e9      	b.n	80076fe <__sflush_r+0xda>
 800772a:	bf00      	nop
 800772c:	dfbffffe 	.word	0xdfbffffe

08007730 <_fflush_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	690b      	ldr	r3, [r1, #16]
 8007734:	4605      	mov	r5, r0
 8007736:	460c      	mov	r4, r1
 8007738:	b913      	cbnz	r3, 8007740 <_fflush_r+0x10>
 800773a:	2500      	movs	r5, #0
 800773c:	4628      	mov	r0, r5
 800773e:	bd38      	pop	{r3, r4, r5, pc}
 8007740:	b118      	cbz	r0, 800774a <_fflush_r+0x1a>
 8007742:	6a03      	ldr	r3, [r0, #32]
 8007744:	b90b      	cbnz	r3, 800774a <_fflush_r+0x1a>
 8007746:	f000 f8bb 	bl	80078c0 <__sinit>
 800774a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f3      	beq.n	800773a <_fflush_r+0xa>
 8007752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007754:	07d0      	lsls	r0, r2, #31
 8007756:	d404      	bmi.n	8007762 <_fflush_r+0x32>
 8007758:	0599      	lsls	r1, r3, #22
 800775a:	d402      	bmi.n	8007762 <_fflush_r+0x32>
 800775c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800775e:	f000 fb64 	bl	8007e2a <__retarget_lock_acquire_recursive>
 8007762:	4628      	mov	r0, r5
 8007764:	4621      	mov	r1, r4
 8007766:	f7ff ff5d 	bl	8007624 <__sflush_r>
 800776a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800776c:	07da      	lsls	r2, r3, #31
 800776e:	4605      	mov	r5, r0
 8007770:	d4e4      	bmi.n	800773c <_fflush_r+0xc>
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	059b      	lsls	r3, r3, #22
 8007776:	d4e1      	bmi.n	800773c <_fflush_r+0xc>
 8007778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800777a:	f000 fb57 	bl	8007e2c <__retarget_lock_release_recursive>
 800777e:	e7dd      	b.n	800773c <_fflush_r+0xc>

08007780 <fflush>:
 8007780:	4601      	mov	r1, r0
 8007782:	b920      	cbnz	r0, 800778e <fflush+0xe>
 8007784:	4a04      	ldr	r2, [pc, #16]	; (8007798 <fflush+0x18>)
 8007786:	4905      	ldr	r1, [pc, #20]	; (800779c <fflush+0x1c>)
 8007788:	4805      	ldr	r0, [pc, #20]	; (80077a0 <fflush+0x20>)
 800778a:	f000 b8b1 	b.w	80078f0 <_fwalk_sglue>
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <fflush+0x24>)
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	f7ff bfcd 	b.w	8007730 <_fflush_r>
 8007796:	bf00      	nop
 8007798:	2000036c 	.word	0x2000036c
 800779c:	08007731 	.word	0x08007731
 80077a0:	20000378 	.word	0x20000378
 80077a4:	200003c4 	.word	0x200003c4

080077a8 <std>:
 80077a8:	2300      	movs	r3, #0
 80077aa:	b510      	push	{r4, lr}
 80077ac:	4604      	mov	r4, r0
 80077ae:	e9c0 3300 	strd	r3, r3, [r0]
 80077b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077b6:	6083      	str	r3, [r0, #8]
 80077b8:	8181      	strh	r1, [r0, #12]
 80077ba:	6643      	str	r3, [r0, #100]	; 0x64
 80077bc:	81c2      	strh	r2, [r0, #14]
 80077be:	6183      	str	r3, [r0, #24]
 80077c0:	4619      	mov	r1, r3
 80077c2:	2208      	movs	r2, #8
 80077c4:	305c      	adds	r0, #92	; 0x5c
 80077c6:	f000 faa5 	bl	8007d14 <memset>
 80077ca:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <std+0x58>)
 80077cc:	6263      	str	r3, [r4, #36]	; 0x24
 80077ce:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <std+0x5c>)
 80077d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80077d2:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <std+0x60>)
 80077d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077d6:	4b0d      	ldr	r3, [pc, #52]	; (800780c <std+0x64>)
 80077d8:	6323      	str	r3, [r4, #48]	; 0x30
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <std+0x68>)
 80077dc:	6224      	str	r4, [r4, #32]
 80077de:	429c      	cmp	r4, r3
 80077e0:	d006      	beq.n	80077f0 <std+0x48>
 80077e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80077e6:	4294      	cmp	r4, r2
 80077e8:	d002      	beq.n	80077f0 <std+0x48>
 80077ea:	33d0      	adds	r3, #208	; 0xd0
 80077ec:	429c      	cmp	r4, r3
 80077ee:	d105      	bne.n	80077fc <std+0x54>
 80077f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f8:	f000 bb16 	b.w	8007e28 <__retarget_lock_init_recursive>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	bf00      	nop
 8007800:	08007b65 	.word	0x08007b65
 8007804:	08007b87 	.word	0x08007b87
 8007808:	08007bbf 	.word	0x08007bbf
 800780c:	08007be3 	.word	0x08007be3
 8007810:	20000614 	.word	0x20000614

08007814 <stdio_exit_handler>:
 8007814:	4a02      	ldr	r2, [pc, #8]	; (8007820 <stdio_exit_handler+0xc>)
 8007816:	4903      	ldr	r1, [pc, #12]	; (8007824 <stdio_exit_handler+0x10>)
 8007818:	4803      	ldr	r0, [pc, #12]	; (8007828 <stdio_exit_handler+0x14>)
 800781a:	f000 b869 	b.w	80078f0 <_fwalk_sglue>
 800781e:	bf00      	nop
 8007820:	2000036c 	.word	0x2000036c
 8007824:	08007731 	.word	0x08007731
 8007828:	20000378 	.word	0x20000378

0800782c <cleanup_stdio>:
 800782c:	6841      	ldr	r1, [r0, #4]
 800782e:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <cleanup_stdio+0x34>)
 8007830:	4299      	cmp	r1, r3
 8007832:	b510      	push	{r4, lr}
 8007834:	4604      	mov	r4, r0
 8007836:	d001      	beq.n	800783c <cleanup_stdio+0x10>
 8007838:	f7ff ff7a 	bl	8007730 <_fflush_r>
 800783c:	68a1      	ldr	r1, [r4, #8]
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <cleanup_stdio+0x38>)
 8007840:	4299      	cmp	r1, r3
 8007842:	d002      	beq.n	800784a <cleanup_stdio+0x1e>
 8007844:	4620      	mov	r0, r4
 8007846:	f7ff ff73 	bl	8007730 <_fflush_r>
 800784a:	68e1      	ldr	r1, [r4, #12]
 800784c:	4b06      	ldr	r3, [pc, #24]	; (8007868 <cleanup_stdio+0x3c>)
 800784e:	4299      	cmp	r1, r3
 8007850:	d004      	beq.n	800785c <cleanup_stdio+0x30>
 8007852:	4620      	mov	r0, r4
 8007854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007858:	f7ff bf6a 	b.w	8007730 <_fflush_r>
 800785c:	bd10      	pop	{r4, pc}
 800785e:	bf00      	nop
 8007860:	20000614 	.word	0x20000614
 8007864:	2000067c 	.word	0x2000067c
 8007868:	200006e4 	.word	0x200006e4

0800786c <global_stdio_init.part.0>:
 800786c:	b510      	push	{r4, lr}
 800786e:	4b0b      	ldr	r3, [pc, #44]	; (800789c <global_stdio_init.part.0+0x30>)
 8007870:	4c0b      	ldr	r4, [pc, #44]	; (80078a0 <global_stdio_init.part.0+0x34>)
 8007872:	4a0c      	ldr	r2, [pc, #48]	; (80078a4 <global_stdio_init.part.0+0x38>)
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	4620      	mov	r0, r4
 8007878:	2200      	movs	r2, #0
 800787a:	2104      	movs	r1, #4
 800787c:	f7ff ff94 	bl	80077a8 <std>
 8007880:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007884:	2201      	movs	r2, #1
 8007886:	2109      	movs	r1, #9
 8007888:	f7ff ff8e 	bl	80077a8 <std>
 800788c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007890:	2202      	movs	r2, #2
 8007892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007896:	2112      	movs	r1, #18
 8007898:	f7ff bf86 	b.w	80077a8 <std>
 800789c:	2000074c 	.word	0x2000074c
 80078a0:	20000614 	.word	0x20000614
 80078a4:	08007815 	.word	0x08007815

080078a8 <__sfp_lock_acquire>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__sfp_lock_acquire+0x8>)
 80078aa:	f000 babe 	b.w	8007e2a <__retarget_lock_acquire_recursive>
 80078ae:	bf00      	nop
 80078b0:	20000755 	.word	0x20000755

080078b4 <__sfp_lock_release>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sfp_lock_release+0x8>)
 80078b6:	f000 bab9 	b.w	8007e2c <__retarget_lock_release_recursive>
 80078ba:	bf00      	nop
 80078bc:	20000755 	.word	0x20000755

080078c0 <__sinit>:
 80078c0:	b510      	push	{r4, lr}
 80078c2:	4604      	mov	r4, r0
 80078c4:	f7ff fff0 	bl	80078a8 <__sfp_lock_acquire>
 80078c8:	6a23      	ldr	r3, [r4, #32]
 80078ca:	b11b      	cbz	r3, 80078d4 <__sinit+0x14>
 80078cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d0:	f7ff bff0 	b.w	80078b4 <__sfp_lock_release>
 80078d4:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <__sinit+0x28>)
 80078d6:	6223      	str	r3, [r4, #32]
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <__sinit+0x2c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1f5      	bne.n	80078cc <__sinit+0xc>
 80078e0:	f7ff ffc4 	bl	800786c <global_stdio_init.part.0>
 80078e4:	e7f2      	b.n	80078cc <__sinit+0xc>
 80078e6:	bf00      	nop
 80078e8:	0800782d 	.word	0x0800782d
 80078ec:	2000074c 	.word	0x2000074c

080078f0 <_fwalk_sglue>:
 80078f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f4:	4607      	mov	r7, r0
 80078f6:	4688      	mov	r8, r1
 80078f8:	4614      	mov	r4, r2
 80078fa:	2600      	movs	r6, #0
 80078fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007900:	f1b9 0901 	subs.w	r9, r9, #1
 8007904:	d505      	bpl.n	8007912 <_fwalk_sglue+0x22>
 8007906:	6824      	ldr	r4, [r4, #0]
 8007908:	2c00      	cmp	r4, #0
 800790a:	d1f7      	bne.n	80078fc <_fwalk_sglue+0xc>
 800790c:	4630      	mov	r0, r6
 800790e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007912:	89ab      	ldrh	r3, [r5, #12]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d907      	bls.n	8007928 <_fwalk_sglue+0x38>
 8007918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800791c:	3301      	adds	r3, #1
 800791e:	d003      	beq.n	8007928 <_fwalk_sglue+0x38>
 8007920:	4629      	mov	r1, r5
 8007922:	4638      	mov	r0, r7
 8007924:	47c0      	blx	r8
 8007926:	4306      	orrs	r6, r0
 8007928:	3568      	adds	r5, #104	; 0x68
 800792a:	e7e9      	b.n	8007900 <_fwalk_sglue+0x10>

0800792c <iprintf>:
 800792c:	b40f      	push	{r0, r1, r2, r3}
 800792e:	b507      	push	{r0, r1, r2, lr}
 8007930:	4906      	ldr	r1, [pc, #24]	; (800794c <iprintf+0x20>)
 8007932:	ab04      	add	r3, sp, #16
 8007934:	6808      	ldr	r0, [r1, #0]
 8007936:	f853 2b04 	ldr.w	r2, [r3], #4
 800793a:	6881      	ldr	r1, [r0, #8]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	f000 fba1 	bl	8008084 <_vfiprintf_r>
 8007942:	b003      	add	sp, #12
 8007944:	f85d eb04 	ldr.w	lr, [sp], #4
 8007948:	b004      	add	sp, #16
 800794a:	4770      	bx	lr
 800794c:	200003c4 	.word	0x200003c4

08007950 <_puts_r>:
 8007950:	6a03      	ldr	r3, [r0, #32]
 8007952:	b570      	push	{r4, r5, r6, lr}
 8007954:	6884      	ldr	r4, [r0, #8]
 8007956:	4605      	mov	r5, r0
 8007958:	460e      	mov	r6, r1
 800795a:	b90b      	cbnz	r3, 8007960 <_puts_r+0x10>
 800795c:	f7ff ffb0 	bl	80078c0 <__sinit>
 8007960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007962:	07db      	lsls	r3, r3, #31
 8007964:	d405      	bmi.n	8007972 <_puts_r+0x22>
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	0598      	lsls	r0, r3, #22
 800796a:	d402      	bmi.n	8007972 <_puts_r+0x22>
 800796c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800796e:	f000 fa5c 	bl	8007e2a <__retarget_lock_acquire_recursive>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	0719      	lsls	r1, r3, #28
 8007976:	d513      	bpl.n	80079a0 <_puts_r+0x50>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	b18b      	cbz	r3, 80079a0 <_puts_r+0x50>
 800797c:	3e01      	subs	r6, #1
 800797e:	68a3      	ldr	r3, [r4, #8]
 8007980:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007984:	3b01      	subs	r3, #1
 8007986:	60a3      	str	r3, [r4, #8]
 8007988:	b9e9      	cbnz	r1, 80079c6 <_puts_r+0x76>
 800798a:	2b00      	cmp	r3, #0
 800798c:	da2e      	bge.n	80079ec <_puts_r+0x9c>
 800798e:	4622      	mov	r2, r4
 8007990:	210a      	movs	r1, #10
 8007992:	4628      	mov	r0, r5
 8007994:	f000 f929 	bl	8007bea <__swbuf_r>
 8007998:	3001      	adds	r0, #1
 800799a:	d007      	beq.n	80079ac <_puts_r+0x5c>
 800799c:	250a      	movs	r5, #10
 800799e:	e007      	b.n	80079b0 <_puts_r+0x60>
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f95e 	bl	8007c64 <__swsetup_r>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d0e7      	beq.n	800797c <_puts_r+0x2c>
 80079ac:	f04f 35ff 	mov.w	r5, #4294967295
 80079b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079b2:	07da      	lsls	r2, r3, #31
 80079b4:	d405      	bmi.n	80079c2 <_puts_r+0x72>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	059b      	lsls	r3, r3, #22
 80079ba:	d402      	bmi.n	80079c2 <_puts_r+0x72>
 80079bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079be:	f000 fa35 	bl	8007e2c <__retarget_lock_release_recursive>
 80079c2:	4628      	mov	r0, r5
 80079c4:	bd70      	pop	{r4, r5, r6, pc}
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da04      	bge.n	80079d4 <_puts_r+0x84>
 80079ca:	69a2      	ldr	r2, [r4, #24]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	dc06      	bgt.n	80079de <_puts_r+0x8e>
 80079d0:	290a      	cmp	r1, #10
 80079d2:	d004      	beq.n	80079de <_puts_r+0x8e>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	6022      	str	r2, [r4, #0]
 80079da:	7019      	strb	r1, [r3, #0]
 80079dc:	e7cf      	b.n	800797e <_puts_r+0x2e>
 80079de:	4622      	mov	r2, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 f902 	bl	8007bea <__swbuf_r>
 80079e6:	3001      	adds	r0, #1
 80079e8:	d1c9      	bne.n	800797e <_puts_r+0x2e>
 80079ea:	e7df      	b.n	80079ac <_puts_r+0x5c>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	250a      	movs	r5, #10
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	6022      	str	r2, [r4, #0]
 80079f4:	701d      	strb	r5, [r3, #0]
 80079f6:	e7db      	b.n	80079b0 <_puts_r+0x60>

080079f8 <puts>:
 80079f8:	4b02      	ldr	r3, [pc, #8]	; (8007a04 <puts+0xc>)
 80079fa:	4601      	mov	r1, r0
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	f7ff bfa7 	b.w	8007950 <_puts_r>
 8007a02:	bf00      	nop
 8007a04:	200003c4 	.word	0x200003c4

08007a08 <setvbuf>:
 8007a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a0c:	461d      	mov	r5, r3
 8007a0e:	4b54      	ldr	r3, [pc, #336]	; (8007b60 <setvbuf+0x158>)
 8007a10:	681f      	ldr	r7, [r3, #0]
 8007a12:	4604      	mov	r4, r0
 8007a14:	460e      	mov	r6, r1
 8007a16:	4690      	mov	r8, r2
 8007a18:	b127      	cbz	r7, 8007a24 <setvbuf+0x1c>
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	b913      	cbnz	r3, 8007a24 <setvbuf+0x1c>
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7ff ff4e 	bl	80078c0 <__sinit>
 8007a24:	f1b8 0f02 	cmp.w	r8, #2
 8007a28:	d006      	beq.n	8007a38 <setvbuf+0x30>
 8007a2a:	f1b8 0f01 	cmp.w	r8, #1
 8007a2e:	f200 8094 	bhi.w	8007b5a <setvbuf+0x152>
 8007a32:	2d00      	cmp	r5, #0
 8007a34:	f2c0 8091 	blt.w	8007b5a <setvbuf+0x152>
 8007a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a3a:	07da      	lsls	r2, r3, #31
 8007a3c:	d405      	bmi.n	8007a4a <setvbuf+0x42>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	059b      	lsls	r3, r3, #22
 8007a42:	d402      	bmi.n	8007a4a <setvbuf+0x42>
 8007a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a46:	f000 f9f0 	bl	8007e2a <__retarget_lock_acquire_recursive>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff fe6f 	bl	8007730 <_fflush_r>
 8007a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a54:	b141      	cbz	r1, 8007a68 <setvbuf+0x60>
 8007a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a5a:	4299      	cmp	r1, r3
 8007a5c:	d002      	beq.n	8007a64 <setvbuf+0x5c>
 8007a5e:	4638      	mov	r0, r7
 8007a60:	f000 f9e6 	bl	8007e30 <_free_r>
 8007a64:	2300      	movs	r3, #0
 8007a66:	6363      	str	r3, [r4, #52]	; 0x34
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61a3      	str	r3, [r4, #24]
 8007a6c:	6063      	str	r3, [r4, #4]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	0618      	lsls	r0, r3, #24
 8007a72:	d503      	bpl.n	8007a7c <setvbuf+0x74>
 8007a74:	6921      	ldr	r1, [r4, #16]
 8007a76:	4638      	mov	r0, r7
 8007a78:	f000 f9da 	bl	8007e30 <_free_r>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007a82:	f023 0303 	bic.w	r3, r3, #3
 8007a86:	f1b8 0f02 	cmp.w	r8, #2
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	d05f      	beq.n	8007b4e <setvbuf+0x146>
 8007a8e:	ab01      	add	r3, sp, #4
 8007a90:	466a      	mov	r2, sp
 8007a92:	4621      	mov	r1, r4
 8007a94:	4638      	mov	r0, r7
 8007a96:	f000 fd9f 	bl	80085d8 <__swhatbuf_r>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	4318      	orrs	r0, r3
 8007a9e:	81a0      	strh	r0, [r4, #12]
 8007aa0:	bb2d      	cbnz	r5, 8007aee <setvbuf+0xe6>
 8007aa2:	9d00      	ldr	r5, [sp, #0]
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f000 fa0f 	bl	8007ec8 <malloc>
 8007aaa:	4606      	mov	r6, r0
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d150      	bne.n	8007b52 <setvbuf+0x14a>
 8007ab0:	f8dd 9000 	ldr.w	r9, [sp]
 8007ab4:	45a9      	cmp	r9, r5
 8007ab6:	d13e      	bne.n	8007b36 <setvbuf+0x12e>
 8007ab8:	f04f 35ff 	mov.w	r5, #4294967295
 8007abc:	2200      	movs	r2, #0
 8007abe:	60a2      	str	r2, [r4, #8]
 8007ac0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	6122      	str	r2, [r4, #16]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ace:	6162      	str	r2, [r4, #20]
 8007ad0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ad2:	f043 0302 	orr.w	r3, r3, #2
 8007ad6:	07d1      	lsls	r1, r2, #31
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	d404      	bmi.n	8007ae6 <setvbuf+0xde>
 8007adc:	059b      	lsls	r3, r3, #22
 8007ade:	d402      	bmi.n	8007ae6 <setvbuf+0xde>
 8007ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ae2:	f000 f9a3 	bl	8007e2c <__retarget_lock_release_recursive>
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	b003      	add	sp, #12
 8007aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	d0d8      	beq.n	8007aa4 <setvbuf+0x9c>
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	b913      	cbnz	r3, 8007afc <setvbuf+0xf4>
 8007af6:	4638      	mov	r0, r7
 8007af8:	f7ff fee2 	bl	80078c0 <__sinit>
 8007afc:	f1b8 0f01 	cmp.w	r8, #1
 8007b00:	bf08      	it	eq
 8007b02:	89a3      	ldrheq	r3, [r4, #12]
 8007b04:	6026      	str	r6, [r4, #0]
 8007b06:	bf04      	itt	eq
 8007b08:	f043 0301 	orreq.w	r3, r3, #1
 8007b0c:	81a3      	strheq	r3, [r4, #12]
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	f013 0208 	ands.w	r2, r3, #8
 8007b14:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007b18:	d01d      	beq.n	8007b56 <setvbuf+0x14e>
 8007b1a:	07da      	lsls	r2, r3, #31
 8007b1c:	bf41      	itttt	mi
 8007b1e:	2200      	movmi	r2, #0
 8007b20:	426d      	negmi	r5, r5
 8007b22:	60a2      	strmi	r2, [r4, #8]
 8007b24:	61a5      	strmi	r5, [r4, #24]
 8007b26:	bf58      	it	pl
 8007b28:	60a5      	strpl	r5, [r4, #8]
 8007b2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007b2c:	f015 0501 	ands.w	r5, r5, #1
 8007b30:	d0d4      	beq.n	8007adc <setvbuf+0xd4>
 8007b32:	2500      	movs	r5, #0
 8007b34:	e7d7      	b.n	8007ae6 <setvbuf+0xde>
 8007b36:	4648      	mov	r0, r9
 8007b38:	f000 f9c6 	bl	8007ec8 <malloc>
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d0ba      	beq.n	8007ab8 <setvbuf+0xb0>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	464d      	mov	r5, r9
 8007b4c:	e7d1      	b.n	8007af2 <setvbuf+0xea>
 8007b4e:	2500      	movs	r5, #0
 8007b50:	e7b4      	b.n	8007abc <setvbuf+0xb4>
 8007b52:	46a9      	mov	r9, r5
 8007b54:	e7f5      	b.n	8007b42 <setvbuf+0x13a>
 8007b56:	60a2      	str	r2, [r4, #8]
 8007b58:	e7e7      	b.n	8007b2a <setvbuf+0x122>
 8007b5a:	f04f 35ff 	mov.w	r5, #4294967295
 8007b5e:	e7c2      	b.n	8007ae6 <setvbuf+0xde>
 8007b60:	200003c4 	.word	0x200003c4

08007b64 <__sread>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	460c      	mov	r4, r1
 8007b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6c:	f000 f90e 	bl	8007d8c <_read_r>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	bfab      	itete	ge
 8007b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b76:	89a3      	ldrhlt	r3, [r4, #12]
 8007b78:	181b      	addge	r3, r3, r0
 8007b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b7e:	bfac      	ite	ge
 8007b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b82:	81a3      	strhlt	r3, [r4, #12]
 8007b84:	bd10      	pop	{r4, pc}

08007b86 <__swrite>:
 8007b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	898b      	ldrh	r3, [r1, #12]
 8007b8e:	05db      	lsls	r3, r3, #23
 8007b90:	4605      	mov	r5, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4616      	mov	r6, r2
 8007b96:	d505      	bpl.n	8007ba4 <__swrite+0x1e>
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f000 f8e2 	bl	8007d68 <_lseek_r>
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	f000 b8f9 	b.w	8007db0 <_write_r>

08007bbe <__sseek>:
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc6:	f000 f8cf 	bl	8007d68 <_lseek_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	bf15      	itete	ne
 8007bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bda:	81a3      	strheq	r3, [r4, #12]
 8007bdc:	bf18      	it	ne
 8007bde:	81a3      	strhne	r3, [r4, #12]
 8007be0:	bd10      	pop	{r4, pc}

08007be2 <__sclose>:
 8007be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be6:	f000 b8af 	b.w	8007d48 <_close_r>

08007bea <__swbuf_r>:
 8007bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bec:	460e      	mov	r6, r1
 8007bee:	4614      	mov	r4, r2
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	b118      	cbz	r0, 8007bfc <__swbuf_r+0x12>
 8007bf4:	6a03      	ldr	r3, [r0, #32]
 8007bf6:	b90b      	cbnz	r3, 8007bfc <__swbuf_r+0x12>
 8007bf8:	f7ff fe62 	bl	80078c0 <__sinit>
 8007bfc:	69a3      	ldr	r3, [r4, #24]
 8007bfe:	60a3      	str	r3, [r4, #8]
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	071a      	lsls	r2, r3, #28
 8007c04:	d525      	bpl.n	8007c52 <__swbuf_r+0x68>
 8007c06:	6923      	ldr	r3, [r4, #16]
 8007c08:	b31b      	cbz	r3, 8007c52 <__swbuf_r+0x68>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	6922      	ldr	r2, [r4, #16]
 8007c0e:	1a98      	subs	r0, r3, r2
 8007c10:	6963      	ldr	r3, [r4, #20]
 8007c12:	b2f6      	uxtb	r6, r6
 8007c14:	4283      	cmp	r3, r0
 8007c16:	4637      	mov	r7, r6
 8007c18:	dc04      	bgt.n	8007c24 <__swbuf_r+0x3a>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7ff fd87 	bl	8007730 <_fflush_r>
 8007c22:	b9e0      	cbnz	r0, 8007c5e <__swbuf_r+0x74>
 8007c24:	68a3      	ldr	r3, [r4, #8]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	60a3      	str	r3, [r4, #8]
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	6022      	str	r2, [r4, #0]
 8007c30:	701e      	strb	r6, [r3, #0]
 8007c32:	6962      	ldr	r2, [r4, #20]
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d004      	beq.n	8007c44 <__swbuf_r+0x5a>
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	07db      	lsls	r3, r3, #31
 8007c3e:	d506      	bpl.n	8007c4e <__swbuf_r+0x64>
 8007c40:	2e0a      	cmp	r6, #10
 8007c42:	d104      	bne.n	8007c4e <__swbuf_r+0x64>
 8007c44:	4621      	mov	r1, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	f7ff fd72 	bl	8007730 <_fflush_r>
 8007c4c:	b938      	cbnz	r0, 8007c5e <__swbuf_r+0x74>
 8007c4e:	4638      	mov	r0, r7
 8007c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 f805 	bl	8007c64 <__swsetup_r>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d0d5      	beq.n	8007c0a <__swbuf_r+0x20>
 8007c5e:	f04f 37ff 	mov.w	r7, #4294967295
 8007c62:	e7f4      	b.n	8007c4e <__swbuf_r+0x64>

08007c64 <__swsetup_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4b2a      	ldr	r3, [pc, #168]	; (8007d10 <__swsetup_r+0xac>)
 8007c68:	4605      	mov	r5, r0
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	b118      	cbz	r0, 8007c78 <__swsetup_r+0x14>
 8007c70:	6a03      	ldr	r3, [r0, #32]
 8007c72:	b90b      	cbnz	r3, 8007c78 <__swsetup_r+0x14>
 8007c74:	f7ff fe24 	bl	80078c0 <__sinit>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c7e:	0718      	lsls	r0, r3, #28
 8007c80:	d422      	bmi.n	8007cc8 <__swsetup_r+0x64>
 8007c82:	06d9      	lsls	r1, r3, #27
 8007c84:	d407      	bmi.n	8007c96 <__swsetup_r+0x32>
 8007c86:	2309      	movs	r3, #9
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	e034      	b.n	8007d00 <__swsetup_r+0x9c>
 8007c96:	0758      	lsls	r0, r3, #29
 8007c98:	d512      	bpl.n	8007cc0 <__swsetup_r+0x5c>
 8007c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c9c:	b141      	cbz	r1, 8007cb0 <__swsetup_r+0x4c>
 8007c9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ca2:	4299      	cmp	r1, r3
 8007ca4:	d002      	beq.n	8007cac <__swsetup_r+0x48>
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 f8c2 	bl	8007e30 <_free_r>
 8007cac:	2300      	movs	r3, #0
 8007cae:	6363      	str	r3, [r4, #52]	; 0x34
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cb6:	81a3      	strh	r3, [r4, #12]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6063      	str	r3, [r4, #4]
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	f043 0308 	orr.w	r3, r3, #8
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	b94b      	cbnz	r3, 8007ce0 <__swsetup_r+0x7c>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd6:	d003      	beq.n	8007ce0 <__swsetup_r+0x7c>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 fca2 	bl	8008624 <__smakebuf_r>
 8007ce0:	89a0      	ldrh	r0, [r4, #12]
 8007ce2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ce6:	f010 0301 	ands.w	r3, r0, #1
 8007cea:	d00a      	beq.n	8007d02 <__swsetup_r+0x9e>
 8007cec:	2300      	movs	r3, #0
 8007cee:	60a3      	str	r3, [r4, #8]
 8007cf0:	6963      	ldr	r3, [r4, #20]
 8007cf2:	425b      	negs	r3, r3
 8007cf4:	61a3      	str	r3, [r4, #24]
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	b943      	cbnz	r3, 8007d0c <__swsetup_r+0xa8>
 8007cfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cfe:	d1c4      	bne.n	8007c8a <__swsetup_r+0x26>
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	0781      	lsls	r1, r0, #30
 8007d04:	bf58      	it	pl
 8007d06:	6963      	ldrpl	r3, [r4, #20]
 8007d08:	60a3      	str	r3, [r4, #8]
 8007d0a:	e7f4      	b.n	8007cf6 <__swsetup_r+0x92>
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e7f7      	b.n	8007d00 <__swsetup_r+0x9c>
 8007d10:	200003c4 	.word	0x200003c4

08007d14 <memset>:
 8007d14:	4402      	add	r2, r0
 8007d16:	4603      	mov	r3, r0
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d100      	bne.n	8007d1e <memset+0xa>
 8007d1c:	4770      	bx	lr
 8007d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d22:	e7f9      	b.n	8007d18 <memset+0x4>

08007d24 <strncmp>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	b16a      	cbz	r2, 8007d44 <strncmp+0x20>
 8007d28:	3901      	subs	r1, #1
 8007d2a:	1884      	adds	r4, r0, r2
 8007d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d103      	bne.n	8007d40 <strncmp+0x1c>
 8007d38:	42a0      	cmp	r0, r4
 8007d3a:	d001      	beq.n	8007d40 <strncmp+0x1c>
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d1f5      	bne.n	8007d2c <strncmp+0x8>
 8007d40:	1ad0      	subs	r0, r2, r3
 8007d42:	bd10      	pop	{r4, pc}
 8007d44:	4610      	mov	r0, r2
 8007d46:	e7fc      	b.n	8007d42 <strncmp+0x1e>

08007d48 <_close_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d06      	ldr	r5, [pc, #24]	; (8007d64 <_close_r+0x1c>)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4608      	mov	r0, r1
 8007d52:	602b      	str	r3, [r5, #0]
 8007d54:	f7f9 faed 	bl	8001332 <_close>
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	d102      	bne.n	8007d62 <_close_r+0x1a>
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	b103      	cbz	r3, 8007d62 <_close_r+0x1a>
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	20000750 	.word	0x20000750

08007d68 <_lseek_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	; (8007d88 <_lseek_r+0x20>)
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	4608      	mov	r0, r1
 8007d70:	4611      	mov	r1, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f7f9 fb02 	bl	8001380 <_lseek>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_lseek_r+0x1e>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_lseek_r+0x1e>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20000750 	.word	0x20000750

08007d8c <_read_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d07      	ldr	r5, [pc, #28]	; (8007dac <_read_r+0x20>)
 8007d90:	4604      	mov	r4, r0
 8007d92:	4608      	mov	r0, r1
 8007d94:	4611      	mov	r1, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	602a      	str	r2, [r5, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f7f9 faac 	bl	80012f8 <_read>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_read_r+0x1e>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_read_r+0x1e>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	20000750 	.word	0x20000750

08007db0 <_write_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	; (8007dd0 <_write_r+0x20>)
 8007db4:	4604      	mov	r4, r0
 8007db6:	4608      	mov	r0, r1
 8007db8:	4611      	mov	r1, r2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	602a      	str	r2, [r5, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f7f8 fd4e 	bl	8000860 <_write>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_write_r+0x1e>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_write_r+0x1e>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20000750 	.word	0x20000750

08007dd4 <__errno>:
 8007dd4:	4b01      	ldr	r3, [pc, #4]	; (8007ddc <__errno+0x8>)
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	200003c4 	.word	0x200003c4

08007de0 <__libc_init_array>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	4d0d      	ldr	r5, [pc, #52]	; (8007e18 <__libc_init_array+0x38>)
 8007de4:	4c0d      	ldr	r4, [pc, #52]	; (8007e1c <__libc_init_array+0x3c>)
 8007de6:	1b64      	subs	r4, r4, r5
 8007de8:	10a4      	asrs	r4, r4, #2
 8007dea:	2600      	movs	r6, #0
 8007dec:	42a6      	cmp	r6, r4
 8007dee:	d109      	bne.n	8007e04 <__libc_init_array+0x24>
 8007df0:	4d0b      	ldr	r5, [pc, #44]	; (8007e20 <__libc_init_array+0x40>)
 8007df2:	4c0c      	ldr	r4, [pc, #48]	; (8007e24 <__libc_init_array+0x44>)
 8007df4:	f000 fc84 	bl	8008700 <_init>
 8007df8:	1b64      	subs	r4, r4, r5
 8007dfa:	10a4      	asrs	r4, r4, #2
 8007dfc:	2600      	movs	r6, #0
 8007dfe:	42a6      	cmp	r6, r4
 8007e00:	d105      	bne.n	8007e0e <__libc_init_array+0x2e>
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e08:	4798      	blx	r3
 8007e0a:	3601      	adds	r6, #1
 8007e0c:	e7ee      	b.n	8007dec <__libc_init_array+0xc>
 8007e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e12:	4798      	blx	r3
 8007e14:	3601      	adds	r6, #1
 8007e16:	e7f2      	b.n	8007dfe <__libc_init_array+0x1e>
 8007e18:	08008ca4 	.word	0x08008ca4
 8007e1c:	08008ca4 	.word	0x08008ca4
 8007e20:	08008ca4 	.word	0x08008ca4
 8007e24:	08008ca8 	.word	0x08008ca8

08007e28 <__retarget_lock_init_recursive>:
 8007e28:	4770      	bx	lr

08007e2a <__retarget_lock_acquire_recursive>:
 8007e2a:	4770      	bx	lr

08007e2c <__retarget_lock_release_recursive>:
 8007e2c:	4770      	bx	lr
	...

08007e30 <_free_r>:
 8007e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e32:	2900      	cmp	r1, #0
 8007e34:	d044      	beq.n	8007ec0 <_free_r+0x90>
 8007e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e3a:	9001      	str	r0, [sp, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e42:	bfb8      	it	lt
 8007e44:	18e4      	addlt	r4, r4, r3
 8007e46:	f000 f8e7 	bl	8008018 <__malloc_lock>
 8007e4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ec4 <_free_r+0x94>)
 8007e4c:	9801      	ldr	r0, [sp, #4]
 8007e4e:	6813      	ldr	r3, [r2, #0]
 8007e50:	b933      	cbnz	r3, 8007e60 <_free_r+0x30>
 8007e52:	6063      	str	r3, [r4, #4]
 8007e54:	6014      	str	r4, [r2, #0]
 8007e56:	b003      	add	sp, #12
 8007e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e5c:	f000 b8e2 	b.w	8008024 <__malloc_unlock>
 8007e60:	42a3      	cmp	r3, r4
 8007e62:	d908      	bls.n	8007e76 <_free_r+0x46>
 8007e64:	6825      	ldr	r5, [r4, #0]
 8007e66:	1961      	adds	r1, r4, r5
 8007e68:	428b      	cmp	r3, r1
 8007e6a:	bf01      	itttt	eq
 8007e6c:	6819      	ldreq	r1, [r3, #0]
 8007e6e:	685b      	ldreq	r3, [r3, #4]
 8007e70:	1949      	addeq	r1, r1, r5
 8007e72:	6021      	streq	r1, [r4, #0]
 8007e74:	e7ed      	b.n	8007e52 <_free_r+0x22>
 8007e76:	461a      	mov	r2, r3
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	b10b      	cbz	r3, 8007e80 <_free_r+0x50>
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d9fa      	bls.n	8007e76 <_free_r+0x46>
 8007e80:	6811      	ldr	r1, [r2, #0]
 8007e82:	1855      	adds	r5, r2, r1
 8007e84:	42a5      	cmp	r5, r4
 8007e86:	d10b      	bne.n	8007ea0 <_free_r+0x70>
 8007e88:	6824      	ldr	r4, [r4, #0]
 8007e8a:	4421      	add	r1, r4
 8007e8c:	1854      	adds	r4, r2, r1
 8007e8e:	42a3      	cmp	r3, r4
 8007e90:	6011      	str	r1, [r2, #0]
 8007e92:	d1e0      	bne.n	8007e56 <_free_r+0x26>
 8007e94:	681c      	ldr	r4, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	6053      	str	r3, [r2, #4]
 8007e9a:	440c      	add	r4, r1
 8007e9c:	6014      	str	r4, [r2, #0]
 8007e9e:	e7da      	b.n	8007e56 <_free_r+0x26>
 8007ea0:	d902      	bls.n	8007ea8 <_free_r+0x78>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6003      	str	r3, [r0, #0]
 8007ea6:	e7d6      	b.n	8007e56 <_free_r+0x26>
 8007ea8:	6825      	ldr	r5, [r4, #0]
 8007eaa:	1961      	adds	r1, r4, r5
 8007eac:	428b      	cmp	r3, r1
 8007eae:	bf04      	itt	eq
 8007eb0:	6819      	ldreq	r1, [r3, #0]
 8007eb2:	685b      	ldreq	r3, [r3, #4]
 8007eb4:	6063      	str	r3, [r4, #4]
 8007eb6:	bf04      	itt	eq
 8007eb8:	1949      	addeq	r1, r1, r5
 8007eba:	6021      	streq	r1, [r4, #0]
 8007ebc:	6054      	str	r4, [r2, #4]
 8007ebe:	e7ca      	b.n	8007e56 <_free_r+0x26>
 8007ec0:	b003      	add	sp, #12
 8007ec2:	bd30      	pop	{r4, r5, pc}
 8007ec4:	20000758 	.word	0x20000758

08007ec8 <malloc>:
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <malloc+0xc>)
 8007eca:	4601      	mov	r1, r0
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f000 b823 	b.w	8007f18 <_malloc_r>
 8007ed2:	bf00      	nop
 8007ed4:	200003c4 	.word	0x200003c4

08007ed8 <sbrk_aligned>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4e0e      	ldr	r6, [pc, #56]	; (8007f14 <sbrk_aligned+0x3c>)
 8007edc:	460c      	mov	r4, r1
 8007ede:	6831      	ldr	r1, [r6, #0]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	b911      	cbnz	r1, 8007eea <sbrk_aligned+0x12>
 8007ee4:	f000 fbfc 	bl	80086e0 <_sbrk_r>
 8007ee8:	6030      	str	r0, [r6, #0]
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 fbf7 	bl	80086e0 <_sbrk_r>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d00a      	beq.n	8007f0c <sbrk_aligned+0x34>
 8007ef6:	1cc4      	adds	r4, r0, #3
 8007ef8:	f024 0403 	bic.w	r4, r4, #3
 8007efc:	42a0      	cmp	r0, r4
 8007efe:	d007      	beq.n	8007f10 <sbrk_aligned+0x38>
 8007f00:	1a21      	subs	r1, r4, r0
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 fbec 	bl	80086e0 <_sbrk_r>
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d101      	bne.n	8007f10 <sbrk_aligned+0x38>
 8007f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007f10:	4620      	mov	r0, r4
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	2000075c 	.word	0x2000075c

08007f18 <_malloc_r>:
 8007f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	1ccd      	adds	r5, r1, #3
 8007f1e:	f025 0503 	bic.w	r5, r5, #3
 8007f22:	3508      	adds	r5, #8
 8007f24:	2d0c      	cmp	r5, #12
 8007f26:	bf38      	it	cc
 8007f28:	250c      	movcc	r5, #12
 8007f2a:	2d00      	cmp	r5, #0
 8007f2c:	4607      	mov	r7, r0
 8007f2e:	db01      	blt.n	8007f34 <_malloc_r+0x1c>
 8007f30:	42a9      	cmp	r1, r5
 8007f32:	d905      	bls.n	8007f40 <_malloc_r+0x28>
 8007f34:	230c      	movs	r3, #12
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	2600      	movs	r6, #0
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008014 <_malloc_r+0xfc>
 8007f44:	f000 f868 	bl	8008018 <__malloc_lock>
 8007f48:	f8d8 3000 	ldr.w	r3, [r8]
 8007f4c:	461c      	mov	r4, r3
 8007f4e:	bb5c      	cbnz	r4, 8007fa8 <_malloc_r+0x90>
 8007f50:	4629      	mov	r1, r5
 8007f52:	4638      	mov	r0, r7
 8007f54:	f7ff ffc0 	bl	8007ed8 <sbrk_aligned>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	d155      	bne.n	800800a <_malloc_r+0xf2>
 8007f5e:	f8d8 4000 	ldr.w	r4, [r8]
 8007f62:	4626      	mov	r6, r4
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	d145      	bne.n	8007ff4 <_malloc_r+0xdc>
 8007f68:	2c00      	cmp	r4, #0
 8007f6a:	d048      	beq.n	8007ffe <_malloc_r+0xe6>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4638      	mov	r0, r7
 8007f72:	eb04 0903 	add.w	r9, r4, r3
 8007f76:	f000 fbb3 	bl	80086e0 <_sbrk_r>
 8007f7a:	4581      	cmp	r9, r0
 8007f7c:	d13f      	bne.n	8007ffe <_malloc_r+0xe6>
 8007f7e:	6821      	ldr	r1, [r4, #0]
 8007f80:	1a6d      	subs	r5, r5, r1
 8007f82:	4629      	mov	r1, r5
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7ff ffa7 	bl	8007ed8 <sbrk_aligned>
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d037      	beq.n	8007ffe <_malloc_r+0xe6>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	442b      	add	r3, r5
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	f8d8 3000 	ldr.w	r3, [r8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d038      	beq.n	800800e <_malloc_r+0xf6>
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	42a2      	cmp	r2, r4
 8007fa0:	d12b      	bne.n	8007ffa <_malloc_r+0xe2>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	605a      	str	r2, [r3, #4]
 8007fa6:	e00f      	b.n	8007fc8 <_malloc_r+0xb0>
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	1b52      	subs	r2, r2, r5
 8007fac:	d41f      	bmi.n	8007fee <_malloc_r+0xd6>
 8007fae:	2a0b      	cmp	r2, #11
 8007fb0:	d917      	bls.n	8007fe2 <_malloc_r+0xca>
 8007fb2:	1961      	adds	r1, r4, r5
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	6025      	str	r5, [r4, #0]
 8007fb8:	bf18      	it	ne
 8007fba:	6059      	strne	r1, [r3, #4]
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	bf08      	it	eq
 8007fc0:	f8c8 1000 	streq.w	r1, [r8]
 8007fc4:	5162      	str	r2, [r4, r5]
 8007fc6:	604b      	str	r3, [r1, #4]
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f104 060b 	add.w	r6, r4, #11
 8007fce:	f000 f829 	bl	8008024 <__malloc_unlock>
 8007fd2:	f026 0607 	bic.w	r6, r6, #7
 8007fd6:	1d23      	adds	r3, r4, #4
 8007fd8:	1af2      	subs	r2, r6, r3
 8007fda:	d0ae      	beq.n	8007f3a <_malloc_r+0x22>
 8007fdc:	1b9b      	subs	r3, r3, r6
 8007fde:	50a3      	str	r3, [r4, r2]
 8007fe0:	e7ab      	b.n	8007f3a <_malloc_r+0x22>
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	6862      	ldr	r2, [r4, #4]
 8007fe6:	d1dd      	bne.n	8007fa4 <_malloc_r+0x8c>
 8007fe8:	f8c8 2000 	str.w	r2, [r8]
 8007fec:	e7ec      	b.n	8007fc8 <_malloc_r+0xb0>
 8007fee:	4623      	mov	r3, r4
 8007ff0:	6864      	ldr	r4, [r4, #4]
 8007ff2:	e7ac      	b.n	8007f4e <_malloc_r+0x36>
 8007ff4:	4634      	mov	r4, r6
 8007ff6:	6876      	ldr	r6, [r6, #4]
 8007ff8:	e7b4      	b.n	8007f64 <_malloc_r+0x4c>
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	e7cc      	b.n	8007f98 <_malloc_r+0x80>
 8007ffe:	230c      	movs	r3, #12
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	4638      	mov	r0, r7
 8008004:	f000 f80e 	bl	8008024 <__malloc_unlock>
 8008008:	e797      	b.n	8007f3a <_malloc_r+0x22>
 800800a:	6025      	str	r5, [r4, #0]
 800800c:	e7dc      	b.n	8007fc8 <_malloc_r+0xb0>
 800800e:	605b      	str	r3, [r3, #4]
 8008010:	deff      	udf	#255	; 0xff
 8008012:	bf00      	nop
 8008014:	20000758 	.word	0x20000758

08008018 <__malloc_lock>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__malloc_lock+0x8>)
 800801a:	f7ff bf06 	b.w	8007e2a <__retarget_lock_acquire_recursive>
 800801e:	bf00      	nop
 8008020:	20000754 	.word	0x20000754

08008024 <__malloc_unlock>:
 8008024:	4801      	ldr	r0, [pc, #4]	; (800802c <__malloc_unlock+0x8>)
 8008026:	f7ff bf01 	b.w	8007e2c <__retarget_lock_release_recursive>
 800802a:	bf00      	nop
 800802c:	20000754 	.word	0x20000754

08008030 <__sfputc_r>:
 8008030:	6893      	ldr	r3, [r2, #8]
 8008032:	3b01      	subs	r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	b410      	push	{r4}
 8008038:	6093      	str	r3, [r2, #8]
 800803a:	da08      	bge.n	800804e <__sfputc_r+0x1e>
 800803c:	6994      	ldr	r4, [r2, #24]
 800803e:	42a3      	cmp	r3, r4
 8008040:	db01      	blt.n	8008046 <__sfputc_r+0x16>
 8008042:	290a      	cmp	r1, #10
 8008044:	d103      	bne.n	800804e <__sfputc_r+0x1e>
 8008046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800804a:	f7ff bdce 	b.w	8007bea <__swbuf_r>
 800804e:	6813      	ldr	r3, [r2, #0]
 8008050:	1c58      	adds	r0, r3, #1
 8008052:	6010      	str	r0, [r2, #0]
 8008054:	7019      	strb	r1, [r3, #0]
 8008056:	4608      	mov	r0, r1
 8008058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800805c:	4770      	bx	lr

0800805e <__sfputs_r>:
 800805e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008060:	4606      	mov	r6, r0
 8008062:	460f      	mov	r7, r1
 8008064:	4614      	mov	r4, r2
 8008066:	18d5      	adds	r5, r2, r3
 8008068:	42ac      	cmp	r4, r5
 800806a:	d101      	bne.n	8008070 <__sfputs_r+0x12>
 800806c:	2000      	movs	r0, #0
 800806e:	e007      	b.n	8008080 <__sfputs_r+0x22>
 8008070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008074:	463a      	mov	r2, r7
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff ffda 	bl	8008030 <__sfputc_r>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d1f3      	bne.n	8008068 <__sfputs_r+0xa>
 8008080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008084 <_vfiprintf_r>:
 8008084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008088:	460d      	mov	r5, r1
 800808a:	b09d      	sub	sp, #116	; 0x74
 800808c:	4614      	mov	r4, r2
 800808e:	4698      	mov	r8, r3
 8008090:	4606      	mov	r6, r0
 8008092:	b118      	cbz	r0, 800809c <_vfiprintf_r+0x18>
 8008094:	6a03      	ldr	r3, [r0, #32]
 8008096:	b90b      	cbnz	r3, 800809c <_vfiprintf_r+0x18>
 8008098:	f7ff fc12 	bl	80078c0 <__sinit>
 800809c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800809e:	07d9      	lsls	r1, r3, #31
 80080a0:	d405      	bmi.n	80080ae <_vfiprintf_r+0x2a>
 80080a2:	89ab      	ldrh	r3, [r5, #12]
 80080a4:	059a      	lsls	r2, r3, #22
 80080a6:	d402      	bmi.n	80080ae <_vfiprintf_r+0x2a>
 80080a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080aa:	f7ff febe 	bl	8007e2a <__retarget_lock_acquire_recursive>
 80080ae:	89ab      	ldrh	r3, [r5, #12]
 80080b0:	071b      	lsls	r3, r3, #28
 80080b2:	d501      	bpl.n	80080b8 <_vfiprintf_r+0x34>
 80080b4:	692b      	ldr	r3, [r5, #16]
 80080b6:	b99b      	cbnz	r3, 80080e0 <_vfiprintf_r+0x5c>
 80080b8:	4629      	mov	r1, r5
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7ff fdd2 	bl	8007c64 <__swsetup_r>
 80080c0:	b170      	cbz	r0, 80080e0 <_vfiprintf_r+0x5c>
 80080c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080c4:	07dc      	lsls	r4, r3, #31
 80080c6:	d504      	bpl.n	80080d2 <_vfiprintf_r+0x4e>
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295
 80080cc:	b01d      	add	sp, #116	; 0x74
 80080ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d2:	89ab      	ldrh	r3, [r5, #12]
 80080d4:	0598      	lsls	r0, r3, #22
 80080d6:	d4f7      	bmi.n	80080c8 <_vfiprintf_r+0x44>
 80080d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080da:	f7ff fea7 	bl	8007e2c <__retarget_lock_release_recursive>
 80080de:	e7f3      	b.n	80080c8 <_vfiprintf_r+0x44>
 80080e0:	2300      	movs	r3, #0
 80080e2:	9309      	str	r3, [sp, #36]	; 0x24
 80080e4:	2320      	movs	r3, #32
 80080e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ee:	2330      	movs	r3, #48	; 0x30
 80080f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80082a4 <_vfiprintf_r+0x220>
 80080f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080f8:	f04f 0901 	mov.w	r9, #1
 80080fc:	4623      	mov	r3, r4
 80080fe:	469a      	mov	sl, r3
 8008100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008104:	b10a      	cbz	r2, 800810a <_vfiprintf_r+0x86>
 8008106:	2a25      	cmp	r2, #37	; 0x25
 8008108:	d1f9      	bne.n	80080fe <_vfiprintf_r+0x7a>
 800810a:	ebba 0b04 	subs.w	fp, sl, r4
 800810e:	d00b      	beq.n	8008128 <_vfiprintf_r+0xa4>
 8008110:	465b      	mov	r3, fp
 8008112:	4622      	mov	r2, r4
 8008114:	4629      	mov	r1, r5
 8008116:	4630      	mov	r0, r6
 8008118:	f7ff ffa1 	bl	800805e <__sfputs_r>
 800811c:	3001      	adds	r0, #1
 800811e:	f000 80a9 	beq.w	8008274 <_vfiprintf_r+0x1f0>
 8008122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008124:	445a      	add	r2, fp
 8008126:	9209      	str	r2, [sp, #36]	; 0x24
 8008128:	f89a 3000 	ldrb.w	r3, [sl]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80a1 	beq.w	8008274 <_vfiprintf_r+0x1f0>
 8008132:	2300      	movs	r3, #0
 8008134:	f04f 32ff 	mov.w	r2, #4294967295
 8008138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800813c:	f10a 0a01 	add.w	sl, sl, #1
 8008140:	9304      	str	r3, [sp, #16]
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008148:	931a      	str	r3, [sp, #104]	; 0x68
 800814a:	4654      	mov	r4, sl
 800814c:	2205      	movs	r2, #5
 800814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008152:	4854      	ldr	r0, [pc, #336]	; (80082a4 <_vfiprintf_r+0x220>)
 8008154:	f7f8 f854 	bl	8000200 <memchr>
 8008158:	9a04      	ldr	r2, [sp, #16]
 800815a:	b9d8      	cbnz	r0, 8008194 <_vfiprintf_r+0x110>
 800815c:	06d1      	lsls	r1, r2, #27
 800815e:	bf44      	itt	mi
 8008160:	2320      	movmi	r3, #32
 8008162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008166:	0713      	lsls	r3, r2, #28
 8008168:	bf44      	itt	mi
 800816a:	232b      	movmi	r3, #43	; 0x2b
 800816c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008170:	f89a 3000 	ldrb.w	r3, [sl]
 8008174:	2b2a      	cmp	r3, #42	; 0x2a
 8008176:	d015      	beq.n	80081a4 <_vfiprintf_r+0x120>
 8008178:	9a07      	ldr	r2, [sp, #28]
 800817a:	4654      	mov	r4, sl
 800817c:	2000      	movs	r0, #0
 800817e:	f04f 0c0a 	mov.w	ip, #10
 8008182:	4621      	mov	r1, r4
 8008184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008188:	3b30      	subs	r3, #48	; 0x30
 800818a:	2b09      	cmp	r3, #9
 800818c:	d94d      	bls.n	800822a <_vfiprintf_r+0x1a6>
 800818e:	b1b0      	cbz	r0, 80081be <_vfiprintf_r+0x13a>
 8008190:	9207      	str	r2, [sp, #28]
 8008192:	e014      	b.n	80081be <_vfiprintf_r+0x13a>
 8008194:	eba0 0308 	sub.w	r3, r0, r8
 8008198:	fa09 f303 	lsl.w	r3, r9, r3
 800819c:	4313      	orrs	r3, r2
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	46a2      	mov	sl, r4
 80081a2:	e7d2      	b.n	800814a <_vfiprintf_r+0xc6>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	1d19      	adds	r1, r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	9103      	str	r1, [sp, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bfbb      	ittet	lt
 80081b0:	425b      	neglt	r3, r3
 80081b2:	f042 0202 	orrlt.w	r2, r2, #2
 80081b6:	9307      	strge	r3, [sp, #28]
 80081b8:	9307      	strlt	r3, [sp, #28]
 80081ba:	bfb8      	it	lt
 80081bc:	9204      	strlt	r2, [sp, #16]
 80081be:	7823      	ldrb	r3, [r4, #0]
 80081c0:	2b2e      	cmp	r3, #46	; 0x2e
 80081c2:	d10c      	bne.n	80081de <_vfiprintf_r+0x15a>
 80081c4:	7863      	ldrb	r3, [r4, #1]
 80081c6:	2b2a      	cmp	r3, #42	; 0x2a
 80081c8:	d134      	bne.n	8008234 <_vfiprintf_r+0x1b0>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	1d1a      	adds	r2, r3, #4
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	9203      	str	r2, [sp, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfb8      	it	lt
 80081d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80081da:	3402      	adds	r4, #2
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80082b4 <_vfiprintf_r+0x230>
 80081e2:	7821      	ldrb	r1, [r4, #0]
 80081e4:	2203      	movs	r2, #3
 80081e6:	4650      	mov	r0, sl
 80081e8:	f7f8 f80a 	bl	8000200 <memchr>
 80081ec:	b138      	cbz	r0, 80081fe <_vfiprintf_r+0x17a>
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	eba0 000a 	sub.w	r0, r0, sl
 80081f4:	2240      	movs	r2, #64	; 0x40
 80081f6:	4082      	lsls	r2, r0
 80081f8:	4313      	orrs	r3, r2
 80081fa:	3401      	adds	r4, #1
 80081fc:	9304      	str	r3, [sp, #16]
 80081fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008202:	4829      	ldr	r0, [pc, #164]	; (80082a8 <_vfiprintf_r+0x224>)
 8008204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008208:	2206      	movs	r2, #6
 800820a:	f7f7 fff9 	bl	8000200 <memchr>
 800820e:	2800      	cmp	r0, #0
 8008210:	d03f      	beq.n	8008292 <_vfiprintf_r+0x20e>
 8008212:	4b26      	ldr	r3, [pc, #152]	; (80082ac <_vfiprintf_r+0x228>)
 8008214:	bb1b      	cbnz	r3, 800825e <_vfiprintf_r+0x1da>
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	3307      	adds	r3, #7
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	3308      	adds	r3, #8
 8008220:	9303      	str	r3, [sp, #12]
 8008222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008224:	443b      	add	r3, r7
 8008226:	9309      	str	r3, [sp, #36]	; 0x24
 8008228:	e768      	b.n	80080fc <_vfiprintf_r+0x78>
 800822a:	fb0c 3202 	mla	r2, ip, r2, r3
 800822e:	460c      	mov	r4, r1
 8008230:	2001      	movs	r0, #1
 8008232:	e7a6      	b.n	8008182 <_vfiprintf_r+0xfe>
 8008234:	2300      	movs	r3, #0
 8008236:	3401      	adds	r4, #1
 8008238:	9305      	str	r3, [sp, #20]
 800823a:	4619      	mov	r1, r3
 800823c:	f04f 0c0a 	mov.w	ip, #10
 8008240:	4620      	mov	r0, r4
 8008242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008246:	3a30      	subs	r2, #48	; 0x30
 8008248:	2a09      	cmp	r2, #9
 800824a:	d903      	bls.n	8008254 <_vfiprintf_r+0x1d0>
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0c6      	beq.n	80081de <_vfiprintf_r+0x15a>
 8008250:	9105      	str	r1, [sp, #20]
 8008252:	e7c4      	b.n	80081de <_vfiprintf_r+0x15a>
 8008254:	fb0c 2101 	mla	r1, ip, r1, r2
 8008258:	4604      	mov	r4, r0
 800825a:	2301      	movs	r3, #1
 800825c:	e7f0      	b.n	8008240 <_vfiprintf_r+0x1bc>
 800825e:	ab03      	add	r3, sp, #12
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	462a      	mov	r2, r5
 8008264:	4b12      	ldr	r3, [pc, #72]	; (80082b0 <_vfiprintf_r+0x22c>)
 8008266:	a904      	add	r1, sp, #16
 8008268:	4630      	mov	r0, r6
 800826a:	f3af 8000 	nop.w
 800826e:	4607      	mov	r7, r0
 8008270:	1c78      	adds	r0, r7, #1
 8008272:	d1d6      	bne.n	8008222 <_vfiprintf_r+0x19e>
 8008274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008276:	07d9      	lsls	r1, r3, #31
 8008278:	d405      	bmi.n	8008286 <_vfiprintf_r+0x202>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	059a      	lsls	r2, r3, #22
 800827e:	d402      	bmi.n	8008286 <_vfiprintf_r+0x202>
 8008280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008282:	f7ff fdd3 	bl	8007e2c <__retarget_lock_release_recursive>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	065b      	lsls	r3, r3, #25
 800828a:	f53f af1d 	bmi.w	80080c8 <_vfiprintf_r+0x44>
 800828e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008290:	e71c      	b.n	80080cc <_vfiprintf_r+0x48>
 8008292:	ab03      	add	r3, sp, #12
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	462a      	mov	r2, r5
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <_vfiprintf_r+0x22c>)
 800829a:	a904      	add	r1, sp, #16
 800829c:	4630      	mov	r0, r6
 800829e:	f000 f879 	bl	8008394 <_printf_i>
 80082a2:	e7e4      	b.n	800826e <_vfiprintf_r+0x1ea>
 80082a4:	08008c71 	.word	0x08008c71
 80082a8:	08008c7b 	.word	0x08008c7b
 80082ac:	00000000 	.word	0x00000000
 80082b0:	0800805f 	.word	0x0800805f
 80082b4:	08008c77 	.word	0x08008c77

080082b8 <_printf_common>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	4616      	mov	r6, r2
 80082be:	4699      	mov	r9, r3
 80082c0:	688a      	ldr	r2, [r1, #8]
 80082c2:	690b      	ldr	r3, [r1, #16]
 80082c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	bfb8      	it	lt
 80082cc:	4613      	movlt	r3, r2
 80082ce:	6033      	str	r3, [r6, #0]
 80082d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082d4:	4607      	mov	r7, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	b10a      	cbz	r2, 80082de <_printf_common+0x26>
 80082da:	3301      	adds	r3, #1
 80082dc:	6033      	str	r3, [r6, #0]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	0699      	lsls	r1, r3, #26
 80082e2:	bf42      	ittt	mi
 80082e4:	6833      	ldrmi	r3, [r6, #0]
 80082e6:	3302      	addmi	r3, #2
 80082e8:	6033      	strmi	r3, [r6, #0]
 80082ea:	6825      	ldr	r5, [r4, #0]
 80082ec:	f015 0506 	ands.w	r5, r5, #6
 80082f0:	d106      	bne.n	8008300 <_printf_common+0x48>
 80082f2:	f104 0a19 	add.w	sl, r4, #25
 80082f6:	68e3      	ldr	r3, [r4, #12]
 80082f8:	6832      	ldr	r2, [r6, #0]
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	dc26      	bgt.n	800834e <_printf_common+0x96>
 8008300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008304:	1e13      	subs	r3, r2, #0
 8008306:	6822      	ldr	r2, [r4, #0]
 8008308:	bf18      	it	ne
 800830a:	2301      	movne	r3, #1
 800830c:	0692      	lsls	r2, r2, #26
 800830e:	d42b      	bmi.n	8008368 <_printf_common+0xb0>
 8008310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008314:	4649      	mov	r1, r9
 8008316:	4638      	mov	r0, r7
 8008318:	47c0      	blx	r8
 800831a:	3001      	adds	r0, #1
 800831c:	d01e      	beq.n	800835c <_printf_common+0xa4>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	f003 0306 	and.w	r3, r3, #6
 8008326:	2b04      	cmp	r3, #4
 8008328:	bf02      	ittt	eq
 800832a:	68e5      	ldreq	r5, [r4, #12]
 800832c:	6833      	ldreq	r3, [r6, #0]
 800832e:	1aed      	subeq	r5, r5, r3
 8008330:	68a3      	ldr	r3, [r4, #8]
 8008332:	bf0c      	ite	eq
 8008334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008338:	2500      	movne	r5, #0
 800833a:	4293      	cmp	r3, r2
 800833c:	bfc4      	itt	gt
 800833e:	1a9b      	subgt	r3, r3, r2
 8008340:	18ed      	addgt	r5, r5, r3
 8008342:	2600      	movs	r6, #0
 8008344:	341a      	adds	r4, #26
 8008346:	42b5      	cmp	r5, r6
 8008348:	d11a      	bne.n	8008380 <_printf_common+0xc8>
 800834a:	2000      	movs	r0, #0
 800834c:	e008      	b.n	8008360 <_printf_common+0xa8>
 800834e:	2301      	movs	r3, #1
 8008350:	4652      	mov	r2, sl
 8008352:	4649      	mov	r1, r9
 8008354:	4638      	mov	r0, r7
 8008356:	47c0      	blx	r8
 8008358:	3001      	adds	r0, #1
 800835a:	d103      	bne.n	8008364 <_printf_common+0xac>
 800835c:	f04f 30ff 	mov.w	r0, #4294967295
 8008360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008364:	3501      	adds	r5, #1
 8008366:	e7c6      	b.n	80082f6 <_printf_common+0x3e>
 8008368:	18e1      	adds	r1, r4, r3
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	2030      	movs	r0, #48	; 0x30
 800836e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008372:	4422      	add	r2, r4
 8008374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800837c:	3302      	adds	r3, #2
 800837e:	e7c7      	b.n	8008310 <_printf_common+0x58>
 8008380:	2301      	movs	r3, #1
 8008382:	4622      	mov	r2, r4
 8008384:	4649      	mov	r1, r9
 8008386:	4638      	mov	r0, r7
 8008388:	47c0      	blx	r8
 800838a:	3001      	adds	r0, #1
 800838c:	d0e6      	beq.n	800835c <_printf_common+0xa4>
 800838e:	3601      	adds	r6, #1
 8008390:	e7d9      	b.n	8008346 <_printf_common+0x8e>
	...

08008394 <_printf_i>:
 8008394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008398:	7e0f      	ldrb	r7, [r1, #24]
 800839a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800839c:	2f78      	cmp	r7, #120	; 0x78
 800839e:	4691      	mov	r9, r2
 80083a0:	4680      	mov	r8, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	469a      	mov	sl, r3
 80083a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083aa:	d807      	bhi.n	80083bc <_printf_i+0x28>
 80083ac:	2f62      	cmp	r7, #98	; 0x62
 80083ae:	d80a      	bhi.n	80083c6 <_printf_i+0x32>
 80083b0:	2f00      	cmp	r7, #0
 80083b2:	f000 80d4 	beq.w	800855e <_printf_i+0x1ca>
 80083b6:	2f58      	cmp	r7, #88	; 0x58
 80083b8:	f000 80c0 	beq.w	800853c <_printf_i+0x1a8>
 80083bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083c4:	e03a      	b.n	800843c <_printf_i+0xa8>
 80083c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ca:	2b15      	cmp	r3, #21
 80083cc:	d8f6      	bhi.n	80083bc <_printf_i+0x28>
 80083ce:	a101      	add	r1, pc, #4	; (adr r1, 80083d4 <_printf_i+0x40>)
 80083d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d4:	0800842d 	.word	0x0800842d
 80083d8:	08008441 	.word	0x08008441
 80083dc:	080083bd 	.word	0x080083bd
 80083e0:	080083bd 	.word	0x080083bd
 80083e4:	080083bd 	.word	0x080083bd
 80083e8:	080083bd 	.word	0x080083bd
 80083ec:	08008441 	.word	0x08008441
 80083f0:	080083bd 	.word	0x080083bd
 80083f4:	080083bd 	.word	0x080083bd
 80083f8:	080083bd 	.word	0x080083bd
 80083fc:	080083bd 	.word	0x080083bd
 8008400:	08008545 	.word	0x08008545
 8008404:	0800846d 	.word	0x0800846d
 8008408:	080084ff 	.word	0x080084ff
 800840c:	080083bd 	.word	0x080083bd
 8008410:	080083bd 	.word	0x080083bd
 8008414:	08008567 	.word	0x08008567
 8008418:	080083bd 	.word	0x080083bd
 800841c:	0800846d 	.word	0x0800846d
 8008420:	080083bd 	.word	0x080083bd
 8008424:	080083bd 	.word	0x080083bd
 8008428:	08008507 	.word	0x08008507
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	1d1a      	adds	r2, r3, #4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	602a      	str	r2, [r5, #0]
 8008434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800843c:	2301      	movs	r3, #1
 800843e:	e09f      	b.n	8008580 <_printf_i+0x1ec>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	682b      	ldr	r3, [r5, #0]
 8008444:	0607      	lsls	r7, r0, #24
 8008446:	f103 0104 	add.w	r1, r3, #4
 800844a:	6029      	str	r1, [r5, #0]
 800844c:	d501      	bpl.n	8008452 <_printf_i+0xbe>
 800844e:	681e      	ldr	r6, [r3, #0]
 8008450:	e003      	b.n	800845a <_printf_i+0xc6>
 8008452:	0646      	lsls	r6, r0, #25
 8008454:	d5fb      	bpl.n	800844e <_printf_i+0xba>
 8008456:	f9b3 6000 	ldrsh.w	r6, [r3]
 800845a:	2e00      	cmp	r6, #0
 800845c:	da03      	bge.n	8008466 <_printf_i+0xd2>
 800845e:	232d      	movs	r3, #45	; 0x2d
 8008460:	4276      	negs	r6, r6
 8008462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008466:	485a      	ldr	r0, [pc, #360]	; (80085d0 <_printf_i+0x23c>)
 8008468:	230a      	movs	r3, #10
 800846a:	e012      	b.n	8008492 <_printf_i+0xfe>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	6820      	ldr	r0, [r4, #0]
 8008470:	1d19      	adds	r1, r3, #4
 8008472:	6029      	str	r1, [r5, #0]
 8008474:	0605      	lsls	r5, r0, #24
 8008476:	d501      	bpl.n	800847c <_printf_i+0xe8>
 8008478:	681e      	ldr	r6, [r3, #0]
 800847a:	e002      	b.n	8008482 <_printf_i+0xee>
 800847c:	0641      	lsls	r1, r0, #25
 800847e:	d5fb      	bpl.n	8008478 <_printf_i+0xe4>
 8008480:	881e      	ldrh	r6, [r3, #0]
 8008482:	4853      	ldr	r0, [pc, #332]	; (80085d0 <_printf_i+0x23c>)
 8008484:	2f6f      	cmp	r7, #111	; 0x6f
 8008486:	bf0c      	ite	eq
 8008488:	2308      	moveq	r3, #8
 800848a:	230a      	movne	r3, #10
 800848c:	2100      	movs	r1, #0
 800848e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008492:	6865      	ldr	r5, [r4, #4]
 8008494:	60a5      	str	r5, [r4, #8]
 8008496:	2d00      	cmp	r5, #0
 8008498:	bfa2      	ittt	ge
 800849a:	6821      	ldrge	r1, [r4, #0]
 800849c:	f021 0104 	bicge.w	r1, r1, #4
 80084a0:	6021      	strge	r1, [r4, #0]
 80084a2:	b90e      	cbnz	r6, 80084a8 <_printf_i+0x114>
 80084a4:	2d00      	cmp	r5, #0
 80084a6:	d04b      	beq.n	8008540 <_printf_i+0x1ac>
 80084a8:	4615      	mov	r5, r2
 80084aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80084ae:	fb03 6711 	mls	r7, r3, r1, r6
 80084b2:	5dc7      	ldrb	r7, [r0, r7]
 80084b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084b8:	4637      	mov	r7, r6
 80084ba:	42bb      	cmp	r3, r7
 80084bc:	460e      	mov	r6, r1
 80084be:	d9f4      	bls.n	80084aa <_printf_i+0x116>
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d10b      	bne.n	80084dc <_printf_i+0x148>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	07de      	lsls	r6, r3, #31
 80084c8:	d508      	bpl.n	80084dc <_printf_i+0x148>
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	6861      	ldr	r1, [r4, #4]
 80084ce:	4299      	cmp	r1, r3
 80084d0:	bfde      	ittt	le
 80084d2:	2330      	movle	r3, #48	; 0x30
 80084d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084dc:	1b52      	subs	r2, r2, r5
 80084de:	6122      	str	r2, [r4, #16]
 80084e0:	f8cd a000 	str.w	sl, [sp]
 80084e4:	464b      	mov	r3, r9
 80084e6:	aa03      	add	r2, sp, #12
 80084e8:	4621      	mov	r1, r4
 80084ea:	4640      	mov	r0, r8
 80084ec:	f7ff fee4 	bl	80082b8 <_printf_common>
 80084f0:	3001      	adds	r0, #1
 80084f2:	d14a      	bne.n	800858a <_printf_i+0x1f6>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	b004      	add	sp, #16
 80084fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	f043 0320 	orr.w	r3, r3, #32
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	4833      	ldr	r0, [pc, #204]	; (80085d4 <_printf_i+0x240>)
 8008508:	2778      	movs	r7, #120	; 0x78
 800850a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	6829      	ldr	r1, [r5, #0]
 8008512:	061f      	lsls	r7, r3, #24
 8008514:	f851 6b04 	ldr.w	r6, [r1], #4
 8008518:	d402      	bmi.n	8008520 <_printf_i+0x18c>
 800851a:	065f      	lsls	r7, r3, #25
 800851c:	bf48      	it	mi
 800851e:	b2b6      	uxthmi	r6, r6
 8008520:	07df      	lsls	r7, r3, #31
 8008522:	bf48      	it	mi
 8008524:	f043 0320 	orrmi.w	r3, r3, #32
 8008528:	6029      	str	r1, [r5, #0]
 800852a:	bf48      	it	mi
 800852c:	6023      	strmi	r3, [r4, #0]
 800852e:	b91e      	cbnz	r6, 8008538 <_printf_i+0x1a4>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	f023 0320 	bic.w	r3, r3, #32
 8008536:	6023      	str	r3, [r4, #0]
 8008538:	2310      	movs	r3, #16
 800853a:	e7a7      	b.n	800848c <_printf_i+0xf8>
 800853c:	4824      	ldr	r0, [pc, #144]	; (80085d0 <_printf_i+0x23c>)
 800853e:	e7e4      	b.n	800850a <_printf_i+0x176>
 8008540:	4615      	mov	r5, r2
 8008542:	e7bd      	b.n	80084c0 <_printf_i+0x12c>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	6826      	ldr	r6, [r4, #0]
 8008548:	6961      	ldr	r1, [r4, #20]
 800854a:	1d18      	adds	r0, r3, #4
 800854c:	6028      	str	r0, [r5, #0]
 800854e:	0635      	lsls	r5, r6, #24
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	d501      	bpl.n	8008558 <_printf_i+0x1c4>
 8008554:	6019      	str	r1, [r3, #0]
 8008556:	e002      	b.n	800855e <_printf_i+0x1ca>
 8008558:	0670      	lsls	r0, r6, #25
 800855a:	d5fb      	bpl.n	8008554 <_printf_i+0x1c0>
 800855c:	8019      	strh	r1, [r3, #0]
 800855e:	2300      	movs	r3, #0
 8008560:	6123      	str	r3, [r4, #16]
 8008562:	4615      	mov	r5, r2
 8008564:	e7bc      	b.n	80084e0 <_printf_i+0x14c>
 8008566:	682b      	ldr	r3, [r5, #0]
 8008568:	1d1a      	adds	r2, r3, #4
 800856a:	602a      	str	r2, [r5, #0]
 800856c:	681d      	ldr	r5, [r3, #0]
 800856e:	6862      	ldr	r2, [r4, #4]
 8008570:	2100      	movs	r1, #0
 8008572:	4628      	mov	r0, r5
 8008574:	f7f7 fe44 	bl	8000200 <memchr>
 8008578:	b108      	cbz	r0, 800857e <_printf_i+0x1ea>
 800857a:	1b40      	subs	r0, r0, r5
 800857c:	6060      	str	r0, [r4, #4]
 800857e:	6863      	ldr	r3, [r4, #4]
 8008580:	6123      	str	r3, [r4, #16]
 8008582:	2300      	movs	r3, #0
 8008584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008588:	e7aa      	b.n	80084e0 <_printf_i+0x14c>
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	462a      	mov	r2, r5
 800858e:	4649      	mov	r1, r9
 8008590:	4640      	mov	r0, r8
 8008592:	47d0      	blx	sl
 8008594:	3001      	adds	r0, #1
 8008596:	d0ad      	beq.n	80084f4 <_printf_i+0x160>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	079b      	lsls	r3, r3, #30
 800859c:	d413      	bmi.n	80085c6 <_printf_i+0x232>
 800859e:	68e0      	ldr	r0, [r4, #12]
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	4298      	cmp	r0, r3
 80085a4:	bfb8      	it	lt
 80085a6:	4618      	movlt	r0, r3
 80085a8:	e7a6      	b.n	80084f8 <_printf_i+0x164>
 80085aa:	2301      	movs	r3, #1
 80085ac:	4632      	mov	r2, r6
 80085ae:	4649      	mov	r1, r9
 80085b0:	4640      	mov	r0, r8
 80085b2:	47d0      	blx	sl
 80085b4:	3001      	adds	r0, #1
 80085b6:	d09d      	beq.n	80084f4 <_printf_i+0x160>
 80085b8:	3501      	adds	r5, #1
 80085ba:	68e3      	ldr	r3, [r4, #12]
 80085bc:	9903      	ldr	r1, [sp, #12]
 80085be:	1a5b      	subs	r3, r3, r1
 80085c0:	42ab      	cmp	r3, r5
 80085c2:	dcf2      	bgt.n	80085aa <_printf_i+0x216>
 80085c4:	e7eb      	b.n	800859e <_printf_i+0x20a>
 80085c6:	2500      	movs	r5, #0
 80085c8:	f104 0619 	add.w	r6, r4, #25
 80085cc:	e7f5      	b.n	80085ba <_printf_i+0x226>
 80085ce:	bf00      	nop
 80085d0:	08008c82 	.word	0x08008c82
 80085d4:	08008c93 	.word	0x08008c93

080085d8 <__swhatbuf_r>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	460c      	mov	r4, r1
 80085dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e0:	2900      	cmp	r1, #0
 80085e2:	b096      	sub	sp, #88	; 0x58
 80085e4:	4615      	mov	r5, r2
 80085e6:	461e      	mov	r6, r3
 80085e8:	da0d      	bge.n	8008606 <__swhatbuf_r+0x2e>
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80085f0:	f04f 0100 	mov.w	r1, #0
 80085f4:	bf0c      	ite	eq
 80085f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80085fa:	2340      	movne	r3, #64	; 0x40
 80085fc:	2000      	movs	r0, #0
 80085fe:	6031      	str	r1, [r6, #0]
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	b016      	add	sp, #88	; 0x58
 8008604:	bd70      	pop	{r4, r5, r6, pc}
 8008606:	466a      	mov	r2, sp
 8008608:	f000 f848 	bl	800869c <_fstat_r>
 800860c:	2800      	cmp	r0, #0
 800860e:	dbec      	blt.n	80085ea <__swhatbuf_r+0x12>
 8008610:	9901      	ldr	r1, [sp, #4]
 8008612:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008616:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800861a:	4259      	negs	r1, r3
 800861c:	4159      	adcs	r1, r3
 800861e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008622:	e7eb      	b.n	80085fc <__swhatbuf_r+0x24>

08008624 <__smakebuf_r>:
 8008624:	898b      	ldrh	r3, [r1, #12]
 8008626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008628:	079d      	lsls	r5, r3, #30
 800862a:	4606      	mov	r6, r0
 800862c:	460c      	mov	r4, r1
 800862e:	d507      	bpl.n	8008640 <__smakebuf_r+0x1c>
 8008630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	2301      	movs	r3, #1
 800863a:	6163      	str	r3, [r4, #20]
 800863c:	b002      	add	sp, #8
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	ab01      	add	r3, sp, #4
 8008642:	466a      	mov	r2, sp
 8008644:	f7ff ffc8 	bl	80085d8 <__swhatbuf_r>
 8008648:	9900      	ldr	r1, [sp, #0]
 800864a:	4605      	mov	r5, r0
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff fc63 	bl	8007f18 <_malloc_r>
 8008652:	b948      	cbnz	r0, 8008668 <__smakebuf_r+0x44>
 8008654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008658:	059a      	lsls	r2, r3, #22
 800865a:	d4ef      	bmi.n	800863c <__smakebuf_r+0x18>
 800865c:	f023 0303 	bic.w	r3, r3, #3
 8008660:	f043 0302 	orr.w	r3, r3, #2
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	e7e3      	b.n	8008630 <__smakebuf_r+0xc>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	6020      	str	r0, [r4, #0]
 800866c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	9b00      	ldr	r3, [sp, #0]
 8008674:	6163      	str	r3, [r4, #20]
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	6120      	str	r0, [r4, #16]
 800867a:	b15b      	cbz	r3, 8008694 <__smakebuf_r+0x70>
 800867c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008680:	4630      	mov	r0, r6
 8008682:	f000 f81d 	bl	80086c0 <_isatty_r>
 8008686:	b128      	cbz	r0, 8008694 <__smakebuf_r+0x70>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	431d      	orrs	r5, r3
 8008698:	81a5      	strh	r5, [r4, #12]
 800869a:	e7cf      	b.n	800863c <__smakebuf_r+0x18>

0800869c <_fstat_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4d07      	ldr	r5, [pc, #28]	; (80086bc <_fstat_r+0x20>)
 80086a0:	2300      	movs	r3, #0
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	4611      	mov	r1, r2
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f7f8 fe4e 	bl	800134a <_fstat>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d102      	bne.n	80086b8 <_fstat_r+0x1c>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	b103      	cbz	r3, 80086b8 <_fstat_r+0x1c>
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	bf00      	nop
 80086bc:	20000750 	.word	0x20000750

080086c0 <_isatty_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d06      	ldr	r5, [pc, #24]	; (80086dc <_isatty_r+0x1c>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7f8 fe4d 	bl	800136a <_isatty>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_isatty_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_isatty_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	20000750 	.word	0x20000750

080086e0 <_sbrk_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d06      	ldr	r5, [pc, #24]	; (80086fc <_sbrk_r+0x1c>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f7f8 fe56 	bl	800139c <_sbrk>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_sbrk_r+0x1a>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_sbrk_r+0x1a>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20000750 	.word	0x20000750

08008700 <_init>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	bf00      	nop
 8008704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008706:	bc08      	pop	{r3}
 8008708:	469e      	mov	lr, r3
 800870a:	4770      	bx	lr

0800870c <_fini>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr
