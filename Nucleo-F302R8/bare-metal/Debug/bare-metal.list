
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005188  08005188  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005188  08005188  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005188  08005188  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000007c  0800520c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  0800520c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcda  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002116  00000000  00000000  0002dd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  000306e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6f1  00000000  00000000  00030e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcae  00000000  00000000  0004d549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e7f5  00000000  00000000  000591f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f79ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000f7a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ea4 	.word	0x08004ea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004ea4 	.word	0x08004ea4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <promt>:

char *argList[] = {"on", "off", "blink"};
//


void promt() {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <promt+0x1c>)
 8000286:	f003 ff37 	bl	80040f8 <iprintf>
   fflush(stdout);
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <promt+0x20>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	4618      	mov	r0, r3
 8000292:	f003 fd4f 	bl	8003d34 <fflush>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	08004ed8 	.word	0x08004ed8
 80002a0:	20000018 	.word	0x20000018

080002a4 <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b08b      	sub	sp, #44	; 0x2c
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
   int i = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	627b      	str	r3, [r7, #36]	; 0x24

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 80002b2:	e016      	b.n	80002e2 <executeCmd+0x3e>
      if (strncmp(cmdList[i], termInput, strlen(cmdList[i])) == 0) {
 80002b4:	4a5a      	ldr	r2, [pc, #360]	; (8000420 <executeCmd+0x17c>)
 80002b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80002bc:	4a58      	ldr	r2, [pc, #352]	; (8000420 <executeCmd+0x17c>)
 80002be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff83 	bl	80001d0 <strlen>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	6879      	ldr	r1, [r7, #4]
 80002d0:	4620      	mov	r0, r4
 80002d2:	f004 f8b8 	bl	8004446 <strncmp>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d009      	beq.n	80002f0 <executeCmd+0x4c>
   for (; i < numberOfCommands; i++) {
 80002dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002de:	3301      	adds	r3, #1
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
 80002e2:	4b50      	ldr	r3, [pc, #320]	; (8000424 <executeCmd+0x180>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	461a      	mov	r2, r3
 80002e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ea:	4293      	cmp	r3, r2
 80002ec:	dbe2      	blt.n	80002b4 <executeCmd+0x10>
 80002ee:	e000      	b.n	80002f2 <executeCmd+0x4e>
         // The command entered is found in the command-list
         break;
 80002f0:	bf00      	nop
      }
   }

   // Execute the command if part of the command-list.
   if (i >= sizeof(cmdList)) {
 80002f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f4:	2b07      	cmp	r3, #7
 80002f6:	d907      	bls.n	8000308 <executeCmd+0x64>
      printf("\r\n%s is not recognized\r\n", termInput);
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	484b      	ldr	r0, [pc, #300]	; (8000428 <executeCmd+0x184>)
 80002fc:	f003 fefc 	bl	80040f8 <iprintf>
      promt();
 8000300:	f7ff ffbe 	bl	8000280 <promt>
      return -1;
 8000304:	23ff      	movs	r3, #255	; 0xff
 8000306:	e087      	b.n	8000418 <executeCmd+0x174>
   }
   else {
      switch (i) {
 8000308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <executeCmd+0x72>
 800030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000310:	2b01      	cmp	r3, #1
 8000312:	d077      	beq.n	8000404 <executeCmd+0x160>
 8000314:	e079      	b.n	800040a <executeCmd+0x166>
         case LD2: { // Parsing parameters
		   char param1[5] = {0};
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
 800031a:	2300      	movs	r3, #0
 800031c:	763b      	strb	r3, [r7, #24]
		   char param2[5] = {0};
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	2300      	movs	r3, #0
 8000324:	743b      	strb	r3, [r7, #16]
		   int j = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	623b      	str	r3, [r7, #32]
		   // The first parameter
		   for (; j<5; j++){
 800032a:	e016      	b.n	800035a <executeCmd+0xb6>
			  if (termInput[4+j] != ' ') {
 800032c:	6a3b      	ldr	r3, [r7, #32]
 800032e:	3304      	adds	r3, #4
 8000330:	461a      	mov	r2, r3
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b20      	cmp	r3, #32
 800033a:	d012      	beq.n	8000362 <executeCmd+0xbe>
				  param1[j] = termInput[4+j];
 800033c:	6a3b      	ldr	r3, [r7, #32]
 800033e:	3304      	adds	r3, #4
 8000340:	461a      	mov	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	7819      	ldrb	r1, [r3, #0]
 8000348:	f107 0214 	add.w	r2, r7, #20
 800034c:	6a3b      	ldr	r3, [r7, #32]
 800034e:	4413      	add	r3, r2
 8000350:	460a      	mov	r2, r1
 8000352:	701a      	strb	r2, [r3, #0]
		   for (; j<5; j++){
 8000354:	6a3b      	ldr	r3, [r7, #32]
 8000356:	3301      	adds	r3, #1
 8000358:	623b      	str	r3, [r7, #32]
 800035a:	6a3b      	ldr	r3, [r7, #32]
 800035c:	2b04      	cmp	r3, #4
 800035e:	dde5      	ble.n	800032c <executeCmd+0x88>
 8000360:	e000      	b.n	8000364 <executeCmd+0xc0>
			  }
			  else
			  break;
 8000362:	bf00      	nop
		   }

		   if ((j > 0)&&(param1[1]=='l')) {
 8000364:	6a3b      	ldr	r3, [r7, #32]
 8000366:	2b00      	cmp	r3, #0
 8000368:	dd37      	ble.n	80003da <executeCmd+0x136>
 800036a:	7d7b      	ldrb	r3, [r7, #21]
 800036c:	2b6c      	cmp	r3, #108	; 0x6c
 800036e:	d134      	bne.n	80003da <executeCmd+0x136>
			   int k = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	61fb      	str	r3, [r7, #28]
			   // read the next argument/parameter
			   for (; k<5; k++){
 8000374:	e01a      	b.n	80003ac <executeCmd+0x108>
				  if (termInput[5+j+k] != ' ') {
 8000376:	6a3b      	ldr	r3, [r7, #32]
 8000378:	1d5a      	adds	r2, r3, #5
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	4413      	add	r3, r2
 800037e:	461a      	mov	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4413      	add	r3, r2
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b20      	cmp	r3, #32
 8000388:	d014      	beq.n	80003b4 <executeCmd+0x110>
					 param2[k] = termInput[5+j+k];
 800038a:	6a3b      	ldr	r3, [r7, #32]
 800038c:	1d5a      	adds	r2, r3, #5
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	4413      	add	r3, r2
 8000392:	461a      	mov	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	7819      	ldrb	r1, [r3, #0]
 800039a:	f107 020c 	add.w	r2, r7, #12
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	4413      	add	r3, r2
 80003a2:	460a      	mov	r2, r1
 80003a4:	701a      	strb	r2, [r3, #0]
			   for (; k<5; k++){
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	3301      	adds	r3, #1
 80003aa:	61fb      	str	r3, [r7, #28]
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	dde1      	ble.n	8000376 <executeCmd+0xd2>
 80003b2:	e000      	b.n	80003b6 <executeCmd+0x112>
				  }
				  else
					 break;
 80003b4:	bf00      	nop
			   }
			   msValue = atoi(&param2[0]);
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 fbee 	bl	8003b9c <atoi>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4a1a      	ldr	r2, [pc, #104]	; (800042c <executeCmd+0x188>)
 80003c4:	6013      	str	r3, [r2, #0]
			   printf("\r\nBlinking LD2 every %d ms\r\n", msValue);
 80003c6:	4b19      	ldr	r3, [pc, #100]	; (800042c <executeCmd+0x188>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <executeCmd+0x18c>)
 80003ce:	f003 fe93 	bl	80040f8 <iprintf>
			   led2 = BLINKING;
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <executeCmd+0x190>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	701a      	strb	r2, [r3, #0]
		   if ((j > 0)&&(param1[1]=='l')) {
 80003d8:	e013      	b.n	8000402 <executeCmd+0x15e>
		   }
		   else if ((j > 0)&&(param1[1]=='n')){
 80003da:	6a3b      	ldr	r3, [r7, #32]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dd09      	ble.n	80003f4 <executeCmd+0x150>
 80003e0:	7d7b      	ldrb	r3, [r7, #21]
 80003e2:	2b6e      	cmp	r3, #110	; 0x6e
 80003e4:	d106      	bne.n	80003f4 <executeCmd+0x150>
			   printf("\r\nSetting LD2 ON\r\n");
 80003e6:	4814      	ldr	r0, [pc, #80]	; (8000438 <executeCmd+0x194>)
 80003e8:	f003 ff0c 	bl	8004204 <puts>
			   led2 = ON;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <executeCmd+0x190>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	701a      	strb	r2, [r3, #0]
 80003f2:	e006      	b.n	8000402 <executeCmd+0x15e>
		   }
		   else{
			   printf("\r\nSetting LD2 OFF\r\n");
 80003f4:	4811      	ldr	r0, [pc, #68]	; (800043c <executeCmd+0x198>)
 80003f6:	f003 ff05 	bl	8004204 <puts>
			   led2 = OFF;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <executeCmd+0x190>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
		   }
		}
		break;
 8000400:	e007      	b.n	8000412 <executeCmd+0x16e>
 8000402:	e006      	b.n	8000412 <executeCmd+0x16e>

	 case DUMMY:
		printf("\r\ndummy command....\r\n");
 8000404:	480e      	ldr	r0, [pc, #56]	; (8000440 <executeCmd+0x19c>)
 8000406:	f003 fefd 	bl	8004204 <puts>
	 default:
		printf("\nNOP[i=%d]", i);
 800040a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800040c:	480d      	ldr	r0, [pc, #52]	; (8000444 <executeCmd+0x1a0>)
 800040e:	f003 fe73 	bl	80040f8 <iprintf>
      }
   }
   promt();
 8000412:	f7ff ff35 	bl	8000280 <promt>
   return 0;
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	372c      	adds	r7, #44	; 0x2c
 800041c:	46bd      	mov	sp, r7
 800041e:	bd90      	pop	{r4, r7, pc}
 8000420:	20000000 	.word	0x20000000
 8000424:	20000008 	.word	0x20000008
 8000428:	08004ee4 	.word	0x08004ee4
 800042c:	20000098 	.word	0x20000098
 8000430:	08004f00 	.word	0x08004f00
 8000434:	200000a4 	.word	0x200000a4
 8000438:	08004f20 	.word	0x08004f20
 800043c:	08004f34 	.word	0x08004f34
 8000440:	08004f48 	.word	0x08004f48
 8000444:	08004f60 	.word	0x08004f60

08000448 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	b29a      	uxth	r2, r3
 8000458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800045c:	68b9      	ldr	r1, [r7, #8]
 800045e:	4804      	ldr	r0, [pc, #16]	; (8000470 <_write+0x28>)
 8000460:	f002 f9c4 	bl	80027ec <HAL_UART_Transmit>
	return len;
 8000464:	687b      	ldr	r3, [r7, #4]
}
 8000466:	4618      	mov	r0, r3
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200000b4 	.word	0x200000b4

08000474 <HAL_UART_RxCpltCallback>:
uint8_t UART1_rxBuffer = 0;
uint8_t cmdComplete;
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <HAL_UART_RxCpltCallback+0x90>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b0d      	cmp	r3, #13
 8000482:	d126      	bne.n	80004d2 <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 8000484:	4b20      	ldr	r3, [pc, #128]	; (8000508 <HAL_UART_RxCpltCallback+0x94>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dd1a      	ble.n	80004c2 <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	481e      	ldr	r0, [pc, #120]	; (800050c <HAL_UART_RxCpltCallback+0x98>)
 8000494:	f000 fe5a 	bl	800114c <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <HAL_UART_RxCpltCallback+0x94>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	481c      	ldr	r0, [pc, #112]	; (8000510 <HAL_UART_RxCpltCallback+0x9c>)
 80004a0:	f7ff ff00 	bl	80002a4 <executeCmd>
			bytesReceived = 0;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <HAL_UART_RxCpltCallback+0x94>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 80004aa:	2250      	movs	r2, #80	; 0x50
 80004ac:	2100      	movs	r1, #0
 80004ae:	4818      	ldr	r0, [pc, #96]	; (8000510 <HAL_UART_RxCpltCallback+0x9c>)
 80004b0:	f003 fd6f 	bl	8003f92 <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	4814      	ldr	r0, [pc, #80]	; (800050c <HAL_UART_RxCpltCallback+0x98>)
 80004bc:	f000 fe46 	bl	800114c <HAL_GPIO_WritePin>
 80004c0:	e001      	b.n	80004c6 <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 80004c2:	f7ff fedd 	bl	8000280 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	490e      	ldr	r1, [pc, #56]	; (8000504 <HAL_UART_RxCpltCallback+0x90>)
 80004ca:	4812      	ldr	r0, [pc, #72]	; (8000514 <HAL_UART_RxCpltCallback+0xa0>)
 80004cc:	f002 fa18 	bl	8002900 <HAL_UART_Receive_IT>
		return;
 80004d0:	e015      	b.n	80004fe <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 80004d2:	2364      	movs	r3, #100	; 0x64
 80004d4:	2201      	movs	r2, #1
 80004d6:	490b      	ldr	r1, [pc, #44]	; (8000504 <HAL_UART_RxCpltCallback+0x90>)
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <HAL_UART_RxCpltCallback+0xa0>)
 80004da:	f002 f987 	bl	80027ec <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_UART_RxCpltCallback+0x94>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a08      	ldr	r2, [pc, #32]	; (8000504 <HAL_UART_RxCpltCallback+0x90>)
 80004e4:	7811      	ldrb	r1, [r2, #0]
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_UART_RxCpltCallback+0x9c>)
 80004e8:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <HAL_UART_RxCpltCallback+0x94>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <HAL_UART_RxCpltCallback+0x94>)
 80004f2:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	4903      	ldr	r1, [pc, #12]	; (8000504 <HAL_UART_RxCpltCallback+0x90>)
 80004f8:	4806      	ldr	r0, [pc, #24]	; (8000514 <HAL_UART_RxCpltCallback+0xa0>)
 80004fa:	f002 fa01 	bl	8002900 <HAL_UART_Receive_IT>
}
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000009c 	.word	0x2000009c
 8000508:	200000a0 	.word	0x200000a0
 800050c:	48000400 	.word	0x48000400
 8000510:	2000013c 	.word	0x2000013c
 8000514:	200000b4 	.word	0x200000b4

08000518 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 800051e:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <main+0xb0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6898      	ldr	r0, [r3, #8]
 8000524:	2300      	movs	r3, #0
 8000526:	2202      	movs	r2, #2
 8000528:	2100      	movs	r1, #0
 800052a:	f003 fe83 	bl	8004234 <setvbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800052e:	f000 fa89 	bl	8000a44 <HAL_Init>
	/* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000532:	f000 f859 	bl	80005e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000536:	f000 f8d7 	bl	80006e8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800053a:	f000 f8a5 	bl	8000688 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	4922      	ldr	r1, [pc, #136]	; (80005cc <main+0xb4>)
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <main+0xb8>)
 8000544:	f002 f9dc 	bl	8002900 <HAL_UART_Receive_IT>
	uint8_t ledState = OFF;
 8000548:	2300      	movs	r3, #0
 800054a:	71fb      	strb	r3, [r7, #7]
	printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 800054c:	4821      	ldr	r0, [pc, #132]	; (80005d4 <main+0xbc>)
 800054e:	f003 fdd3 	bl	80040f8 <iprintf>
	printf("\r\nBuild No. %d", BUILD);
 8000552:	2101      	movs	r1, #1
 8000554:	4820      	ldr	r0, [pc, #128]	; (80005d8 <main+0xc0>)
 8000556:	f003 fdcf 	bl	80040f8 <iprintf>
	promt();
 800055a:	f7ff fe91 	bl	8000280 <promt>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <main+0xc4>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	79fa      	ldrb	r2, [r7, #7]
 8000564:	429a      	cmp	r2, r3
 8000566:	d013      	beq.n	8000590 <main+0x78>
			ledState = led2;
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <main+0xc4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	71fb      	strb	r3, [r7, #7]
			if (led2 == ON) {
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <main+0xc4>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d106      	bne.n	8000584 <main+0x6c>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	4818      	ldr	r0, [pc, #96]	; (80005e0 <main+0xc8>)
 800057e:	f000 fde5 	bl	800114c <HAL_GPIO_WritePin>
 8000582:	e005      	b.n	8000590 <main+0x78>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <main+0xc8>)
 800058c:	f000 fdde 	bl	800114c <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <main+0xc4>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b02      	cmp	r3, #2
 8000596:	d1e2      	bne.n	800055e <main+0x46>
		   if (msValue > 0) {
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <main+0xcc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	dd0a      	ble.n	80005b6 <main+0x9e>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <main+0xc8>)
 80005a6:	f000 fde9 	bl	800117c <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <main+0xcc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 faae 	bl	8000b10 <HAL_Delay>
 80005b4:	e7d3      	b.n	800055e <main+0x46>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <main+0xc8>)
 80005be:	f000 fdc5 	bl	800114c <HAL_GPIO_WritePin>
			   ledState = OFF;
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
		if (led2 != ledState) {
 80005c6:	e7ca      	b.n	800055e <main+0x46>
 80005c8:	20000018 	.word	0x20000018
 80005cc:	2000009c 	.word	0x2000009c
 80005d0:	200000b4 	.word	0x200000b4
 80005d4:	08004f6c 	.word	0x08004f6c
 80005d8:	08004fa8 	.word	0x08004fa8
 80005dc:	200000a4 	.word	0x200000a4
 80005e0:	48000400 	.word	0x48000400
 80005e4:	20000098 	.word	0x20000098

080005e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09c      	sub	sp, #112	; 0x70
 80005ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005f2:	2228      	movs	r2, #40	; 0x28
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fccb 	bl	8003f92 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800060c:	463b      	mov	r3, r7
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fcbd 	bl	8003f92 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000628:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fdbf 	bl	80011b0 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x54>
		Error_Handler();
 8000638:	f000 f896 	bl	8000768 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000650:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fcb2 	bl	8001fc0 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x7e>
		Error_Handler();
 8000662:	f000 f881 	bl	8000768 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000666:	2301      	movs	r3, #1
 8000668:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800066e:	463b      	mov	r3, r7
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fedb 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
		Error_Handler();
 800067c:	f000 f874 	bl	8000768 <Error_Handler>
	}
}
 8000680:	bf00      	nop
 8000682:	3770      	adds	r7, #112	; 0x70
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <MX_USART1_UART_Init+0x5c>)
 8000690:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 8000694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000698:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART1_UART_Init+0x58>)
 80006cc:	f002 f840 	bl	8002750 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80006d6:	f000 f847 	bl	8000768 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000b4 	.word	0x200000b4
 80006e4:	40013800 	.word	0x40013800

080006e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_GPIO_Init+0x78>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_GPIO_Init+0x78>)
 8000704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_GPIO_Init+0x78>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_GPIO_Init+0x78>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a11      	ldr	r2, [pc, #68]	; (8000760 <MX_GPIO_Init+0x78>)
 800071c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_GPIO_Init+0x78>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <MX_GPIO_Init+0x7c>)
 8000736:	f000 fd09 	bl	800114c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800073a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0x7c>)
 8000754:	f000 fb88 	bl	8000e68 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x44>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <HAL_UART_MspInit+0x8c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12f      	bne.n	800083e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_UART_MspInit+0x90>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a1a      	ldr	r2, [pc, #104]	; (800084c <HAL_UART_MspInit+0x90>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_UART_MspInit+0x90>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_UART_MspInit+0x90>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_UART_MspInit+0x90>)
 80007fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_UART_MspInit+0x90>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800080e:	2330      	movs	r3, #48	; 0x30
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800081e:	2307      	movs	r3, #7
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <HAL_UART_MspInit+0x94>)
 800082a:	f000 fb1d 	bl	8000e68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2025      	movs	r0, #37	; 0x25
 8000834:	f000 fa6b 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000838:	2025      	movs	r0, #37	; 0x25
 800083a:	f000 fa84 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40013800 	.word	0x40013800
 800084c:	40021000 	.word	0x40021000
 8000850:	48000800 	.word	0x48000800

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f916 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USART1_IRQHandler+0x10>)
 80008ae:	f002 f86b 	bl	8002988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000b4 	.word	0x200000b4

080008bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e00a      	b.n	80008e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ce:	f3af 8000 	nop.w
 80008d2:	4601      	mov	r1, r0
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	b2ca      	uxtb	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf0      	blt.n	80008ce <_read+0x12>
	}

return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
	return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091e:	605a      	str	r2, [r3, #4]
	return 0;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_isatty>:

int _isatty(int file)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	return 1;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
	return 0;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f003 f908 	bl	8003ba4 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20004000 	.word	0x20004000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	200000a8 	.word	0x200000a8
 80009c8:	200001a8 	.word	0x200001a8

080009cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	; (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	; (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f003 fa91 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a22:	f7ff fd79 	bl	8000518 <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a28:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a34:	08005190 	.word	0x08005190
  ldr r2, =_sbss
 8000a38:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000a3c:	200001a4 	.word	0x200001a4

08000a40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x28>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x28>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f94f 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff fe88 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f967 	bl	8000d62 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f92f 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000000c 	.word	0x2000000c
 8000ac8:	20000014 	.word	0x20000014
 8000acc:	20000010 	.word	0x20000010

08000ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000014 	.word	0x20000014
 8000af4:	20000190 	.word	0x20000190

08000af8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000190 	.word	0x20000190

08000b10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000014 	.word	0x20000014

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff3e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff31 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d008      	beq.n	8000d9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2204      	movs	r2, #4
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e020      	b.n	8000de0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 020e 	bic.w	r2, r2, #14
 8000dac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0201 	bic.w	r2, r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d005      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2204      	movs	r2, #4
 8000e06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e027      	b.n	8000e5e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 020e 	bic.w	r2, r2, #14
 8000e1c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0201 	bic.w	r2, r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e36:	2101      	movs	r1, #1
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	4798      	blx	r3
    } 
  }
  return status;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e76:	e14e      	b.n	8001116 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8140 	beq.w	8001110 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d005      	beq.n	8000ea8 <HAL_GPIO_Init+0x40>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d130      	bne.n	8000f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	f003 0201 	and.w	r2, r3, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d017      	beq.n	8000f46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d123      	bne.n	8000f9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	6939      	ldr	r1, [r7, #16]
 8000f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0203 	and.w	r2, r3, #3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 809a 	beq.w	8001110 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fdc:	4b55      	ldr	r3, [pc, #340]	; (8001134 <HAL_GPIO_Init+0x2cc>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a54      	ldr	r2, [pc, #336]	; (8001134 <HAL_GPIO_Init+0x2cc>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b52      	ldr	r3, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x2cc>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101e:	d013      	beq.n	8001048 <HAL_GPIO_Init+0x1e0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a46      	ldr	r2, [pc, #280]	; (800113c <HAL_GPIO_Init+0x2d4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d00d      	beq.n	8001044 <HAL_GPIO_Init+0x1dc>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a45      	ldr	r2, [pc, #276]	; (8001140 <HAL_GPIO_Init+0x2d8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d007      	beq.n	8001040 <HAL_GPIO_Init+0x1d8>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a44      	ldr	r2, [pc, #272]	; (8001144 <HAL_GPIO_Init+0x2dc>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d101      	bne.n	800103c <HAL_GPIO_Init+0x1d4>
 8001038:	2303      	movs	r3, #3
 800103a:	e006      	b.n	800104a <HAL_GPIO_Init+0x1e2>
 800103c:	2305      	movs	r3, #5
 800103e:	e004      	b.n	800104a <HAL_GPIO_Init+0x1e2>
 8001040:	2302      	movs	r3, #2
 8001042:	e002      	b.n	800104a <HAL_GPIO_Init+0x1e2>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <HAL_GPIO_Init+0x1e2>
 8001048:	2300      	movs	r3, #0
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	f002 0203 	and.w	r2, r2, #3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	4093      	lsls	r3, r2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800105a:	4937      	ldr	r1, [pc, #220]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800108c:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f aea9 	bne.w	8000e78 <HAL_GPIO_Init+0x10>
  }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000
 800113c:	48000400 	.word	0x48000400
 8001140:	48000800 	.word	0x48000800
 8001144:	48000c00 	.word	0x48000c00
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001168:	e002      	b.n	8001170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43d9      	mvns	r1, r3
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	400b      	ands	r3, r1
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f000 bef4 	b.w	8001fb2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 816a 	beq.w	80014ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011da:	4bb3      	ldr	r3, [pc, #716]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d00c      	beq.n	8001200 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e6:	4bb0      	ldr	r3, [pc, #704]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d159      	bne.n	80012a6 <HAL_RCC_OscConfig+0xf6>
 80011f2:	4bad      	ldr	r3, [pc, #692]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fe:	d152      	bne.n	80012a6 <HAL_RCC_OscConfig+0xf6>
 8001200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001204:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001214:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d102      	bne.n	8001232 <HAL_RCC_OscConfig+0x82>
 800122c:	4b9e      	ldr	r3, [pc, #632]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	e015      	b.n	800125e <HAL_RCC_OscConfig+0xae>
 8001232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001236:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800124a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800124e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800125a:	4b93      	ldr	r3, [pc, #588]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001262:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001266:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800126a:	fa92 f2a2 	rbit	r2, r2
 800126e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001272:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f042 0220 	orr.w	r2, r2, #32
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f002 021f 	and.w	r2, r2, #31
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 810c 	beq.w	80014ac <HAL_RCC_OscConfig+0x2fc>
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 8106 	bne.w	80014ac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f000 be86 	b.w	8001fb2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x110>
 80012b2:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a7c      	ldr	r2, [pc, #496]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e030      	b.n	8001322 <HAL_RCC_OscConfig+0x172>
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x134>
 80012ca:	4b77      	ldr	r3, [pc, #476]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a76      	ldr	r2, [pc, #472]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b74      	ldr	r3, [pc, #464]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a73      	ldr	r2, [pc, #460]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e01e      	b.n	8001322 <HAL_RCC_OscConfig+0x172>
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ee:	d10c      	bne.n	800130a <HAL_RCC_OscConfig+0x15a>
 80012f0:	4b6d      	ldr	r3, [pc, #436]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a6c      	ldr	r2, [pc, #432]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a69      	ldr	r2, [pc, #420]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 8001302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e00b      	b.n	8001322 <HAL_RCC_OscConfig+0x172>
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 8001310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 800131c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001322:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f023 020f 	bic.w	r2, r3, #15
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	495d      	ldr	r1, [pc, #372]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 8001332:	4313      	orrs	r3, r2
 8001334:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d059      	beq.n	80013f4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fbda 	bl	8000af8 <HAL_GetTick>
 8001344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001348:	e00a      	b.n	8001360 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134a:	f7ff fbd5 	bl	8000af8 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d902      	bls.n	8001360 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	f000 be29 	b.w	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001364:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001374:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d102      	bne.n	8001392 <HAL_RCC_OscConfig+0x1e2>
 800138c:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x20e>
 8001392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001396:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80013b2:	fa93 f3a3 	rbit	r3, r3
 80013b6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80013ba:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80013c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013ca:	fa92 f2a2 	rbit	r2, r2
 80013ce:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80013d2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80013d6:	fab2 f282 	clz	r2, r2
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f042 0220 	orr.w	r2, r2, #32
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	f002 021f 	and.w	r2, r2, #31
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ab      	beq.n	800134a <HAL_RCC_OscConfig+0x19a>
 80013f2:	e05c      	b.n	80014ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb80 	bl	8000af8 <HAL_GetTick>
 80013f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fe:	f7ff fb7b 	bl	8000af8 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d902      	bls.n	8001414 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	f000 bdcf 	b.w	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001418:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001428:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d102      	bne.n	8001446 <HAL_RCC_OscConfig+0x296>
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x2c2>
 8001446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800145a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001462:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_RCC_OscConfig+0x2f8>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001476:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800147a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800147e:	fa92 f2a2 	rbit	r2, r2
 8001482:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001486:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800148a:	fab2 f282 	clz	r2, r2
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	f042 0220 	orr.w	r2, r2, #32
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	f002 021f 	and.w	r2, r2, #31
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ab      	bne.n	80013fe <HAL_RCC_OscConfig+0x24e>
 80014a6:	e002      	b.n	80014ae <HAL_RCC_OscConfig+0x2fe>
 80014a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 816f 	beq.w	800179c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014be:	4bd0      	ldr	r3, [pc, #832]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ca:	4bcd      	ldr	r3, [pc, #820]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d16c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x400>
 80014d6:	4bca      	ldr	r3, [pc, #808]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d166      	bne.n	80015b0 <HAL_RCC_OscConfig+0x400>
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d102      	bne.n	8001512 <HAL_RCC_OscConfig+0x362>
 800150c:	4bbc      	ldr	r3, [pc, #752]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	e013      	b.n	800153a <HAL_RCC_OscConfig+0x38a>
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800152a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001536:	4bb2      	ldr	r3, [pc, #712]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	2202      	movs	r2, #2
 800153c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001540:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001544:	fa92 f2a2 	rbit	r2, r2
 8001548:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800154c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001550:	fab2 f282 	clz	r2, r2
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f042 0220 	orr.w	r2, r2, #32
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f002 021f 	and.w	r2, r2, #31
 8001560:	2101      	movs	r1, #1
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <HAL_RCC_OscConfig+0x3cc>
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d002      	beq.n	800157c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	f000 bd1b 	b.w	8001fb2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4ba0      	ldr	r3, [pc, #640]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	21f8      	movs	r1, #248	; 0xf8
 800158c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001594:	fa91 f1a1 	rbit	r1, r1
 8001598:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800159c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80015a0:	fab1 f181 	clz	r1, r1
 80015a4:	b2c9      	uxtb	r1, r1
 80015a6:	408b      	lsls	r3, r1
 80015a8:	4995      	ldr	r1, [pc, #596]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	e0f5      	b.n	800179c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8085 	beq.w	80016c6 <HAL_RCC_OscConfig+0x516>
 80015bc:	2301      	movs	r3, #1
 80015be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80015ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	461a      	mov	r2, r3
 80015e4:	2301      	movs	r3, #1
 80015e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fa86 	bl	8000af8 <HAL_GetTick>
 80015ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fa81 	bl	8000af8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d902      	bls.n	8001608 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	f000 bcd5 	b.w	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001608:	2302      	movs	r3, #2
 800160a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800161a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	095b      	lsrs	r3, r3, #5
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <HAL_RCC_OscConfig+0x488>
 8001632:	4b73      	ldr	r3, [pc, #460]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e013      	b.n	8001660 <HAL_RCC_OscConfig+0x4b0>
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001650:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	2202      	movs	r2, #2
 8001662:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001666:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800166a:	fa92 f2a2 	rbit	r2, r2
 800166e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001672:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f002 021f 	and.w	r2, r2, #31
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0af      	beq.n	80015f2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	21f8      	movs	r1, #248	; 0xf8
 80016a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016aa:	fa91 f1a1 	rbit	r1, r1
 80016ae:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80016b2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80016b6:	fab1 f181 	clz	r1, r1
 80016ba:	b2c9      	uxtb	r1, r1
 80016bc:	408b      	lsls	r3, r1
 80016be:	4950      	ldr	r1, [pc, #320]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e06a      	b.n	800179c <HAL_RCC_OscConfig+0x5ec>
 80016c6:	2301      	movs	r3, #1
 80016c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80016d0:	fa93 f3a3 	rbit	r3, r3
 80016d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80016d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016dc:	fab3 f383 	clz	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	461a      	mov	r2, r3
 80016ee:	2300      	movs	r3, #0
 80016f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fa01 	bl	8000af8 <HAL_GetTick>
 80016f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff f9fc 	bl	8000af8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d902      	bls.n	8001712 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	f000 bc50 	b.w	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001728:	fab3 f383 	clz	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <HAL_RCC_OscConfig+0x592>
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	e013      	b.n	800176a <HAL_RCC_OscConfig+0x5ba>
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800174c:	fa93 f3a3 	rbit	r3, r3
 8001750:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001754:	2302      	movs	r3, #2
 8001756:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800175a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800175e:	fa93 f3a3 	rbit	r3, r3
 8001762:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_RCC_OscConfig+0x650>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	2202      	movs	r2, #2
 800176c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001770:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001774:	fa92 f2a2 	rbit	r2, r2
 8001778:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800177c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001780:	fab2 f282 	clz	r2, r2
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	f042 0220 	orr.w	r2, r2, #32
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	f002 021f 	and.w	r2, r2, #31
 8001790:	2101      	movs	r1, #1
 8001792:	fa01 f202 	lsl.w	r2, r1, r2
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1af      	bne.n	80016fc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80da 	beq.w	8001960 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d069      	beq.n	800188a <HAL_RCC_OscConfig+0x6da>
 80017b6:	2301      	movs	r3, #1
 80017b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80017c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_OscConfig+0x654>)
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	461a      	mov	r2, r3
 80017dc:	2301      	movs	r3, #1
 80017de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff f98a 	bl	8000af8 <HAL_GetTick>
 80017e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e8:	e00e      	b.n	8001808 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff f985 	bl	8000af8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d906      	bls.n	8001808 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e3d9      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	10908120 	.word	0x10908120
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800181a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001836:	2202      	movs	r2, #2
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fa93 f2a3 	rbit	r2, r3
 8001844:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001848:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	4ba5      	ldr	r3, [pc, #660]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 800184c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001852:	2102      	movs	r1, #2
 8001854:	6019      	str	r1, [r3, #0]
 8001856:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f1a3 	rbit	r1, r3
 8001860:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001864:	6019      	str	r1, [r3, #0]
  return result;
 8001866:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0b0      	beq.n	80017ea <HAL_RCC_OscConfig+0x63a>
 8001888:	e06a      	b.n	8001960 <HAL_RCC_OscConfig+0x7b0>
 800188a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018a0:	601a      	str	r2, [r3, #0]
  return result;
 80018a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b8c      	ldr	r3, [pc, #560]	; (8001ae4 <HAL_RCC_OscConfig+0x934>)
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	461a      	mov	r2, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f91c 	bl	8000af8 <HAL_GetTick>
 80018c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	e009      	b.n	80018da <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff f917 	bl	8000af8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e36b      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
 80018da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018de:	2202      	movs	r2, #2
 80018e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018f6:	2202      	movs	r2, #2
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001920:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001922:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001926:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800192a:	2102      	movs	r1, #2
 800192c:	6019      	str	r1, [r3, #0]
 800192e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f1a3 	rbit	r1, r3
 8001938:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800193c:	6019      	str	r1, [r3, #0]
  return result;
 800193e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1b2      	bne.n	80018c6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8158 	beq.w	8001c20 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b57      	ldr	r3, [pc, #348]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a56      	ldr	r2, [pc, #344]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b4f      	ldr	r3, [pc, #316]	; (8001ae8 <HAL_RCC_OscConfig+0x938>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11a      	bne.n	80019ea <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b4:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_RCC_OscConfig+0x938>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x938>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7ff f89a 	bl	8000af8 <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e009      	b.n	80019de <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff f895 	bl	8000af8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e2e9      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <HAL_RCC_OscConfig+0x938>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0ef      	beq.n	80019ca <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x852>
 80019f4:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a39      	ldr	r2, [pc, #228]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	e02f      	b.n	8001a62 <HAL_RCC_OscConfig+0x8b2>
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x876>
 8001a0c:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a33      	ldr	r2, [pc, #204]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e01d      	b.n	8001a62 <HAL_RCC_OscConfig+0x8b2>
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_OscConfig+0x89a>
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a2a      	ldr	r2, [pc, #168]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	e00b      	b.n	8001a62 <HAL_RCC_OscConfig+0x8b2>
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d06b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f844 	bl	8000af8 <HAL_GetTick>
 8001a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e00b      	b.n	8001a8e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff f83f 	bl	8000af8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e291      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001a8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a92:	2202      	movs	r2, #2
 8001a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001aaa:	2202      	movs	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001abc:	601a      	str	r2, [r3, #0]
  return result;
 8001abe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ac2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d109      	bne.n	8001aec <HAL_RCC_OscConfig+0x93c>
 8001ad8:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <HAL_RCC_OscConfig+0x930>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	e014      	b.n	8001b08 <HAL_RCC_OscConfig+0x958>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	10908120 	.word	0x10908120
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001af0:	2202      	movs	r2, #2
 8001af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4bbb      	ldr	r3, [pc, #748]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	6011      	str	r1, [r2, #0]
 8001b10:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	fa92 f1a2 	rbit	r1, r2
 8001b1a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b1e:	6011      	str	r1, [r2, #0]
  return result;
 8001b20:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	fab2 f282 	clz	r2, r2
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f002 021f 	and.w	r2, r2, #31
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d099      	beq.n	8001a76 <HAL_RCC_OscConfig+0x8c6>
 8001b42:	e063      	b.n	8001c0c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7fe ffd8 	bl	8000af8 <HAL_GetTick>
 8001b48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7fe ffd3 	bl	8000af8 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e225      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001b66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b82:	2202      	movs	r2, #2
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b94:	601a      	str	r2, [r3, #0]
  return result;
 8001b96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d102      	bne.n	8001bb6 <HAL_RCC_OscConfig+0xa06>
 8001bb0:	4b90      	ldr	r3, [pc, #576]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	e00d      	b.n	8001bd2 <HAL_RCC_OscConfig+0xa22>
 8001bb6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bba:	2202      	movs	r2, #2
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	6011      	str	r1, [r2, #0]
 8001bda:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	fa92 f1a2 	rbit	r1, r2
 8001be4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001be8:	6011      	str	r1, [r2, #0]
  return result;
 8001bea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1a0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b77      	ldr	r3, [pc, #476]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	4a76      	ldr	r2, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 81c2 	beq.w	8001fb0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2c:	4b71      	ldr	r3, [pc, #452]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	f000 819c 	beq.w	8001f72 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	f040 8114 	bne.w	8001e6e <HAL_RCC_OscConfig+0xcbe>
 8001c46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c5e:	601a      	str	r2, [r3, #0]
  return result;
 8001c60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	461a      	mov	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7fe ff3c 	bl	8000af8 <HAL_GetTick>
 8001c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	e009      	b.n	8001c9a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c86:	f7fe ff37 	bl	8000af8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e18b      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001c9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cb2:	601a      	str	r2, [r3, #0]
  return result;
 8001cb4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xb24>
 8001cce:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e01b      	b.n	8001d0c <HAL_RCC_OscConfig+0xb5c>
 8001cd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d14:	6011      	str	r1, [r2, #0]
 8001d16:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	fa92 f1a2 	rbit	r1, r2
 8001d20:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d24:	6011      	str	r1, [r2, #0]
  return result;
 8001d26:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f002 021f 	and.w	r2, r2, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d19e      	bne.n	8001c86 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	4925      	ldr	r1, [pc, #148]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
 8001d64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	fa93 f2a3 	rbit	r2, r3
 8001d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d7c:	601a      	str	r2, [r3, #0]
  return result;
 8001d7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d82:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	461a      	mov	r2, r3
 8001d96:	2301      	movs	r3, #1
 8001d98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fead 	bl	8000af8 <HAL_GetTick>
 8001d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da2:	e009      	b.n	8001db8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe fea8 	bl	8000af8 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0fc      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001db8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd0:	601a      	str	r2, [r3, #0]
  return result;
 8001dd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0xc48>
 8001dec:	4b01      	ldr	r3, [pc, #4]	; (8001df4 <HAL_RCC_OscConfig+0xc44>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e01e      	b.n	8001e30 <HAL_RCC_OscConfig+0xc80>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <HAL_RCC_OscConfig+0xe0c>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e38:	6011      	str	r1, [r2, #0]
 8001e3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	fa92 f1a2 	rbit	r1, r2
 8001e44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e48:	6011      	str	r1, [r2, #0]
  return result;
 8001e4a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	fab2 f282 	clz	r2, r2
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	f042 0220 	orr.w	r2, r2, #32
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f002 021f 	and.w	r2, r2, #31
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f202 	lsl.w	r2, r1, r2
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d09b      	beq.n	8001da4 <HAL_RCC_OscConfig+0xbf4>
 8001e6c:	e0a0      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe00>
 8001e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e86:	601a      	str	r2, [r3, #0]
  return result;
 8001e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fe28 	bl	8000af8 <HAL_GetTick>
 8001ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	e009      	b.n	8001ec2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7fe fe23 	bl	8000af8 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e077      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
 8001ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	fa93 f2a3 	rbit	r2, r3
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	601a      	str	r2, [r3, #0]
  return result;
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_RCC_OscConfig+0xd4c>
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCC_OscConfig+0xe0c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e01b      	b.n	8001f34 <HAL_RCC_OscConfig+0xd84>
 8001efc:	f107 0320 	add.w	r3, r7, #32
 8001f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f107 0318 	add.w	r3, r7, #24
 8001f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f107 0318 	add.w	r3, r7, #24
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_OscConfig+0xe0c>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f107 0210 	add.w	r2, r7, #16
 8001f38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f3c:	6011      	str	r1, [r2, #0]
 8001f3e:	f107 0210 	add.w	r2, r7, #16
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	fa92 f1a2 	rbit	r1, r2
 8001f48:	f107 020c 	add.w	r2, r7, #12
 8001f4c:	6011      	str	r1, [r2, #0]
  return result;
 8001f4e:	f107 020c 	add.w	r2, r7, #12
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	fab2 f282 	clz	r2, r2
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f042 0220 	orr.w	r2, r2, #32
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f002 021f 	and.w	r2, r2, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d19e      	bne.n	8001eae <HAL_RCC_OscConfig+0xcfe>
 8001f70:	e01e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e018      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_RCC_OscConfig+0xe0c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f88:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d108      	bne.n	8001fac <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09e      	sub	sp, #120	; 0x78
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e162      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	498b      	ldr	r1, [pc, #556]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b89      	ldr	r3, [pc, #548]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e14a      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	497f      	ldr	r1, [pc, #508]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80dc 	beq.w	80021ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d13c      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xf6>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_RCC_ClockConfig+0xa6>
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	e00f      	b.n	8002086 <HAL_RCC_ClockConfig+0xc6>
 8002066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
 800207a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800208a:	65ba      	str	r2, [r7, #88]	; 0x58
 800208c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d17b      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0f3      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d13c      	bne.n	8002138 <HAL_RCC_ClockConfig+0x178>
 80020be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x128>
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_ClockConfig+0x148>
 80020e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	63ba      	str	r2, [r7, #56]	; 0x38
 800210e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f042 0220 	orr.w	r2, r2, #32
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f002 021f 	and.w	r2, r2, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13a      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0b2      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 8002138:	2302      	movs	r3, #2
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e00d      	b.n	800217c <HAL_RCC_ClockConfig+0x1bc>
 8002160:	2302      	movs	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	2302      	movs	r3, #2
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	61ba      	str	r2, [r7, #24]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	617a      	str	r2, [r7, #20]
  return result;
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f002 021f 	and.w	r2, r2, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e079      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7fe fc9c 	bl	8000af8 <HAL_GetTick>
 80021c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fc98 	bl	8000af8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e061      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d214      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e040      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	491a      	ldr	r1, [pc, #104]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4912      	ldr	r1, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002262:	f000 f829 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002266:	4601      	mov	r1, r0
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002270:	22f0      	movs	r2, #240	; 0xf0
 8002272:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	60fa      	str	r2, [r7, #12]
  return result;
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	40d3      	lsrs	r3, r2
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x2ec>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	fa21 f303 	lsr.w	r3, r1, r3
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fbea 	bl	8000a70 <HAL_InitTick>
  
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3778      	adds	r7, #120	; 0x78
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08004fb8 	.word	0x08004fb8
 80022b0:	2000000c 	.word	0x2000000c
 80022b4:	20000010 	.word	0x20000010

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
 80022bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e6:	e03c      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ea:	623b      	str	r3, [r7, #32]
      break;
 80022ec:	e03c      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	fa92 f2a2 	rbit	r2, r2
 8002300:	607a      	str	r2, [r7, #4]
  return result;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	40d3      	lsrs	r3, r2
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	220f      	movs	r2, #15
 800231c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	60fa      	str	r2, [r7, #12]
  return result;
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	40d3      	lsrs	r3, r2
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002340:	4a0e      	ldr	r2, [pc, #56]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	fbb2 f2f3 	udiv	r2, r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	e004      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	623b      	str	r3, [r7, #32]
      break;
 8002360:	e002      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002364:	623b      	str	r3, [r7, #32]
      break;
 8002366:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002368:	6a3b      	ldr	r3, [r7, #32]
}
 800236a:	4618      	mov	r0, r3
 800236c:	372c      	adds	r7, #44	; 0x2c
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	007a1200 	.word	0x007a1200
 8002380:	08004fd0 	.word	0x08004fd0
 8002384:	08004fe0 	.word	0x08004fe0
 8002388:	003d0900 	.word	0x003d0900

0800238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	2000000c 	.word	0x2000000c

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023aa:	f7ff ffef 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	603a      	str	r2, [r7, #0]
  return result;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08004fc8 	.word	0x08004fc8

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023ee:	f7ff ffcd 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	603a      	str	r2, [r7, #0]
  return result;
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08004fc8 	.word	0x08004fc8

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b092      	sub	sp, #72	; 0x48
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80d4 	beq.w	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002450:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10e      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002466:	61d3      	str	r3, [r2, #28]
 8002468:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a41      	ldr	r2, [pc, #260]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe fb31 	bl	8000af8 <HAL_GetTick>
 8002496:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe fb2d 	bl	8000af8 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e14b      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8084 	beq.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d07c      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024d8:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d04b      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe fadd 	bl	8000af8 <HAL_GetTick>
 800253e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fad9 	bl	8000af8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0f5      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	61fb      	str	r3, [r7, #28]
  return result;
 8002570:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d108      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002586:	4b01      	ldr	r3, [pc, #4]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	e00d      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	10908100 	.word	0x10908100
 8002598:	2302      	movs	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	4b69      	ldr	r3, [pc, #420]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2202      	movs	r2, #2
 80025aa:	613a      	str	r2, [r7, #16]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	fa92 f2a2 	rbit	r2, r2
 80025b2:	60fa      	str	r2, [r7, #12]
  return result;
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f002 021f 	and.w	r2, r2, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0b7      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025d2:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	495b      	ldr	r1, [pc, #364]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a56      	ldr	r2, [pc, #344]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002604:	4b51      	ldr	r3, [pc, #324]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494e      	ldr	r1, [pc, #312]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002612:	4313      	orrs	r3, r2
 8002614:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f023 0210 	bic.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4947      	ldr	r1, [pc, #284]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002630:	4313      	orrs	r3, r2
 8002632:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002640:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	493f      	ldr	r1, [pc, #252]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f023 0220 	bic.w	r2, r3, #32
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	4938      	ldr	r1, [pc, #224]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	4930      	ldr	r1, [pc, #192]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800268a:	4313      	orrs	r3, r2
 800268c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800269a:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4929      	ldr	r1, [pc, #164]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4921      	ldr	r1, [pc, #132]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	491a      	ldr	r1, [pc, #104]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	4912      	ldr	r1, [pc, #72]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	490b      	ldr	r1, [pc, #44]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002720:	4313      	orrs	r3, r2
 8002722:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800273e:	4313      	orrs	r3, r2
 8002740:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3748      	adds	r7, #72	; 0x48
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e040      	b.n	80027e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe f822 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fc00 	bl	8002f94 <UART_SetConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e022      	b.n	80027e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fd2a 	bl	8003200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fdb1 	bl	8003344 <UART_CheckIdleState>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002800:	2b20      	cmp	r3, #32
 8002802:	d178      	bne.n	80028f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_UART_Transmit+0x24>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e071      	b.n	80028f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2221      	movs	r2, #33	; 0x21
 8002820:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002822:	f7fe f969 	bl	8000af8 <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d108      	bne.n	8002854 <HAL_UART_Transmit+0x68>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e003      	b.n	800285c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800285c:	e030      	b.n	80028c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fe13 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e03c      	b.n	80028f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002890:	b292      	uxth	r2, r2
 8002892:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3302      	adds	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e008      	b.n	80028ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b292      	uxth	r2, r2
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	3301      	adds	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1c8      	bne.n	800285e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2140      	movs	r1, #64	; 0x40
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fddc 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e005      	b.n	80028f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002914:	2b20      	cmp	r3, #32
 8002916:	d132      	bne.n	800297e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_UART_Receive_IT+0x24>
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e02b      	b.n	8002980 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d018      	beq.n	800296e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	613b      	str	r3, [r7, #16]
   return(result);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	69f9      	ldr	r1, [r7, #28]
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	61bb      	str	r3, [r7, #24]
   return(result);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e6      	bne.n	800293c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	461a      	mov	r2, r3
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fdf5 	bl	8003564 <UART_Start_Receive_IT>
 800297a:	4603      	mov	r3, r0
 800297c:	e000      	b.n	8002980 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3728      	adds	r7, #40	; 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b0ba      	sub	sp, #232	; 0xe8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80029b6:	4013      	ands	r3, r2
 80029b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d115      	bne.n	80029f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00f      	beq.n	80029f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 82ab 	beq.w	8002f3c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
      }
      return;
 80029ee:	e2a5      	b.n	8002f3c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8117 	beq.w	8002c28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a0a:	4b85      	ldr	r3, [pc, #532]	; (8002c20 <HAL_UART_IRQHandler+0x298>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 810a 	beq.w	8002c28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <HAL_UART_IRQHandler+0xbc>
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2201      	movs	r2, #1
 8002a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d011      	beq.n	8002a74 <HAL_UART_IRQHandler+0xec>
 8002a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2202      	movs	r2, #2
 8002a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6a:	f043 0204 	orr.w	r2, r3, #4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d011      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x11c>
 8002a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2204      	movs	r2, #4
 8002a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d017      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2208      	movs	r2, #8
 8002ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad6:	f043 0208 	orr.w	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <HAL_UART_IRQHandler+0x18a>
 8002aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00c      	beq.n	8002b12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8211 	beq.w	8002f40 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d005      	beq.n	8002b6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04f      	beq.n	8002c0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fdc0 	bl	80036f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d141      	bne.n	8002c02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3308      	adds	r3, #8
 8002b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002baa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1d9      	bne.n	8002b7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d013      	beq.n	8002bfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd6:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_UART_IRQHandler+0x29c>)
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe f904 	bl	8000dec <HAL_DMA_Abort_IT>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d017      	beq.n	8002c1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	e00f      	b.n	8002c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f9b4 	bl	8002f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	e00b      	b.n	8002c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9b0 	bl	8002f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	e007      	b.n	8002c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9ac 	bl	8002f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002c18:	e192      	b.n	8002f40 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1a:	bf00      	nop
    return;
 8002c1c:	e190      	b.n	8002f40 <HAL_UART_IRQHandler+0x5b8>
 8002c1e:	bf00      	nop
 8002c20:	04000120 	.word	0x04000120
 8002c24:	080037b9 	.word	0x080037b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 814b 	bne.w	8002ec8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8144 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 813d 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2210      	movs	r2, #16
 8002c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	f040 80b5 	bne.w	8002dd0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8164 	beq.w	8002f44 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c86:	429a      	cmp	r2, r3
 8002c88:	f080 815c 	bcs.w	8002f44 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	f000 8086 	beq.w	8002dae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cae:	e853 3f00 	ldrex	r3, [r3]
 8002cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cd0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1da      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e1      	bne.n	8002cec <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3308      	adds	r3, #8
 8002d48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e3      	bne.n	8002d28 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	f023 0310 	bic.w	r3, r3, #16
 8002d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d98:	e841 2300 	strex	r3, r2, [r1]
 8002d9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e4      	bne.n	8002d6e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd ffe6 	bl	8000d7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8d7 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dce:	e0b9      	b.n	8002f44 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80ab 	beq.w	8002f48 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a6 	beq.w	8002f48 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	e853 3f00 	ldrex	r3, [r3]
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e4      	bne.n	8002dfc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3308      	adds	r3, #8
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
 8002e40:	623b      	str	r3, [r7, #32]
   return(result);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3308      	adds	r3, #8
 8002e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e56:	633a      	str	r2, [r7, #48]	; 0x30
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e3      	bne.n	8002e32 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	e853 3f00 	ldrex	r3, [r3]
 8002e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0310 	bic.w	r3, r3, #16
 8002e92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	69b9      	ldr	r1, [r7, #24]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	617b      	str	r3, [r7, #20]
   return(result);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e4      	bne.n	8002e7e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f85b 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ec6:	e03f      	b.n	8002f48 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x56a>
 8002ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fe4c 	bl	8003b88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ef0:	e02d      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
    }
    return;
 8002f1a:	e017      	b.n	8002f4c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d012      	beq.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
 8002f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fc55 	bl	80037e4 <UART_EndTransmit_IT>
    return;
 8002f3a:	e008      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f3c:	bf00      	nop
 8002f3e:	e006      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f40:	bf00      	nop
 8002f42:	e004      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f44:	bf00      	nop
 8002f46:	e002      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8002f4c:	bf00      	nop
  }

}
 8002f4e:	37e8      	adds	r7, #232	; 0xe8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b8a      	ldr	r3, [pc, #552]	; (80031e8 <UART_SetConfig+0x254>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	6979      	ldr	r1, [r7, #20]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a78      	ldr	r2, [pc, #480]	; (80031ec <UART_SetConfig+0x258>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d120      	bne.n	8003052 <UART_SetConfig+0xbe>
 8003010:	4b77      	ldr	r3, [pc, #476]	; (80031f0 <UART_SetConfig+0x25c>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d817      	bhi.n	800304c <UART_SetConfig+0xb8>
 800301c:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <UART_SetConfig+0x90>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003035 	.word	0x08003035
 8003028:	08003041 	.word	0x08003041
 800302c:	08003047 	.word	0x08003047
 8003030:	0800303b 	.word	0x0800303b
 8003034:	2300      	movs	r3, #0
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e01d      	b.n	8003076 <UART_SetConfig+0xe2>
 800303a:	2302      	movs	r3, #2
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e01a      	b.n	8003076 <UART_SetConfig+0xe2>
 8003040:	2304      	movs	r3, #4
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e017      	b.n	8003076 <UART_SetConfig+0xe2>
 8003046:	2308      	movs	r3, #8
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e014      	b.n	8003076 <UART_SetConfig+0xe2>
 800304c:	2310      	movs	r3, #16
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e011      	b.n	8003076 <UART_SetConfig+0xe2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a67      	ldr	r2, [pc, #412]	; (80031f4 <UART_SetConfig+0x260>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d102      	bne.n	8003062 <UART_SetConfig+0xce>
 800305c:	2300      	movs	r3, #0
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e009      	b.n	8003076 <UART_SetConfig+0xe2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a64      	ldr	r2, [pc, #400]	; (80031f8 <UART_SetConfig+0x264>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d102      	bne.n	8003072 <UART_SetConfig+0xde>
 800306c:	2300      	movs	r3, #0
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e001      	b.n	8003076 <UART_SetConfig+0xe2>
 8003072:	2310      	movs	r3, #16
 8003074:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307e:	d15a      	bne.n	8003136 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003080:	7ffb      	ldrb	r3, [r7, #31]
 8003082:	2b08      	cmp	r3, #8
 8003084:	d827      	bhi.n	80030d6 <UART_SetConfig+0x142>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <UART_SetConfig+0xf8>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	080030b1 	.word	0x080030b1
 8003090:	080030b9 	.word	0x080030b9
 8003094:	080030c1 	.word	0x080030c1
 8003098:	080030d7 	.word	0x080030d7
 800309c:	080030c7 	.word	0x080030c7
 80030a0:	080030d7 	.word	0x080030d7
 80030a4:	080030d7 	.word	0x080030d7
 80030a8:	080030d7 	.word	0x080030d7
 80030ac:	080030cf 	.word	0x080030cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b0:	f7ff f978 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 80030b4:	61b8      	str	r0, [r7, #24]
        break;
 80030b6:	e013      	b.n	80030e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b8:	f7ff f996 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 80030bc:	61b8      	str	r0, [r7, #24]
        break;
 80030be:	e00f      	b.n	80030e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c0:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <UART_SetConfig+0x268>)
 80030c2:	61bb      	str	r3, [r7, #24]
        break;
 80030c4:	e00c      	b.n	80030e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c6:	f7ff f8f7 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 80030ca:	61b8      	str	r0, [r7, #24]
        break;
 80030cc:	e008      	b.n	80030e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d2:	61bb      	str	r3, [r7, #24]
        break;
 80030d4:	e004      	b.n	80030e0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	77bb      	strb	r3, [r7, #30]
        break;
 80030de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d074      	beq.n	80031d0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	005a      	lsls	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	d916      	bls.n	8003130 <UART_SetConfig+0x19c>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d212      	bcs.n	8003130 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	b29b      	uxth	r3, r3
 800310e:	f023 030f 	bic.w	r3, r3, #15
 8003112:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	b29b      	uxth	r3, r3
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	b29a      	uxth	r2, r3
 8003120:	89fb      	ldrh	r3, [r7, #14]
 8003122:	4313      	orrs	r3, r2
 8003124:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	89fa      	ldrh	r2, [r7, #14]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e04f      	b.n	80031d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	77bb      	strb	r3, [r7, #30]
 8003134:	e04c      	b.n	80031d0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d828      	bhi.n	800318e <UART_SetConfig+0x1fa>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <UART_SetConfig+0x1b0>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003169 	.word	0x08003169
 8003148:	08003171 	.word	0x08003171
 800314c:	08003179 	.word	0x08003179
 8003150:	0800318f 	.word	0x0800318f
 8003154:	0800317f 	.word	0x0800317f
 8003158:	0800318f 	.word	0x0800318f
 800315c:	0800318f 	.word	0x0800318f
 8003160:	0800318f 	.word	0x0800318f
 8003164:	08003187 	.word	0x08003187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7ff f91c 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 800316c:	61b8      	str	r0, [r7, #24]
        break;
 800316e:	e013      	b.n	8003198 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003170:	f7ff f93a 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003174:	61b8      	str	r0, [r7, #24]
        break;
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003178:	4b20      	ldr	r3, [pc, #128]	; (80031fc <UART_SetConfig+0x268>)
 800317a:	61bb      	str	r3, [r7, #24]
        break;
 800317c:	e00c      	b.n	8003198 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317e:	f7ff f89b 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003182:	61b8      	str	r0, [r7, #24]
        break;
 8003184:	e008      	b.n	8003198 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	61bb      	str	r3, [r7, #24]
        break;
 800318c:	e004      	b.n	8003198 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	77bb      	strb	r3, [r7, #30]
        break;
 8003196:	bf00      	nop
    }

    if (pclk != 0U)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	085a      	lsrs	r2, r3, #1
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	441a      	add	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d909      	bls.n	80031cc <UART_SetConfig+0x238>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031be:	d205      	bcs.n	80031cc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	e001      	b.n	80031d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	efff69f3 	.word	0xefff69f3
 80031ec:	40013800 	.word	0x40013800
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40004400 	.word	0x40004400
 80031f8:	40004800 	.word	0x40004800
 80031fc:	007a1200 	.word	0x007a1200

08003200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01a      	beq.n	8003316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fe:	d10a      	bne.n	8003316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b098      	sub	sp, #96	; 0x60
 8003348:	af02      	add	r7, sp, #8
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003354:	f7fd fbd0 	bl	8000af8 <HAL_GetTick>
 8003358:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b08      	cmp	r3, #8
 8003366:	d12e      	bne.n	80033c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f88c 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d021      	beq.n	80033c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003396:	653b      	str	r3, [r7, #80]	; 0x50
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
 80033a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e6      	bne.n	8003382 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e062      	b.n	800348c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d149      	bne.n	8003468 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	2200      	movs	r2, #0
 80033de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f856 	bl	8003494 <UART_WaitOnFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03c      	beq.n	8003468 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	623b      	str	r3, [r7, #32]
   return(result);
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
 800340e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e6      	bne.n	80033ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3308      	adds	r3, #8
 8003426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3308      	adds	r3, #8
 800343e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003440:	61fa      	str	r2, [r7, #28]
 8003442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	617b      	str	r3, [r7, #20]
   return(result);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e5      	bne.n	8003420 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e011      	b.n	800348c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3758      	adds	r7, #88	; 0x58
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a4:	e049      	b.n	800353a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d045      	beq.n	800353a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fd fb23 	bl	8000af8 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e048      	b.n	800355a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d031      	beq.n	800353a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d110      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2208      	movs	r2, #8
 80034ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f8ff 	bl	80036f0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2208      	movs	r2, #8
 80034f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e029      	b.n	800355a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003514:	d111      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f8e5 	bl	80036f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e00f      	b.n	800355a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	429a      	cmp	r2, r3
 8003556:	d0a6      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003564:	b480      	push	{r7}
 8003566:	b097      	sub	sp, #92	; 0x5c
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	88fa      	ldrh	r2, [r7, #6]
 8003584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003596:	d10e      	bne.n	80035b6 <UART_Start_Receive_IT+0x52>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <UART_Start_Receive_IT+0x48>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035aa:	e02d      	b.n	8003608 <UART_Start_Receive_IT+0xa4>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	22ff      	movs	r2, #255	; 0xff
 80035b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035b4:	e028      	b.n	8003608 <UART_Start_Receive_IT+0xa4>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <UART_Start_Receive_IT+0x76>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <UART_Start_Receive_IT+0x6c>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	22ff      	movs	r2, #255	; 0xff
 80035ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ce:	e01b      	b.n	8003608 <UART_Start_Receive_IT+0xa4>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	227f      	movs	r2, #127	; 0x7f
 80035d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035d8:	e016      	b.n	8003608 <UART_Start_Receive_IT+0xa4>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035e2:	d10d      	bne.n	8003600 <UART_Start_Receive_IT+0x9c>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <UART_Start_Receive_IT+0x92>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	227f      	movs	r2, #127	; 0x7f
 80035f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035f4:	e008      	b.n	8003608 <UART_Start_Receive_IT+0xa4>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	223f      	movs	r2, #63	; 0x3f
 80035fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035fe:	e003      	b.n	8003608 <UART_Start_Receive_IT+0xa4>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2222      	movs	r2, #34	; 0x22
 8003614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	657b      	str	r3, [r7, #84]	; 0x54
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3308      	adds	r3, #8
 8003636:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003638:	64ba      	str	r2, [r7, #72]	; 0x48
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800363e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d107      	bne.n	8003666 <UART_Start_Receive_IT+0x102>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <UART_Start_Receive_IT+0x184>)
 8003662:	669a      	str	r2, [r3, #104]	; 0x68
 8003664:	e002      	b.n	800366c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a20      	ldr	r2, [pc, #128]	; (80036ec <UART_Start_Receive_IT+0x188>)
 800366a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d019      	beq.n	80036a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
 8003694:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e6      	bne.n	8003674 <UART_Start_Receive_IT+0x110>
 80036a6:	e018      	b.n	80036da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	613b      	str	r3, [r7, #16]
   return(result);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f043 0320 	orr.w	r3, r3, #32
 80036bc:	653b      	str	r3, [r7, #80]	; 0x50
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c6:	623b      	str	r3, [r7, #32]
 80036c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	69f9      	ldr	r1, [r7, #28]
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e6      	bne.n	80036a8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	375c      	adds	r7, #92	; 0x5c
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	080039e1 	.word	0x080039e1
 80036ec:	08003839 	.word	0x08003839

080036f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b095      	sub	sp, #84	; 0x54
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800370c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003716:	643b      	str	r3, [r7, #64]	; 0x40
 8003718:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800371c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e6      	bne.n	80036f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3308      	adds	r3, #8
 8003730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	61fb      	str	r3, [r7, #28]
   return(result);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	64bb      	str	r3, [r7, #72]	; 0x48
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3308      	adds	r3, #8
 8003748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	2b01      	cmp	r3, #1
 8003764:	d118      	bne.n	8003798 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	60bb      	str	r3, [r7, #8]
   return(result);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f023 0310 	bic.w	r3, r3, #16
 800377a:	647b      	str	r3, [r7, #68]	; 0x44
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6979      	ldr	r1, [r7, #20]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	613b      	str	r3, [r7, #16]
   return(result);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e6      	bne.n	8003766 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037ac:	bf00      	nop
 80037ae:	3754      	adds	r7, #84	; 0x54
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f7ff fbc6 	bl	8002f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	613b      	str	r3, [r7, #16]
   return(result);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e6      	bne.n	80037ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fb92 	bl	8002f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003830:	bf00      	nop
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b09c      	sub	sp, #112	; 0x70
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003846:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003850:	2b22      	cmp	r3, #34	; 0x22
 8003852:	f040 80b9 	bne.w	80039c8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800385c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003860:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800386a:	b2da      	uxtb	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	400a      	ands	r2, r1
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 809c 	bne.w	80039d8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038be:	65bb      	str	r3, [r7, #88]	; 0x58
 80038c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e6      	bne.n	80038a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3308      	adds	r3, #8
 80038d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	667b      	str	r3, [r7, #100]	; 0x64
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038f2:	647a      	str	r2, [r7, #68]	; 0x44
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d018      	beq.n	800395a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	623b      	str	r3, [r7, #32]
   return(result);
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800393c:	663b      	str	r3, [r7, #96]	; 0x60
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
 8003948:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800394c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e6      	bne.n	8003928 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395e:	2b01      	cmp	r3, #1
 8003960:	d12e      	bne.n	80039c0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	60fb      	str	r3, [r7, #12]
   return(result);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f023 0310 	bic.w	r3, r3, #16
 800397c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	617b      	str	r3, [r7, #20]
   return(result);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e6      	bne.n	8003968 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d103      	bne.n	80039b0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fadf 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039be:	e00b      	b.n	80039d8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fc fd57 	bl	8000474 <HAL_UART_RxCpltCallback>
}
 80039c6:	e007      	b.n	80039d8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0208 	orr.w	r2, r2, #8
 80039d6:	619a      	str	r2, [r3, #24]
}
 80039d8:	bf00      	nop
 80039da:	3770      	adds	r7, #112	; 0x70
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b09c      	sub	sp, #112	; 0x70
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f8:	2b22      	cmp	r3, #34	; 0x22
 80039fa:	f040 80b9 	bne.w	8003b70 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003a12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	1c9a      	adds	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 809c 	bne.w	8003b80 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a66:	657b      	str	r3, [r7, #84]	; 0x54
 8003a68:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e6      	bne.n	8003a48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	663b      	str	r3, [r7, #96]	; 0x60
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3308      	adds	r3, #8
 8003a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a9a:	643a      	str	r2, [r7, #64]	; 0x40
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e5      	bne.n	8003a7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d018      	beq.n	8003b02 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e6      	bne.n	8003ad0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d12e      	bne.n	8003b68 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f023 0310 	bic.w	r3, r3, #16
 8003b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6979      	ldr	r1, [r7, #20]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e6      	bne.n	8003b10 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d103      	bne.n	8003b58 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2210      	movs	r2, #16
 8003b56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fa0b 	bl	8002f7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b66:	e00b      	b.n	8003b80 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fc fc83 	bl	8000474 <HAL_UART_RxCpltCallback>
}
 8003b6e:	e007      	b.n	8003b80 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0208 	orr.w	r2, r2, #8
 8003b7e:	619a      	str	r2, [r3, #24]
}
 8003b80:	bf00      	nop
 8003b82:	3770      	adds	r7, #112	; 0x70
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <atoi>:
 8003b9c:	220a      	movs	r2, #10
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f000 bce8 	b.w	8004574 <strtol>

08003ba4 <__errno>:
 8003ba4:	4b01      	ldr	r3, [pc, #4]	; (8003bac <__errno+0x8>)
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000018 	.word	0x20000018

08003bb0 <__sflush_r>:
 8003bb0:	898a      	ldrh	r2, [r1, #12]
 8003bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	0710      	lsls	r0, r2, #28
 8003bba:	460c      	mov	r4, r1
 8003bbc:	d458      	bmi.n	8003c70 <__sflush_r+0xc0>
 8003bbe:	684b      	ldr	r3, [r1, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	dc05      	bgt.n	8003bd0 <__sflush_r+0x20>
 8003bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	dc02      	bgt.n	8003bd0 <__sflush_r+0x20>
 8003bca:	2000      	movs	r0, #0
 8003bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	d0f9      	beq.n	8003bca <__sflush_r+0x1a>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bdc:	682f      	ldr	r7, [r5, #0]
 8003bde:	602b      	str	r3, [r5, #0]
 8003be0:	d032      	beq.n	8003c48 <__sflush_r+0x98>
 8003be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	075a      	lsls	r2, r3, #29
 8003be8:	d505      	bpl.n	8003bf6 <__sflush_r+0x46>
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	1ac0      	subs	r0, r0, r3
 8003bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bf0:	b10b      	cbz	r3, 8003bf6 <__sflush_r+0x46>
 8003bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bf4:	1ac0      	subs	r0, r0, r3
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bfc:	6a21      	ldr	r1, [r4, #32]
 8003bfe:	4628      	mov	r0, r5
 8003c00:	47b0      	blx	r6
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	d106      	bne.n	8003c16 <__sflush_r+0x66>
 8003c08:	6829      	ldr	r1, [r5, #0]
 8003c0a:	291d      	cmp	r1, #29
 8003c0c:	d82c      	bhi.n	8003c68 <__sflush_r+0xb8>
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <__sflush_r+0x108>)
 8003c10:	40ca      	lsrs	r2, r1
 8003c12:	07d6      	lsls	r6, r2, #31
 8003c14:	d528      	bpl.n	8003c68 <__sflush_r+0xb8>
 8003c16:	2200      	movs	r2, #0
 8003c18:	6062      	str	r2, [r4, #4]
 8003c1a:	04d9      	lsls	r1, r3, #19
 8003c1c:	6922      	ldr	r2, [r4, #16]
 8003c1e:	6022      	str	r2, [r4, #0]
 8003c20:	d504      	bpl.n	8003c2c <__sflush_r+0x7c>
 8003c22:	1c42      	adds	r2, r0, #1
 8003c24:	d101      	bne.n	8003c2a <__sflush_r+0x7a>
 8003c26:	682b      	ldr	r3, [r5, #0]
 8003c28:	b903      	cbnz	r3, 8003c2c <__sflush_r+0x7c>
 8003c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8003c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c2e:	602f      	str	r7, [r5, #0]
 8003c30:	2900      	cmp	r1, #0
 8003c32:	d0ca      	beq.n	8003bca <__sflush_r+0x1a>
 8003c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c38:	4299      	cmp	r1, r3
 8003c3a:	d002      	beq.n	8003c42 <__sflush_r+0x92>
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 f9b1 	bl	8003fa4 <_free_r>
 8003c42:	2000      	movs	r0, #0
 8003c44:	6360      	str	r0, [r4, #52]	; 0x34
 8003c46:	e7c1      	b.n	8003bcc <__sflush_r+0x1c>
 8003c48:	6a21      	ldr	r1, [r4, #32]
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b0      	blx	r6
 8003c50:	1c41      	adds	r1, r0, #1
 8003c52:	d1c7      	bne.n	8003be4 <__sflush_r+0x34>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0c4      	beq.n	8003be4 <__sflush_r+0x34>
 8003c5a:	2b1d      	cmp	r3, #29
 8003c5c:	d001      	beq.n	8003c62 <__sflush_r+0xb2>
 8003c5e:	2b16      	cmp	r3, #22
 8003c60:	d101      	bne.n	8003c66 <__sflush_r+0xb6>
 8003c62:	602f      	str	r7, [r5, #0]
 8003c64:	e7b1      	b.n	8003bca <__sflush_r+0x1a>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c6c:	81a3      	strh	r3, [r4, #12]
 8003c6e:	e7ad      	b.n	8003bcc <__sflush_r+0x1c>
 8003c70:	690f      	ldr	r7, [r1, #16]
 8003c72:	2f00      	cmp	r7, #0
 8003c74:	d0a9      	beq.n	8003bca <__sflush_r+0x1a>
 8003c76:	0793      	lsls	r3, r2, #30
 8003c78:	680e      	ldr	r6, [r1, #0]
 8003c7a:	bf08      	it	eq
 8003c7c:	694b      	ldreq	r3, [r1, #20]
 8003c7e:	600f      	str	r7, [r1, #0]
 8003c80:	bf18      	it	ne
 8003c82:	2300      	movne	r3, #0
 8003c84:	eba6 0807 	sub.w	r8, r6, r7
 8003c88:	608b      	str	r3, [r1, #8]
 8003c8a:	f1b8 0f00 	cmp.w	r8, #0
 8003c8e:	dd9c      	ble.n	8003bca <__sflush_r+0x1a>
 8003c90:	6a21      	ldr	r1, [r4, #32]
 8003c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c94:	4643      	mov	r3, r8
 8003c96:	463a      	mov	r2, r7
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b0      	blx	r6
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	dc06      	bgt.n	8003cae <__sflush_r+0xfe>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	e78e      	b.n	8003bcc <__sflush_r+0x1c>
 8003cae:	4407      	add	r7, r0
 8003cb0:	eba8 0800 	sub.w	r8, r8, r0
 8003cb4:	e7e9      	b.n	8003c8a <__sflush_r+0xda>
 8003cb6:	bf00      	nop
 8003cb8:	20400001 	.word	0x20400001

08003cbc <_fflush_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	690b      	ldr	r3, [r1, #16]
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	b913      	cbnz	r3, 8003ccc <_fflush_r+0x10>
 8003cc6:	2500      	movs	r5, #0
 8003cc8:	4628      	mov	r0, r5
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
 8003ccc:	b118      	cbz	r0, 8003cd6 <_fflush_r+0x1a>
 8003cce:	6983      	ldr	r3, [r0, #24]
 8003cd0:	b90b      	cbnz	r3, 8003cd6 <_fflush_r+0x1a>
 8003cd2:	f000 f899 	bl	8003e08 <__sinit>
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <_fflush_r+0x6c>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	d11b      	bne.n	8003d14 <_fflush_r+0x58>
 8003cdc:	686c      	ldr	r4, [r5, #4]
 8003cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ef      	beq.n	8003cc6 <_fflush_r+0xa>
 8003ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ce8:	07d0      	lsls	r0, r2, #31
 8003cea:	d404      	bmi.n	8003cf6 <_fflush_r+0x3a>
 8003cec:	0599      	lsls	r1, r3, #22
 8003cee:	d402      	bmi.n	8003cf6 <_fflush_r+0x3a>
 8003cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cf2:	f000 f94c 	bl	8003f8e <__retarget_lock_acquire_recursive>
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	f7ff ff59 	bl	8003bb0 <__sflush_r>
 8003cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d00:	07da      	lsls	r2, r3, #31
 8003d02:	4605      	mov	r5, r0
 8003d04:	d4e0      	bmi.n	8003cc8 <_fflush_r+0xc>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	059b      	lsls	r3, r3, #22
 8003d0a:	d4dd      	bmi.n	8003cc8 <_fflush_r+0xc>
 8003d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d0e:	f000 f93f 	bl	8003f90 <__retarget_lock_release_recursive>
 8003d12:	e7d9      	b.n	8003cc8 <_fflush_r+0xc>
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <_fflush_r+0x70>)
 8003d16:	429c      	cmp	r4, r3
 8003d18:	d101      	bne.n	8003d1e <_fflush_r+0x62>
 8003d1a:	68ac      	ldr	r4, [r5, #8]
 8003d1c:	e7df      	b.n	8003cde <_fflush_r+0x22>
 8003d1e:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <_fflush_r+0x74>)
 8003d20:	429c      	cmp	r4, r3
 8003d22:	bf08      	it	eq
 8003d24:	68ec      	ldreq	r4, [r5, #12]
 8003d26:	e7da      	b.n	8003cde <_fflush_r+0x22>
 8003d28:	08005010 	.word	0x08005010
 8003d2c:	08005030 	.word	0x08005030
 8003d30:	08004ff0 	.word	0x08004ff0

08003d34 <fflush>:
 8003d34:	4601      	mov	r1, r0
 8003d36:	b920      	cbnz	r0, 8003d42 <fflush+0xe>
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <fflush+0x18>)
 8003d3a:	4905      	ldr	r1, [pc, #20]	; (8003d50 <fflush+0x1c>)
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	f000 b8e1 	b.w	8003f04 <_fwalk_reent>
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <fflush+0x20>)
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	f7ff bfb9 	b.w	8003cbc <_fflush_r>
 8003d4a:	bf00      	nop
 8003d4c:	08005050 	.word	0x08005050
 8003d50:	08003cbd 	.word	0x08003cbd
 8003d54:	20000018 	.word	0x20000018

08003d58 <std>:
 8003d58:	2300      	movs	r3, #0
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d66:	6083      	str	r3, [r0, #8]
 8003d68:	8181      	strh	r1, [r0, #12]
 8003d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d6c:	81c2      	strh	r2, [r0, #14]
 8003d6e:	6183      	str	r3, [r0, #24]
 8003d70:	4619      	mov	r1, r3
 8003d72:	2208      	movs	r2, #8
 8003d74:	305c      	adds	r0, #92	; 0x5c
 8003d76:	f000 f90c 	bl	8003f92 <memset>
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <std+0x38>)
 8003d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <std+0x3c>)
 8003d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <std+0x40>)
 8003d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <std+0x44>)
 8003d88:	6224      	str	r4, [r4, #32]
 8003d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	bf00      	nop
 8003d90:	080043c1 	.word	0x080043c1
 8003d94:	080043e3 	.word	0x080043e3
 8003d98:	0800441b 	.word	0x0800441b
 8003d9c:	0800443f 	.word	0x0800443f

08003da0 <_cleanup_r>:
 8003da0:	4901      	ldr	r1, [pc, #4]	; (8003da8 <_cleanup_r+0x8>)
 8003da2:	f000 b8af 	b.w	8003f04 <_fwalk_reent>
 8003da6:	bf00      	nop
 8003da8:	08003cbd 	.word	0x08003cbd

08003dac <__sfmoreglue>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	1e4a      	subs	r2, r1, #1
 8003db0:	2568      	movs	r5, #104	; 0x68
 8003db2:	4355      	muls	r5, r2
 8003db4:	460e      	mov	r6, r1
 8003db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003dba:	f000 f943 	bl	8004044 <_malloc_r>
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	b140      	cbz	r0, 8003dd4 <__sfmoreglue+0x28>
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8003dc8:	300c      	adds	r0, #12
 8003dca:	60a0      	str	r0, [r4, #8]
 8003dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dd0:	f000 f8df 	bl	8003f92 <memset>
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}

08003dd8 <__sfp_lock_acquire>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <__sfp_lock_acquire+0x8>)
 8003dda:	f000 b8d8 	b.w	8003f8e <__retarget_lock_acquire_recursive>
 8003dde:	bf00      	nop
 8003de0:	2000019c 	.word	0x2000019c

08003de4 <__sfp_lock_release>:
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <__sfp_lock_release+0x8>)
 8003de6:	f000 b8d3 	b.w	8003f90 <__retarget_lock_release_recursive>
 8003dea:	bf00      	nop
 8003dec:	2000019c 	.word	0x2000019c

08003df0 <__sinit_lock_acquire>:
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <__sinit_lock_acquire+0x8>)
 8003df2:	f000 b8cc 	b.w	8003f8e <__retarget_lock_acquire_recursive>
 8003df6:	bf00      	nop
 8003df8:	20000197 	.word	0x20000197

08003dfc <__sinit_lock_release>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	; (8003e04 <__sinit_lock_release+0x8>)
 8003dfe:	f000 b8c7 	b.w	8003f90 <__retarget_lock_release_recursive>
 8003e02:	bf00      	nop
 8003e04:	20000197 	.word	0x20000197

08003e08 <__sinit>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	f7ff fff0 	bl	8003df0 <__sinit_lock_acquire>
 8003e10:	69a3      	ldr	r3, [r4, #24]
 8003e12:	b11b      	cbz	r3, 8003e1c <__sinit+0x14>
 8003e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e18:	f7ff bff0 	b.w	8003dfc <__sinit_lock_release>
 8003e1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e20:	6523      	str	r3, [r4, #80]	; 0x50
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <__sinit+0x68>)
 8003e24:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <__sinit+0x6c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e2a:	42a3      	cmp	r3, r4
 8003e2c:	bf04      	itt	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	61a3      	streq	r3, [r4, #24]
 8003e32:	4620      	mov	r0, r4
 8003e34:	f000 f820 	bl	8003e78 <__sfp>
 8003e38:	6060      	str	r0, [r4, #4]
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f000 f81c 	bl	8003e78 <__sfp>
 8003e40:	60a0      	str	r0, [r4, #8]
 8003e42:	4620      	mov	r0, r4
 8003e44:	f000 f818 	bl	8003e78 <__sfp>
 8003e48:	2200      	movs	r2, #0
 8003e4a:	60e0      	str	r0, [r4, #12]
 8003e4c:	2104      	movs	r1, #4
 8003e4e:	6860      	ldr	r0, [r4, #4]
 8003e50:	f7ff ff82 	bl	8003d58 <std>
 8003e54:	68a0      	ldr	r0, [r4, #8]
 8003e56:	2201      	movs	r2, #1
 8003e58:	2109      	movs	r1, #9
 8003e5a:	f7ff ff7d 	bl	8003d58 <std>
 8003e5e:	68e0      	ldr	r0, [r4, #12]
 8003e60:	2202      	movs	r2, #2
 8003e62:	2112      	movs	r1, #18
 8003e64:	f7ff ff78 	bl	8003d58 <std>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	61a3      	str	r3, [r4, #24]
 8003e6c:	e7d2      	b.n	8003e14 <__sinit+0xc>
 8003e6e:	bf00      	nop
 8003e70:	08005050 	.word	0x08005050
 8003e74:	08003da1 	.word	0x08003da1

08003e78 <__sfp>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	4607      	mov	r7, r0
 8003e7c:	f7ff ffac 	bl	8003dd8 <__sfp_lock_acquire>
 8003e80:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <__sfp+0x84>)
 8003e82:	681e      	ldr	r6, [r3, #0]
 8003e84:	69b3      	ldr	r3, [r6, #24]
 8003e86:	b913      	cbnz	r3, 8003e8e <__sfp+0x16>
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f7ff ffbd 	bl	8003e08 <__sinit>
 8003e8e:	3648      	adds	r6, #72	; 0x48
 8003e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	d503      	bpl.n	8003ea0 <__sfp+0x28>
 8003e98:	6833      	ldr	r3, [r6, #0]
 8003e9a:	b30b      	cbz	r3, 8003ee0 <__sfp+0x68>
 8003e9c:	6836      	ldr	r6, [r6, #0]
 8003e9e:	e7f7      	b.n	8003e90 <__sfp+0x18>
 8003ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ea4:	b9d5      	cbnz	r5, 8003edc <__sfp+0x64>
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <__sfp+0x88>)
 8003ea8:	60e3      	str	r3, [r4, #12]
 8003eaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003eae:	6665      	str	r5, [r4, #100]	; 0x64
 8003eb0:	f000 f86c 	bl	8003f8c <__retarget_lock_init_recursive>
 8003eb4:	f7ff ff96 	bl	8003de4 <__sfp_lock_release>
 8003eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ec0:	6025      	str	r5, [r4, #0]
 8003ec2:	61a5      	str	r5, [r4, #24]
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ecc:	f000 f861 	bl	8003f92 <memset>
 8003ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ed8:	4620      	mov	r0, r4
 8003eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003edc:	3468      	adds	r4, #104	; 0x68
 8003ede:	e7d9      	b.n	8003e94 <__sfp+0x1c>
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f7ff ff62 	bl	8003dac <__sfmoreglue>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	6030      	str	r0, [r6, #0]
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d1d5      	bne.n	8003e9c <__sfp+0x24>
 8003ef0:	f7ff ff78 	bl	8003de4 <__sfp_lock_release>
 8003ef4:	230c      	movs	r3, #12
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	e7ee      	b.n	8003ed8 <__sfp+0x60>
 8003efa:	bf00      	nop
 8003efc:	08005050 	.word	0x08005050
 8003f00:	ffff0001 	.word	0xffff0001

08003f04 <_fwalk_reent>:
 8003f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f08:	4606      	mov	r6, r0
 8003f0a:	4688      	mov	r8, r1
 8003f0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f10:	2700      	movs	r7, #0
 8003f12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f16:	f1b9 0901 	subs.w	r9, r9, #1
 8003f1a:	d505      	bpl.n	8003f28 <_fwalk_reent+0x24>
 8003f1c:	6824      	ldr	r4, [r4, #0]
 8003f1e:	2c00      	cmp	r4, #0
 8003f20:	d1f7      	bne.n	8003f12 <_fwalk_reent+0xe>
 8003f22:	4638      	mov	r0, r7
 8003f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f28:	89ab      	ldrh	r3, [r5, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d907      	bls.n	8003f3e <_fwalk_reent+0x3a>
 8003f2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f32:	3301      	adds	r3, #1
 8003f34:	d003      	beq.n	8003f3e <_fwalk_reent+0x3a>
 8003f36:	4629      	mov	r1, r5
 8003f38:	4630      	mov	r0, r6
 8003f3a:	47c0      	blx	r8
 8003f3c:	4307      	orrs	r7, r0
 8003f3e:	3568      	adds	r5, #104	; 0x68
 8003f40:	e7e9      	b.n	8003f16 <_fwalk_reent+0x12>
	...

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4d0d      	ldr	r5, [pc, #52]	; (8003f7c <__libc_init_array+0x38>)
 8003f48:	4c0d      	ldr	r4, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4a:	1b64      	subs	r4, r4, r5
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	2600      	movs	r6, #0
 8003f50:	42a6      	cmp	r6, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	4d0b      	ldr	r5, [pc, #44]	; (8003f84 <__libc_init_array+0x40>)
 8003f56:	4c0c      	ldr	r4, [pc, #48]	; (8003f88 <__libc_init_array+0x44>)
 8003f58:	f000 ffa4 	bl	8004ea4 <_init>
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	2600      	movs	r6, #0
 8003f62:	42a6      	cmp	r6, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6c:	4798      	blx	r3
 8003f6e:	3601      	adds	r6, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f76:	4798      	blx	r3
 8003f78:	3601      	adds	r6, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	08005188 	.word	0x08005188
 8003f80:	08005188 	.word	0x08005188
 8003f84:	08005188 	.word	0x08005188
 8003f88:	0800518c 	.word	0x0800518c

08003f8c <__retarget_lock_init_recursive>:
 8003f8c:	4770      	bx	lr

08003f8e <__retarget_lock_acquire_recursive>:
 8003f8e:	4770      	bx	lr

08003f90 <__retarget_lock_release_recursive>:
 8003f90:	4770      	bx	lr

08003f92 <memset>:
 8003f92:	4402      	add	r2, r0
 8003f94:	4603      	mov	r3, r0
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d100      	bne.n	8003f9c <memset+0xa>
 8003f9a:	4770      	bx	lr
 8003f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa0:	e7f9      	b.n	8003f96 <memset+0x4>
	...

08003fa4 <_free_r>:
 8003fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fa6:	2900      	cmp	r1, #0
 8003fa8:	d048      	beq.n	800403c <_free_r+0x98>
 8003faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fae:	9001      	str	r0, [sp, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8003fb6:	bfb8      	it	lt
 8003fb8:	18e4      	addlt	r4, r4, r3
 8003fba:	f000 fc45 	bl	8004848 <__malloc_lock>
 8003fbe:	4a20      	ldr	r2, [pc, #128]	; (8004040 <_free_r+0x9c>)
 8003fc0:	9801      	ldr	r0, [sp, #4]
 8003fc2:	6813      	ldr	r3, [r2, #0]
 8003fc4:	4615      	mov	r5, r2
 8003fc6:	b933      	cbnz	r3, 8003fd6 <_free_r+0x32>
 8003fc8:	6063      	str	r3, [r4, #4]
 8003fca:	6014      	str	r4, [r2, #0]
 8003fcc:	b003      	add	sp, #12
 8003fce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fd2:	f000 bc3f 	b.w	8004854 <__malloc_unlock>
 8003fd6:	42a3      	cmp	r3, r4
 8003fd8:	d90b      	bls.n	8003ff2 <_free_r+0x4e>
 8003fda:	6821      	ldr	r1, [r4, #0]
 8003fdc:	1862      	adds	r2, r4, r1
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	bf04      	itt	eq
 8003fe2:	681a      	ldreq	r2, [r3, #0]
 8003fe4:	685b      	ldreq	r3, [r3, #4]
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	bf04      	itt	eq
 8003fea:	1852      	addeq	r2, r2, r1
 8003fec:	6022      	streq	r2, [r4, #0]
 8003fee:	602c      	str	r4, [r5, #0]
 8003ff0:	e7ec      	b.n	8003fcc <_free_r+0x28>
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	b10b      	cbz	r3, 8003ffc <_free_r+0x58>
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	d9fa      	bls.n	8003ff2 <_free_r+0x4e>
 8003ffc:	6811      	ldr	r1, [r2, #0]
 8003ffe:	1855      	adds	r5, r2, r1
 8004000:	42a5      	cmp	r5, r4
 8004002:	d10b      	bne.n	800401c <_free_r+0x78>
 8004004:	6824      	ldr	r4, [r4, #0]
 8004006:	4421      	add	r1, r4
 8004008:	1854      	adds	r4, r2, r1
 800400a:	42a3      	cmp	r3, r4
 800400c:	6011      	str	r1, [r2, #0]
 800400e:	d1dd      	bne.n	8003fcc <_free_r+0x28>
 8004010:	681c      	ldr	r4, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	6053      	str	r3, [r2, #4]
 8004016:	4421      	add	r1, r4
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	e7d7      	b.n	8003fcc <_free_r+0x28>
 800401c:	d902      	bls.n	8004024 <_free_r+0x80>
 800401e:	230c      	movs	r3, #12
 8004020:	6003      	str	r3, [r0, #0]
 8004022:	e7d3      	b.n	8003fcc <_free_r+0x28>
 8004024:	6825      	ldr	r5, [r4, #0]
 8004026:	1961      	adds	r1, r4, r5
 8004028:	428b      	cmp	r3, r1
 800402a:	bf04      	itt	eq
 800402c:	6819      	ldreq	r1, [r3, #0]
 800402e:	685b      	ldreq	r3, [r3, #4]
 8004030:	6063      	str	r3, [r4, #4]
 8004032:	bf04      	itt	eq
 8004034:	1949      	addeq	r1, r1, r5
 8004036:	6021      	streq	r1, [r4, #0]
 8004038:	6054      	str	r4, [r2, #4]
 800403a:	e7c7      	b.n	8003fcc <_free_r+0x28>
 800403c:	b003      	add	sp, #12
 800403e:	bd30      	pop	{r4, r5, pc}
 8004040:	200000ac 	.word	0x200000ac

08004044 <_malloc_r>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	1ccd      	adds	r5, r1, #3
 8004048:	f025 0503 	bic.w	r5, r5, #3
 800404c:	3508      	adds	r5, #8
 800404e:	2d0c      	cmp	r5, #12
 8004050:	bf38      	it	cc
 8004052:	250c      	movcc	r5, #12
 8004054:	2d00      	cmp	r5, #0
 8004056:	4606      	mov	r6, r0
 8004058:	db01      	blt.n	800405e <_malloc_r+0x1a>
 800405a:	42a9      	cmp	r1, r5
 800405c:	d903      	bls.n	8004066 <_malloc_r+0x22>
 800405e:	230c      	movs	r3, #12
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	2000      	movs	r0, #0
 8004064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004066:	f000 fbef 	bl	8004848 <__malloc_lock>
 800406a:	4921      	ldr	r1, [pc, #132]	; (80040f0 <_malloc_r+0xac>)
 800406c:	680a      	ldr	r2, [r1, #0]
 800406e:	4614      	mov	r4, r2
 8004070:	b99c      	cbnz	r4, 800409a <_malloc_r+0x56>
 8004072:	4f20      	ldr	r7, [pc, #128]	; (80040f4 <_malloc_r+0xb0>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	b923      	cbnz	r3, 8004082 <_malloc_r+0x3e>
 8004078:	4621      	mov	r1, r4
 800407a:	4630      	mov	r0, r6
 800407c:	f000 f8ca 	bl	8004214 <_sbrk_r>
 8004080:	6038      	str	r0, [r7, #0]
 8004082:	4629      	mov	r1, r5
 8004084:	4630      	mov	r0, r6
 8004086:	f000 f8c5 	bl	8004214 <_sbrk_r>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	d123      	bne.n	80040d6 <_malloc_r+0x92>
 800408e:	230c      	movs	r3, #12
 8004090:	6033      	str	r3, [r6, #0]
 8004092:	4630      	mov	r0, r6
 8004094:	f000 fbde 	bl	8004854 <__malloc_unlock>
 8004098:	e7e3      	b.n	8004062 <_malloc_r+0x1e>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	1b5b      	subs	r3, r3, r5
 800409e:	d417      	bmi.n	80040d0 <_malloc_r+0x8c>
 80040a0:	2b0b      	cmp	r3, #11
 80040a2:	d903      	bls.n	80040ac <_malloc_r+0x68>
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	441c      	add	r4, r3
 80040a8:	6025      	str	r5, [r4, #0]
 80040aa:	e004      	b.n	80040b6 <_malloc_r+0x72>
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	42a2      	cmp	r2, r4
 80040b0:	bf0c      	ite	eq
 80040b2:	600b      	streq	r3, [r1, #0]
 80040b4:	6053      	strne	r3, [r2, #4]
 80040b6:	4630      	mov	r0, r6
 80040b8:	f000 fbcc 	bl	8004854 <__malloc_unlock>
 80040bc:	f104 000b 	add.w	r0, r4, #11
 80040c0:	1d23      	adds	r3, r4, #4
 80040c2:	f020 0007 	bic.w	r0, r0, #7
 80040c6:	1ac2      	subs	r2, r0, r3
 80040c8:	d0cc      	beq.n	8004064 <_malloc_r+0x20>
 80040ca:	1a1b      	subs	r3, r3, r0
 80040cc:	50a3      	str	r3, [r4, r2]
 80040ce:	e7c9      	b.n	8004064 <_malloc_r+0x20>
 80040d0:	4622      	mov	r2, r4
 80040d2:	6864      	ldr	r4, [r4, #4]
 80040d4:	e7cc      	b.n	8004070 <_malloc_r+0x2c>
 80040d6:	1cc4      	adds	r4, r0, #3
 80040d8:	f024 0403 	bic.w	r4, r4, #3
 80040dc:	42a0      	cmp	r0, r4
 80040de:	d0e3      	beq.n	80040a8 <_malloc_r+0x64>
 80040e0:	1a21      	subs	r1, r4, r0
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 f896 	bl	8004214 <_sbrk_r>
 80040e8:	3001      	adds	r0, #1
 80040ea:	d1dd      	bne.n	80040a8 <_malloc_r+0x64>
 80040ec:	e7cf      	b.n	800408e <_malloc_r+0x4a>
 80040ee:	bf00      	nop
 80040f0:	200000ac 	.word	0x200000ac
 80040f4:	200000b0 	.word	0x200000b0

080040f8 <iprintf>:
 80040f8:	b40f      	push	{r0, r1, r2, r3}
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <iprintf+0x2c>)
 80040fc:	b513      	push	{r0, r1, r4, lr}
 80040fe:	681c      	ldr	r4, [r3, #0]
 8004100:	b124      	cbz	r4, 800410c <iprintf+0x14>
 8004102:	69a3      	ldr	r3, [r4, #24]
 8004104:	b913      	cbnz	r3, 800410c <iprintf+0x14>
 8004106:	4620      	mov	r0, r4
 8004108:	f7ff fe7e 	bl	8003e08 <__sinit>
 800410c:	ab05      	add	r3, sp, #20
 800410e:	9a04      	ldr	r2, [sp, #16]
 8004110:	68a1      	ldr	r1, [r4, #8]
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	4620      	mov	r0, r4
 8004116:	f000 fbcd 	bl	80048b4 <_vfiprintf_r>
 800411a:	b002      	add	sp, #8
 800411c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004120:	b004      	add	sp, #16
 8004122:	4770      	bx	lr
 8004124:	20000018 	.word	0x20000018

08004128 <_puts_r>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	460e      	mov	r6, r1
 800412c:	4605      	mov	r5, r0
 800412e:	b118      	cbz	r0, 8004138 <_puts_r+0x10>
 8004130:	6983      	ldr	r3, [r0, #24]
 8004132:	b90b      	cbnz	r3, 8004138 <_puts_r+0x10>
 8004134:	f7ff fe68 	bl	8003e08 <__sinit>
 8004138:	69ab      	ldr	r3, [r5, #24]
 800413a:	68ac      	ldr	r4, [r5, #8]
 800413c:	b913      	cbnz	r3, 8004144 <_puts_r+0x1c>
 800413e:	4628      	mov	r0, r5
 8004140:	f7ff fe62 	bl	8003e08 <__sinit>
 8004144:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <_puts_r+0xd0>)
 8004146:	429c      	cmp	r4, r3
 8004148:	d120      	bne.n	800418c <_puts_r+0x64>
 800414a:	686c      	ldr	r4, [r5, #4]
 800414c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800414e:	07db      	lsls	r3, r3, #31
 8004150:	d405      	bmi.n	800415e <_puts_r+0x36>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	0598      	lsls	r0, r3, #22
 8004156:	d402      	bmi.n	800415e <_puts_r+0x36>
 8004158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800415a:	f7ff ff18 	bl	8003f8e <__retarget_lock_acquire_recursive>
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	0719      	lsls	r1, r3, #28
 8004162:	d51d      	bpl.n	80041a0 <_puts_r+0x78>
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	b1db      	cbz	r3, 80041a0 <_puts_r+0x78>
 8004168:	3e01      	subs	r6, #1
 800416a:	68a3      	ldr	r3, [r4, #8]
 800416c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004170:	3b01      	subs	r3, #1
 8004172:	60a3      	str	r3, [r4, #8]
 8004174:	bb39      	cbnz	r1, 80041c6 <_puts_r+0x9e>
 8004176:	2b00      	cmp	r3, #0
 8004178:	da38      	bge.n	80041ec <_puts_r+0xc4>
 800417a:	4622      	mov	r2, r4
 800417c:	210a      	movs	r1, #10
 800417e:	4628      	mov	r0, r5
 8004180:	f000 fa02 	bl	8004588 <__swbuf_r>
 8004184:	3001      	adds	r0, #1
 8004186:	d011      	beq.n	80041ac <_puts_r+0x84>
 8004188:	250a      	movs	r5, #10
 800418a:	e011      	b.n	80041b0 <_puts_r+0x88>
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <_puts_r+0xd4>)
 800418e:	429c      	cmp	r4, r3
 8004190:	d101      	bne.n	8004196 <_puts_r+0x6e>
 8004192:	68ac      	ldr	r4, [r5, #8]
 8004194:	e7da      	b.n	800414c <_puts_r+0x24>
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <_puts_r+0xd8>)
 8004198:	429c      	cmp	r4, r3
 800419a:	bf08      	it	eq
 800419c:	68ec      	ldreq	r4, [r5, #12]
 800419e:	e7d5      	b.n	800414c <_puts_r+0x24>
 80041a0:	4621      	mov	r1, r4
 80041a2:	4628      	mov	r0, r5
 80041a4:	f000 fa54 	bl	8004650 <__swsetup_r>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d0dd      	beq.n	8004168 <_puts_r+0x40>
 80041ac:	f04f 35ff 	mov.w	r5, #4294967295
 80041b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041b2:	07da      	lsls	r2, r3, #31
 80041b4:	d405      	bmi.n	80041c2 <_puts_r+0x9a>
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	059b      	lsls	r3, r3, #22
 80041ba:	d402      	bmi.n	80041c2 <_puts_r+0x9a>
 80041bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041be:	f7ff fee7 	bl	8003f90 <__retarget_lock_release_recursive>
 80041c2:	4628      	mov	r0, r5
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da04      	bge.n	80041d4 <_puts_r+0xac>
 80041ca:	69a2      	ldr	r2, [r4, #24]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	dc06      	bgt.n	80041de <_puts_r+0xb6>
 80041d0:	290a      	cmp	r1, #10
 80041d2:	d004      	beq.n	80041de <_puts_r+0xb6>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	6022      	str	r2, [r4, #0]
 80041da:	7019      	strb	r1, [r3, #0]
 80041dc:	e7c5      	b.n	800416a <_puts_r+0x42>
 80041de:	4622      	mov	r2, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 f9d1 	bl	8004588 <__swbuf_r>
 80041e6:	3001      	adds	r0, #1
 80041e8:	d1bf      	bne.n	800416a <_puts_r+0x42>
 80041ea:	e7df      	b.n	80041ac <_puts_r+0x84>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	250a      	movs	r5, #10
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	6022      	str	r2, [r4, #0]
 80041f4:	701d      	strb	r5, [r3, #0]
 80041f6:	e7db      	b.n	80041b0 <_puts_r+0x88>
 80041f8:	08005010 	.word	0x08005010
 80041fc:	08005030 	.word	0x08005030
 8004200:	08004ff0 	.word	0x08004ff0

08004204 <puts>:
 8004204:	4b02      	ldr	r3, [pc, #8]	; (8004210 <puts+0xc>)
 8004206:	4601      	mov	r1, r0
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	f7ff bf8d 	b.w	8004128 <_puts_r>
 800420e:	bf00      	nop
 8004210:	20000018 	.word	0x20000018

08004214 <_sbrk_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4d06      	ldr	r5, [pc, #24]	; (8004230 <_sbrk_r+0x1c>)
 8004218:	2300      	movs	r3, #0
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	f7fc fb9e 	bl	8000960 <_sbrk>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_sbrk_r+0x1a>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_sbrk_r+0x1a>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	200001a0 	.word	0x200001a0

08004234 <setvbuf>:
 8004234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004238:	461d      	mov	r5, r3
 800423a:	4b5d      	ldr	r3, [pc, #372]	; (80043b0 <setvbuf+0x17c>)
 800423c:	681f      	ldr	r7, [r3, #0]
 800423e:	4604      	mov	r4, r0
 8004240:	460e      	mov	r6, r1
 8004242:	4690      	mov	r8, r2
 8004244:	b127      	cbz	r7, 8004250 <setvbuf+0x1c>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	b913      	cbnz	r3, 8004250 <setvbuf+0x1c>
 800424a:	4638      	mov	r0, r7
 800424c:	f7ff fddc 	bl	8003e08 <__sinit>
 8004250:	4b58      	ldr	r3, [pc, #352]	; (80043b4 <setvbuf+0x180>)
 8004252:	429c      	cmp	r4, r3
 8004254:	d167      	bne.n	8004326 <setvbuf+0xf2>
 8004256:	687c      	ldr	r4, [r7, #4]
 8004258:	f1b8 0f02 	cmp.w	r8, #2
 800425c:	d006      	beq.n	800426c <setvbuf+0x38>
 800425e:	f1b8 0f01 	cmp.w	r8, #1
 8004262:	f200 809f 	bhi.w	80043a4 <setvbuf+0x170>
 8004266:	2d00      	cmp	r5, #0
 8004268:	f2c0 809c 	blt.w	80043a4 <setvbuf+0x170>
 800426c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800426e:	07db      	lsls	r3, r3, #31
 8004270:	d405      	bmi.n	800427e <setvbuf+0x4a>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	0598      	lsls	r0, r3, #22
 8004276:	d402      	bmi.n	800427e <setvbuf+0x4a>
 8004278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800427a:	f7ff fe88 	bl	8003f8e <__retarget_lock_acquire_recursive>
 800427e:	4621      	mov	r1, r4
 8004280:	4638      	mov	r0, r7
 8004282:	f7ff fd1b 	bl	8003cbc <_fflush_r>
 8004286:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004288:	b141      	cbz	r1, 800429c <setvbuf+0x68>
 800428a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800428e:	4299      	cmp	r1, r3
 8004290:	d002      	beq.n	8004298 <setvbuf+0x64>
 8004292:	4638      	mov	r0, r7
 8004294:	f7ff fe86 	bl	8003fa4 <_free_r>
 8004298:	2300      	movs	r3, #0
 800429a:	6363      	str	r3, [r4, #52]	; 0x34
 800429c:	2300      	movs	r3, #0
 800429e:	61a3      	str	r3, [r4, #24]
 80042a0:	6063      	str	r3, [r4, #4]
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	0619      	lsls	r1, r3, #24
 80042a6:	d503      	bpl.n	80042b0 <setvbuf+0x7c>
 80042a8:	6921      	ldr	r1, [r4, #16]
 80042aa:	4638      	mov	r0, r7
 80042ac:	f7ff fe7a 	bl	8003fa4 <_free_r>
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	f1b8 0f02 	cmp.w	r8, #2
 80042be:	81a3      	strh	r3, [r4, #12]
 80042c0:	d06c      	beq.n	800439c <setvbuf+0x168>
 80042c2:	ab01      	add	r3, sp, #4
 80042c4:	466a      	mov	r2, sp
 80042c6:	4621      	mov	r1, r4
 80042c8:	4638      	mov	r0, r7
 80042ca:	f000 fa51 	bl	8004770 <__swhatbuf_r>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	4318      	orrs	r0, r3
 80042d2:	81a0      	strh	r0, [r4, #12]
 80042d4:	2d00      	cmp	r5, #0
 80042d6:	d130      	bne.n	800433a <setvbuf+0x106>
 80042d8:	9d00      	ldr	r5, [sp, #0]
 80042da:	4628      	mov	r0, r5
 80042dc:	f000 faac 	bl	8004838 <malloc>
 80042e0:	4606      	mov	r6, r0
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d155      	bne.n	8004392 <setvbuf+0x15e>
 80042e6:	f8dd 9000 	ldr.w	r9, [sp]
 80042ea:	45a9      	cmp	r9, r5
 80042ec:	d14a      	bne.n	8004384 <setvbuf+0x150>
 80042ee:	f04f 35ff 	mov.w	r5, #4294967295
 80042f2:	2200      	movs	r2, #0
 80042f4:	60a2      	str	r2, [r4, #8]
 80042f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80042fa:	6022      	str	r2, [r4, #0]
 80042fc:	6122      	str	r2, [r4, #16]
 80042fe:	2201      	movs	r2, #1
 8004300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004304:	6162      	str	r2, [r4, #20]
 8004306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	07d2      	lsls	r2, r2, #31
 800430e:	81a3      	strh	r3, [r4, #12]
 8004310:	d405      	bmi.n	800431e <setvbuf+0xea>
 8004312:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004316:	d102      	bne.n	800431e <setvbuf+0xea>
 8004318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800431a:	f7ff fe39 	bl	8003f90 <__retarget_lock_release_recursive>
 800431e:	4628      	mov	r0, r5
 8004320:	b003      	add	sp, #12
 8004322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <setvbuf+0x184>)
 8004328:	429c      	cmp	r4, r3
 800432a:	d101      	bne.n	8004330 <setvbuf+0xfc>
 800432c:	68bc      	ldr	r4, [r7, #8]
 800432e:	e793      	b.n	8004258 <setvbuf+0x24>
 8004330:	4b22      	ldr	r3, [pc, #136]	; (80043bc <setvbuf+0x188>)
 8004332:	429c      	cmp	r4, r3
 8004334:	bf08      	it	eq
 8004336:	68fc      	ldreq	r4, [r7, #12]
 8004338:	e78e      	b.n	8004258 <setvbuf+0x24>
 800433a:	2e00      	cmp	r6, #0
 800433c:	d0cd      	beq.n	80042da <setvbuf+0xa6>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	b913      	cbnz	r3, 8004348 <setvbuf+0x114>
 8004342:	4638      	mov	r0, r7
 8004344:	f7ff fd60 	bl	8003e08 <__sinit>
 8004348:	f1b8 0f01 	cmp.w	r8, #1
 800434c:	bf08      	it	eq
 800434e:	89a3      	ldrheq	r3, [r4, #12]
 8004350:	6026      	str	r6, [r4, #0]
 8004352:	bf04      	itt	eq
 8004354:	f043 0301 	orreq.w	r3, r3, #1
 8004358:	81a3      	strheq	r3, [r4, #12]
 800435a:	89a2      	ldrh	r2, [r4, #12]
 800435c:	f012 0308 	ands.w	r3, r2, #8
 8004360:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004364:	d01c      	beq.n	80043a0 <setvbuf+0x16c>
 8004366:	07d3      	lsls	r3, r2, #31
 8004368:	bf41      	itttt	mi
 800436a:	2300      	movmi	r3, #0
 800436c:	426d      	negmi	r5, r5
 800436e:	60a3      	strmi	r3, [r4, #8]
 8004370:	61a5      	strmi	r5, [r4, #24]
 8004372:	bf58      	it	pl
 8004374:	60a5      	strpl	r5, [r4, #8]
 8004376:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004378:	f015 0501 	ands.w	r5, r5, #1
 800437c:	d115      	bne.n	80043aa <setvbuf+0x176>
 800437e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004382:	e7c8      	b.n	8004316 <setvbuf+0xe2>
 8004384:	4648      	mov	r0, r9
 8004386:	f000 fa57 	bl	8004838 <malloc>
 800438a:	4606      	mov	r6, r0
 800438c:	2800      	cmp	r0, #0
 800438e:	d0ae      	beq.n	80042ee <setvbuf+0xba>
 8004390:	464d      	mov	r5, r9
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	81a3      	strh	r3, [r4, #12]
 800439a:	e7d0      	b.n	800433e <setvbuf+0x10a>
 800439c:	2500      	movs	r5, #0
 800439e:	e7a8      	b.n	80042f2 <setvbuf+0xbe>
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	e7e8      	b.n	8004376 <setvbuf+0x142>
 80043a4:	f04f 35ff 	mov.w	r5, #4294967295
 80043a8:	e7b9      	b.n	800431e <setvbuf+0xea>
 80043aa:	2500      	movs	r5, #0
 80043ac:	e7b7      	b.n	800431e <setvbuf+0xea>
 80043ae:	bf00      	nop
 80043b0:	20000018 	.word	0x20000018
 80043b4:	08005010 	.word	0x08005010
 80043b8:	08005030 	.word	0x08005030
 80043bc:	08004ff0 	.word	0x08004ff0

080043c0 <__sread>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	460c      	mov	r4, r1
 80043c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c8:	f000 fd38 	bl	8004e3c <_read_r>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	bfab      	itete	ge
 80043d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043d2:	89a3      	ldrhlt	r3, [r4, #12]
 80043d4:	181b      	addge	r3, r3, r0
 80043d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043da:	bfac      	ite	ge
 80043dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80043de:	81a3      	strhlt	r3, [r4, #12]
 80043e0:	bd10      	pop	{r4, pc}

080043e2 <__swrite>:
 80043e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e6:	461f      	mov	r7, r3
 80043e8:	898b      	ldrh	r3, [r1, #12]
 80043ea:	05db      	lsls	r3, r3, #23
 80043ec:	4605      	mov	r5, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	4616      	mov	r6, r2
 80043f2:	d505      	bpl.n	8004400 <__swrite+0x1e>
 80043f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f8:	2302      	movs	r3, #2
 80043fa:	2200      	movs	r2, #0
 80043fc:	f000 f9a6 	bl	800474c <_lseek_r>
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	4632      	mov	r2, r6
 800440e:	463b      	mov	r3, r7
 8004410:	4628      	mov	r0, r5
 8004412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004416:	f000 b909 	b.w	800462c <_write_r>

0800441a <__sseek>:
 800441a:	b510      	push	{r4, lr}
 800441c:	460c      	mov	r4, r1
 800441e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004422:	f000 f993 	bl	800474c <_lseek_r>
 8004426:	1c43      	adds	r3, r0, #1
 8004428:	89a3      	ldrh	r3, [r4, #12]
 800442a:	bf15      	itete	ne
 800442c:	6560      	strne	r0, [r4, #84]	; 0x54
 800442e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004436:	81a3      	strheq	r3, [r4, #12]
 8004438:	bf18      	it	ne
 800443a:	81a3      	strhne	r3, [r4, #12]
 800443c:	bd10      	pop	{r4, pc}

0800443e <__sclose>:
 800443e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004442:	f000 b973 	b.w	800472c <_close_r>

08004446 <strncmp>:
 8004446:	b510      	push	{r4, lr}
 8004448:	b16a      	cbz	r2, 8004466 <strncmp+0x20>
 800444a:	3901      	subs	r1, #1
 800444c:	1884      	adds	r4, r0, r2
 800444e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004452:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004456:	4293      	cmp	r3, r2
 8004458:	d103      	bne.n	8004462 <strncmp+0x1c>
 800445a:	42a0      	cmp	r0, r4
 800445c:	d001      	beq.n	8004462 <strncmp+0x1c>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f5      	bne.n	800444e <strncmp+0x8>
 8004462:	1a98      	subs	r0, r3, r2
 8004464:	bd10      	pop	{r4, pc}
 8004466:	4610      	mov	r0, r2
 8004468:	e7fc      	b.n	8004464 <strncmp+0x1e>
	...

0800446c <_strtol_l.isra.0>:
 800446c:	2b01      	cmp	r3, #1
 800446e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004472:	d001      	beq.n	8004478 <_strtol_l.isra.0+0xc>
 8004474:	2b24      	cmp	r3, #36	; 0x24
 8004476:	d906      	bls.n	8004486 <_strtol_l.isra.0+0x1a>
 8004478:	f7ff fb94 	bl	8003ba4 <__errno>
 800447c:	2316      	movs	r3, #22
 800447e:	6003      	str	r3, [r0, #0]
 8004480:	2000      	movs	r0, #0
 8004482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004486:	4f3a      	ldr	r7, [pc, #232]	; (8004570 <_strtol_l.isra.0+0x104>)
 8004488:	468e      	mov	lr, r1
 800448a:	4676      	mov	r6, lr
 800448c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004490:	5de5      	ldrb	r5, [r4, r7]
 8004492:	f015 0508 	ands.w	r5, r5, #8
 8004496:	d1f8      	bne.n	800448a <_strtol_l.isra.0+0x1e>
 8004498:	2c2d      	cmp	r4, #45	; 0x2d
 800449a:	d134      	bne.n	8004506 <_strtol_l.isra.0+0x9a>
 800449c:	f89e 4000 	ldrb.w	r4, [lr]
 80044a0:	f04f 0801 	mov.w	r8, #1
 80044a4:	f106 0e02 	add.w	lr, r6, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d05c      	beq.n	8004566 <_strtol_l.isra.0+0xfa>
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d10c      	bne.n	80044ca <_strtol_l.isra.0+0x5e>
 80044b0:	2c30      	cmp	r4, #48	; 0x30
 80044b2:	d10a      	bne.n	80044ca <_strtol_l.isra.0+0x5e>
 80044b4:	f89e 4000 	ldrb.w	r4, [lr]
 80044b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80044bc:	2c58      	cmp	r4, #88	; 0x58
 80044be:	d14d      	bne.n	800455c <_strtol_l.isra.0+0xf0>
 80044c0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80044c4:	2310      	movs	r3, #16
 80044c6:	f10e 0e02 	add.w	lr, lr, #2
 80044ca:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80044ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80044d2:	2600      	movs	r6, #0
 80044d4:	fbbc f9f3 	udiv	r9, ip, r3
 80044d8:	4635      	mov	r5, r6
 80044da:	fb03 ca19 	mls	sl, r3, r9, ip
 80044de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80044e2:	2f09      	cmp	r7, #9
 80044e4:	d818      	bhi.n	8004518 <_strtol_l.isra.0+0xac>
 80044e6:	463c      	mov	r4, r7
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	dd24      	ble.n	8004536 <_strtol_l.isra.0+0xca>
 80044ec:	2e00      	cmp	r6, #0
 80044ee:	db1f      	blt.n	8004530 <_strtol_l.isra.0+0xc4>
 80044f0:	45a9      	cmp	r9, r5
 80044f2:	d31d      	bcc.n	8004530 <_strtol_l.isra.0+0xc4>
 80044f4:	d101      	bne.n	80044fa <_strtol_l.isra.0+0x8e>
 80044f6:	45a2      	cmp	sl, r4
 80044f8:	db1a      	blt.n	8004530 <_strtol_l.isra.0+0xc4>
 80044fa:	fb05 4503 	mla	r5, r5, r3, r4
 80044fe:	2601      	movs	r6, #1
 8004500:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004504:	e7eb      	b.n	80044de <_strtol_l.isra.0+0x72>
 8004506:	2c2b      	cmp	r4, #43	; 0x2b
 8004508:	bf08      	it	eq
 800450a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800450e:	46a8      	mov	r8, r5
 8004510:	bf08      	it	eq
 8004512:	f106 0e02 	addeq.w	lr, r6, #2
 8004516:	e7c7      	b.n	80044a8 <_strtol_l.isra.0+0x3c>
 8004518:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800451c:	2f19      	cmp	r7, #25
 800451e:	d801      	bhi.n	8004524 <_strtol_l.isra.0+0xb8>
 8004520:	3c37      	subs	r4, #55	; 0x37
 8004522:	e7e1      	b.n	80044e8 <_strtol_l.isra.0+0x7c>
 8004524:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004528:	2f19      	cmp	r7, #25
 800452a:	d804      	bhi.n	8004536 <_strtol_l.isra.0+0xca>
 800452c:	3c57      	subs	r4, #87	; 0x57
 800452e:	e7db      	b.n	80044e8 <_strtol_l.isra.0+0x7c>
 8004530:	f04f 36ff 	mov.w	r6, #4294967295
 8004534:	e7e4      	b.n	8004500 <_strtol_l.isra.0+0x94>
 8004536:	2e00      	cmp	r6, #0
 8004538:	da05      	bge.n	8004546 <_strtol_l.isra.0+0xda>
 800453a:	2322      	movs	r3, #34	; 0x22
 800453c:	6003      	str	r3, [r0, #0]
 800453e:	4665      	mov	r5, ip
 8004540:	b942      	cbnz	r2, 8004554 <_strtol_l.isra.0+0xe8>
 8004542:	4628      	mov	r0, r5
 8004544:	e79d      	b.n	8004482 <_strtol_l.isra.0+0x16>
 8004546:	f1b8 0f00 	cmp.w	r8, #0
 800454a:	d000      	beq.n	800454e <_strtol_l.isra.0+0xe2>
 800454c:	426d      	negs	r5, r5
 800454e:	2a00      	cmp	r2, #0
 8004550:	d0f7      	beq.n	8004542 <_strtol_l.isra.0+0xd6>
 8004552:	b10e      	cbz	r6, 8004558 <_strtol_l.isra.0+0xec>
 8004554:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	e7f2      	b.n	8004542 <_strtol_l.isra.0+0xd6>
 800455c:	2430      	movs	r4, #48	; 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1b3      	bne.n	80044ca <_strtol_l.isra.0+0x5e>
 8004562:	2308      	movs	r3, #8
 8004564:	e7b1      	b.n	80044ca <_strtol_l.isra.0+0x5e>
 8004566:	2c30      	cmp	r4, #48	; 0x30
 8004568:	d0a4      	beq.n	80044b4 <_strtol_l.isra.0+0x48>
 800456a:	230a      	movs	r3, #10
 800456c:	e7ad      	b.n	80044ca <_strtol_l.isra.0+0x5e>
 800456e:	bf00      	nop
 8004570:	08005055 	.word	0x08005055

08004574 <strtol>:
 8004574:	4613      	mov	r3, r2
 8004576:	460a      	mov	r2, r1
 8004578:	4601      	mov	r1, r0
 800457a:	4802      	ldr	r0, [pc, #8]	; (8004584 <strtol+0x10>)
 800457c:	6800      	ldr	r0, [r0, #0]
 800457e:	f7ff bf75 	b.w	800446c <_strtol_l.isra.0>
 8004582:	bf00      	nop
 8004584:	20000018 	.word	0x20000018

08004588 <__swbuf_r>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	460e      	mov	r6, r1
 800458c:	4614      	mov	r4, r2
 800458e:	4605      	mov	r5, r0
 8004590:	b118      	cbz	r0, 800459a <__swbuf_r+0x12>
 8004592:	6983      	ldr	r3, [r0, #24]
 8004594:	b90b      	cbnz	r3, 800459a <__swbuf_r+0x12>
 8004596:	f7ff fc37 	bl	8003e08 <__sinit>
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <__swbuf_r+0x98>)
 800459c:	429c      	cmp	r4, r3
 800459e:	d12b      	bne.n	80045f8 <__swbuf_r+0x70>
 80045a0:	686c      	ldr	r4, [r5, #4]
 80045a2:	69a3      	ldr	r3, [r4, #24]
 80045a4:	60a3      	str	r3, [r4, #8]
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	071a      	lsls	r2, r3, #28
 80045aa:	d52f      	bpl.n	800460c <__swbuf_r+0x84>
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	b36b      	cbz	r3, 800460c <__swbuf_r+0x84>
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	1ac0      	subs	r0, r0, r3
 80045b6:	6963      	ldr	r3, [r4, #20]
 80045b8:	b2f6      	uxtb	r6, r6
 80045ba:	4283      	cmp	r3, r0
 80045bc:	4637      	mov	r7, r6
 80045be:	dc04      	bgt.n	80045ca <__swbuf_r+0x42>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	f7ff fb7a 	bl	8003cbc <_fflush_r>
 80045c8:	bb30      	cbnz	r0, 8004618 <__swbuf_r+0x90>
 80045ca:	68a3      	ldr	r3, [r4, #8]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	6022      	str	r2, [r4, #0]
 80045d6:	701e      	strb	r6, [r3, #0]
 80045d8:	6963      	ldr	r3, [r4, #20]
 80045da:	3001      	adds	r0, #1
 80045dc:	4283      	cmp	r3, r0
 80045de:	d004      	beq.n	80045ea <__swbuf_r+0x62>
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	07db      	lsls	r3, r3, #31
 80045e4:	d506      	bpl.n	80045f4 <__swbuf_r+0x6c>
 80045e6:	2e0a      	cmp	r6, #10
 80045e8:	d104      	bne.n	80045f4 <__swbuf_r+0x6c>
 80045ea:	4621      	mov	r1, r4
 80045ec:	4628      	mov	r0, r5
 80045ee:	f7ff fb65 	bl	8003cbc <_fflush_r>
 80045f2:	b988      	cbnz	r0, 8004618 <__swbuf_r+0x90>
 80045f4:	4638      	mov	r0, r7
 80045f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <__swbuf_r+0x9c>)
 80045fa:	429c      	cmp	r4, r3
 80045fc:	d101      	bne.n	8004602 <__swbuf_r+0x7a>
 80045fe:	68ac      	ldr	r4, [r5, #8]
 8004600:	e7cf      	b.n	80045a2 <__swbuf_r+0x1a>
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <__swbuf_r+0xa0>)
 8004604:	429c      	cmp	r4, r3
 8004606:	bf08      	it	eq
 8004608:	68ec      	ldreq	r4, [r5, #12]
 800460a:	e7ca      	b.n	80045a2 <__swbuf_r+0x1a>
 800460c:	4621      	mov	r1, r4
 800460e:	4628      	mov	r0, r5
 8004610:	f000 f81e 	bl	8004650 <__swsetup_r>
 8004614:	2800      	cmp	r0, #0
 8004616:	d0cb      	beq.n	80045b0 <__swbuf_r+0x28>
 8004618:	f04f 37ff 	mov.w	r7, #4294967295
 800461c:	e7ea      	b.n	80045f4 <__swbuf_r+0x6c>
 800461e:	bf00      	nop
 8004620:	08005010 	.word	0x08005010
 8004624:	08005030 	.word	0x08005030
 8004628:	08004ff0 	.word	0x08004ff0

0800462c <_write_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4d07      	ldr	r5, [pc, #28]	; (800464c <_write_r+0x20>)
 8004630:	4604      	mov	r4, r0
 8004632:	4608      	mov	r0, r1
 8004634:	4611      	mov	r1, r2
 8004636:	2200      	movs	r2, #0
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f7fb ff04 	bl	8000448 <_write>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_write_r+0x1e>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_write_r+0x1e>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	200001a0 	.word	0x200001a0

08004650 <__swsetup_r>:
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <__swsetup_r+0xcc>)
 8004652:	b570      	push	{r4, r5, r6, lr}
 8004654:	681d      	ldr	r5, [r3, #0]
 8004656:	4606      	mov	r6, r0
 8004658:	460c      	mov	r4, r1
 800465a:	b125      	cbz	r5, 8004666 <__swsetup_r+0x16>
 800465c:	69ab      	ldr	r3, [r5, #24]
 800465e:	b913      	cbnz	r3, 8004666 <__swsetup_r+0x16>
 8004660:	4628      	mov	r0, r5
 8004662:	f7ff fbd1 	bl	8003e08 <__sinit>
 8004666:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <__swsetup_r+0xd0>)
 8004668:	429c      	cmp	r4, r3
 800466a:	d10f      	bne.n	800468c <__swsetup_r+0x3c>
 800466c:	686c      	ldr	r4, [r5, #4]
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004674:	0719      	lsls	r1, r3, #28
 8004676:	d42c      	bmi.n	80046d2 <__swsetup_r+0x82>
 8004678:	06dd      	lsls	r5, r3, #27
 800467a:	d411      	bmi.n	80046a0 <__swsetup_r+0x50>
 800467c:	2309      	movs	r3, #9
 800467e:	6033      	str	r3, [r6, #0]
 8004680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	f04f 30ff 	mov.w	r0, #4294967295
 800468a:	e03e      	b.n	800470a <__swsetup_r+0xba>
 800468c:	4b25      	ldr	r3, [pc, #148]	; (8004724 <__swsetup_r+0xd4>)
 800468e:	429c      	cmp	r4, r3
 8004690:	d101      	bne.n	8004696 <__swsetup_r+0x46>
 8004692:	68ac      	ldr	r4, [r5, #8]
 8004694:	e7eb      	b.n	800466e <__swsetup_r+0x1e>
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <__swsetup_r+0xd8>)
 8004698:	429c      	cmp	r4, r3
 800469a:	bf08      	it	eq
 800469c:	68ec      	ldreq	r4, [r5, #12]
 800469e:	e7e6      	b.n	800466e <__swsetup_r+0x1e>
 80046a0:	0758      	lsls	r0, r3, #29
 80046a2:	d512      	bpl.n	80046ca <__swsetup_r+0x7a>
 80046a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046a6:	b141      	cbz	r1, 80046ba <__swsetup_r+0x6a>
 80046a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046ac:	4299      	cmp	r1, r3
 80046ae:	d002      	beq.n	80046b6 <__swsetup_r+0x66>
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7ff fc77 	bl	8003fa4 <_free_r>
 80046b6:	2300      	movs	r3, #0
 80046b8:	6363      	str	r3, [r4, #52]	; 0x34
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	2300      	movs	r3, #0
 80046c4:	6063      	str	r3, [r4, #4]
 80046c6:	6923      	ldr	r3, [r4, #16]
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f043 0308 	orr.w	r3, r3, #8
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	b94b      	cbnz	r3, 80046ea <__swsetup_r+0x9a>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e0:	d003      	beq.n	80046ea <__swsetup_r+0x9a>
 80046e2:	4621      	mov	r1, r4
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f867 	bl	80047b8 <__smakebuf_r>
 80046ea:	89a0      	ldrh	r0, [r4, #12]
 80046ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046f0:	f010 0301 	ands.w	r3, r0, #1
 80046f4:	d00a      	beq.n	800470c <__swsetup_r+0xbc>
 80046f6:	2300      	movs	r3, #0
 80046f8:	60a3      	str	r3, [r4, #8]
 80046fa:	6963      	ldr	r3, [r4, #20]
 80046fc:	425b      	negs	r3, r3
 80046fe:	61a3      	str	r3, [r4, #24]
 8004700:	6923      	ldr	r3, [r4, #16]
 8004702:	b943      	cbnz	r3, 8004716 <__swsetup_r+0xc6>
 8004704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004708:	d1ba      	bne.n	8004680 <__swsetup_r+0x30>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	0781      	lsls	r1, r0, #30
 800470e:	bf58      	it	pl
 8004710:	6963      	ldrpl	r3, [r4, #20]
 8004712:	60a3      	str	r3, [r4, #8]
 8004714:	e7f4      	b.n	8004700 <__swsetup_r+0xb0>
 8004716:	2000      	movs	r0, #0
 8004718:	e7f7      	b.n	800470a <__swsetup_r+0xba>
 800471a:	bf00      	nop
 800471c:	20000018 	.word	0x20000018
 8004720:	08005010 	.word	0x08005010
 8004724:	08005030 	.word	0x08005030
 8004728:	08004ff0 	.word	0x08004ff0

0800472c <_close_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4d06      	ldr	r5, [pc, #24]	; (8004748 <_close_r+0x1c>)
 8004730:	2300      	movs	r3, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc f8dd 	bl	80008f6 <_close>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_close_r+0x1a>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_close_r+0x1a>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	200001a0 	.word	0x200001a0

0800474c <_lseek_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d07      	ldr	r5, [pc, #28]	; (800476c <_lseek_r+0x20>)
 8004750:	4604      	mov	r4, r0
 8004752:	4608      	mov	r0, r1
 8004754:	4611      	mov	r1, r2
 8004756:	2200      	movs	r2, #0
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fc f8f2 	bl	8000944 <_lseek>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_lseek_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_lseek_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	200001a0 	.word	0x200001a0

08004770 <__swhatbuf_r>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	460e      	mov	r6, r1
 8004774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004778:	2900      	cmp	r1, #0
 800477a:	b096      	sub	sp, #88	; 0x58
 800477c:	4614      	mov	r4, r2
 800477e:	461d      	mov	r5, r3
 8004780:	da07      	bge.n	8004792 <__swhatbuf_r+0x22>
 8004782:	2300      	movs	r3, #0
 8004784:	602b      	str	r3, [r5, #0]
 8004786:	89b3      	ldrh	r3, [r6, #12]
 8004788:	061a      	lsls	r2, r3, #24
 800478a:	d410      	bmi.n	80047ae <__swhatbuf_r+0x3e>
 800478c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004790:	e00e      	b.n	80047b0 <__swhatbuf_r+0x40>
 8004792:	466a      	mov	r2, sp
 8004794:	f000 fb64 	bl	8004e60 <_fstat_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	dbf2      	blt.n	8004782 <__swhatbuf_r+0x12>
 800479c:	9a01      	ldr	r2, [sp, #4]
 800479e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047a6:	425a      	negs	r2, r3
 80047a8:	415a      	adcs	r2, r3
 80047aa:	602a      	str	r2, [r5, #0]
 80047ac:	e7ee      	b.n	800478c <__swhatbuf_r+0x1c>
 80047ae:	2340      	movs	r3, #64	; 0x40
 80047b0:	2000      	movs	r0, #0
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	b016      	add	sp, #88	; 0x58
 80047b6:	bd70      	pop	{r4, r5, r6, pc}

080047b8 <__smakebuf_r>:
 80047b8:	898b      	ldrh	r3, [r1, #12]
 80047ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047bc:	079d      	lsls	r5, r3, #30
 80047be:	4606      	mov	r6, r0
 80047c0:	460c      	mov	r4, r1
 80047c2:	d507      	bpl.n	80047d4 <__smakebuf_r+0x1c>
 80047c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	6123      	str	r3, [r4, #16]
 80047cc:	2301      	movs	r3, #1
 80047ce:	6163      	str	r3, [r4, #20]
 80047d0:	b002      	add	sp, #8
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	ab01      	add	r3, sp, #4
 80047d6:	466a      	mov	r2, sp
 80047d8:	f7ff ffca 	bl	8004770 <__swhatbuf_r>
 80047dc:	9900      	ldr	r1, [sp, #0]
 80047de:	4605      	mov	r5, r0
 80047e0:	4630      	mov	r0, r6
 80047e2:	f7ff fc2f 	bl	8004044 <_malloc_r>
 80047e6:	b948      	cbnz	r0, 80047fc <__smakebuf_r+0x44>
 80047e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ec:	059a      	lsls	r2, r3, #22
 80047ee:	d4ef      	bmi.n	80047d0 <__smakebuf_r+0x18>
 80047f0:	f023 0303 	bic.w	r3, r3, #3
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	e7e3      	b.n	80047c4 <__smakebuf_r+0xc>
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <__smakebuf_r+0x7c>)
 80047fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	6020      	str	r0, [r4, #0]
 8004804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	9b00      	ldr	r3, [sp, #0]
 800480c:	6163      	str	r3, [r4, #20]
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	6120      	str	r0, [r4, #16]
 8004812:	b15b      	cbz	r3, 800482c <__smakebuf_r+0x74>
 8004814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004818:	4630      	mov	r0, r6
 800481a:	f000 fb33 	bl	8004e84 <_isatty_r>
 800481e:	b128      	cbz	r0, 800482c <__smakebuf_r+0x74>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	89a0      	ldrh	r0, [r4, #12]
 800482e:	4305      	orrs	r5, r0
 8004830:	81a5      	strh	r5, [r4, #12]
 8004832:	e7cd      	b.n	80047d0 <__smakebuf_r+0x18>
 8004834:	08003da1 	.word	0x08003da1

08004838 <malloc>:
 8004838:	4b02      	ldr	r3, [pc, #8]	; (8004844 <malloc+0xc>)
 800483a:	4601      	mov	r1, r0
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	f7ff bc01 	b.w	8004044 <_malloc_r>
 8004842:	bf00      	nop
 8004844:	20000018 	.word	0x20000018

08004848 <__malloc_lock>:
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <__malloc_lock+0x8>)
 800484a:	f7ff bba0 	b.w	8003f8e <__retarget_lock_acquire_recursive>
 800484e:	bf00      	nop
 8004850:	20000198 	.word	0x20000198

08004854 <__malloc_unlock>:
 8004854:	4801      	ldr	r0, [pc, #4]	; (800485c <__malloc_unlock+0x8>)
 8004856:	f7ff bb9b 	b.w	8003f90 <__retarget_lock_release_recursive>
 800485a:	bf00      	nop
 800485c:	20000198 	.word	0x20000198

08004860 <__sfputc_r>:
 8004860:	6893      	ldr	r3, [r2, #8]
 8004862:	3b01      	subs	r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	b410      	push	{r4}
 8004868:	6093      	str	r3, [r2, #8]
 800486a:	da08      	bge.n	800487e <__sfputc_r+0x1e>
 800486c:	6994      	ldr	r4, [r2, #24]
 800486e:	42a3      	cmp	r3, r4
 8004870:	db01      	blt.n	8004876 <__sfputc_r+0x16>
 8004872:	290a      	cmp	r1, #10
 8004874:	d103      	bne.n	800487e <__sfputc_r+0x1e>
 8004876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800487a:	f7ff be85 	b.w	8004588 <__swbuf_r>
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	1c58      	adds	r0, r3, #1
 8004882:	6010      	str	r0, [r2, #0]
 8004884:	7019      	strb	r1, [r3, #0]
 8004886:	4608      	mov	r0, r1
 8004888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800488c:	4770      	bx	lr

0800488e <__sfputs_r>:
 800488e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004890:	4606      	mov	r6, r0
 8004892:	460f      	mov	r7, r1
 8004894:	4614      	mov	r4, r2
 8004896:	18d5      	adds	r5, r2, r3
 8004898:	42ac      	cmp	r4, r5
 800489a:	d101      	bne.n	80048a0 <__sfputs_r+0x12>
 800489c:	2000      	movs	r0, #0
 800489e:	e007      	b.n	80048b0 <__sfputs_r+0x22>
 80048a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a4:	463a      	mov	r2, r7
 80048a6:	4630      	mov	r0, r6
 80048a8:	f7ff ffda 	bl	8004860 <__sfputc_r>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d1f3      	bne.n	8004898 <__sfputs_r+0xa>
 80048b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048b4 <_vfiprintf_r>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	460d      	mov	r5, r1
 80048ba:	b09d      	sub	sp, #116	; 0x74
 80048bc:	4614      	mov	r4, r2
 80048be:	4698      	mov	r8, r3
 80048c0:	4606      	mov	r6, r0
 80048c2:	b118      	cbz	r0, 80048cc <_vfiprintf_r+0x18>
 80048c4:	6983      	ldr	r3, [r0, #24]
 80048c6:	b90b      	cbnz	r3, 80048cc <_vfiprintf_r+0x18>
 80048c8:	f7ff fa9e 	bl	8003e08 <__sinit>
 80048cc:	4b89      	ldr	r3, [pc, #548]	; (8004af4 <_vfiprintf_r+0x240>)
 80048ce:	429d      	cmp	r5, r3
 80048d0:	d11b      	bne.n	800490a <_vfiprintf_r+0x56>
 80048d2:	6875      	ldr	r5, [r6, #4]
 80048d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048d6:	07d9      	lsls	r1, r3, #31
 80048d8:	d405      	bmi.n	80048e6 <_vfiprintf_r+0x32>
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	059a      	lsls	r2, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_vfiprintf_r+0x32>
 80048e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048e2:	f7ff fb54 	bl	8003f8e <__retarget_lock_acquire_recursive>
 80048e6:	89ab      	ldrh	r3, [r5, #12]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	d501      	bpl.n	80048f0 <_vfiprintf_r+0x3c>
 80048ec:	692b      	ldr	r3, [r5, #16]
 80048ee:	b9eb      	cbnz	r3, 800492c <_vfiprintf_r+0x78>
 80048f0:	4629      	mov	r1, r5
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff feac 	bl	8004650 <__swsetup_r>
 80048f8:	b1c0      	cbz	r0, 800492c <_vfiprintf_r+0x78>
 80048fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048fc:	07dc      	lsls	r4, r3, #31
 80048fe:	d50e      	bpl.n	800491e <_vfiprintf_r+0x6a>
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	b01d      	add	sp, #116	; 0x74
 8004906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490a:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <_vfiprintf_r+0x244>)
 800490c:	429d      	cmp	r5, r3
 800490e:	d101      	bne.n	8004914 <_vfiprintf_r+0x60>
 8004910:	68b5      	ldr	r5, [r6, #8]
 8004912:	e7df      	b.n	80048d4 <_vfiprintf_r+0x20>
 8004914:	4b79      	ldr	r3, [pc, #484]	; (8004afc <_vfiprintf_r+0x248>)
 8004916:	429d      	cmp	r5, r3
 8004918:	bf08      	it	eq
 800491a:	68f5      	ldreq	r5, [r6, #12]
 800491c:	e7da      	b.n	80048d4 <_vfiprintf_r+0x20>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	0598      	lsls	r0, r3, #22
 8004922:	d4ed      	bmi.n	8004900 <_vfiprintf_r+0x4c>
 8004924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004926:	f7ff fb33 	bl	8003f90 <__retarget_lock_release_recursive>
 800492a:	e7e9      	b.n	8004900 <_vfiprintf_r+0x4c>
 800492c:	2300      	movs	r3, #0
 800492e:	9309      	str	r3, [sp, #36]	; 0x24
 8004930:	2320      	movs	r3, #32
 8004932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004936:	f8cd 800c 	str.w	r8, [sp, #12]
 800493a:	2330      	movs	r3, #48	; 0x30
 800493c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b00 <_vfiprintf_r+0x24c>
 8004940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004944:	f04f 0901 	mov.w	r9, #1
 8004948:	4623      	mov	r3, r4
 800494a:	469a      	mov	sl, r3
 800494c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004950:	b10a      	cbz	r2, 8004956 <_vfiprintf_r+0xa2>
 8004952:	2a25      	cmp	r2, #37	; 0x25
 8004954:	d1f9      	bne.n	800494a <_vfiprintf_r+0x96>
 8004956:	ebba 0b04 	subs.w	fp, sl, r4
 800495a:	d00b      	beq.n	8004974 <_vfiprintf_r+0xc0>
 800495c:	465b      	mov	r3, fp
 800495e:	4622      	mov	r2, r4
 8004960:	4629      	mov	r1, r5
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff ff93 	bl	800488e <__sfputs_r>
 8004968:	3001      	adds	r0, #1
 800496a:	f000 80aa 	beq.w	8004ac2 <_vfiprintf_r+0x20e>
 800496e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004970:	445a      	add	r2, fp
 8004972:	9209      	str	r2, [sp, #36]	; 0x24
 8004974:	f89a 3000 	ldrb.w	r3, [sl]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80a2 	beq.w	8004ac2 <_vfiprintf_r+0x20e>
 800497e:	2300      	movs	r3, #0
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004988:	f10a 0a01 	add.w	sl, sl, #1
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004994:	931a      	str	r3, [sp, #104]	; 0x68
 8004996:	4654      	mov	r4, sl
 8004998:	2205      	movs	r2, #5
 800499a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800499e:	4858      	ldr	r0, [pc, #352]	; (8004b00 <_vfiprintf_r+0x24c>)
 80049a0:	f7fb fc1e 	bl	80001e0 <memchr>
 80049a4:	9a04      	ldr	r2, [sp, #16]
 80049a6:	b9d8      	cbnz	r0, 80049e0 <_vfiprintf_r+0x12c>
 80049a8:	06d1      	lsls	r1, r2, #27
 80049aa:	bf44      	itt	mi
 80049ac:	2320      	movmi	r3, #32
 80049ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b2:	0713      	lsls	r3, r2, #28
 80049b4:	bf44      	itt	mi
 80049b6:	232b      	movmi	r3, #43	; 0x2b
 80049b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049bc:	f89a 3000 	ldrb.w	r3, [sl]
 80049c0:	2b2a      	cmp	r3, #42	; 0x2a
 80049c2:	d015      	beq.n	80049f0 <_vfiprintf_r+0x13c>
 80049c4:	9a07      	ldr	r2, [sp, #28]
 80049c6:	4654      	mov	r4, sl
 80049c8:	2000      	movs	r0, #0
 80049ca:	f04f 0c0a 	mov.w	ip, #10
 80049ce:	4621      	mov	r1, r4
 80049d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d4:	3b30      	subs	r3, #48	; 0x30
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	d94e      	bls.n	8004a78 <_vfiprintf_r+0x1c4>
 80049da:	b1b0      	cbz	r0, 8004a0a <_vfiprintf_r+0x156>
 80049dc:	9207      	str	r2, [sp, #28]
 80049de:	e014      	b.n	8004a0a <_vfiprintf_r+0x156>
 80049e0:	eba0 0308 	sub.w	r3, r0, r8
 80049e4:	fa09 f303 	lsl.w	r3, r9, r3
 80049e8:	4313      	orrs	r3, r2
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	46a2      	mov	sl, r4
 80049ee:	e7d2      	b.n	8004996 <_vfiprintf_r+0xe2>
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	1d19      	adds	r1, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	9103      	str	r1, [sp, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bfbb      	ittet	lt
 80049fc:	425b      	neglt	r3, r3
 80049fe:	f042 0202 	orrlt.w	r2, r2, #2
 8004a02:	9307      	strge	r3, [sp, #28]
 8004a04:	9307      	strlt	r3, [sp, #28]
 8004a06:	bfb8      	it	lt
 8004a08:	9204      	strlt	r2, [sp, #16]
 8004a0a:	7823      	ldrb	r3, [r4, #0]
 8004a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a0e:	d10c      	bne.n	8004a2a <_vfiprintf_r+0x176>
 8004a10:	7863      	ldrb	r3, [r4, #1]
 8004a12:	2b2a      	cmp	r3, #42	; 0x2a
 8004a14:	d135      	bne.n	8004a82 <_vfiprintf_r+0x1ce>
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	1d1a      	adds	r2, r3, #4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	9203      	str	r2, [sp, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfb8      	it	lt
 8004a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a26:	3402      	adds	r4, #2
 8004a28:	9305      	str	r3, [sp, #20]
 8004a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b10 <_vfiprintf_r+0x25c>
 8004a2e:	7821      	ldrb	r1, [r4, #0]
 8004a30:	2203      	movs	r2, #3
 8004a32:	4650      	mov	r0, sl
 8004a34:	f7fb fbd4 	bl	80001e0 <memchr>
 8004a38:	b140      	cbz	r0, 8004a4c <_vfiprintf_r+0x198>
 8004a3a:	2340      	movs	r3, #64	; 0x40
 8004a3c:	eba0 000a 	sub.w	r0, r0, sl
 8004a40:	fa03 f000 	lsl.w	r0, r3, r0
 8004a44:	9b04      	ldr	r3, [sp, #16]
 8004a46:	4303      	orrs	r3, r0
 8004a48:	3401      	adds	r4, #1
 8004a4a:	9304      	str	r3, [sp, #16]
 8004a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a50:	482c      	ldr	r0, [pc, #176]	; (8004b04 <_vfiprintf_r+0x250>)
 8004a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a56:	2206      	movs	r2, #6
 8004a58:	f7fb fbc2 	bl	80001e0 <memchr>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d03f      	beq.n	8004ae0 <_vfiprintf_r+0x22c>
 8004a60:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <_vfiprintf_r+0x254>)
 8004a62:	bb1b      	cbnz	r3, 8004aac <_vfiprintf_r+0x1f8>
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	3307      	adds	r3, #7
 8004a68:	f023 0307 	bic.w	r3, r3, #7
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	9303      	str	r3, [sp, #12]
 8004a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a72:	443b      	add	r3, r7
 8004a74:	9309      	str	r3, [sp, #36]	; 0x24
 8004a76:	e767      	b.n	8004948 <_vfiprintf_r+0x94>
 8004a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	2001      	movs	r0, #1
 8004a80:	e7a5      	b.n	80049ce <_vfiprintf_r+0x11a>
 8004a82:	2300      	movs	r3, #0
 8004a84:	3401      	adds	r4, #1
 8004a86:	9305      	str	r3, [sp, #20]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f04f 0c0a 	mov.w	ip, #10
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a94:	3a30      	subs	r2, #48	; 0x30
 8004a96:	2a09      	cmp	r2, #9
 8004a98:	d903      	bls.n	8004aa2 <_vfiprintf_r+0x1ee>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0c5      	beq.n	8004a2a <_vfiprintf_r+0x176>
 8004a9e:	9105      	str	r1, [sp, #20]
 8004aa0:	e7c3      	b.n	8004a2a <_vfiprintf_r+0x176>
 8004aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e7f0      	b.n	8004a8e <_vfiprintf_r+0x1da>
 8004aac:	ab03      	add	r3, sp, #12
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <_vfiprintf_r+0x258>)
 8004ab4:	a904      	add	r1, sp, #16
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f3af 8000 	nop.w
 8004abc:	4607      	mov	r7, r0
 8004abe:	1c78      	adds	r0, r7, #1
 8004ac0:	d1d6      	bne.n	8004a70 <_vfiprintf_r+0x1bc>
 8004ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ac4:	07d9      	lsls	r1, r3, #31
 8004ac6:	d405      	bmi.n	8004ad4 <_vfiprintf_r+0x220>
 8004ac8:	89ab      	ldrh	r3, [r5, #12]
 8004aca:	059a      	lsls	r2, r3, #22
 8004acc:	d402      	bmi.n	8004ad4 <_vfiprintf_r+0x220>
 8004ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ad0:	f7ff fa5e 	bl	8003f90 <__retarget_lock_release_recursive>
 8004ad4:	89ab      	ldrh	r3, [r5, #12]
 8004ad6:	065b      	lsls	r3, r3, #25
 8004ad8:	f53f af12 	bmi.w	8004900 <_vfiprintf_r+0x4c>
 8004adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ade:	e711      	b.n	8004904 <_vfiprintf_r+0x50>
 8004ae0:	ab03      	add	r3, sp, #12
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <_vfiprintf_r+0x258>)
 8004ae8:	a904      	add	r1, sp, #16
 8004aea:	4630      	mov	r0, r6
 8004aec:	f000 f880 	bl	8004bf0 <_printf_i>
 8004af0:	e7e4      	b.n	8004abc <_vfiprintf_r+0x208>
 8004af2:	bf00      	nop
 8004af4:	08005010 	.word	0x08005010
 8004af8:	08005030 	.word	0x08005030
 8004afc:	08004ff0 	.word	0x08004ff0
 8004b00:	08005155 	.word	0x08005155
 8004b04:	0800515f 	.word	0x0800515f
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	0800488f 	.word	0x0800488f
 8004b10:	0800515b 	.word	0x0800515b

08004b14 <_printf_common>:
 8004b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	4616      	mov	r6, r2
 8004b1a:	4699      	mov	r9, r3
 8004b1c:	688a      	ldr	r2, [r1, #8]
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bfb8      	it	lt
 8004b28:	4613      	movlt	r3, r2
 8004b2a:	6033      	str	r3, [r6, #0]
 8004b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b30:	4607      	mov	r7, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	b10a      	cbz	r2, 8004b3a <_printf_common+0x26>
 8004b36:	3301      	adds	r3, #1
 8004b38:	6033      	str	r3, [r6, #0]
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	0699      	lsls	r1, r3, #26
 8004b3e:	bf42      	ittt	mi
 8004b40:	6833      	ldrmi	r3, [r6, #0]
 8004b42:	3302      	addmi	r3, #2
 8004b44:	6033      	strmi	r3, [r6, #0]
 8004b46:	6825      	ldr	r5, [r4, #0]
 8004b48:	f015 0506 	ands.w	r5, r5, #6
 8004b4c:	d106      	bne.n	8004b5c <_printf_common+0x48>
 8004b4e:	f104 0a19 	add.w	sl, r4, #25
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	6832      	ldr	r2, [r6, #0]
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dc26      	bgt.n	8004baa <_printf_common+0x96>
 8004b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b60:	1e13      	subs	r3, r2, #0
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	bf18      	it	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	0692      	lsls	r2, r2, #26
 8004b6a:	d42b      	bmi.n	8004bc4 <_printf_common+0xb0>
 8004b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b70:	4649      	mov	r1, r9
 8004b72:	4638      	mov	r0, r7
 8004b74:	47c0      	blx	r8
 8004b76:	3001      	adds	r0, #1
 8004b78:	d01e      	beq.n	8004bb8 <_printf_common+0xa4>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	68e5      	ldr	r5, [r4, #12]
 8004b7e:	6832      	ldr	r2, [r6, #0]
 8004b80:	f003 0306 	and.w	r3, r3, #6
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	bf08      	it	eq
 8004b88:	1aad      	subeq	r5, r5, r2
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	6922      	ldr	r2, [r4, #16]
 8004b8e:	bf0c      	ite	eq
 8004b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b94:	2500      	movne	r5, #0
 8004b96:	4293      	cmp	r3, r2
 8004b98:	bfc4      	itt	gt
 8004b9a:	1a9b      	subgt	r3, r3, r2
 8004b9c:	18ed      	addgt	r5, r5, r3
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	341a      	adds	r4, #26
 8004ba2:	42b5      	cmp	r5, r6
 8004ba4:	d11a      	bne.n	8004bdc <_printf_common+0xc8>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e008      	b.n	8004bbc <_printf_common+0xa8>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4652      	mov	r2, sl
 8004bae:	4649      	mov	r1, r9
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	47c0      	blx	r8
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d103      	bne.n	8004bc0 <_printf_common+0xac>
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	e7c6      	b.n	8004b52 <_printf_common+0x3e>
 8004bc4:	18e1      	adds	r1, r4, r3
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	2030      	movs	r0, #48	; 0x30
 8004bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bce:	4422      	add	r2, r4
 8004bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd8:	3302      	adds	r3, #2
 8004bda:	e7c7      	b.n	8004b6c <_printf_common+0x58>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4622      	mov	r2, r4
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d0e6      	beq.n	8004bb8 <_printf_common+0xa4>
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7d9      	b.n	8004ba2 <_printf_common+0x8e>
	...

08004bf0 <_printf_i>:
 8004bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	4691      	mov	r9, r2
 8004bf8:	7e27      	ldrb	r7, [r4, #24]
 8004bfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bfc:	2f78      	cmp	r7, #120	; 0x78
 8004bfe:	4680      	mov	r8, r0
 8004c00:	469a      	mov	sl, r3
 8004c02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c06:	d807      	bhi.n	8004c18 <_printf_i+0x28>
 8004c08:	2f62      	cmp	r7, #98	; 0x62
 8004c0a:	d80a      	bhi.n	8004c22 <_printf_i+0x32>
 8004c0c:	2f00      	cmp	r7, #0
 8004c0e:	f000 80d8 	beq.w	8004dc2 <_printf_i+0x1d2>
 8004c12:	2f58      	cmp	r7, #88	; 0x58
 8004c14:	f000 80a3 	beq.w	8004d5e <_printf_i+0x16e>
 8004c18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c20:	e03a      	b.n	8004c98 <_printf_i+0xa8>
 8004c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c26:	2b15      	cmp	r3, #21
 8004c28:	d8f6      	bhi.n	8004c18 <_printf_i+0x28>
 8004c2a:	a001      	add	r0, pc, #4	; (adr r0, 8004c30 <_printf_i+0x40>)
 8004c2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004c19 	.word	0x08004c19
 8004c3c:	08004c19 	.word	0x08004c19
 8004c40:	08004c19 	.word	0x08004c19
 8004c44:	08004c19 	.word	0x08004c19
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c19 	.word	0x08004c19
 8004c50:	08004c19 	.word	0x08004c19
 8004c54:	08004c19 	.word	0x08004c19
 8004c58:	08004c19 	.word	0x08004c19
 8004c5c:	08004da9 	.word	0x08004da9
 8004c60:	08004ccd 	.word	0x08004ccd
 8004c64:	08004d8b 	.word	0x08004d8b
 8004c68:	08004c19 	.word	0x08004c19
 8004c6c:	08004c19 	.word	0x08004c19
 8004c70:	08004dcb 	.word	0x08004dcb
 8004c74:	08004c19 	.word	0x08004c19
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004c19 	.word	0x08004c19
 8004c80:	08004c19 	.word	0x08004c19
 8004c84:	08004d93 	.word	0x08004d93
 8004c88:	680b      	ldr	r3, [r1, #0]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	600a      	str	r2, [r1, #0]
 8004c90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0a3      	b.n	8004de4 <_printf_i+0x1f4>
 8004c9c:	6825      	ldr	r5, [r4, #0]
 8004c9e:	6808      	ldr	r0, [r1, #0]
 8004ca0:	062e      	lsls	r6, r5, #24
 8004ca2:	f100 0304 	add.w	r3, r0, #4
 8004ca6:	d50a      	bpl.n	8004cbe <_printf_i+0xce>
 8004ca8:	6805      	ldr	r5, [r0, #0]
 8004caa:	600b      	str	r3, [r1, #0]
 8004cac:	2d00      	cmp	r5, #0
 8004cae:	da03      	bge.n	8004cb8 <_printf_i+0xc8>
 8004cb0:	232d      	movs	r3, #45	; 0x2d
 8004cb2:	426d      	negs	r5, r5
 8004cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb8:	485e      	ldr	r0, [pc, #376]	; (8004e34 <_printf_i+0x244>)
 8004cba:	230a      	movs	r3, #10
 8004cbc:	e019      	b.n	8004cf2 <_printf_i+0x102>
 8004cbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cc2:	6805      	ldr	r5, [r0, #0]
 8004cc4:	600b      	str	r3, [r1, #0]
 8004cc6:	bf18      	it	ne
 8004cc8:	b22d      	sxthne	r5, r5
 8004cca:	e7ef      	b.n	8004cac <_printf_i+0xbc>
 8004ccc:	680b      	ldr	r3, [r1, #0]
 8004cce:	6825      	ldr	r5, [r4, #0]
 8004cd0:	1d18      	adds	r0, r3, #4
 8004cd2:	6008      	str	r0, [r1, #0]
 8004cd4:	0628      	lsls	r0, r5, #24
 8004cd6:	d501      	bpl.n	8004cdc <_printf_i+0xec>
 8004cd8:	681d      	ldr	r5, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <_printf_i+0xf2>
 8004cdc:	0669      	lsls	r1, r5, #25
 8004cde:	d5fb      	bpl.n	8004cd8 <_printf_i+0xe8>
 8004ce0:	881d      	ldrh	r5, [r3, #0]
 8004ce2:	4854      	ldr	r0, [pc, #336]	; (8004e34 <_printf_i+0x244>)
 8004ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2308      	moveq	r3, #8
 8004cea:	230a      	movne	r3, #10
 8004cec:	2100      	movs	r1, #0
 8004cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf2:	6866      	ldr	r6, [r4, #4]
 8004cf4:	60a6      	str	r6, [r4, #8]
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	bfa2      	ittt	ge
 8004cfa:	6821      	ldrge	r1, [r4, #0]
 8004cfc:	f021 0104 	bicge.w	r1, r1, #4
 8004d00:	6021      	strge	r1, [r4, #0]
 8004d02:	b90d      	cbnz	r5, 8004d08 <_printf_i+0x118>
 8004d04:	2e00      	cmp	r6, #0
 8004d06:	d04d      	beq.n	8004da4 <_printf_i+0x1b4>
 8004d08:	4616      	mov	r6, r2
 8004d0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d0e:	fb03 5711 	mls	r7, r3, r1, r5
 8004d12:	5dc7      	ldrb	r7, [r0, r7]
 8004d14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d18:	462f      	mov	r7, r5
 8004d1a:	42bb      	cmp	r3, r7
 8004d1c:	460d      	mov	r5, r1
 8004d1e:	d9f4      	bls.n	8004d0a <_printf_i+0x11a>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d10b      	bne.n	8004d3c <_printf_i+0x14c>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07df      	lsls	r7, r3, #31
 8004d28:	d508      	bpl.n	8004d3c <_printf_i+0x14c>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	6861      	ldr	r1, [r4, #4]
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	bfde      	ittt	le
 8004d32:	2330      	movle	r3, #48	; 0x30
 8004d34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d3c:	1b92      	subs	r2, r2, r6
 8004d3e:	6122      	str	r2, [r4, #16]
 8004d40:	f8cd a000 	str.w	sl, [sp]
 8004d44:	464b      	mov	r3, r9
 8004d46:	aa03      	add	r2, sp, #12
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f7ff fee2 	bl	8004b14 <_printf_common>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d14c      	bne.n	8004dee <_printf_i+0x1fe>
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	b004      	add	sp, #16
 8004d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5e:	4835      	ldr	r0, [pc, #212]	; (8004e34 <_printf_i+0x244>)
 8004d60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	680e      	ldr	r6, [r1, #0]
 8004d68:	061f      	lsls	r7, r3, #24
 8004d6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d6e:	600e      	str	r6, [r1, #0]
 8004d70:	d514      	bpl.n	8004d9c <_printf_i+0x1ac>
 8004d72:	07d9      	lsls	r1, r3, #31
 8004d74:	bf44      	itt	mi
 8004d76:	f043 0320 	orrmi.w	r3, r3, #32
 8004d7a:	6023      	strmi	r3, [r4, #0]
 8004d7c:	b91d      	cbnz	r5, 8004d86 <_printf_i+0x196>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f023 0320 	bic.w	r3, r3, #32
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	2310      	movs	r3, #16
 8004d88:	e7b0      	b.n	8004cec <_printf_i+0xfc>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f043 0320 	orr.w	r3, r3, #32
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	2378      	movs	r3, #120	; 0x78
 8004d94:	4828      	ldr	r0, [pc, #160]	; (8004e38 <_printf_i+0x248>)
 8004d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9a:	e7e3      	b.n	8004d64 <_printf_i+0x174>
 8004d9c:	065e      	lsls	r6, r3, #25
 8004d9e:	bf48      	it	mi
 8004da0:	b2ad      	uxthmi	r5, r5
 8004da2:	e7e6      	b.n	8004d72 <_printf_i+0x182>
 8004da4:	4616      	mov	r6, r2
 8004da6:	e7bb      	b.n	8004d20 <_printf_i+0x130>
 8004da8:	680b      	ldr	r3, [r1, #0]
 8004daa:	6826      	ldr	r6, [r4, #0]
 8004dac:	6960      	ldr	r0, [r4, #20]
 8004dae:	1d1d      	adds	r5, r3, #4
 8004db0:	600d      	str	r5, [r1, #0]
 8004db2:	0635      	lsls	r5, r6, #24
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	d501      	bpl.n	8004dbc <_printf_i+0x1cc>
 8004db8:	6018      	str	r0, [r3, #0]
 8004dba:	e002      	b.n	8004dc2 <_printf_i+0x1d2>
 8004dbc:	0671      	lsls	r1, r6, #25
 8004dbe:	d5fb      	bpl.n	8004db8 <_printf_i+0x1c8>
 8004dc0:	8018      	strh	r0, [r3, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	4616      	mov	r6, r2
 8004dc8:	e7ba      	b.n	8004d40 <_printf_i+0x150>
 8004dca:	680b      	ldr	r3, [r1, #0]
 8004dcc:	1d1a      	adds	r2, r3, #4
 8004dce:	600a      	str	r2, [r1, #0]
 8004dd0:	681e      	ldr	r6, [r3, #0]
 8004dd2:	6862      	ldr	r2, [r4, #4]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f7fb fa02 	bl	80001e0 <memchr>
 8004ddc:	b108      	cbz	r0, 8004de2 <_printf_i+0x1f2>
 8004dde:	1b80      	subs	r0, r0, r6
 8004de0:	6060      	str	r0, [r4, #4]
 8004de2:	6863      	ldr	r3, [r4, #4]
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	2300      	movs	r3, #0
 8004de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dec:	e7a8      	b.n	8004d40 <_printf_i+0x150>
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	4632      	mov	r2, r6
 8004df2:	4649      	mov	r1, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	47d0      	blx	sl
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d0ab      	beq.n	8004d54 <_printf_i+0x164>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	079b      	lsls	r3, r3, #30
 8004e00:	d413      	bmi.n	8004e2a <_printf_i+0x23a>
 8004e02:	68e0      	ldr	r0, [r4, #12]
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	4298      	cmp	r0, r3
 8004e08:	bfb8      	it	lt
 8004e0a:	4618      	movlt	r0, r3
 8004e0c:	e7a4      	b.n	8004d58 <_printf_i+0x168>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4632      	mov	r2, r6
 8004e12:	4649      	mov	r1, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	47d0      	blx	sl
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d09b      	beq.n	8004d54 <_printf_i+0x164>
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	9903      	ldr	r1, [sp, #12]
 8004e22:	1a5b      	subs	r3, r3, r1
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dcf2      	bgt.n	8004e0e <_printf_i+0x21e>
 8004e28:	e7eb      	b.n	8004e02 <_printf_i+0x212>
 8004e2a:	2500      	movs	r5, #0
 8004e2c:	f104 0619 	add.w	r6, r4, #25
 8004e30:	e7f5      	b.n	8004e1e <_printf_i+0x22e>
 8004e32:	bf00      	nop
 8004e34:	08005166 	.word	0x08005166
 8004e38:	08005177 	.word	0x08005177

08004e3c <_read_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4d07      	ldr	r5, [pc, #28]	; (8004e5c <_read_r+0x20>)
 8004e40:	4604      	mov	r4, r0
 8004e42:	4608      	mov	r0, r1
 8004e44:	4611      	mov	r1, r2
 8004e46:	2200      	movs	r2, #0
 8004e48:	602a      	str	r2, [r5, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f7fb fd36 	bl	80008bc <_read>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_read_r+0x1e>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_read_r+0x1e>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	200001a0 	.word	0x200001a0

08004e60 <_fstat_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4d07      	ldr	r5, [pc, #28]	; (8004e80 <_fstat_r+0x20>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	f7fb fd4e 	bl	800090e <_fstat>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	d102      	bne.n	8004e7c <_fstat_r+0x1c>
 8004e76:	682b      	ldr	r3, [r5, #0]
 8004e78:	b103      	cbz	r3, 8004e7c <_fstat_r+0x1c>
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	bd38      	pop	{r3, r4, r5, pc}
 8004e7e:	bf00      	nop
 8004e80:	200001a0 	.word	0x200001a0

08004e84 <_isatty_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d06      	ldr	r5, [pc, #24]	; (8004ea0 <_isatty_r+0x1c>)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f7fb fd4d 	bl	800092e <_isatty>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_isatty_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_isatty_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	200001a0 	.word	0x200001a0

08004ea4 <_init>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr

08004eb0 <_fini>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	bf00      	nop
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr
