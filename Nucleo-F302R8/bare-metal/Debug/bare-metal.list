
bare-metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e0  080051e0  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  080051e0  080051e0  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051e0  080051e0  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080051e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001c8  080053b0  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080053b0  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd37  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002112  00000000  00000000  0002df2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00030048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  00030898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c709  00000000  00000000  00031020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcde  00000000  00000000  0004d729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e873  00000000  00000000  00059407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7c7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002924  00000000  00000000  000f7cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f1c 	.word	0x08004f1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08004f1c 	.word	0x08004f1c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LED>:
  int paramValues[COMMAND_PARAMS];
  void (*cmdFunction)(char*, int*); // the command support function...
};


void LED(char* paramStr, int* paramValues) {
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	if (strncmp(paramStr, "ON", 2) == 0) {
 80002aa:	2202      	movs	r2, #2
 80002ac:	4939      	ldr	r1, [pc, #228]	; (8000394 <LED+0xf4>)
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f004 f905 	bl	80044be <strncmp>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d111      	bne.n	80002de <LED+0x3e>
		printf("\r\nLED ON");
 80002ba:	4837      	ldr	r0, [pc, #220]	; (8000398 <LED+0xf8>)
 80002bc:	f003 ff58 	bl	8004170 <iprintf>
		paramValues[0] = 1;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
		paramValues[1] = 0;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3308      	adds	r3, #8
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
      led2 = ON;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <LED+0xfc>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
   }
	else {
		printf("\r\nUNKNOWN LED COMMAND");
	}
}
 80002dc:	e055      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "OFF", 3) == 0) {
 80002de:	2203      	movs	r2, #3
 80002e0:	492f      	ldr	r1, [pc, #188]	; (80003a0 <LED+0x100>)
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f004 f8eb 	bl	80044be <strncmp>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d111      	bne.n	8000312 <LED+0x72>
		printf("\r\nLED OFF");
 80002ee:	482d      	ldr	r0, [pc, #180]	; (80003a4 <LED+0x104>)
 80002f0:	f003 ff3e 	bl	8004170 <iprintf>
		paramValues[0] = 0;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
		paramValues[1] = 1;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	3304      	adds	r3, #4
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]
		paramValues[2] = 0;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	3308      	adds	r3, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
      led2 = OFF;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <LED+0xfc>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
}
 8000310:	e03b      	b.n	800038a <LED+0xea>
	else if (strncmp(paramStr, "BLINK", 5) == 0) {
 8000312:	2205      	movs	r2, #5
 8000314:	4924      	ldr	r1, [pc, #144]	; (80003a8 <LED+0x108>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f004 f8d1 	bl	80044be <strncmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d130      	bne.n	8000384 <LED+0xe4>
		if (strncmp(&paramStr[6], "0", 3) != 0) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3306      	adds	r3, #6
 8000326:	4921      	ldr	r1, [pc, #132]	; (80003ac <LED+0x10c>)
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff51 	bl	80001d0 <strcmp>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01c      	beq.n	800036e <LED+0xce>
		   paramValues[2] = atoi(&paramStr[6]);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	1d9a      	adds	r2, r3, #6
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f103 0408 	add.w	r4, r3, #8
 800033e:	4610      	mov	r0, r2
 8000340:	f003 fc68 	bl	8003c14 <atoi>
 8000344:	4603      	mov	r3, r0
 8000346:	6023      	str	r3, [r4, #0]
		   msValue = atoi(&paramStr[6]);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3306      	adds	r3, #6
 800034c:	4618      	mov	r0, r3
 800034e:	f003 fc61 	bl	8003c14 <atoi>
 8000352:	4603      	mov	r3, r0
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <LED+0x110>)
 8000356:	6013      	str	r3, [r2, #0]
           paramValues[0] = 0;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
           paramValues[1] = 0;
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	3304      	adds	r3, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
           led2 = BLINKING;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <LED+0xfc>)
 8000368:	2202      	movs	r2, #2
 800036a:	701a      	strb	r2, [r3, #0]
 800036c:	e003      	b.n	8000376 <LED+0xd6>
			paramValues[2] = 0;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3308      	adds	r3, #8
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
		printf("\r\nLED BLINK %d", msValue);
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <LED+0x110>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LED+0x114>)
 800037e:	f003 fef7 	bl	8004170 <iprintf>
}
 8000382:	e002      	b.n	800038a <LED+0xea>
		printf("\r\nUNKNOWN LED COMMAND");
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LED+0x118>)
 8000386:	f003 fef3 	bl	8004170 <iprintf>
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bd90      	pop	{r4, r7, pc}
 8000392:	bf00      	nop
 8000394:	08004f34 	.word	0x08004f34
 8000398:	08004f38 	.word	0x08004f38
 800039c:	200001f0 	.word	0x200001f0
 80003a0:	08004f44 	.word	0x08004f44
 80003a4:	08004f48 	.word	0x08004f48
 80003a8:	08004f54 	.word	0x08004f54
 80003ac:	08004f5c 	.word	0x08004f5c
 80003b0:	200001e4 	.word	0x200001e4
 80003b4:	08004f60 	.word	0x08004f60
 80003b8:	08004f70 	.word	0x08004f70

080003bc <dummy>:

void dummy(char* paramStr, int* paramValues){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
	printf("DUMMY\r\n");
 80003c6:	4803      	ldr	r0, [pc, #12]	; (80003d4 <dummy+0x18>)
 80003c8:	f003 ff58 	bl	800427c <puts>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	08004f88 	.word	0x08004f88

080003d8 <promt>:
struct command mcuCmds [NUMBERS_OF_MCU_COMMANDS] = {
  {"LED", 3, 6, {"ON", "OFF", "BLINK"}, {0, 1, 500 }, &LED},
  {"DUMMY", 2, 6, {"TRUE", "FALSE"}, {0, 0}, &dummy}
};

void promt() {
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
   printf("\r\nNUCLEO> ");
 80003dc:	4805      	ldr	r0, [pc, #20]	; (80003f4 <promt+0x1c>)
 80003de:	f003 fec7 	bl	8004170 <iprintf>
   fflush(stdout);
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <promt+0x20>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f003 fcdf 	bl	8003dac <fflush>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	08004f90 	.word	0x08004f90
 80003f8:	20000164 	.word	0x20000164

080003fc <executeCmd>:

uint8_t executeCmd(char *termInput, int cmdLength) {
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
   int i = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
   size_t numberOfCommands = sizeof(mcuCmds) / sizeof(mcuCmds[0]);
 800040a:	2302      	movs	r3, #2
 800040c:	60bb      	str	r3, [r7, #8]

   // Check if the entered command is part of the command-list for this application.
   for (; i < numberOfCommands; i++) {
 800040e:	e03d      	b.n	800048c <executeCmd+0x90>
 	  if (strncmp(mcuCmds[i].name, termInput, strlen(mcuCmds[i].name)) == 0) {
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	22ac      	movs	r2, #172	; 0xac
 8000414:	fb02 f303 	mul.w	r3, r2, r3
 8000418:	4a27      	ldr	r2, [pc, #156]	; (80004b8 <executeCmd+0xbc>)
 800041a:	189c      	adds	r4, r3, r2
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	22ac      	movs	r2, #172	; 0xac
 8000420:	fb02 f303 	mul.w	r3, r2, r3
 8000424:	4a24      	ldr	r2, [pc, #144]	; (80004b8 <executeCmd+0xbc>)
 8000426:	4413      	add	r3, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fedb 	bl	80001e4 <strlen>
 800042e:	4603      	mov	r3, r0
 8000430:	461a      	mov	r2, r3
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	4620      	mov	r0, r4
 8000436:	f004 f842 	bl	80044be <strncmp>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d122      	bne.n	8000486 <executeCmd+0x8a>
 		 mcuCmds[i].cmdFunction((char*)&termInput[strlen(mcuCmds[i].name)+1], (int*) &mcuCmds[i].paramValues);
 8000440:	4a1d      	ldr	r2, [pc, #116]	; (80004b8 <executeCmd+0xbc>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	21ac      	movs	r1, #172	; 0xac
 8000446:	fb01 f303 	mul.w	r3, r1, r3
 800044a:	4413      	add	r3, r2
 800044c:	33a8      	adds	r3, #168	; 0xa8
 800044e:	681c      	ldr	r4, [r3, #0]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	22ac      	movs	r2, #172	; 0xac
 8000454:	fb02 f303 	mul.w	r3, r2, r3
 8000458:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <executeCmd+0xbc>)
 800045a:	4413      	add	r3, r2
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fec1 	bl	80001e4 <strlen>
 8000462:	4603      	mov	r3, r0
 8000464:	3301      	adds	r3, #1
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	441a      	add	r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	21ac      	movs	r1, #172	; 0xac
 800046e:	fb01 f303 	mul.w	r3, r1, r3
 8000472:	3380      	adds	r3, #128	; 0x80
 8000474:	4910      	ldr	r1, [pc, #64]	; (80004b8 <executeCmd+0xbc>)
 8000476:	440b      	add	r3, r1
 8000478:	4619      	mov	r1, r3
 800047a:	4610      	mov	r0, r2
 800047c:	47a0      	blx	r4
 		 promt();
 800047e:	f7ff ffab 	bl	80003d8 <promt>
     	 return 0;
 8000482:	2300      	movs	r3, #0
 8000484:	e013      	b.n	80004ae <executeCmd+0xb2>
   for (; i < numberOfCommands; i++) {
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3301      	adds	r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	429a      	cmp	r2, r3
 8000492:	d8bd      	bhi.n	8000410 <executeCmd+0x14>
      }
   }

   // Execute the command if part of the command-list.
   if (i >= numberOfCommands) {
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	68ba      	ldr	r2, [r7, #8]
 8000498:	429a      	cmp	r2, r3
 800049a:	d807      	bhi.n	80004ac <executeCmd+0xb0>
      printf("\r\nThe command: %s, is not recognized", termInput);
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	4807      	ldr	r0, [pc, #28]	; (80004bc <executeCmd+0xc0>)
 80004a0:	f003 fe66 	bl	8004170 <iprintf>
      promt();
 80004a4:	f7ff ff98 	bl	80003d8 <promt>
      return -1;
 80004a8:	23ff      	movs	r3, #255	; 0xff
 80004aa:	e000      	b.n	80004ae <executeCmd+0xb2>
   }
   else {
	  return -2;
 80004ac:	23fe      	movs	r3, #254	; 0xfe
   }
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000000 	.word	0x20000000
 80004bc:	08004f9c 	.word	0x08004f9c

080004c0 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <_write+0x28>)
 80004d8:	f002 f9c4 	bl	8002864 <HAL_UART_Transmit>
	return len;
 80004dc:	687b      	ldr	r3, [r7, #4]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000200 	.word	0x20000200

080004ec <HAL_UART_RxCpltCallback>:
uint8_t UART1_rxBuffer = 0;
uint8_t cmdComplete;
char termInputBuffer[80];
int bytesReceived = 0;
uint8_t led2 = OFF;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	//uint8_t UARTnewLine = 10;
	if (UART1_rxBuffer == 13) {
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <HAL_UART_RxCpltCallback+0x90>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b0d      	cmp	r3, #13
 80004fa:	d126      	bne.n	800054a <HAL_UART_RxCpltCallback+0x5e>
		//HAL_UART_Transmit(&huart1, &UARTnewLine, 1, 100);
		if (bytesReceived > 0) {
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dd1a      	ble.n	800053a <HAL_UART_RxCpltCallback+0x4e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	481e      	ldr	r0, [pc, #120]	; (8000584 <HAL_UART_RxCpltCallback+0x98>)
 800050c:	f000 fe5a 	bl	80011c4 <HAL_GPIO_WritePin>

			executeCmd(&termInputBuffer[0], bytesReceived);
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	481c      	ldr	r0, [pc, #112]	; (8000588 <HAL_UART_RxCpltCallback+0x9c>)
 8000518:	f7ff ff70 	bl	80003fc <executeCmd>
			bytesReceived = 0;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
			memset(termInputBuffer, 0, 80);
 8000522:	2250      	movs	r2, #80	; 0x50
 8000524:	2100      	movs	r1, #0
 8000526:	4818      	ldr	r0, [pc, #96]	; (8000588 <HAL_UART_RxCpltCallback+0x9c>)
 8000528:	f003 fd6f 	bl	800400a <memset>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4814      	ldr	r0, [pc, #80]	; (8000584 <HAL_UART_RxCpltCallback+0x98>)
 8000534:	f000 fe46 	bl	80011c4 <HAL_GPIO_WritePin>
 8000538:	e001      	b.n	800053e <HAL_UART_RxCpltCallback+0x52>
		} else {
			promt();
 800053a:	f7ff ff4d 	bl	80003d8 <promt>
		}
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	490e      	ldr	r1, [pc, #56]	; (800057c <HAL_UART_RxCpltCallback+0x90>)
 8000542:	4812      	ldr	r0, [pc, #72]	; (800058c <HAL_UART_RxCpltCallback+0xa0>)
 8000544:	f002 fa18 	bl	8002978 <HAL_UART_Receive_IT>
		return;
 8000548:	e015      	b.n	8000576 <HAL_UART_RxCpltCallback+0x8a>
	}
	HAL_UART_Transmit(&huart1, &UART1_rxBuffer, 1, 100);
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	2201      	movs	r2, #1
 800054e:	490b      	ldr	r1, [pc, #44]	; (800057c <HAL_UART_RxCpltCallback+0x90>)
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <HAL_UART_RxCpltCallback+0xa0>)
 8000552:	f002 f987 	bl	8002864 <HAL_UART_Transmit>
	termInputBuffer[bytesReceived] = UART1_rxBuffer;
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_UART_RxCpltCallback+0x90>)
 800055c:	7811      	ldrb	r1, [r2, #0]
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <HAL_UART_RxCpltCallback+0x9c>)
 8000560:	54d1      	strb	r1, [r2, r3]
	bytesReceived++;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a05      	ldr	r2, [pc, #20]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 800056a:	6013      	str	r3, [r2, #0]
	// re-trigger the interrupt...
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	4903      	ldr	r1, [pc, #12]	; (800057c <HAL_UART_RxCpltCallback+0x90>)
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <HAL_UART_RxCpltCallback+0xa0>)
 8000572:	f002 fa01 	bl	8002978 <HAL_UART_Receive_IT>
}
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200001e8 	.word	0x200001e8
 8000580:	200001ec 	.word	0x200001ec
 8000584:	48000400 	.word	0x48000400
 8000588:	20000288 	.word	0x20000288
 800058c:	20000200 	.word	0x20000200

08000590 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <main+0xb0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6898      	ldr	r0, [r3, #8]
 800059c:	2300      	movs	r3, #0
 800059e:	2202      	movs	r2, #2
 80005a0:	2100      	movs	r1, #0
 80005a2:	f003 fe83 	bl	80042ac <setvbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f000 fa89 	bl	8000abc <HAL_Init>
	/* USER CODE BEGIN Init */
	//uint8_t* msg = "hello world\n";
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f859 	bl	8000660 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 f8d7 	bl	8000760 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80005b2:	f000 f8a5 	bl	8000700 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	4922      	ldr	r1, [pc, #136]	; (8000644 <main+0xb4>)
 80005ba:	4823      	ldr	r0, [pc, #140]	; (8000648 <main+0xb8>)
 80005bc:	f002 f9dc 	bl	8002978 <HAL_UART_Receive_IT>
	uint8_t ledState = OFF;
 80005c0:	2300      	movs	r3, #0
 80005c2:	71fb      	strb	r3, [r7, #7]
	printf("\r\n\r\nBare-Metal SW on STM32-NUCLEO-F302R8 development board");
 80005c4:	4821      	ldr	r0, [pc, #132]	; (800064c <main+0xbc>)
 80005c6:	f003 fdd3 	bl	8004170 <iprintf>
	printf("\r\nBuild No. %d", BUILD);
 80005ca:	2128      	movs	r1, #40	; 0x28
 80005cc:	4820      	ldr	r0, [pc, #128]	; (8000650 <main+0xc0>)
 80005ce:	f003 fdcf 	bl	8004170 <iprintf>
	promt();
 80005d2:	f7ff ff01 	bl	80003d8 <promt>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (led2 != ledState) {
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <main+0xc4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d013      	beq.n	8000608 <main+0x78>
			ledState = led2;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <main+0xc4>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	71fb      	strb	r3, [r7, #7]
			if (led2 == ON) {
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <main+0xc4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d106      	bne.n	80005fc <main+0x6c>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4818      	ldr	r0, [pc, #96]	; (8000658 <main+0xc8>)
 80005f6:	f000 fde5 	bl	80011c4 <HAL_GPIO_WritePin>
 80005fa:	e005      	b.n	8000608 <main+0x78>
			} else {
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	4815      	ldr	r0, [pc, #84]	; (8000658 <main+0xc8>)
 8000604:	f000 fdde 	bl	80011c4 <HAL_GPIO_WritePin>
			}
		}

		if (led2 == BLINKING) {
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <main+0xc4>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d1e2      	bne.n	80005d6 <main+0x46>
		   if (msValue > 0) {
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <main+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	dd0a      	ble.n	800062e <main+0x9e>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <main+0xc8>)
 800061e:	f000 fde9 	bl	80011f4 <HAL_GPIO_TogglePin>
			  HAL_Delay(msValue);
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <main+0xcc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 faae 	bl	8000b88 <HAL_Delay>
 800062c:	e7d3      	b.n	80005d6 <main+0x46>
		   } else {
			   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	4808      	ldr	r0, [pc, #32]	; (8000658 <main+0xc8>)
 8000636:	f000 fdc5 	bl	80011c4 <HAL_GPIO_WritePin>
			   ledState = OFF;
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]
		if (led2 != ledState) {
 800063e:	e7ca      	b.n	80005d6 <main+0x46>
 8000640:	20000164 	.word	0x20000164
 8000644:	200001e8 	.word	0x200001e8
 8000648:	20000200 	.word	0x20000200
 800064c:	08004fc4 	.word	0x08004fc4
 8000650:	08005000 	.word	0x08005000
 8000654:	200001f0 	.word	0x200001f0
 8000658:	48000400 	.word	0x48000400
 800065c:	200001e4 	.word	0x200001e4

08000660 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	; 0x70
 8000664:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800066a:	2228      	movs	r2, #40	; 0x28
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fccb 	bl	800400a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000674:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000684:	463b      	mov	r3, r7
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fcbd 	bl	800400a <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fdbf 	bl	8001228 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x54>
		Error_Handler();
 80006b0:	f000 f896 	bl	80007e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fcb2 	bl	8002038 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x7e>
		Error_Handler();
 80006da:	f000 f881 	bl	80007e0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006de:	2301      	movs	r3, #1
 80006e0:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006e6:	463b      	mov	r3, r7
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fedb 	bl	80024a4 <HAL_RCCEx_PeriphCLKConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x98>
		Error_Handler();
 80006f4:	f000 f874 	bl	80007e0 <Error_Handler>
	}
}
 80006f8:	bf00      	nop
 80006fa:	3770      	adds	r7, #112	; 0x70
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART1_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART1_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART1_UART_Init+0x58>)
 800070c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000710:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART1_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART1_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART1_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART1_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART1_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART1_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART1_UART_Init+0x58>)
 8000744:	f002 f840 	bl	80027c8 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800074e:	f000 f847 	bl	80007e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000200 	.word	0x20000200
 800075c:	40013800 	.word	0x40013800

08000760 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <MX_GPIO_Init+0x78>)
 800077c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x78>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0x7c>)
 80007ae:	f000 fd09 	bl	80011c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0x7c>)
 80007cc:	f000 fb88 	bl	8000ee0 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000400 	.word	0x48000400

080007e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <HAL_UART_MspInit+0x8c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12f      	bne.n	80008b6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_UART_MspInit+0x90>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a1a      	ldr	r2, [pc, #104]	; (80008c4 <HAL_UART_MspInit+0x90>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_UART_MspInit+0x90>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_UART_MspInit+0x90>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <HAL_UART_MspInit+0x90>)
 8000874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_UART_MspInit+0x90>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000886:	2330      	movs	r3, #48	; 0x30
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000896:	2307      	movs	r3, #7
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <HAL_UART_MspInit+0x94>)
 80008a2:	f000 fb1d 	bl	8000ee0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2025      	movs	r0, #37	; 0x25
 80008ac:	f000 fa6b 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008b0:	2025      	movs	r0, #37	; 0x25
 80008b2:	f000 fa84 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40013800 	.word	0x40013800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000800 	.word	0x48000800

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 f916 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <USART1_IRQHandler+0x10>)
 8000926:	f002 f86b 	bl	8002a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000200 	.word	0x20000200

08000934 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e00a      	b.n	800095c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000946:	f3af 8000 	nop.w
 800094a:	4601      	mov	r1, r0
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf0      	blt.n	8000946 <_read+0x12>
	}

return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_close>:
	}
	return len;
}

int _close(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	return -1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000996:	605a      	str	r2, [r3, #4]
	return 0;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_isatty>:

int _isatty(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f003 f908 	bl	8003c1c <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20004000 	.word	0x20004000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	200001f4 	.word	0x200001f4
 8000a40:	200002f0 	.word	0x200002f0

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f7ff ffea 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	; (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f003 fa91 	bl	8003fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fd79 	bl	8000590 <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000aac:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 8000ab0:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000ab4:	200002f0 	.word	0x200002f0

08000ab8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_IRQHandler>
	...

08000abc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x28>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x28>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f94f 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fe88 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f967 	bl	8000dda <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f92f 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000158 	.word	0x20000158
 8000b40:	20000160 	.word	0x20000160
 8000b44:	2000015c 	.word	0x2000015c

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000160 	.word	0x20000160
 8000b6c:	200002dc 	.word	0x200002dc

08000b70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200002dc 	.word	0x200002dc

08000b88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff ffee 	bl	8000b70 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffde 	bl	8000b70 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000160 	.word	0x20000160

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d008      	beq.n	8000e16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2204      	movs	r2, #4
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e020      	b.n	8000e58 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 020e 	bic.w	r2, r2, #14
 8000e24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fa01 f202 	lsl.w	r2, r1, r2
 8000e44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d005      	beq.n	8000e86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e027      	b.n	8000ed6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 020e 	bic.w	r2, r2, #14
 8000e94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eae:	2101      	movs	r1, #1
 8000eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	4798      	blx	r3
    } 
  }
  return status;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e14e      	b.n	800118e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8140 	beq.w	8001188 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d005      	beq.n	8000f20 <HAL_GPIO_Init+0x40>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 0201 	and.w	r2, r3, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d017      	beq.n	8000fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d123      	bne.n	8001012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0203 	and.w	r2, r3, #3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 809a 	beq.w	8001188 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b55      	ldr	r3, [pc, #340]	; (80011ac <HAL_GPIO_Init+0x2cc>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a54      	ldr	r2, [pc, #336]	; (80011ac <HAL_GPIO_Init+0x2cc>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b52      	ldr	r3, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x2cc>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106c:	4a50      	ldr	r2, [pc, #320]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001096:	d013      	beq.n	80010c0 <HAL_GPIO_Init+0x1e0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <HAL_GPIO_Init+0x2d4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d00d      	beq.n	80010bc <HAL_GPIO_Init+0x1dc>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a45      	ldr	r2, [pc, #276]	; (80011b8 <HAL_GPIO_Init+0x2d8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d007      	beq.n	80010b8 <HAL_GPIO_Init+0x1d8>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a44      	ldr	r2, [pc, #272]	; (80011bc <HAL_GPIO_Init+0x2dc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d101      	bne.n	80010b4 <HAL_GPIO_Init+0x1d4>
 80010b0:	2303      	movs	r3, #3
 80010b2:	e006      	b.n	80010c2 <HAL_GPIO_Init+0x1e2>
 80010b4:	2305      	movs	r3, #5
 80010b6:	e004      	b.n	80010c2 <HAL_GPIO_Init+0x1e2>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e002      	b.n	80010c2 <HAL_GPIO_Init+0x1e2>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <HAL_GPIO_Init+0x1e2>
 80010c0:	2300      	movs	r3, #0
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	f002 0203 	and.w	r2, r2, #3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4093      	lsls	r3, r2
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d2:	4937      	ldr	r1, [pc, #220]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e0:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001104:	4a2e      	ldr	r2, [pc, #184]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_GPIO_Init+0x2e0>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	f47f aea9 	bne.w	8000ef0 <HAL_GPIO_Init+0x10>
  }
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	40010400 	.word	0x40010400

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4013      	ands	r3, r2
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43d9      	mvns	r1, r3
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	400b      	ands	r3, r1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800122e:	af00      	add	r7, sp, #0
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	f000 bef4 	b.w	800202a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 816a 	beq.w	8001526 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001252:	4bb3      	ldr	r3, [pc, #716]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800125e:	4bb0      	ldr	r3, [pc, #704]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b08      	cmp	r3, #8
 8001268:	d159      	bne.n	800131e <HAL_RCC_OscConfig+0xf6>
 800126a:	4bad      	ldr	r3, [pc, #692]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001276:	d152      	bne.n	800131e <HAL_RCC_OscConfig+0xf6>
 8001278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800128c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <HAL_RCC_OscConfig+0x82>
 80012a4:	4b9e      	ldr	r3, [pc, #632]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	e015      	b.n	80012d6 <HAL_RCC_OscConfig+0xae>
 80012aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80012d2:	4b93      	ldr	r3, [pc, #588]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80012de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012e2:	fa92 f2a2 	rbit	r2, r2
 80012e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80012ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80012ee:	fab2 f282 	clz	r2, r2
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	f042 0220 	orr.w	r2, r2, #32
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	f002 021f 	and.w	r2, r2, #31
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 810c 	beq.w	8001524 <HAL_RCC_OscConfig+0x2fc>
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 8106 	bne.w	8001524 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	f000 be86 	b.w	800202a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x110>
 800132a:	4b7d      	ldr	r3, [pc, #500]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7c      	ldr	r2, [pc, #496]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e030      	b.n	800139a <HAL_RCC_OscConfig+0x172>
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x134>
 8001342:	4b77      	ldr	r3, [pc, #476]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a76      	ldr	r2, [pc, #472]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b74      	ldr	r3, [pc, #464]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a73      	ldr	r2, [pc, #460]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01e      	b.n	800139a <HAL_RCC_OscConfig+0x172>
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x15a>
 8001368:	4b6d      	ldr	r3, [pc, #436]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a6c      	ldr	r2, [pc, #432]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 800136e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b6a      	ldr	r3, [pc, #424]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a69      	ldr	r2, [pc, #420]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e00b      	b.n	800139a <HAL_RCC_OscConfig+0x172>
 8001382:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a66      	ldr	r2, [pc, #408]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b64      	ldr	r3, [pc, #400]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a63      	ldr	r2, [pc, #396]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800139a:	4b61      	ldr	r3, [pc, #388]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	f023 020f 	bic.w	r2, r3, #15
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	495d      	ldr	r1, [pc, #372]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d059      	beq.n	800146c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fbda 	bl	8000b70 <HAL_GetTick>
 80013bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c2:	f7ff fbd5 	bl	8000b70 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d902      	bls.n	80013d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	f000 be29 	b.w	800202a <HAL_RCC_OscConfig+0xe02>
 80013d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80013ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d102      	bne.n	800140a <HAL_RCC_OscConfig+0x1e2>
 8001404:	4b46      	ldr	r3, [pc, #280]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x20e>
 800140a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800141e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001422:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001426:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800143a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800143e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001442:	fa92 f2a2 	rbit	r2, r2
 8001446:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800144a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800144e:	fab2 f282 	clz	r2, r2
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f042 0220 	orr.w	r2, r2, #32
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	f002 021f 	and.w	r2, r2, #31
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0ab      	beq.n	80013c2 <HAL_RCC_OscConfig+0x19a>
 800146a:	e05c      	b.n	8001526 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fb80 	bl	8000b70 <HAL_GetTick>
 8001470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001476:	f7ff fb7b 	bl	8000b70 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d902      	bls.n	800148c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	f000 bdcf 	b.w	800202a <HAL_RCC_OscConfig+0xe02>
 800148c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001490:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d102      	bne.n	80014be <HAL_RCC_OscConfig+0x296>
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	e015      	b.n	80014ea <HAL_RCC_OscConfig+0x2c2>
 80014be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_RCC_OscConfig+0x2f8>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80014f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014f6:	fa92 f2a2 	rbit	r2, r2
 80014fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80014fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001502:	fab2 f282 	clz	r2, r2
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	f042 0220 	orr.w	r2, r2, #32
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	f002 021f 	and.w	r2, r2, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ab      	bne.n	8001476 <HAL_RCC_OscConfig+0x24e>
 800151e:	e002      	b.n	8001526 <HAL_RCC_OscConfig+0x2fe>
 8001520:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 816f 	beq.w	8001814 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001536:	4bd0      	ldr	r3, [pc, #832]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001542:	4bcd      	ldr	r3, [pc, #820]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d16c      	bne.n	8001628 <HAL_RCC_OscConfig+0x400>
 800154e:	4bca      	ldr	r3, [pc, #808]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d166      	bne.n	8001628 <HAL_RCC_OscConfig+0x400>
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800156c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d102      	bne.n	800158a <HAL_RCC_OscConfig+0x362>
 8001584:	4bbc      	ldr	r3, [pc, #752]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	e013      	b.n	80015b2 <HAL_RCC_OscConfig+0x38a>
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015ae:	4bb2      	ldr	r3, [pc, #712]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	2202      	movs	r2, #2
 80015b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015bc:	fa92 f2a2 	rbit	r2, r2
 80015c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80015c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80015c8:	fab2 f282 	clz	r2, r2
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	f042 0220 	orr.w	r2, r2, #32
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f002 021f 	and.w	r2, r2, #31
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f202 	lsl.w	r2, r1, r2
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d002      	beq.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f000 bd1b 	b.w	800202a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4ba0      	ldr	r3, [pc, #640]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	21f8      	movs	r1, #248	; 0xf8
 8001604:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800160c:	fa91 f1a1 	rbit	r1, r1
 8001610:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001614:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001618:	fab1 f181 	clz	r1, r1
 800161c:	b2c9      	uxtb	r1, r1
 800161e:	408b      	lsls	r3, r1
 8001620:	4995      	ldr	r1, [pc, #596]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e0f5      	b.n	8001814 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8085 	beq.w	800173e <HAL_RCC_OscConfig+0x516>
 8001634:	2301      	movs	r3, #1
 8001636:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001646:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	461a      	mov	r2, r3
 800165c:	2301      	movs	r3, #1
 800165e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fa86 	bl	8000b70 <HAL_GetTick>
 8001664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fa81 	bl	8000b70 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d902      	bls.n	8001680 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	f000 bcd5 	b.w	800202a <HAL_RCC_OscConfig+0xe02>
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001692:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	fab3 f383 	clz	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	095b      	lsrs	r3, r3, #5
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d102      	bne.n	80016b0 <HAL_RCC_OscConfig+0x488>
 80016aa:	4b73      	ldr	r3, [pc, #460]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	e013      	b.n	80016d8 <HAL_RCC_OscConfig+0x4b0>
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	2202      	movs	r2, #2
 80016da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80016de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016e2:	fa92 f2a2 	rbit	r2, r2
 80016e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80016ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	f002 021f 	and.w	r2, r2, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0af      	beq.n	800166a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	21f8      	movs	r1, #248	; 0xf8
 800171a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001722:	fa91 f1a1 	rbit	r1, r1
 8001726:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800172a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800172e:	fab1 f181 	clz	r1, r1
 8001732:	b2c9      	uxtb	r1, r1
 8001734:	408b      	lsls	r3, r1
 8001736:	4950      	ldr	r1, [pc, #320]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e06a      	b.n	8001814 <HAL_RCC_OscConfig+0x5ec>
 800173e:	2301      	movs	r3, #1
 8001740:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001750:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800175e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	461a      	mov	r2, r3
 8001766:	2300      	movs	r3, #0
 8001768:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fa01 	bl	8000b70 <HAL_GetTick>
 800176e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff f9fc 	bl	8000b70 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d902      	bls.n	800178a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	f000 bc50 	b.w	800202a <HAL_RCC_OscConfig+0xe02>
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800179c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_OscConfig+0x592>
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e013      	b.n	80017e2 <HAL_RCC_OscConfig+0x5ba>
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017cc:	2302      	movs	r3, #2
 80017ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_RCC_OscConfig+0x650>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	2202      	movs	r2, #2
 80017e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80017e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017ec:	fa92 f2a2 	rbit	r2, r2
 80017f0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80017f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017f8:	fab2 f282 	clz	r2, r2
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	f042 0220 	orr.w	r2, r2, #32
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f002 021f 	and.w	r2, r2, #31
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f202 	lsl.w	r2, r1, r2
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1af      	bne.n	8001774 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80da 	beq.w	80019d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d069      	beq.n	8001902 <HAL_RCC_OscConfig+0x6da>
 800182e:	2301      	movs	r3, #1
 8001830:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_OscConfig+0x654>)
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	461a      	mov	r2, r3
 8001854:	2301      	movs	r3, #1
 8001856:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001858:	f7ff f98a 	bl	8000b70 <HAL_GetTick>
 800185c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001860:	e00e      	b.n	8001880 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff f985 	bl	8000b70 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d906      	bls.n	8001880 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e3d9      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	10908120 	.word	0x10908120
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001892:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80018c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	4ba5      	ldr	r3, [pc, #660]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 80018c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018ca:	2102      	movs	r1, #2
 80018cc:	6019      	str	r1, [r3, #0]
 80018ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f1a3 	rbit	r1, r3
 80018d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018dc:	6019      	str	r1, [r3, #0]
  return result;
 80018de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0b0      	beq.n	8001862 <HAL_RCC_OscConfig+0x63a>
 8001900:	e06a      	b.n	80019d8 <HAL_RCC_OscConfig+0x7b0>
 8001902:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f2a3 	rbit	r2, r3
 8001914:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001918:	601a      	str	r2, [r3, #0]
  return result;
 800191a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800191e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4b8c      	ldr	r3, [pc, #560]	; (8001b5c <HAL_RCC_OscConfig+0x934>)
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	461a      	mov	r2, r3
 8001930:	2300      	movs	r3, #0
 8001932:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff f91c 	bl	8000b70 <HAL_GetTick>
 8001938:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	e009      	b.n	8001952 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff f917 	bl	8000b70 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e36b      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
 8001952:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001956:	2202      	movs	r2, #2
 8001958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800196e:	2202      	movs	r2, #2
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001986:	2202      	movs	r2, #2
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001998:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 800199c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019a2:	2102      	movs	r1, #2
 80019a4:	6019      	str	r1, [r3, #0]
 80019a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f1a3 	rbit	r1, r3
 80019b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019b4:	6019      	str	r1, [r3, #0]
  return result;
 80019b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1b2      	bne.n	800193e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8158 	beq.w	8001c98 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ee:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d112      	bne.n	8001a20 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b54      	ldr	r3, [pc, #336]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <HAL_RCC_OscConfig+0x938>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11a      	bne.n	8001a62 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <HAL_RCC_OscConfig+0x938>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_RCC_OscConfig+0x938>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a38:	f7ff f89a 	bl	8000b70 <HAL_GetTick>
 8001a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e009      	b.n	8001a56 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff f895 	bl	8000b70 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e2e9      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_OscConfig+0x938>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ef      	beq.n	8001a42 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x852>
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a39      	ldr	r2, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e02f      	b.n	8001ada <HAL_RCC_OscConfig+0x8b2>
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10c      	bne.n	8001a9e <HAL_RCC_OscConfig+0x876>
 8001a84:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001a96:	f023 0304 	bic.w	r3, r3, #4
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	e01d      	b.n	8001ada <HAL_RCC_OscConfig+0x8b2>
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x89a>
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e00b      	b.n	8001ada <HAL_RCC_OscConfig+0x8b2>
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d06b      	beq.n	8001bbc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f844 	bl	8000b70 <HAL_GetTick>
 8001ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff f83f 	bl	8000b70 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e291      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
 8001b06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b22:	2202      	movs	r2, #2
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b34:	601a      	str	r2, [r3, #0]
  return result;
 8001b36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f043 0302 	orr.w	r3, r3, #2
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d109      	bne.n	8001b64 <HAL_RCC_OscConfig+0x93c>
 8001b50:	4b01      	ldr	r3, [pc, #4]	; (8001b58 <HAL_RCC_OscConfig+0x930>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	e014      	b.n	8001b80 <HAL_RCC_OscConfig+0x958>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	10908120 	.word	0x10908120
 8001b60:	40007000 	.word	0x40007000
 8001b64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b68:	2202      	movs	r2, #2
 8001b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	4bbb      	ldr	r3, [pc, #748]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b84:	2102      	movs	r1, #2
 8001b86:	6011      	str	r1, [r2, #0]
 8001b88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	fa92 f1a2 	rbit	r1, r2
 8001b92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b96:	6011      	str	r1, [r2, #0]
  return result;
 8001b98:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d099      	beq.n	8001aee <HAL_RCC_OscConfig+0x8c6>
 8001bba:	e063      	b.n	8001c84 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7fe ffd8 	bl	8000b70 <HAL_GetTick>
 8001bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7fe ffd3 	bl	8000b70 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e225      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
 8001bde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001be2:	2202      	movs	r2, #2
 8001be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fa93 f2a3 	rbit	r2, r3
 8001bf0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c0c:	601a      	str	r2, [r3, #0]
  return result;
 8001c0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0xa06>
 8001c28:	4b90      	ldr	r3, [pc, #576]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	e00d      	b.n	8001c4a <HAL_RCC_OscConfig+0xa22>
 8001c2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c32:	2202      	movs	r2, #2
 8001c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b89      	ldr	r3, [pc, #548]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c4e:	2102      	movs	r1, #2
 8001c50:	6011      	str	r1, [r2, #0]
 8001c52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	fa92 f1a2 	rbit	r1, r2
 8001c5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c60:	6011      	str	r1, [r2, #0]
  return result;
 8001c62:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	fab2 f282 	clz	r2, r2
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f002 021f 	and.w	r2, r2, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1a0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8c:	4b77      	ldr	r3, [pc, #476]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	4a76      	ldr	r2, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 81c2 	beq.w	8002028 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca4:	4b71      	ldr	r3, [pc, #452]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	f000 819c 	beq.w	8001fea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	f040 8114 	bne.w	8001ee6 <HAL_RCC_OscConfig+0xcbe>
 8001cbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cd6:	601a      	str	r2, [r3, #0]
  return result;
 8001cd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe ff3c 	bl	8000b70 <HAL_GetTick>
 8001cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe ff37 	bl	8000b70 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e18b      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
 8001d12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d2a:	601a      	str	r2, [r3, #0]
  return result;
 8001d2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0xb24>
 8001d46:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0xb5c>
 8001d4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d8c:	6011      	str	r1, [r2, #0]
 8001d8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fa92 f1a2 	rbit	r1, r2
 8001d98:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d9c:	6011      	str	r1, [r2, #0]
  return result;
 8001d9e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f002 021f 	and.w	r2, r2, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d19e      	bne.n	8001cfe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	4925      	ldr	r1, [pc, #148]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001df4:	601a      	str	r2, [r3, #0]
  return result;
 8001df6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dfa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2301      	movs	r3, #1
 8001e10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe fead 	bl	8000b70 <HAL_GetTick>
 8001e16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1a:	e009      	b.n	8001e30 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe fea8 	bl	8000b70 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0fc      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
 8001e30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fa93 f2a3 	rbit	r2, r3
 8001e44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e48:	601a      	str	r2, [r3, #0]
  return result;
 8001e4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0xc48>
 8001e64:	4b01      	ldr	r3, [pc, #4]	; (8001e6c <HAL_RCC_OscConfig+0xc44>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	e01e      	b.n	8001ea8 <HAL_RCC_OscConfig+0xc80>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_RCC_OscConfig+0xe0c>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001eac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb0:	6011      	str	r1, [r2, #0]
 8001eb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	fa92 f1a2 	rbit	r1, r2
 8001ebc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ec0:	6011      	str	r1, [r2, #0]
  return result;
 8001ec2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	fab2 f282 	clz	r2, r2
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f042 0220 	orr.w	r2, r2, #32
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f002 021f 	and.w	r2, r2, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d09b      	beq.n	8001e1c <HAL_RCC_OscConfig+0xbf4>
 8001ee4:	e0a0      	b.n	8002028 <HAL_RCC_OscConfig+0xe00>
 8001ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efe:	601a      	str	r2, [r3, #0]
  return result;
 8001f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	461a      	mov	r2, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fe28 	bl	8000b70 <HAL_GetTick>
 8001f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	e009      	b.n	8001f3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7fe fe23 	bl	8000b70 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e077      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	601a      	str	r2, [r3, #0]
  return result;
 8001f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <HAL_RCC_OscConfig+0xd4c>
 8001f6e:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_RCC_OscConfig+0xe0c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	e01b      	b.n	8001fac <HAL_RCC_OscConfig+0xd84>
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f107 0320 	add.w	r3, r7, #32
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f107 0318 	add.w	r3, r7, #24
 8001f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f107 0318 	add.w	r3, r7, #24
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_RCC_OscConfig+0xe0c>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f107 0210 	add.w	r2, r7, #16
 8001fb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fb4:	6011      	str	r1, [r2, #0]
 8001fb6:	f107 0210 	add.w	r2, r7, #16
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	fa92 f1a2 	rbit	r1, r2
 8001fc0:	f107 020c 	add.w	r2, r7, #12
 8001fc4:	6011      	str	r1, [r2, #0]
  return result;
 8001fc6:	f107 020c 	add.w	r2, r7, #12
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	fab2 f282 	clz	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f002 021f 	and.w	r2, r2, #31
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d19e      	bne.n	8001f26 <HAL_RCC_OscConfig+0xcfe>
 8001fe8:	e01e      	b.n	8002028 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCC_OscConfig+0xe0c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002000:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	429a      	cmp	r2, r3
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002012:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002016:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b09e      	sub	sp, #120	; 0x78
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e162      	b.n	8002316 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b90      	ldr	r3, [pc, #576]	; (8002294 <HAL_RCC_ClockConfig+0x25c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b8d      	ldr	r3, [pc, #564]	; (8002294 <HAL_RCC_ClockConfig+0x25c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0207 	bic.w	r2, r3, #7
 8002066:	498b      	ldr	r1, [pc, #556]	; (8002294 <HAL_RCC_ClockConfig+0x25c>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <HAL_RCC_ClockConfig+0x25c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e14a      	b.n	8002316 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b82      	ldr	r3, [pc, #520]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	497f      	ldr	r1, [pc, #508]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80dc 	beq.w	8002264 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d13c      	bne.n	800212e <HAL_RCC_ClockConfig+0xf6>
 80020b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d102      	bne.n	80020de <HAL_RCC_ClockConfig+0xa6>
 80020d8:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	e00f      	b.n	80020fe <HAL_RCC_ClockConfig+0xc6>
 80020de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	667b      	str	r3, [r7, #100]	; 0x64
 80020ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f0:	663b      	str	r3, [r7, #96]	; 0x60
 80020f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002102:	65ba      	str	r2, [r7, #88]	; 0x58
 8002104:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002106:	fa92 f2a2 	rbit	r2, r2
 800210a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800210c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800210e:	fab2 f282 	clz	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f002 021f 	and.w	r2, r2, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d17b      	bne.n	8002222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0f3      	b.n	8002316 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d13c      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x178>
 8002136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_RCC_ClockConfig+0x128>
 800215a:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e00f      	b.n	8002180 <HAL_RCC_ClockConfig+0x148>
 8002160:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002164:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
 800216e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
 8002174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217c:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002184:	63ba      	str	r2, [r7, #56]	; 0x38
 8002186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800218e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f042 0220 	orr.w	r2, r2, #32
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f002 021f 	and.w	r2, r2, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d13a      	bne.n	8002222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b2      	b.n	8002316 <HAL_RCC_ClockConfig+0x2de>
 80021b0:	2302      	movs	r3, #2
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x1a0>
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	e00d      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1bc>
 80021d8:	2302      	movs	r3, #2
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	2302      	movs	r3, #2
 80021e6:	623b      	str	r3, [r7, #32]
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2202      	movs	r2, #2
 80021f6:	61ba      	str	r2, [r7, #24]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	fa92 f2a2 	rbit	r2, r2
 80021fe:	617a      	str	r2, [r7, #20]
  return result;
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	fab2 f282 	clz	r2, r2
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	f042 0220 	orr.w	r2, r2, #32
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f002 021f 	and.w	r2, r2, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e079      	b.n	8002316 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	491a      	ldr	r1, [pc, #104]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7fe fc9c 	bl	8000b70 <HAL_GetTick>
 8002238:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7fe fc98 	bl	8000b70 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e061      	b.n	8002316 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_ClockConfig+0x260>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x25c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d214      	bcs.n	800229c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCC_ClockConfig+0x25c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	4906      	ldr	r1, [pc, #24]	; (8002294 <HAL_RCC_ClockConfig+0x25c>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_RCC_ClockConfig+0x25c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e040      	b.n	8002316 <HAL_RCC_ClockConfig+0x2de>
 8002294:	40022000 	.word	0x40022000
 8002298:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_ClockConfig+0x2e8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	491a      	ldr	r1, [pc, #104]	; (8002320 <HAL_RCC_ClockConfig+0x2e8>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_RCC_ClockConfig+0x2e8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4912      	ldr	r1, [pc, #72]	; (8002320 <HAL_RCC_ClockConfig+0x2e8>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022da:	f000 f829 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022de:	4601      	mov	r1, r0
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_RCC_ClockConfig+0x2e8>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e8:	22f0      	movs	r2, #240	; 0xf0
 80022ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	fa92 f2a2 	rbit	r2, r2
 80022f2:	60fa      	str	r2, [r7, #12]
  return result;
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	fab2 f282 	clz	r2, r2
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	40d3      	lsrs	r3, r2
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x2ec>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	fa21 f303 	lsr.w	r3, r1, r3
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <HAL_RCC_ClockConfig+0x2f0>)
 8002308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_RCC_ClockConfig+0x2f4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fbea 	bl	8000ae8 <HAL_InitTick>
  
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3778      	adds	r7, #120	; 0x78
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	08005010 	.word	0x08005010
 8002328:	20000158 	.word	0x20000158
 800232c:	2000015c 	.word	0x2000015c

08002330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b08b      	sub	sp, #44	; 0x2c
 8002334:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x30>
 800235a:	2b08      	cmp	r3, #8
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x36>
 800235e:	e03c      	b.n	80023da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002362:	623b      	str	r3, [r7, #32]
      break;
 8002364:	e03c      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800236c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002370:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	fa92 f2a2 	rbit	r2, r2
 8002378:	607a      	str	r2, [r7, #4]
  return result;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	fab2 f282 	clz	r2, r2
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	40d3      	lsrs	r3, r2
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	220f      	movs	r2, #15
 8002394:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	fa92 f2a2 	rbit	r2, r2
 800239c:	60fa      	str	r2, [r7, #12]
  return result;
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	40d3      	lsrs	r3, r2
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
 80023c8:	e004      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	623b      	str	r3, [r7, #32]
      break;
 80023d8:	e002      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023dc:	623b      	str	r3, [r7, #32]
      break;
 80023de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	372c      	adds	r7, #44	; 0x2c
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	08005028 	.word	0x08005028
 80023fc:	08005038 	.word	0x08005038
 8002400:	003d0900 	.word	0x003d0900

08002404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_RCC_GetHCLKFreq+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000158 	.word	0x20000158

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002422:	f7ff ffef 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002426:	4601      	mov	r1, r0
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002430:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002434:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	fa92 f2a2 	rbit	r2, r2
 800243c:	603a      	str	r2, [r7, #0]
  return result;
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	40d3      	lsrs	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_RCC_GetPCLK1Freq+0x40>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	08005020 	.word	0x08005020

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002466:	f7ff ffcd 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 800246a:	4601      	mov	r1, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002474:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	fa92 f2a2 	rbit	r2, r2
 8002480:	603a      	str	r2, [r7, #0]
  return result;
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	40d3      	lsrs	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800248e:	5cd3      	ldrb	r3, [r2, r3]
 8002490:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	08005020 	.word	0x08005020

080024a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b092      	sub	sp, #72	; 0x48
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80d4 	beq.w	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10e      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	61d3      	str	r3, [r2, #28]
 80024e0:	4b48      	ldr	r3, [pc, #288]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b45      	ldr	r3, [pc, #276]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b42      	ldr	r3, [pc, #264]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a41      	ldr	r2, [pc, #260]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7fe fb31 	bl	8000b70 <HAL_GetTick>
 800250e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe fb2d 	bl	8000b70 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	d901      	bls.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e14b      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002530:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002538:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800253a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8084 	beq.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800254c:	429a      	cmp	r2, r3
 800254e:	d07c      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002550:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800255a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	461a      	mov	r2, r3
 800257a:	2301      	movs	r3, #1
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800258c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	461a      	mov	r2, r3
 800259e:	2300      	movs	r3, #0
 80025a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04b      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fadd 	bl	8000b70 <HAL_GetTick>
 80025b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fad9 	bl	8000b70 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0f5      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80025d0:	2302      	movs	r3, #2
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	2302      	movs	r3, #2
 80025de:	623b      	str	r3, [r7, #32]
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	61fb      	str	r3, [r7, #28]
  return result;
 80025e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d108      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025fe:	4b01      	ldr	r3, [pc, #4]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	e00d      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002604:	40021000 	.word	0x40021000
 8002608:	40007000 	.word	0x40007000
 800260c:	10908100 	.word	0x10908100
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2202      	movs	r2, #2
 8002622:	613a      	str	r2, [r7, #16]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	fa92 f2a2 	rbit	r2, r2
 800262a:	60fa      	str	r2, [r7, #12]
  return result;
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	fab2 f282 	clz	r2, r2
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f002 021f 	and.w	r2, r2, #31
 800263e:	2101      	movs	r1, #1
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0b7      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800264a:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	495b      	ldr	r1, [pc, #364]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002658:	4313      	orrs	r3, r2
 800265a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800265c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002664:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4a56      	ldr	r2, [pc, #344]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800266a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800266e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800267c:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f023 0203 	bic.w	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494e      	ldr	r1, [pc, #312]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800268a:	4313      	orrs	r3, r2
 800268c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800269a:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f023 0210 	bic.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4947      	ldr	r1, [pc, #284]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026b8:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	493f      	ldr	r1, [pc, #252]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d6:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f023 0220 	bic.w	r2, r3, #32
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	4938      	ldr	r1, [pc, #224]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	4930      	ldr	r1, [pc, #192]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002712:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4929      	ldr	r1, [pc, #164]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4921      	ldr	r1, [pc, #132]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800273e:	4313      	orrs	r3, r2
 8002740:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	491a      	ldr	r1, [pc, #104]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800275c:	4313      	orrs	r3, r2
 800275e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	4912      	ldr	r1, [pc, #72]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800277a:	4313      	orrs	r3, r2
 800277c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	490b      	ldr	r1, [pc, #44]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002798:	4313      	orrs	r3, r2
 800279a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3748      	adds	r7, #72	; 0x48
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e040      	b.n	800285c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe f822 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2224      	movs	r2, #36	; 0x24
 80027f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fc00 	bl	800300c <UART_SetConfig>
 800280c:	4603      	mov	r3, r0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e022      	b.n	800285c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fd2a 	bl	8003278 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fdb1 	bl	80033bc <UART_CheckIdleState>
 800285a:	4603      	mov	r3, r0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002878:	2b20      	cmp	r3, #32
 800287a:	d178      	bne.n	800296e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_UART_Transmit+0x24>
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e071      	b.n	8002970 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2221      	movs	r2, #33	; 0x21
 8002898:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800289a:	f7fe f969 	bl	8000b70 <HAL_GetTick>
 800289e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	88fa      	ldrh	r2, [r7, #6]
 80028ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b8:	d108      	bne.n	80028cc <HAL_UART_Transmit+0x68>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d104      	bne.n	80028cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e003      	b.n	80028d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028d4:	e030      	b.n	8002938 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fe13 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e03c      	b.n	8002970 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002908:	b292      	uxth	r2, r2
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	3302      	adds	r3, #2
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e008      	b.n	8002926 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b292      	uxth	r2, r2
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1c8      	bne.n	80028d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	2140      	movs	r1, #64	; 0x40
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fddc 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e005      	b.n	8002970 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800298c:	2b20      	cmp	r3, #32
 800298e:	d132      	bne.n	80029f6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UART_Receive_IT+0x24>
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e02b      	b.n	80029f8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d018      	beq.n	80029e6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	613b      	str	r3, [r7, #16]
   return(result);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	69f9      	ldr	r1, [r7, #28]
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e6      	bne.n	80029b4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fdf5 	bl	80035dc <UART_Start_Receive_IT>
 80029f2:	4603      	mov	r3, r0
 80029f4:	e000      	b.n	80029f8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
  }
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0ba      	sub	sp, #232	; 0xe8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a2e:	4013      	ands	r3, r2
 8002a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d115      	bne.n	8002a68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00f      	beq.n	8002a68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d009      	beq.n	8002a68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 82ab 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
      }
      return;
 8002a66:	e2a5      	b.n	8002fb4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8117 	beq.w	8002ca0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a82:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <HAL_UART_IRQHandler+0x298>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 810a 	beq.w	8002ca0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d011      	beq.n	8002abc <HAL_UART_IRQHandler+0xbc>
 8002a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d011      	beq.n	8002aec <HAL_UART_IRQHandler+0xec>
 8002ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d011      	beq.n	8002b1c <HAL_UART_IRQHandler+0x11c>
 8002af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d017      	beq.n	8002b58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2208      	movs	r2, #8
 8002b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4e:	f043 0208 	orr.w	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d012      	beq.n	8002b8a <HAL_UART_IRQHandler+0x18a>
 8002b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00c      	beq.n	8002b8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8211 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d007      	beq.n	8002bbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d005      	beq.n	8002be2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d04f      	beq.n	8002c82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fdc0 	bl	8003768 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d141      	bne.n	8002c7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c32:	e841 2300 	strex	r3, r2, [r1]
 8002c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1d9      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d013      	beq.n	8002c72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <HAL_UART_IRQHandler+0x29c>)
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe f904 	bl	8000e64 <HAL_DMA_Abort_IT>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d017      	beq.n	8002c92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c70:	e00f      	b.n	8002c92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f9b4 	bl	8002fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	e00b      	b.n	8002c92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f9b0 	bl	8002fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c80:	e007      	b.n	8002c92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9ac 	bl	8002fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002c90:	e192      	b.n	8002fb8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c92:	bf00      	nop
    return;
 8002c94:	e190      	b.n	8002fb8 <HAL_UART_IRQHandler+0x5b8>
 8002c96:	bf00      	nop
 8002c98:	04000120 	.word	0x04000120
 8002c9c:	08003831 	.word	0x08003831

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	f040 814b 	bne.w	8002f40 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8144 	beq.w	8002f40 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 813d 	beq.w	8002f40 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2210      	movs	r2, #16
 8002ccc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	f040 80b5 	bne.w	8002e48 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8164 	beq.w	8002fbc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	f080 815c 	bcs.w	8002fbc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	f000 8086 	beq.w	8002e26 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d48:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1da      	bne.n	8002d1a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3308      	adds	r3, #8
 8002d6a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3308      	adds	r3, #8
 8002d84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d88:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e1      	bne.n	8002d64 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3308      	adds	r3, #8
 8002da6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002daa:	e853 3f00 	ldrex	r3, [r3]
 8002dae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dc4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e3      	bne.n	8002da0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	f023 0310 	bic.w	r3, r3, #16
 8002dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e4      	bne.n	8002de6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd ffe6 	bl	8000df2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f8d7 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e46:	e0b9      	b.n	8002fbc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80ab 	beq.w	8002fc0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002e6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80a6 	beq.w	8002fc0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e96:	647b      	str	r3, [r7, #68]	; 0x44
 8002e98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e4      	bne.n	8002e74 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3308      	adds	r3, #8
 8002eca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ece:	633a      	str	r2, [r7, #48]	; 0x30
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e3      	bne.n	8002eaa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	69b9      	ldr	r1, [r7, #24]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	617b      	str	r3, [r7, #20]
   return(result);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e4      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f85b 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f3e:	e03f      	b.n	8002fc0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <HAL_UART_IRQHandler+0x56a>
 8002f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fe4c 	bl	8003c00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f68:	e02d      	b.n	8002fc6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00e      	beq.n	8002f94 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01c      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
    }
    return;
 8002f92:	e017      	b.n	8002fc4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d012      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x5c6>
 8002fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00c      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fc55 	bl	800385c <UART_EndTransmit_IT>
    return;
 8002fb2:	e008      	b.n	8002fc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fb4:	bf00      	nop
 8002fb6:	e006      	b.n	8002fc6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002fb8:	bf00      	nop
 8002fba:	e004      	b.n	8002fc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fbc:	bf00      	nop
 8002fbe:	e002      	b.n	8002fc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fc0:	bf00      	nop
 8002fc2:	e000      	b.n	8002fc6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002fc4:	bf00      	nop
  }

}
 8002fc6:	37e8      	adds	r7, #232	; 0xe8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b8a      	ldr	r3, [pc, #552]	; (8003260 <UART_SetConfig+0x254>)
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	6979      	ldr	r1, [r7, #20]
 8003040:	430b      	orrs	r3, r1
 8003042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a78      	ldr	r2, [pc, #480]	; (8003264 <UART_SetConfig+0x258>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d120      	bne.n	80030ca <UART_SetConfig+0xbe>
 8003088:	4b77      	ldr	r3, [pc, #476]	; (8003268 <UART_SetConfig+0x25c>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b03      	cmp	r3, #3
 8003092:	d817      	bhi.n	80030c4 <UART_SetConfig+0xb8>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <UART_SetConfig+0x90>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	080030bf 	.word	0x080030bf
 80030a8:	080030b3 	.word	0x080030b3
 80030ac:	2300      	movs	r3, #0
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e01d      	b.n	80030ee <UART_SetConfig+0xe2>
 80030b2:	2302      	movs	r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e01a      	b.n	80030ee <UART_SetConfig+0xe2>
 80030b8:	2304      	movs	r3, #4
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e017      	b.n	80030ee <UART_SetConfig+0xe2>
 80030be:	2308      	movs	r3, #8
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e014      	b.n	80030ee <UART_SetConfig+0xe2>
 80030c4:	2310      	movs	r3, #16
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e011      	b.n	80030ee <UART_SetConfig+0xe2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a67      	ldr	r2, [pc, #412]	; (800326c <UART_SetConfig+0x260>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d102      	bne.n	80030da <UART_SetConfig+0xce>
 80030d4:	2300      	movs	r3, #0
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e009      	b.n	80030ee <UART_SetConfig+0xe2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a64      	ldr	r2, [pc, #400]	; (8003270 <UART_SetConfig+0x264>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d102      	bne.n	80030ea <UART_SetConfig+0xde>
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e001      	b.n	80030ee <UART_SetConfig+0xe2>
 80030ea:	2310      	movs	r3, #16
 80030ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f6:	d15a      	bne.n	80031ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d827      	bhi.n	800314e <UART_SetConfig+0x142>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <UART_SetConfig+0xf8>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003129 	.word	0x08003129
 8003108:	08003131 	.word	0x08003131
 800310c:	08003139 	.word	0x08003139
 8003110:	0800314f 	.word	0x0800314f
 8003114:	0800313f 	.word	0x0800313f
 8003118:	0800314f 	.word	0x0800314f
 800311c:	0800314f 	.word	0x0800314f
 8003120:	0800314f 	.word	0x0800314f
 8003124:	08003147 	.word	0x08003147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003128:	f7ff f978 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 800312c:	61b8      	str	r0, [r7, #24]
        break;
 800312e:	e013      	b.n	8003158 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003130:	f7ff f996 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8003134:	61b8      	str	r0, [r7, #24]
        break;
 8003136:	e00f      	b.n	8003158 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003138:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <UART_SetConfig+0x268>)
 800313a:	61bb      	str	r3, [r7, #24]
        break;
 800313c:	e00c      	b.n	8003158 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313e:	f7ff f8f7 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 8003142:	61b8      	str	r0, [r7, #24]
        break;
 8003144:	e008      	b.n	8003158 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314a:	61bb      	str	r3, [r7, #24]
        break;
 800314c:	e004      	b.n	8003158 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	77bb      	strb	r3, [r7, #30]
        break;
 8003156:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d074      	beq.n	8003248 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	005a      	lsls	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	2b0f      	cmp	r3, #15
 8003178:	d916      	bls.n	80031a8 <UART_SetConfig+0x19c>
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003180:	d212      	bcs.n	80031a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	b29b      	uxth	r3, r3
 8003186:	f023 030f 	bic.w	r3, r3, #15
 800318a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	b29b      	uxth	r3, r3
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	b29a      	uxth	r2, r3
 8003198:	89fb      	ldrh	r3, [r7, #14]
 800319a:	4313      	orrs	r3, r2
 800319c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	89fa      	ldrh	r2, [r7, #14]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	e04f      	b.n	8003248 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	77bb      	strb	r3, [r7, #30]
 80031ac:	e04c      	b.n	8003248 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d828      	bhi.n	8003206 <UART_SetConfig+0x1fa>
 80031b4:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <UART_SetConfig+0x1b0>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031e1 	.word	0x080031e1
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	080031f1 	.word	0x080031f1
 80031c8:	08003207 	.word	0x08003207
 80031cc:	080031f7 	.word	0x080031f7
 80031d0:	08003207 	.word	0x08003207
 80031d4:	08003207 	.word	0x08003207
 80031d8:	08003207 	.word	0x08003207
 80031dc:	080031ff 	.word	0x080031ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e0:	f7ff f91c 	bl	800241c <HAL_RCC_GetPCLK1Freq>
 80031e4:	61b8      	str	r0, [r7, #24]
        break;
 80031e6:	e013      	b.n	8003210 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e8:	f7ff f93a 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 80031ec:	61b8      	str	r0, [r7, #24]
        break;
 80031ee:	e00f      	b.n	8003210 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <UART_SetConfig+0x268>)
 80031f2:	61bb      	str	r3, [r7, #24]
        break;
 80031f4:	e00c      	b.n	8003210 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f6:	f7ff f89b 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80031fa:	61b8      	str	r0, [r7, #24]
        break;
 80031fc:	e008      	b.n	8003210 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003202:	61bb      	str	r3, [r7, #24]
        break;
 8003204:	e004      	b.n	8003210 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	77bb      	strb	r3, [r7, #30]
        break;
 800320e:	bf00      	nop
    }

    if (pclk != 0U)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	085a      	lsrs	r2, r3, #1
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	441a      	add	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b0f      	cmp	r3, #15
 800322e:	d909      	bls.n	8003244 <UART_SetConfig+0x238>
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003236:	d205      	bcs.n	8003244 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	e001      	b.n	8003248 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003254:	7fbb      	ldrb	r3, [r7, #30]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	efff69f3 	.word	0xefff69f3
 8003264:	40013800 	.word	0x40013800
 8003268:	40021000 	.word	0x40021000
 800326c:	40004400 	.word	0x40004400
 8003270:	40004800 	.word	0x40004800
 8003274:	007a1200 	.word	0x007a1200

08003278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01a      	beq.n	800338e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003376:	d10a      	bne.n	800338e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
  }
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b098      	sub	sp, #96	; 0x60
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033cc:	f7fd fbd0 	bl	8000b70 <HAL_GetTick>
 80033d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d12e      	bne.n	800343e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e8:	2200      	movs	r2, #0
 80033ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f88c 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d021      	beq.n	800343e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340e:	653b      	str	r3, [r7, #80]	; 0x50
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
 800341a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800341e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e6      	bne.n	80033fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e062      	b.n	8003504 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d149      	bne.n	80034e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800344c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003454:	2200      	movs	r2, #0
 8003456:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f856 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d03c      	beq.n	80034e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	623b      	str	r3, [r7, #32]
   return(result);
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
 8003486:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800348a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e6      	bne.n	8003466 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3308      	adds	r3, #8
 800349e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3308      	adds	r3, #8
 80034b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034b8:	61fa      	str	r2, [r7, #28]
 80034ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	69b9      	ldr	r1, [r7, #24]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	617b      	str	r3, [r7, #20]
   return(result);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e011      	b.n	8003504 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3758      	adds	r7, #88	; 0x58
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	e049      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d045      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fd fb23 	bl	8000b70 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <UART_WaitOnFlagUntilTimeout+0x30>
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e048      	b.n	80035d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d031      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b08      	cmp	r3, #8
 800355a:	d110      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2208      	movs	r2, #8
 8003562:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f8ff 	bl	8003768 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2208      	movs	r2, #8
 800356e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e029      	b.n	80035d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358c:	d111      	bne.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f8e5 	bl	8003768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e00f      	b.n	80035d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d0a6      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035dc:	b480      	push	{r7}
 80035de:	b097      	sub	sp, #92	; 0x5c
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	88fa      	ldrh	r2, [r7, #6]
 80035f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d10e      	bne.n	800362e <UART_Start_Receive_IT+0x52>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <UART_Start_Receive_IT+0x48>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800361e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003622:	e02d      	b.n	8003680 <UART_Start_Receive_IT+0xa4>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	22ff      	movs	r2, #255	; 0xff
 8003628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800362c:	e028      	b.n	8003680 <UART_Start_Receive_IT+0xa4>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <UART_Start_Receive_IT+0x76>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d104      	bne.n	8003648 <UART_Start_Receive_IT+0x6c>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003646:	e01b      	b.n	8003680 <UART_Start_Receive_IT+0xa4>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	227f      	movs	r2, #127	; 0x7f
 800364c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003650:	e016      	b.n	8003680 <UART_Start_Receive_IT+0xa4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365a:	d10d      	bne.n	8003678 <UART_Start_Receive_IT+0x9c>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <UART_Start_Receive_IT+0x92>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	227f      	movs	r2, #127	; 0x7f
 8003668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800366c:	e008      	b.n	8003680 <UART_Start_Receive_IT+0xa4>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	223f      	movs	r2, #63	; 0x3f
 8003672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003676:	e003      	b.n	8003680 <UART_Start_Receive_IT+0xa4>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2222      	movs	r2, #34	; 0x22
 800368c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	657b      	str	r3, [r7, #84]	; 0x54
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3308      	adds	r3, #8
 80036ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036cc:	d107      	bne.n	80036de <UART_Start_Receive_IT+0x102>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a21      	ldr	r2, [pc, #132]	; (8003760 <UART_Start_Receive_IT+0x184>)
 80036da:	669a      	str	r2, [r3, #104]	; 0x68
 80036dc:	e002      	b.n	80036e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <UART_Start_Receive_IT+0x188>)
 80036e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d019      	beq.n	8003720 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003700:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
 800370c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e6      	bne.n	80036ec <UART_Start_Receive_IT+0x110>
 800371e:	e018      	b.n	8003752 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	613b      	str	r3, [r7, #16]
   return(result);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f043 0320 	orr.w	r3, r3, #32
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	69f9      	ldr	r1, [r7, #28]
 8003744:	6a3a      	ldr	r2, [r7, #32]
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	61bb      	str	r3, [r7, #24]
   return(result);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e6      	bne.n	8003720 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	375c      	adds	r7, #92	; 0x5c
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	08003a59 	.word	0x08003a59
 8003764:	080038b1 	.word	0x080038b1

08003768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b095      	sub	sp, #84	; 0x54
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378e:	643b      	str	r3, [r7, #64]	; 0x40
 8003790:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e6      	bne.n	8003770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3308      	adds	r3, #8
 80037a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3308      	adds	r3, #8
 80037c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e5      	bne.n	80037a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d118      	bne.n	8003810 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f023 0310 	bic.w	r3, r3, #16
 80037f2:	647b      	str	r3, [r7, #68]	; 0x44
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6979      	ldr	r1, [r7, #20]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	613b      	str	r3, [r7, #16]
   return(result);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e6      	bne.n	80037de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003824:	bf00      	nop
 8003826:	3754      	adds	r7, #84	; 0x54
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fbc6 	bl	8002fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	60bb      	str	r3, [r7, #8]
   return(result);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	613b      	str	r3, [r7, #16]
   return(result);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e6      	bne.n	8003864 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fb92 	bl	8002fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a8:	bf00      	nop
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b09c      	sub	sp, #112	; 0x70
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c8:	2b22      	cmp	r3, #34	; 0x22
 80038ca:	f040 80b9 	bne.w	8003a40 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80038dc:	b2d9      	uxtb	r1, r3
 80038de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	400a      	ands	r2, r1
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 809c 	bne.w	8003a50 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392c:	66bb      	str	r3, [r7, #104]	; 0x68
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003936:	65bb      	str	r3, [r7, #88]	; 0x58
 8003938:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800393c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e6      	bne.n	8003918 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	667b      	str	r3, [r7, #100]	; 0x64
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800396a:	647a      	str	r2, [r7, #68]	; 0x44
 800396c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e5      	bne.n	800394a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d018      	beq.n	80039d2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	623b      	str	r3, [r7, #32]
   return(result);
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039b4:	663b      	str	r3, [r7, #96]	; 0x60
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
 80039c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e6      	bne.n	80039a0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d12e      	bne.n	8003a38 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f023 0310 	bic.w	r3, r3, #16
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	69b9      	ldr	r1, [r7, #24]
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e6      	bne.n	80039e0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d103      	bne.n	8003a28 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2210      	movs	r2, #16
 8003a26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fadf 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a36:	e00b      	b.n	8003a50 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fc fd57 	bl	80004ec <HAL_UART_RxCpltCallback>
}
 8003a3e:	e007      	b.n	8003a50 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0208 	orr.w	r2, r2, #8
 8003a4e:	619a      	str	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	3770      	adds	r7, #112	; 0x70
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b09c      	sub	sp, #112	; 0x70
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a70:	2b22      	cmp	r3, #34	; 0x22
 8003a72:	f040 80b9 	bne.w	8003be8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a86:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003a8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a8e:	4013      	ands	r3, r2
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	1c9a      	adds	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 809c 	bne.w	8003bf8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ad4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ade:	657b      	str	r3, [r7, #84]	; 0x54
 8003ae0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ae4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e6      	bne.n	8003ac0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	663b      	str	r3, [r7, #96]	; 0x60
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b12:	643a      	str	r2, [r7, #64]	; 0x40
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d018      	beq.n	8003b7a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b68:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e6      	bne.n	8003b48 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d12e      	bne.n	8003be0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f023 0310 	bic.w	r3, r3, #16
 8003b9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e6      	bne.n	8003b88 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d103      	bne.n	8003bd0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fa0b 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bde:	e00b      	b.n	8003bf8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fc fc83 	bl	80004ec <HAL_UART_RxCpltCallback>
}
 8003be6:	e007      	b.n	8003bf8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0208 	orr.w	r2, r2, #8
 8003bf6:	619a      	str	r2, [r3, #24]
}
 8003bf8:	bf00      	nop
 8003bfa:	3770      	adds	r7, #112	; 0x70
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <atoi>:
 8003c14:	220a      	movs	r2, #10
 8003c16:	2100      	movs	r1, #0
 8003c18:	f000 bce8 	b.w	80045ec <strtol>

08003c1c <__errno>:
 8003c1c:	4b01      	ldr	r3, [pc, #4]	; (8003c24 <__errno+0x8>)
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000164 	.word	0x20000164

08003c28 <__sflush_r>:
 8003c28:	898a      	ldrh	r2, [r1, #12]
 8003c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2e:	4605      	mov	r5, r0
 8003c30:	0710      	lsls	r0, r2, #28
 8003c32:	460c      	mov	r4, r1
 8003c34:	d458      	bmi.n	8003ce8 <__sflush_r+0xc0>
 8003c36:	684b      	ldr	r3, [r1, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	dc05      	bgt.n	8003c48 <__sflush_r+0x20>
 8003c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dc02      	bgt.n	8003c48 <__sflush_r+0x20>
 8003c42:	2000      	movs	r0, #0
 8003c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c4a:	2e00      	cmp	r6, #0
 8003c4c:	d0f9      	beq.n	8003c42 <__sflush_r+0x1a>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c54:	682f      	ldr	r7, [r5, #0]
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	d032      	beq.n	8003cc0 <__sflush_r+0x98>
 8003c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	075a      	lsls	r2, r3, #29
 8003c60:	d505      	bpl.n	8003c6e <__sflush_r+0x46>
 8003c62:	6863      	ldr	r3, [r4, #4]
 8003c64:	1ac0      	subs	r0, r0, r3
 8003c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c68:	b10b      	cbz	r3, 8003c6e <__sflush_r+0x46>
 8003c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c6c:	1ac0      	subs	r0, r0, r3
 8003c6e:	2300      	movs	r3, #0
 8003c70:	4602      	mov	r2, r0
 8003c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c74:	6a21      	ldr	r1, [r4, #32]
 8003c76:	4628      	mov	r0, r5
 8003c78:	47b0      	blx	r6
 8003c7a:	1c43      	adds	r3, r0, #1
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	d106      	bne.n	8003c8e <__sflush_r+0x66>
 8003c80:	6829      	ldr	r1, [r5, #0]
 8003c82:	291d      	cmp	r1, #29
 8003c84:	d82c      	bhi.n	8003ce0 <__sflush_r+0xb8>
 8003c86:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <__sflush_r+0x108>)
 8003c88:	40ca      	lsrs	r2, r1
 8003c8a:	07d6      	lsls	r6, r2, #31
 8003c8c:	d528      	bpl.n	8003ce0 <__sflush_r+0xb8>
 8003c8e:	2200      	movs	r2, #0
 8003c90:	6062      	str	r2, [r4, #4]
 8003c92:	04d9      	lsls	r1, r3, #19
 8003c94:	6922      	ldr	r2, [r4, #16]
 8003c96:	6022      	str	r2, [r4, #0]
 8003c98:	d504      	bpl.n	8003ca4 <__sflush_r+0x7c>
 8003c9a:	1c42      	adds	r2, r0, #1
 8003c9c:	d101      	bne.n	8003ca2 <__sflush_r+0x7a>
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	b903      	cbnz	r3, 8003ca4 <__sflush_r+0x7c>
 8003ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ca6:	602f      	str	r7, [r5, #0]
 8003ca8:	2900      	cmp	r1, #0
 8003caa:	d0ca      	beq.n	8003c42 <__sflush_r+0x1a>
 8003cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	d002      	beq.n	8003cba <__sflush_r+0x92>
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 f9b1 	bl	800401c <_free_r>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8003cbe:	e7c1      	b.n	8003c44 <__sflush_r+0x1c>
 8003cc0:	6a21      	ldr	r1, [r4, #32]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	47b0      	blx	r6
 8003cc8:	1c41      	adds	r1, r0, #1
 8003cca:	d1c7      	bne.n	8003c5c <__sflush_r+0x34>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0c4      	beq.n	8003c5c <__sflush_r+0x34>
 8003cd2:	2b1d      	cmp	r3, #29
 8003cd4:	d001      	beq.n	8003cda <__sflush_r+0xb2>
 8003cd6:	2b16      	cmp	r3, #22
 8003cd8:	d101      	bne.n	8003cde <__sflush_r+0xb6>
 8003cda:	602f      	str	r7, [r5, #0]
 8003cdc:	e7b1      	b.n	8003c42 <__sflush_r+0x1a>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	e7ad      	b.n	8003c44 <__sflush_r+0x1c>
 8003ce8:	690f      	ldr	r7, [r1, #16]
 8003cea:	2f00      	cmp	r7, #0
 8003cec:	d0a9      	beq.n	8003c42 <__sflush_r+0x1a>
 8003cee:	0793      	lsls	r3, r2, #30
 8003cf0:	680e      	ldr	r6, [r1, #0]
 8003cf2:	bf08      	it	eq
 8003cf4:	694b      	ldreq	r3, [r1, #20]
 8003cf6:	600f      	str	r7, [r1, #0]
 8003cf8:	bf18      	it	ne
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	eba6 0807 	sub.w	r8, r6, r7
 8003d00:	608b      	str	r3, [r1, #8]
 8003d02:	f1b8 0f00 	cmp.w	r8, #0
 8003d06:	dd9c      	ble.n	8003c42 <__sflush_r+0x1a>
 8003d08:	6a21      	ldr	r1, [r4, #32]
 8003d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d0c:	4643      	mov	r3, r8
 8003d0e:	463a      	mov	r2, r7
 8003d10:	4628      	mov	r0, r5
 8003d12:	47b0      	blx	r6
 8003d14:	2800      	cmp	r0, #0
 8003d16:	dc06      	bgt.n	8003d26 <__sflush_r+0xfe>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	e78e      	b.n	8003c44 <__sflush_r+0x1c>
 8003d26:	4407      	add	r7, r0
 8003d28:	eba8 0800 	sub.w	r8, r8, r0
 8003d2c:	e7e9      	b.n	8003d02 <__sflush_r+0xda>
 8003d2e:	bf00      	nop
 8003d30:	20400001 	.word	0x20400001

08003d34 <_fflush_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	690b      	ldr	r3, [r1, #16]
 8003d38:	4605      	mov	r5, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	b913      	cbnz	r3, 8003d44 <_fflush_r+0x10>
 8003d3e:	2500      	movs	r5, #0
 8003d40:	4628      	mov	r0, r5
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	b118      	cbz	r0, 8003d4e <_fflush_r+0x1a>
 8003d46:	6983      	ldr	r3, [r0, #24]
 8003d48:	b90b      	cbnz	r3, 8003d4e <_fflush_r+0x1a>
 8003d4a:	f000 f899 	bl	8003e80 <__sinit>
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <_fflush_r+0x6c>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	d11b      	bne.n	8003d8c <_fflush_r+0x58>
 8003d54:	686c      	ldr	r4, [r5, #4]
 8003d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ef      	beq.n	8003d3e <_fflush_r+0xa>
 8003d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d60:	07d0      	lsls	r0, r2, #31
 8003d62:	d404      	bmi.n	8003d6e <_fflush_r+0x3a>
 8003d64:	0599      	lsls	r1, r3, #22
 8003d66:	d402      	bmi.n	8003d6e <_fflush_r+0x3a>
 8003d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d6a:	f000 f94c 	bl	8004006 <__retarget_lock_acquire_recursive>
 8003d6e:	4628      	mov	r0, r5
 8003d70:	4621      	mov	r1, r4
 8003d72:	f7ff ff59 	bl	8003c28 <__sflush_r>
 8003d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d78:	07da      	lsls	r2, r3, #31
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	d4e0      	bmi.n	8003d40 <_fflush_r+0xc>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	059b      	lsls	r3, r3, #22
 8003d82:	d4dd      	bmi.n	8003d40 <_fflush_r+0xc>
 8003d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d86:	f000 f93f 	bl	8004008 <__retarget_lock_release_recursive>
 8003d8a:	e7d9      	b.n	8003d40 <_fflush_r+0xc>
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <_fflush_r+0x70>)
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	d101      	bne.n	8003d96 <_fflush_r+0x62>
 8003d92:	68ac      	ldr	r4, [r5, #8]
 8003d94:	e7df      	b.n	8003d56 <_fflush_r+0x22>
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <_fflush_r+0x74>)
 8003d98:	429c      	cmp	r4, r3
 8003d9a:	bf08      	it	eq
 8003d9c:	68ec      	ldreq	r4, [r5, #12]
 8003d9e:	e7da      	b.n	8003d56 <_fflush_r+0x22>
 8003da0:	08005068 	.word	0x08005068
 8003da4:	08005088 	.word	0x08005088
 8003da8:	08005048 	.word	0x08005048

08003dac <fflush>:
 8003dac:	4601      	mov	r1, r0
 8003dae:	b920      	cbnz	r0, 8003dba <fflush+0xe>
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <fflush+0x18>)
 8003db2:	4905      	ldr	r1, [pc, #20]	; (8003dc8 <fflush+0x1c>)
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f000 b8e1 	b.w	8003f7c <_fwalk_reent>
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <fflush+0x20>)
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	f7ff bfb9 	b.w	8003d34 <_fflush_r>
 8003dc2:	bf00      	nop
 8003dc4:	080050a8 	.word	0x080050a8
 8003dc8:	08003d35 	.word	0x08003d35
 8003dcc:	20000164 	.word	0x20000164

08003dd0 <std>:
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8003dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dde:	6083      	str	r3, [r0, #8]
 8003de0:	8181      	strh	r1, [r0, #12]
 8003de2:	6643      	str	r3, [r0, #100]	; 0x64
 8003de4:	81c2      	strh	r2, [r0, #14]
 8003de6:	6183      	str	r3, [r0, #24]
 8003de8:	4619      	mov	r1, r3
 8003dea:	2208      	movs	r2, #8
 8003dec:	305c      	adds	r0, #92	; 0x5c
 8003dee:	f000 f90c 	bl	800400a <memset>
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <std+0x38>)
 8003df4:	6263      	str	r3, [r4, #36]	; 0x24
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <std+0x3c>)
 8003df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <std+0x40>)
 8003dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <std+0x44>)
 8003e00:	6224      	str	r4, [r4, #32]
 8003e02:	6323      	str	r3, [r4, #48]	; 0x30
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	bf00      	nop
 8003e08:	08004439 	.word	0x08004439
 8003e0c:	0800445b 	.word	0x0800445b
 8003e10:	08004493 	.word	0x08004493
 8003e14:	080044b7 	.word	0x080044b7

08003e18 <_cleanup_r>:
 8003e18:	4901      	ldr	r1, [pc, #4]	; (8003e20 <_cleanup_r+0x8>)
 8003e1a:	f000 b8af 	b.w	8003f7c <_fwalk_reent>
 8003e1e:	bf00      	nop
 8003e20:	08003d35 	.word	0x08003d35

08003e24 <__sfmoreglue>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	1e4a      	subs	r2, r1, #1
 8003e28:	2568      	movs	r5, #104	; 0x68
 8003e2a:	4355      	muls	r5, r2
 8003e2c:	460e      	mov	r6, r1
 8003e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e32:	f000 f943 	bl	80040bc <_malloc_r>
 8003e36:	4604      	mov	r4, r0
 8003e38:	b140      	cbz	r0, 8003e4c <__sfmoreglue+0x28>
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8003e40:	300c      	adds	r0, #12
 8003e42:	60a0      	str	r0, [r4, #8]
 8003e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e48:	f000 f8df 	bl	800400a <memset>
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}

08003e50 <__sfp_lock_acquire>:
 8003e50:	4801      	ldr	r0, [pc, #4]	; (8003e58 <__sfp_lock_acquire+0x8>)
 8003e52:	f000 b8d8 	b.w	8004006 <__retarget_lock_acquire_recursive>
 8003e56:	bf00      	nop
 8003e58:	200002e8 	.word	0x200002e8

08003e5c <__sfp_lock_release>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	; (8003e64 <__sfp_lock_release+0x8>)
 8003e5e:	f000 b8d3 	b.w	8004008 <__retarget_lock_release_recursive>
 8003e62:	bf00      	nop
 8003e64:	200002e8 	.word	0x200002e8

08003e68 <__sinit_lock_acquire>:
 8003e68:	4801      	ldr	r0, [pc, #4]	; (8003e70 <__sinit_lock_acquire+0x8>)
 8003e6a:	f000 b8cc 	b.w	8004006 <__retarget_lock_acquire_recursive>
 8003e6e:	bf00      	nop
 8003e70:	200002e3 	.word	0x200002e3

08003e74 <__sinit_lock_release>:
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <__sinit_lock_release+0x8>)
 8003e76:	f000 b8c7 	b.w	8004008 <__retarget_lock_release_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	200002e3 	.word	0x200002e3

08003e80 <__sinit>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4604      	mov	r4, r0
 8003e84:	f7ff fff0 	bl	8003e68 <__sinit_lock_acquire>
 8003e88:	69a3      	ldr	r3, [r4, #24]
 8003e8a:	b11b      	cbz	r3, 8003e94 <__sinit+0x14>
 8003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e90:	f7ff bff0 	b.w	8003e74 <__sinit_lock_release>
 8003e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e98:	6523      	str	r3, [r4, #80]	; 0x50
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <__sinit+0x68>)
 8003e9c:	4a13      	ldr	r2, [pc, #76]	; (8003eec <__sinit+0x6c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ea2:	42a3      	cmp	r3, r4
 8003ea4:	bf04      	itt	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	61a3      	streq	r3, [r4, #24]
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 f820 	bl	8003ef0 <__sfp>
 8003eb0:	6060      	str	r0, [r4, #4]
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f000 f81c 	bl	8003ef0 <__sfp>
 8003eb8:	60a0      	str	r0, [r4, #8]
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f000 f818 	bl	8003ef0 <__sfp>
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	60e0      	str	r0, [r4, #12]
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	6860      	ldr	r0, [r4, #4]
 8003ec8:	f7ff ff82 	bl	8003dd0 <std>
 8003ecc:	68a0      	ldr	r0, [r4, #8]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	2109      	movs	r1, #9
 8003ed2:	f7ff ff7d 	bl	8003dd0 <std>
 8003ed6:	68e0      	ldr	r0, [r4, #12]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	2112      	movs	r1, #18
 8003edc:	f7ff ff78 	bl	8003dd0 <std>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	61a3      	str	r3, [r4, #24]
 8003ee4:	e7d2      	b.n	8003e8c <__sinit+0xc>
 8003ee6:	bf00      	nop
 8003ee8:	080050a8 	.word	0x080050a8
 8003eec:	08003e19 	.word	0x08003e19

08003ef0 <__sfp>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	4607      	mov	r7, r0
 8003ef4:	f7ff ffac 	bl	8003e50 <__sfp_lock_acquire>
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <__sfp+0x84>)
 8003efa:	681e      	ldr	r6, [r3, #0]
 8003efc:	69b3      	ldr	r3, [r6, #24]
 8003efe:	b913      	cbnz	r3, 8003f06 <__sfp+0x16>
 8003f00:	4630      	mov	r0, r6
 8003f02:	f7ff ffbd 	bl	8003e80 <__sinit>
 8003f06:	3648      	adds	r6, #72	; 0x48
 8003f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	d503      	bpl.n	8003f18 <__sfp+0x28>
 8003f10:	6833      	ldr	r3, [r6, #0]
 8003f12:	b30b      	cbz	r3, 8003f58 <__sfp+0x68>
 8003f14:	6836      	ldr	r6, [r6, #0]
 8003f16:	e7f7      	b.n	8003f08 <__sfp+0x18>
 8003f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f1c:	b9d5      	cbnz	r5, 8003f54 <__sfp+0x64>
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <__sfp+0x88>)
 8003f20:	60e3      	str	r3, [r4, #12]
 8003f22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f26:	6665      	str	r5, [r4, #100]	; 0x64
 8003f28:	f000 f86c 	bl	8004004 <__retarget_lock_init_recursive>
 8003f2c:	f7ff ff96 	bl	8003e5c <__sfp_lock_release>
 8003f30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f38:	6025      	str	r5, [r4, #0]
 8003f3a:	61a5      	str	r5, [r4, #24]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	4629      	mov	r1, r5
 8003f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f44:	f000 f861 	bl	800400a <memset>
 8003f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f50:	4620      	mov	r0, r4
 8003f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f54:	3468      	adds	r4, #104	; 0x68
 8003f56:	e7d9      	b.n	8003f0c <__sfp+0x1c>
 8003f58:	2104      	movs	r1, #4
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f7ff ff62 	bl	8003e24 <__sfmoreglue>
 8003f60:	4604      	mov	r4, r0
 8003f62:	6030      	str	r0, [r6, #0]
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d1d5      	bne.n	8003f14 <__sfp+0x24>
 8003f68:	f7ff ff78 	bl	8003e5c <__sfp_lock_release>
 8003f6c:	230c      	movs	r3, #12
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	e7ee      	b.n	8003f50 <__sfp+0x60>
 8003f72:	bf00      	nop
 8003f74:	080050a8 	.word	0x080050a8
 8003f78:	ffff0001 	.word	0xffff0001

08003f7c <_fwalk_reent>:
 8003f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f80:	4606      	mov	r6, r0
 8003f82:	4688      	mov	r8, r1
 8003f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f88:	2700      	movs	r7, #0
 8003f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f92:	d505      	bpl.n	8003fa0 <_fwalk_reent+0x24>
 8003f94:	6824      	ldr	r4, [r4, #0]
 8003f96:	2c00      	cmp	r4, #0
 8003f98:	d1f7      	bne.n	8003f8a <_fwalk_reent+0xe>
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fa0:	89ab      	ldrh	r3, [r5, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d907      	bls.n	8003fb6 <_fwalk_reent+0x3a>
 8003fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003faa:	3301      	adds	r3, #1
 8003fac:	d003      	beq.n	8003fb6 <_fwalk_reent+0x3a>
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	47c0      	blx	r8
 8003fb4:	4307      	orrs	r7, r0
 8003fb6:	3568      	adds	r5, #104	; 0x68
 8003fb8:	e7e9      	b.n	8003f8e <_fwalk_reent+0x12>
	...

08003fbc <__libc_init_array>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	4d0d      	ldr	r5, [pc, #52]	; (8003ff4 <__libc_init_array+0x38>)
 8003fc0:	4c0d      	ldr	r4, [pc, #52]	; (8003ff8 <__libc_init_array+0x3c>)
 8003fc2:	1b64      	subs	r4, r4, r5
 8003fc4:	10a4      	asrs	r4, r4, #2
 8003fc6:	2600      	movs	r6, #0
 8003fc8:	42a6      	cmp	r6, r4
 8003fca:	d109      	bne.n	8003fe0 <__libc_init_array+0x24>
 8003fcc:	4d0b      	ldr	r5, [pc, #44]	; (8003ffc <__libc_init_array+0x40>)
 8003fce:	4c0c      	ldr	r4, [pc, #48]	; (8004000 <__libc_init_array+0x44>)
 8003fd0:	f000 ffa4 	bl	8004f1c <_init>
 8003fd4:	1b64      	subs	r4, r4, r5
 8003fd6:	10a4      	asrs	r4, r4, #2
 8003fd8:	2600      	movs	r6, #0
 8003fda:	42a6      	cmp	r6, r4
 8003fdc:	d105      	bne.n	8003fea <__libc_init_array+0x2e>
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe4:	4798      	blx	r3
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7ee      	b.n	8003fc8 <__libc_init_array+0xc>
 8003fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fee:	4798      	blx	r3
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	e7f2      	b.n	8003fda <__libc_init_array+0x1e>
 8003ff4:	080051e0 	.word	0x080051e0
 8003ff8:	080051e0 	.word	0x080051e0
 8003ffc:	080051e0 	.word	0x080051e0
 8004000:	080051e4 	.word	0x080051e4

08004004 <__retarget_lock_init_recursive>:
 8004004:	4770      	bx	lr

08004006 <__retarget_lock_acquire_recursive>:
 8004006:	4770      	bx	lr

08004008 <__retarget_lock_release_recursive>:
 8004008:	4770      	bx	lr

0800400a <memset>:
 800400a:	4402      	add	r2, r0
 800400c:	4603      	mov	r3, r0
 800400e:	4293      	cmp	r3, r2
 8004010:	d100      	bne.n	8004014 <memset+0xa>
 8004012:	4770      	bx	lr
 8004014:	f803 1b01 	strb.w	r1, [r3], #1
 8004018:	e7f9      	b.n	800400e <memset+0x4>
	...

0800401c <_free_r>:
 800401c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800401e:	2900      	cmp	r1, #0
 8004020:	d048      	beq.n	80040b4 <_free_r+0x98>
 8004022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004026:	9001      	str	r0, [sp, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f1a1 0404 	sub.w	r4, r1, #4
 800402e:	bfb8      	it	lt
 8004030:	18e4      	addlt	r4, r4, r3
 8004032:	f000 fc45 	bl	80048c0 <__malloc_lock>
 8004036:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <_free_r+0x9c>)
 8004038:	9801      	ldr	r0, [sp, #4]
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	4615      	mov	r5, r2
 800403e:	b933      	cbnz	r3, 800404e <_free_r+0x32>
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6014      	str	r4, [r2, #0]
 8004044:	b003      	add	sp, #12
 8004046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800404a:	f000 bc3f 	b.w	80048cc <__malloc_unlock>
 800404e:	42a3      	cmp	r3, r4
 8004050:	d90b      	bls.n	800406a <_free_r+0x4e>
 8004052:	6821      	ldr	r1, [r4, #0]
 8004054:	1862      	adds	r2, r4, r1
 8004056:	4293      	cmp	r3, r2
 8004058:	bf04      	itt	eq
 800405a:	681a      	ldreq	r2, [r3, #0]
 800405c:	685b      	ldreq	r3, [r3, #4]
 800405e:	6063      	str	r3, [r4, #4]
 8004060:	bf04      	itt	eq
 8004062:	1852      	addeq	r2, r2, r1
 8004064:	6022      	streq	r2, [r4, #0]
 8004066:	602c      	str	r4, [r5, #0]
 8004068:	e7ec      	b.n	8004044 <_free_r+0x28>
 800406a:	461a      	mov	r2, r3
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b10b      	cbz	r3, 8004074 <_free_r+0x58>
 8004070:	42a3      	cmp	r3, r4
 8004072:	d9fa      	bls.n	800406a <_free_r+0x4e>
 8004074:	6811      	ldr	r1, [r2, #0]
 8004076:	1855      	adds	r5, r2, r1
 8004078:	42a5      	cmp	r5, r4
 800407a:	d10b      	bne.n	8004094 <_free_r+0x78>
 800407c:	6824      	ldr	r4, [r4, #0]
 800407e:	4421      	add	r1, r4
 8004080:	1854      	adds	r4, r2, r1
 8004082:	42a3      	cmp	r3, r4
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	d1dd      	bne.n	8004044 <_free_r+0x28>
 8004088:	681c      	ldr	r4, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	6053      	str	r3, [r2, #4]
 800408e:	4421      	add	r1, r4
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	e7d7      	b.n	8004044 <_free_r+0x28>
 8004094:	d902      	bls.n	800409c <_free_r+0x80>
 8004096:	230c      	movs	r3, #12
 8004098:	6003      	str	r3, [r0, #0]
 800409a:	e7d3      	b.n	8004044 <_free_r+0x28>
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	1961      	adds	r1, r4, r5
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf04      	itt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	6063      	str	r3, [r4, #4]
 80040aa:	bf04      	itt	eq
 80040ac:	1949      	addeq	r1, r1, r5
 80040ae:	6021      	streq	r1, [r4, #0]
 80040b0:	6054      	str	r4, [r2, #4]
 80040b2:	e7c7      	b.n	8004044 <_free_r+0x28>
 80040b4:	b003      	add	sp, #12
 80040b6:	bd30      	pop	{r4, r5, pc}
 80040b8:	200001f8 	.word	0x200001f8

080040bc <_malloc_r>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	1ccd      	adds	r5, r1, #3
 80040c0:	f025 0503 	bic.w	r5, r5, #3
 80040c4:	3508      	adds	r5, #8
 80040c6:	2d0c      	cmp	r5, #12
 80040c8:	bf38      	it	cc
 80040ca:	250c      	movcc	r5, #12
 80040cc:	2d00      	cmp	r5, #0
 80040ce:	4606      	mov	r6, r0
 80040d0:	db01      	blt.n	80040d6 <_malloc_r+0x1a>
 80040d2:	42a9      	cmp	r1, r5
 80040d4:	d903      	bls.n	80040de <_malloc_r+0x22>
 80040d6:	230c      	movs	r3, #12
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	2000      	movs	r0, #0
 80040dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040de:	f000 fbef 	bl	80048c0 <__malloc_lock>
 80040e2:	4921      	ldr	r1, [pc, #132]	; (8004168 <_malloc_r+0xac>)
 80040e4:	680a      	ldr	r2, [r1, #0]
 80040e6:	4614      	mov	r4, r2
 80040e8:	b99c      	cbnz	r4, 8004112 <_malloc_r+0x56>
 80040ea:	4f20      	ldr	r7, [pc, #128]	; (800416c <_malloc_r+0xb0>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	b923      	cbnz	r3, 80040fa <_malloc_r+0x3e>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4630      	mov	r0, r6
 80040f4:	f000 f8ca 	bl	800428c <_sbrk_r>
 80040f8:	6038      	str	r0, [r7, #0]
 80040fa:	4629      	mov	r1, r5
 80040fc:	4630      	mov	r0, r6
 80040fe:	f000 f8c5 	bl	800428c <_sbrk_r>
 8004102:	1c43      	adds	r3, r0, #1
 8004104:	d123      	bne.n	800414e <_malloc_r+0x92>
 8004106:	230c      	movs	r3, #12
 8004108:	6033      	str	r3, [r6, #0]
 800410a:	4630      	mov	r0, r6
 800410c:	f000 fbde 	bl	80048cc <__malloc_unlock>
 8004110:	e7e3      	b.n	80040da <_malloc_r+0x1e>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	1b5b      	subs	r3, r3, r5
 8004116:	d417      	bmi.n	8004148 <_malloc_r+0x8c>
 8004118:	2b0b      	cmp	r3, #11
 800411a:	d903      	bls.n	8004124 <_malloc_r+0x68>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	441c      	add	r4, r3
 8004120:	6025      	str	r5, [r4, #0]
 8004122:	e004      	b.n	800412e <_malloc_r+0x72>
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	42a2      	cmp	r2, r4
 8004128:	bf0c      	ite	eq
 800412a:	600b      	streq	r3, [r1, #0]
 800412c:	6053      	strne	r3, [r2, #4]
 800412e:	4630      	mov	r0, r6
 8004130:	f000 fbcc 	bl	80048cc <__malloc_unlock>
 8004134:	f104 000b 	add.w	r0, r4, #11
 8004138:	1d23      	adds	r3, r4, #4
 800413a:	f020 0007 	bic.w	r0, r0, #7
 800413e:	1ac2      	subs	r2, r0, r3
 8004140:	d0cc      	beq.n	80040dc <_malloc_r+0x20>
 8004142:	1a1b      	subs	r3, r3, r0
 8004144:	50a3      	str	r3, [r4, r2]
 8004146:	e7c9      	b.n	80040dc <_malloc_r+0x20>
 8004148:	4622      	mov	r2, r4
 800414a:	6864      	ldr	r4, [r4, #4]
 800414c:	e7cc      	b.n	80040e8 <_malloc_r+0x2c>
 800414e:	1cc4      	adds	r4, r0, #3
 8004150:	f024 0403 	bic.w	r4, r4, #3
 8004154:	42a0      	cmp	r0, r4
 8004156:	d0e3      	beq.n	8004120 <_malloc_r+0x64>
 8004158:	1a21      	subs	r1, r4, r0
 800415a:	4630      	mov	r0, r6
 800415c:	f000 f896 	bl	800428c <_sbrk_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d1dd      	bne.n	8004120 <_malloc_r+0x64>
 8004164:	e7cf      	b.n	8004106 <_malloc_r+0x4a>
 8004166:	bf00      	nop
 8004168:	200001f8 	.word	0x200001f8
 800416c:	200001fc 	.word	0x200001fc

08004170 <iprintf>:
 8004170:	b40f      	push	{r0, r1, r2, r3}
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <iprintf+0x2c>)
 8004174:	b513      	push	{r0, r1, r4, lr}
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	b124      	cbz	r4, 8004184 <iprintf+0x14>
 800417a:	69a3      	ldr	r3, [r4, #24]
 800417c:	b913      	cbnz	r3, 8004184 <iprintf+0x14>
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff fe7e 	bl	8003e80 <__sinit>
 8004184:	ab05      	add	r3, sp, #20
 8004186:	9a04      	ldr	r2, [sp, #16]
 8004188:	68a1      	ldr	r1, [r4, #8]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	4620      	mov	r0, r4
 800418e:	f000 fbcd 	bl	800492c <_vfiprintf_r>
 8004192:	b002      	add	sp, #8
 8004194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004198:	b004      	add	sp, #16
 800419a:	4770      	bx	lr
 800419c:	20000164 	.word	0x20000164

080041a0 <_puts_r>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	460e      	mov	r6, r1
 80041a4:	4605      	mov	r5, r0
 80041a6:	b118      	cbz	r0, 80041b0 <_puts_r+0x10>
 80041a8:	6983      	ldr	r3, [r0, #24]
 80041aa:	b90b      	cbnz	r3, 80041b0 <_puts_r+0x10>
 80041ac:	f7ff fe68 	bl	8003e80 <__sinit>
 80041b0:	69ab      	ldr	r3, [r5, #24]
 80041b2:	68ac      	ldr	r4, [r5, #8]
 80041b4:	b913      	cbnz	r3, 80041bc <_puts_r+0x1c>
 80041b6:	4628      	mov	r0, r5
 80041b8:	f7ff fe62 	bl	8003e80 <__sinit>
 80041bc:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <_puts_r+0xd0>)
 80041be:	429c      	cmp	r4, r3
 80041c0:	d120      	bne.n	8004204 <_puts_r+0x64>
 80041c2:	686c      	ldr	r4, [r5, #4]
 80041c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041c6:	07db      	lsls	r3, r3, #31
 80041c8:	d405      	bmi.n	80041d6 <_puts_r+0x36>
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	0598      	lsls	r0, r3, #22
 80041ce:	d402      	bmi.n	80041d6 <_puts_r+0x36>
 80041d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041d2:	f7ff ff18 	bl	8004006 <__retarget_lock_acquire_recursive>
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	0719      	lsls	r1, r3, #28
 80041da:	d51d      	bpl.n	8004218 <_puts_r+0x78>
 80041dc:	6923      	ldr	r3, [r4, #16]
 80041de:	b1db      	cbz	r3, 8004218 <_puts_r+0x78>
 80041e0:	3e01      	subs	r6, #1
 80041e2:	68a3      	ldr	r3, [r4, #8]
 80041e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60a3      	str	r3, [r4, #8]
 80041ec:	bb39      	cbnz	r1, 800423e <_puts_r+0x9e>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da38      	bge.n	8004264 <_puts_r+0xc4>
 80041f2:	4622      	mov	r2, r4
 80041f4:	210a      	movs	r1, #10
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 fa02 	bl	8004600 <__swbuf_r>
 80041fc:	3001      	adds	r0, #1
 80041fe:	d011      	beq.n	8004224 <_puts_r+0x84>
 8004200:	250a      	movs	r5, #10
 8004202:	e011      	b.n	8004228 <_puts_r+0x88>
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <_puts_r+0xd4>)
 8004206:	429c      	cmp	r4, r3
 8004208:	d101      	bne.n	800420e <_puts_r+0x6e>
 800420a:	68ac      	ldr	r4, [r5, #8]
 800420c:	e7da      	b.n	80041c4 <_puts_r+0x24>
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <_puts_r+0xd8>)
 8004210:	429c      	cmp	r4, r3
 8004212:	bf08      	it	eq
 8004214:	68ec      	ldreq	r4, [r5, #12]
 8004216:	e7d5      	b.n	80041c4 <_puts_r+0x24>
 8004218:	4621      	mov	r1, r4
 800421a:	4628      	mov	r0, r5
 800421c:	f000 fa54 	bl	80046c8 <__swsetup_r>
 8004220:	2800      	cmp	r0, #0
 8004222:	d0dd      	beq.n	80041e0 <_puts_r+0x40>
 8004224:	f04f 35ff 	mov.w	r5, #4294967295
 8004228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800422a:	07da      	lsls	r2, r3, #31
 800422c:	d405      	bmi.n	800423a <_puts_r+0x9a>
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	059b      	lsls	r3, r3, #22
 8004232:	d402      	bmi.n	800423a <_puts_r+0x9a>
 8004234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004236:	f7ff fee7 	bl	8004008 <__retarget_lock_release_recursive>
 800423a:	4628      	mov	r0, r5
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	2b00      	cmp	r3, #0
 8004240:	da04      	bge.n	800424c <_puts_r+0xac>
 8004242:	69a2      	ldr	r2, [r4, #24]
 8004244:	429a      	cmp	r2, r3
 8004246:	dc06      	bgt.n	8004256 <_puts_r+0xb6>
 8004248:	290a      	cmp	r1, #10
 800424a:	d004      	beq.n	8004256 <_puts_r+0xb6>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	6022      	str	r2, [r4, #0]
 8004252:	7019      	strb	r1, [r3, #0]
 8004254:	e7c5      	b.n	80041e2 <_puts_r+0x42>
 8004256:	4622      	mov	r2, r4
 8004258:	4628      	mov	r0, r5
 800425a:	f000 f9d1 	bl	8004600 <__swbuf_r>
 800425e:	3001      	adds	r0, #1
 8004260:	d1bf      	bne.n	80041e2 <_puts_r+0x42>
 8004262:	e7df      	b.n	8004224 <_puts_r+0x84>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	250a      	movs	r5, #10
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	6022      	str	r2, [r4, #0]
 800426c:	701d      	strb	r5, [r3, #0]
 800426e:	e7db      	b.n	8004228 <_puts_r+0x88>
 8004270:	08005068 	.word	0x08005068
 8004274:	08005088 	.word	0x08005088
 8004278:	08005048 	.word	0x08005048

0800427c <puts>:
 800427c:	4b02      	ldr	r3, [pc, #8]	; (8004288 <puts+0xc>)
 800427e:	4601      	mov	r1, r0
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	f7ff bf8d 	b.w	80041a0 <_puts_r>
 8004286:	bf00      	nop
 8004288:	20000164 	.word	0x20000164

0800428c <_sbrk_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d06      	ldr	r5, [pc, #24]	; (80042a8 <_sbrk_r+0x1c>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fc fb9e 	bl	80009d8 <_sbrk>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_sbrk_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_sbrk_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	200002ec 	.word	0x200002ec

080042ac <setvbuf>:
 80042ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042b0:	461d      	mov	r5, r3
 80042b2:	4b5d      	ldr	r3, [pc, #372]	; (8004428 <setvbuf+0x17c>)
 80042b4:	681f      	ldr	r7, [r3, #0]
 80042b6:	4604      	mov	r4, r0
 80042b8:	460e      	mov	r6, r1
 80042ba:	4690      	mov	r8, r2
 80042bc:	b127      	cbz	r7, 80042c8 <setvbuf+0x1c>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	b913      	cbnz	r3, 80042c8 <setvbuf+0x1c>
 80042c2:	4638      	mov	r0, r7
 80042c4:	f7ff fddc 	bl	8003e80 <__sinit>
 80042c8:	4b58      	ldr	r3, [pc, #352]	; (800442c <setvbuf+0x180>)
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d167      	bne.n	800439e <setvbuf+0xf2>
 80042ce:	687c      	ldr	r4, [r7, #4]
 80042d0:	f1b8 0f02 	cmp.w	r8, #2
 80042d4:	d006      	beq.n	80042e4 <setvbuf+0x38>
 80042d6:	f1b8 0f01 	cmp.w	r8, #1
 80042da:	f200 809f 	bhi.w	800441c <setvbuf+0x170>
 80042de:	2d00      	cmp	r5, #0
 80042e0:	f2c0 809c 	blt.w	800441c <setvbuf+0x170>
 80042e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042e6:	07db      	lsls	r3, r3, #31
 80042e8:	d405      	bmi.n	80042f6 <setvbuf+0x4a>
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	0598      	lsls	r0, r3, #22
 80042ee:	d402      	bmi.n	80042f6 <setvbuf+0x4a>
 80042f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f2:	f7ff fe88 	bl	8004006 <__retarget_lock_acquire_recursive>
 80042f6:	4621      	mov	r1, r4
 80042f8:	4638      	mov	r0, r7
 80042fa:	f7ff fd1b 	bl	8003d34 <_fflush_r>
 80042fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004300:	b141      	cbz	r1, 8004314 <setvbuf+0x68>
 8004302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004306:	4299      	cmp	r1, r3
 8004308:	d002      	beq.n	8004310 <setvbuf+0x64>
 800430a:	4638      	mov	r0, r7
 800430c:	f7ff fe86 	bl	800401c <_free_r>
 8004310:	2300      	movs	r3, #0
 8004312:	6363      	str	r3, [r4, #52]	; 0x34
 8004314:	2300      	movs	r3, #0
 8004316:	61a3      	str	r3, [r4, #24]
 8004318:	6063      	str	r3, [r4, #4]
 800431a:	89a3      	ldrh	r3, [r4, #12]
 800431c:	0619      	lsls	r1, r3, #24
 800431e:	d503      	bpl.n	8004328 <setvbuf+0x7c>
 8004320:	6921      	ldr	r1, [r4, #16]
 8004322:	4638      	mov	r0, r7
 8004324:	f7ff fe7a 	bl	800401c <_free_r>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	f1b8 0f02 	cmp.w	r8, #2
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	d06c      	beq.n	8004414 <setvbuf+0x168>
 800433a:	ab01      	add	r3, sp, #4
 800433c:	466a      	mov	r2, sp
 800433e:	4621      	mov	r1, r4
 8004340:	4638      	mov	r0, r7
 8004342:	f000 fa51 	bl	80047e8 <__swhatbuf_r>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	4318      	orrs	r0, r3
 800434a:	81a0      	strh	r0, [r4, #12]
 800434c:	2d00      	cmp	r5, #0
 800434e:	d130      	bne.n	80043b2 <setvbuf+0x106>
 8004350:	9d00      	ldr	r5, [sp, #0]
 8004352:	4628      	mov	r0, r5
 8004354:	f000 faac 	bl	80048b0 <malloc>
 8004358:	4606      	mov	r6, r0
 800435a:	2800      	cmp	r0, #0
 800435c:	d155      	bne.n	800440a <setvbuf+0x15e>
 800435e:	f8dd 9000 	ldr.w	r9, [sp]
 8004362:	45a9      	cmp	r9, r5
 8004364:	d14a      	bne.n	80043fc <setvbuf+0x150>
 8004366:	f04f 35ff 	mov.w	r5, #4294967295
 800436a:	2200      	movs	r2, #0
 800436c:	60a2      	str	r2, [r4, #8]
 800436e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004372:	6022      	str	r2, [r4, #0]
 8004374:	6122      	str	r2, [r4, #16]
 8004376:	2201      	movs	r2, #1
 8004378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437c:	6162      	str	r2, [r4, #20]
 800437e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004380:	f043 0302 	orr.w	r3, r3, #2
 8004384:	07d2      	lsls	r2, r2, #31
 8004386:	81a3      	strh	r3, [r4, #12]
 8004388:	d405      	bmi.n	8004396 <setvbuf+0xea>
 800438a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800438e:	d102      	bne.n	8004396 <setvbuf+0xea>
 8004390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004392:	f7ff fe39 	bl	8004008 <__retarget_lock_release_recursive>
 8004396:	4628      	mov	r0, r5
 8004398:	b003      	add	sp, #12
 800439a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <setvbuf+0x184>)
 80043a0:	429c      	cmp	r4, r3
 80043a2:	d101      	bne.n	80043a8 <setvbuf+0xfc>
 80043a4:	68bc      	ldr	r4, [r7, #8]
 80043a6:	e793      	b.n	80042d0 <setvbuf+0x24>
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <setvbuf+0x188>)
 80043aa:	429c      	cmp	r4, r3
 80043ac:	bf08      	it	eq
 80043ae:	68fc      	ldreq	r4, [r7, #12]
 80043b0:	e78e      	b.n	80042d0 <setvbuf+0x24>
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	d0cd      	beq.n	8004352 <setvbuf+0xa6>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	b913      	cbnz	r3, 80043c0 <setvbuf+0x114>
 80043ba:	4638      	mov	r0, r7
 80043bc:	f7ff fd60 	bl	8003e80 <__sinit>
 80043c0:	f1b8 0f01 	cmp.w	r8, #1
 80043c4:	bf08      	it	eq
 80043c6:	89a3      	ldrheq	r3, [r4, #12]
 80043c8:	6026      	str	r6, [r4, #0]
 80043ca:	bf04      	itt	eq
 80043cc:	f043 0301 	orreq.w	r3, r3, #1
 80043d0:	81a3      	strheq	r3, [r4, #12]
 80043d2:	89a2      	ldrh	r2, [r4, #12]
 80043d4:	f012 0308 	ands.w	r3, r2, #8
 80043d8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80043dc:	d01c      	beq.n	8004418 <setvbuf+0x16c>
 80043de:	07d3      	lsls	r3, r2, #31
 80043e0:	bf41      	itttt	mi
 80043e2:	2300      	movmi	r3, #0
 80043e4:	426d      	negmi	r5, r5
 80043e6:	60a3      	strmi	r3, [r4, #8]
 80043e8:	61a5      	strmi	r5, [r4, #24]
 80043ea:	bf58      	it	pl
 80043ec:	60a5      	strpl	r5, [r4, #8]
 80043ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80043f0:	f015 0501 	ands.w	r5, r5, #1
 80043f4:	d115      	bne.n	8004422 <setvbuf+0x176>
 80043f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80043fa:	e7c8      	b.n	800438e <setvbuf+0xe2>
 80043fc:	4648      	mov	r0, r9
 80043fe:	f000 fa57 	bl	80048b0 <malloc>
 8004402:	4606      	mov	r6, r0
 8004404:	2800      	cmp	r0, #0
 8004406:	d0ae      	beq.n	8004366 <setvbuf+0xba>
 8004408:	464d      	mov	r5, r9
 800440a:	89a3      	ldrh	r3, [r4, #12]
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	e7d0      	b.n	80043b6 <setvbuf+0x10a>
 8004414:	2500      	movs	r5, #0
 8004416:	e7a8      	b.n	800436a <setvbuf+0xbe>
 8004418:	60a3      	str	r3, [r4, #8]
 800441a:	e7e8      	b.n	80043ee <setvbuf+0x142>
 800441c:	f04f 35ff 	mov.w	r5, #4294967295
 8004420:	e7b9      	b.n	8004396 <setvbuf+0xea>
 8004422:	2500      	movs	r5, #0
 8004424:	e7b7      	b.n	8004396 <setvbuf+0xea>
 8004426:	bf00      	nop
 8004428:	20000164 	.word	0x20000164
 800442c:	08005068 	.word	0x08005068
 8004430:	08005088 	.word	0x08005088
 8004434:	08005048 	.word	0x08005048

08004438 <__sread>:
 8004438:	b510      	push	{r4, lr}
 800443a:	460c      	mov	r4, r1
 800443c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004440:	f000 fd38 	bl	8004eb4 <_read_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	bfab      	itete	ge
 8004448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800444a:	89a3      	ldrhlt	r3, [r4, #12]
 800444c:	181b      	addge	r3, r3, r0
 800444e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004452:	bfac      	ite	ge
 8004454:	6563      	strge	r3, [r4, #84]	; 0x54
 8004456:	81a3      	strhlt	r3, [r4, #12]
 8004458:	bd10      	pop	{r4, pc}

0800445a <__swrite>:
 800445a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445e:	461f      	mov	r7, r3
 8004460:	898b      	ldrh	r3, [r1, #12]
 8004462:	05db      	lsls	r3, r3, #23
 8004464:	4605      	mov	r5, r0
 8004466:	460c      	mov	r4, r1
 8004468:	4616      	mov	r6, r2
 800446a:	d505      	bpl.n	8004478 <__swrite+0x1e>
 800446c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004470:	2302      	movs	r3, #2
 8004472:	2200      	movs	r2, #0
 8004474:	f000 f9a6 	bl	80047c4 <_lseek_r>
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800447e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004482:	81a3      	strh	r3, [r4, #12]
 8004484:	4632      	mov	r2, r6
 8004486:	463b      	mov	r3, r7
 8004488:	4628      	mov	r0, r5
 800448a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800448e:	f000 b909 	b.w	80046a4 <_write_r>

08004492 <__sseek>:
 8004492:	b510      	push	{r4, lr}
 8004494:	460c      	mov	r4, r1
 8004496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449a:	f000 f993 	bl	80047c4 <_lseek_r>
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	bf15      	itete	ne
 80044a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80044a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044ae:	81a3      	strheq	r3, [r4, #12]
 80044b0:	bf18      	it	ne
 80044b2:	81a3      	strhne	r3, [r4, #12]
 80044b4:	bd10      	pop	{r4, pc}

080044b6 <__sclose>:
 80044b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ba:	f000 b973 	b.w	80047a4 <_close_r>

080044be <strncmp>:
 80044be:	b510      	push	{r4, lr}
 80044c0:	b16a      	cbz	r2, 80044de <strncmp+0x20>
 80044c2:	3901      	subs	r1, #1
 80044c4:	1884      	adds	r4, r0, r2
 80044c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80044ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d103      	bne.n	80044da <strncmp+0x1c>
 80044d2:	42a0      	cmp	r0, r4
 80044d4:	d001      	beq.n	80044da <strncmp+0x1c>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f5      	bne.n	80044c6 <strncmp+0x8>
 80044da:	1a98      	subs	r0, r3, r2
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	4610      	mov	r0, r2
 80044e0:	e7fc      	b.n	80044dc <strncmp+0x1e>
	...

080044e4 <_strtol_l.isra.0>:
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ea:	d001      	beq.n	80044f0 <_strtol_l.isra.0+0xc>
 80044ec:	2b24      	cmp	r3, #36	; 0x24
 80044ee:	d906      	bls.n	80044fe <_strtol_l.isra.0+0x1a>
 80044f0:	f7ff fb94 	bl	8003c1c <__errno>
 80044f4:	2316      	movs	r3, #22
 80044f6:	6003      	str	r3, [r0, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fe:	4f3a      	ldr	r7, [pc, #232]	; (80045e8 <_strtol_l.isra.0+0x104>)
 8004500:	468e      	mov	lr, r1
 8004502:	4676      	mov	r6, lr
 8004504:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004508:	5de5      	ldrb	r5, [r4, r7]
 800450a:	f015 0508 	ands.w	r5, r5, #8
 800450e:	d1f8      	bne.n	8004502 <_strtol_l.isra.0+0x1e>
 8004510:	2c2d      	cmp	r4, #45	; 0x2d
 8004512:	d134      	bne.n	800457e <_strtol_l.isra.0+0x9a>
 8004514:	f89e 4000 	ldrb.w	r4, [lr]
 8004518:	f04f 0801 	mov.w	r8, #1
 800451c:	f106 0e02 	add.w	lr, r6, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d05c      	beq.n	80045de <_strtol_l.isra.0+0xfa>
 8004524:	2b10      	cmp	r3, #16
 8004526:	d10c      	bne.n	8004542 <_strtol_l.isra.0+0x5e>
 8004528:	2c30      	cmp	r4, #48	; 0x30
 800452a:	d10a      	bne.n	8004542 <_strtol_l.isra.0+0x5e>
 800452c:	f89e 4000 	ldrb.w	r4, [lr]
 8004530:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004534:	2c58      	cmp	r4, #88	; 0x58
 8004536:	d14d      	bne.n	80045d4 <_strtol_l.isra.0+0xf0>
 8004538:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800453c:	2310      	movs	r3, #16
 800453e:	f10e 0e02 	add.w	lr, lr, #2
 8004542:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004546:	f10c 3cff 	add.w	ip, ip, #4294967295
 800454a:	2600      	movs	r6, #0
 800454c:	fbbc f9f3 	udiv	r9, ip, r3
 8004550:	4635      	mov	r5, r6
 8004552:	fb03 ca19 	mls	sl, r3, r9, ip
 8004556:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800455a:	2f09      	cmp	r7, #9
 800455c:	d818      	bhi.n	8004590 <_strtol_l.isra.0+0xac>
 800455e:	463c      	mov	r4, r7
 8004560:	42a3      	cmp	r3, r4
 8004562:	dd24      	ble.n	80045ae <_strtol_l.isra.0+0xca>
 8004564:	2e00      	cmp	r6, #0
 8004566:	db1f      	blt.n	80045a8 <_strtol_l.isra.0+0xc4>
 8004568:	45a9      	cmp	r9, r5
 800456a:	d31d      	bcc.n	80045a8 <_strtol_l.isra.0+0xc4>
 800456c:	d101      	bne.n	8004572 <_strtol_l.isra.0+0x8e>
 800456e:	45a2      	cmp	sl, r4
 8004570:	db1a      	blt.n	80045a8 <_strtol_l.isra.0+0xc4>
 8004572:	fb05 4503 	mla	r5, r5, r3, r4
 8004576:	2601      	movs	r6, #1
 8004578:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800457c:	e7eb      	b.n	8004556 <_strtol_l.isra.0+0x72>
 800457e:	2c2b      	cmp	r4, #43	; 0x2b
 8004580:	bf08      	it	eq
 8004582:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004586:	46a8      	mov	r8, r5
 8004588:	bf08      	it	eq
 800458a:	f106 0e02 	addeq.w	lr, r6, #2
 800458e:	e7c7      	b.n	8004520 <_strtol_l.isra.0+0x3c>
 8004590:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004594:	2f19      	cmp	r7, #25
 8004596:	d801      	bhi.n	800459c <_strtol_l.isra.0+0xb8>
 8004598:	3c37      	subs	r4, #55	; 0x37
 800459a:	e7e1      	b.n	8004560 <_strtol_l.isra.0+0x7c>
 800459c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80045a0:	2f19      	cmp	r7, #25
 80045a2:	d804      	bhi.n	80045ae <_strtol_l.isra.0+0xca>
 80045a4:	3c57      	subs	r4, #87	; 0x57
 80045a6:	e7db      	b.n	8004560 <_strtol_l.isra.0+0x7c>
 80045a8:	f04f 36ff 	mov.w	r6, #4294967295
 80045ac:	e7e4      	b.n	8004578 <_strtol_l.isra.0+0x94>
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	da05      	bge.n	80045be <_strtol_l.isra.0+0xda>
 80045b2:	2322      	movs	r3, #34	; 0x22
 80045b4:	6003      	str	r3, [r0, #0]
 80045b6:	4665      	mov	r5, ip
 80045b8:	b942      	cbnz	r2, 80045cc <_strtol_l.isra.0+0xe8>
 80045ba:	4628      	mov	r0, r5
 80045bc:	e79d      	b.n	80044fa <_strtol_l.isra.0+0x16>
 80045be:	f1b8 0f00 	cmp.w	r8, #0
 80045c2:	d000      	beq.n	80045c6 <_strtol_l.isra.0+0xe2>
 80045c4:	426d      	negs	r5, r5
 80045c6:	2a00      	cmp	r2, #0
 80045c8:	d0f7      	beq.n	80045ba <_strtol_l.isra.0+0xd6>
 80045ca:	b10e      	cbz	r6, 80045d0 <_strtol_l.isra.0+0xec>
 80045cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80045d0:	6011      	str	r1, [r2, #0]
 80045d2:	e7f2      	b.n	80045ba <_strtol_l.isra.0+0xd6>
 80045d4:	2430      	movs	r4, #48	; 0x30
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1b3      	bne.n	8004542 <_strtol_l.isra.0+0x5e>
 80045da:	2308      	movs	r3, #8
 80045dc:	e7b1      	b.n	8004542 <_strtol_l.isra.0+0x5e>
 80045de:	2c30      	cmp	r4, #48	; 0x30
 80045e0:	d0a4      	beq.n	800452c <_strtol_l.isra.0+0x48>
 80045e2:	230a      	movs	r3, #10
 80045e4:	e7ad      	b.n	8004542 <_strtol_l.isra.0+0x5e>
 80045e6:	bf00      	nop
 80045e8:	080050ad 	.word	0x080050ad

080045ec <strtol>:
 80045ec:	4613      	mov	r3, r2
 80045ee:	460a      	mov	r2, r1
 80045f0:	4601      	mov	r1, r0
 80045f2:	4802      	ldr	r0, [pc, #8]	; (80045fc <strtol+0x10>)
 80045f4:	6800      	ldr	r0, [r0, #0]
 80045f6:	f7ff bf75 	b.w	80044e4 <_strtol_l.isra.0>
 80045fa:	bf00      	nop
 80045fc:	20000164 	.word	0x20000164

08004600 <__swbuf_r>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	460e      	mov	r6, r1
 8004604:	4614      	mov	r4, r2
 8004606:	4605      	mov	r5, r0
 8004608:	b118      	cbz	r0, 8004612 <__swbuf_r+0x12>
 800460a:	6983      	ldr	r3, [r0, #24]
 800460c:	b90b      	cbnz	r3, 8004612 <__swbuf_r+0x12>
 800460e:	f7ff fc37 	bl	8003e80 <__sinit>
 8004612:	4b21      	ldr	r3, [pc, #132]	; (8004698 <__swbuf_r+0x98>)
 8004614:	429c      	cmp	r4, r3
 8004616:	d12b      	bne.n	8004670 <__swbuf_r+0x70>
 8004618:	686c      	ldr	r4, [r5, #4]
 800461a:	69a3      	ldr	r3, [r4, #24]
 800461c:	60a3      	str	r3, [r4, #8]
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	071a      	lsls	r2, r3, #28
 8004622:	d52f      	bpl.n	8004684 <__swbuf_r+0x84>
 8004624:	6923      	ldr	r3, [r4, #16]
 8004626:	b36b      	cbz	r3, 8004684 <__swbuf_r+0x84>
 8004628:	6923      	ldr	r3, [r4, #16]
 800462a:	6820      	ldr	r0, [r4, #0]
 800462c:	1ac0      	subs	r0, r0, r3
 800462e:	6963      	ldr	r3, [r4, #20]
 8004630:	b2f6      	uxtb	r6, r6
 8004632:	4283      	cmp	r3, r0
 8004634:	4637      	mov	r7, r6
 8004636:	dc04      	bgt.n	8004642 <__swbuf_r+0x42>
 8004638:	4621      	mov	r1, r4
 800463a:	4628      	mov	r0, r5
 800463c:	f7ff fb7a 	bl	8003d34 <_fflush_r>
 8004640:	bb30      	cbnz	r0, 8004690 <__swbuf_r+0x90>
 8004642:	68a3      	ldr	r3, [r4, #8]
 8004644:	3b01      	subs	r3, #1
 8004646:	60a3      	str	r3, [r4, #8]
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	6022      	str	r2, [r4, #0]
 800464e:	701e      	strb	r6, [r3, #0]
 8004650:	6963      	ldr	r3, [r4, #20]
 8004652:	3001      	adds	r0, #1
 8004654:	4283      	cmp	r3, r0
 8004656:	d004      	beq.n	8004662 <__swbuf_r+0x62>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	07db      	lsls	r3, r3, #31
 800465c:	d506      	bpl.n	800466c <__swbuf_r+0x6c>
 800465e:	2e0a      	cmp	r6, #10
 8004660:	d104      	bne.n	800466c <__swbuf_r+0x6c>
 8004662:	4621      	mov	r1, r4
 8004664:	4628      	mov	r0, r5
 8004666:	f7ff fb65 	bl	8003d34 <_fflush_r>
 800466a:	b988      	cbnz	r0, 8004690 <__swbuf_r+0x90>
 800466c:	4638      	mov	r0, r7
 800466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <__swbuf_r+0x9c>)
 8004672:	429c      	cmp	r4, r3
 8004674:	d101      	bne.n	800467a <__swbuf_r+0x7a>
 8004676:	68ac      	ldr	r4, [r5, #8]
 8004678:	e7cf      	b.n	800461a <__swbuf_r+0x1a>
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <__swbuf_r+0xa0>)
 800467c:	429c      	cmp	r4, r3
 800467e:	bf08      	it	eq
 8004680:	68ec      	ldreq	r4, [r5, #12]
 8004682:	e7ca      	b.n	800461a <__swbuf_r+0x1a>
 8004684:	4621      	mov	r1, r4
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f81e 	bl	80046c8 <__swsetup_r>
 800468c:	2800      	cmp	r0, #0
 800468e:	d0cb      	beq.n	8004628 <__swbuf_r+0x28>
 8004690:	f04f 37ff 	mov.w	r7, #4294967295
 8004694:	e7ea      	b.n	800466c <__swbuf_r+0x6c>
 8004696:	bf00      	nop
 8004698:	08005068 	.word	0x08005068
 800469c:	08005088 	.word	0x08005088
 80046a0:	08005048 	.word	0x08005048

080046a4 <_write_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d07      	ldr	r5, [pc, #28]	; (80046c4 <_write_r+0x20>)
 80046a8:	4604      	mov	r4, r0
 80046aa:	4608      	mov	r0, r1
 80046ac:	4611      	mov	r1, r2
 80046ae:	2200      	movs	r2, #0
 80046b0:	602a      	str	r2, [r5, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f7fb ff04 	bl	80004c0 <_write>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_write_r+0x1e>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_write_r+0x1e>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	200002ec 	.word	0x200002ec

080046c8 <__swsetup_r>:
 80046c8:	4b32      	ldr	r3, [pc, #200]	; (8004794 <__swsetup_r+0xcc>)
 80046ca:	b570      	push	{r4, r5, r6, lr}
 80046cc:	681d      	ldr	r5, [r3, #0]
 80046ce:	4606      	mov	r6, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	b125      	cbz	r5, 80046de <__swsetup_r+0x16>
 80046d4:	69ab      	ldr	r3, [r5, #24]
 80046d6:	b913      	cbnz	r3, 80046de <__swsetup_r+0x16>
 80046d8:	4628      	mov	r0, r5
 80046da:	f7ff fbd1 	bl	8003e80 <__sinit>
 80046de:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <__swsetup_r+0xd0>)
 80046e0:	429c      	cmp	r4, r3
 80046e2:	d10f      	bne.n	8004704 <__swsetup_r+0x3c>
 80046e4:	686c      	ldr	r4, [r5, #4]
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046ec:	0719      	lsls	r1, r3, #28
 80046ee:	d42c      	bmi.n	800474a <__swsetup_r+0x82>
 80046f0:	06dd      	lsls	r5, r3, #27
 80046f2:	d411      	bmi.n	8004718 <__swsetup_r+0x50>
 80046f4:	2309      	movs	r3, #9
 80046f6:	6033      	str	r3, [r6, #0]
 80046f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046fc:	81a3      	strh	r3, [r4, #12]
 80046fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004702:	e03e      	b.n	8004782 <__swsetup_r+0xba>
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <__swsetup_r+0xd4>)
 8004706:	429c      	cmp	r4, r3
 8004708:	d101      	bne.n	800470e <__swsetup_r+0x46>
 800470a:	68ac      	ldr	r4, [r5, #8]
 800470c:	e7eb      	b.n	80046e6 <__swsetup_r+0x1e>
 800470e:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <__swsetup_r+0xd8>)
 8004710:	429c      	cmp	r4, r3
 8004712:	bf08      	it	eq
 8004714:	68ec      	ldreq	r4, [r5, #12]
 8004716:	e7e6      	b.n	80046e6 <__swsetup_r+0x1e>
 8004718:	0758      	lsls	r0, r3, #29
 800471a:	d512      	bpl.n	8004742 <__swsetup_r+0x7a>
 800471c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800471e:	b141      	cbz	r1, 8004732 <__swsetup_r+0x6a>
 8004720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004724:	4299      	cmp	r1, r3
 8004726:	d002      	beq.n	800472e <__swsetup_r+0x66>
 8004728:	4630      	mov	r0, r6
 800472a:	f7ff fc77 	bl	800401c <_free_r>
 800472e:	2300      	movs	r3, #0
 8004730:	6363      	str	r3, [r4, #52]	; 0x34
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004738:	81a3      	strh	r3, [r4, #12]
 800473a:	2300      	movs	r3, #0
 800473c:	6063      	str	r3, [r4, #4]
 800473e:	6923      	ldr	r3, [r4, #16]
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	f043 0308 	orr.w	r3, r3, #8
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	b94b      	cbnz	r3, 8004762 <__swsetup_r+0x9a>
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004758:	d003      	beq.n	8004762 <__swsetup_r+0x9a>
 800475a:	4621      	mov	r1, r4
 800475c:	4630      	mov	r0, r6
 800475e:	f000 f867 	bl	8004830 <__smakebuf_r>
 8004762:	89a0      	ldrh	r0, [r4, #12]
 8004764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004768:	f010 0301 	ands.w	r3, r0, #1
 800476c:	d00a      	beq.n	8004784 <__swsetup_r+0xbc>
 800476e:	2300      	movs	r3, #0
 8004770:	60a3      	str	r3, [r4, #8]
 8004772:	6963      	ldr	r3, [r4, #20]
 8004774:	425b      	negs	r3, r3
 8004776:	61a3      	str	r3, [r4, #24]
 8004778:	6923      	ldr	r3, [r4, #16]
 800477a:	b943      	cbnz	r3, 800478e <__swsetup_r+0xc6>
 800477c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004780:	d1ba      	bne.n	80046f8 <__swsetup_r+0x30>
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	0781      	lsls	r1, r0, #30
 8004786:	bf58      	it	pl
 8004788:	6963      	ldrpl	r3, [r4, #20]
 800478a:	60a3      	str	r3, [r4, #8]
 800478c:	e7f4      	b.n	8004778 <__swsetup_r+0xb0>
 800478e:	2000      	movs	r0, #0
 8004790:	e7f7      	b.n	8004782 <__swsetup_r+0xba>
 8004792:	bf00      	nop
 8004794:	20000164 	.word	0x20000164
 8004798:	08005068 	.word	0x08005068
 800479c:	08005088 	.word	0x08005088
 80047a0:	08005048 	.word	0x08005048

080047a4 <_close_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d06      	ldr	r5, [pc, #24]	; (80047c0 <_close_r+0x1c>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc f8dd 	bl	800096e <_close>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_close_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_close_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	200002ec 	.word	0x200002ec

080047c4 <_lseek_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	; (80047e4 <_lseek_r+0x20>)
 80047c8:	4604      	mov	r4, r0
 80047ca:	4608      	mov	r0, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	2200      	movs	r2, #0
 80047d0:	602a      	str	r2, [r5, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f7fc f8f2 	bl	80009bc <_lseek>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_lseek_r+0x1e>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_lseek_r+0x1e>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	200002ec 	.word	0x200002ec

080047e8 <__swhatbuf_r>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	460e      	mov	r6, r1
 80047ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f0:	2900      	cmp	r1, #0
 80047f2:	b096      	sub	sp, #88	; 0x58
 80047f4:	4614      	mov	r4, r2
 80047f6:	461d      	mov	r5, r3
 80047f8:	da07      	bge.n	800480a <__swhatbuf_r+0x22>
 80047fa:	2300      	movs	r3, #0
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	89b3      	ldrh	r3, [r6, #12]
 8004800:	061a      	lsls	r2, r3, #24
 8004802:	d410      	bmi.n	8004826 <__swhatbuf_r+0x3e>
 8004804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004808:	e00e      	b.n	8004828 <__swhatbuf_r+0x40>
 800480a:	466a      	mov	r2, sp
 800480c:	f000 fb64 	bl	8004ed8 <_fstat_r>
 8004810:	2800      	cmp	r0, #0
 8004812:	dbf2      	blt.n	80047fa <__swhatbuf_r+0x12>
 8004814:	9a01      	ldr	r2, [sp, #4]
 8004816:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800481a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800481e:	425a      	negs	r2, r3
 8004820:	415a      	adcs	r2, r3
 8004822:	602a      	str	r2, [r5, #0]
 8004824:	e7ee      	b.n	8004804 <__swhatbuf_r+0x1c>
 8004826:	2340      	movs	r3, #64	; 0x40
 8004828:	2000      	movs	r0, #0
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	b016      	add	sp, #88	; 0x58
 800482e:	bd70      	pop	{r4, r5, r6, pc}

08004830 <__smakebuf_r>:
 8004830:	898b      	ldrh	r3, [r1, #12]
 8004832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004834:	079d      	lsls	r5, r3, #30
 8004836:	4606      	mov	r6, r0
 8004838:	460c      	mov	r4, r1
 800483a:	d507      	bpl.n	800484c <__smakebuf_r+0x1c>
 800483c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	2301      	movs	r3, #1
 8004846:	6163      	str	r3, [r4, #20]
 8004848:	b002      	add	sp, #8
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	ab01      	add	r3, sp, #4
 800484e:	466a      	mov	r2, sp
 8004850:	f7ff ffca 	bl	80047e8 <__swhatbuf_r>
 8004854:	9900      	ldr	r1, [sp, #0]
 8004856:	4605      	mov	r5, r0
 8004858:	4630      	mov	r0, r6
 800485a:	f7ff fc2f 	bl	80040bc <_malloc_r>
 800485e:	b948      	cbnz	r0, 8004874 <__smakebuf_r+0x44>
 8004860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004864:	059a      	lsls	r2, r3, #22
 8004866:	d4ef      	bmi.n	8004848 <__smakebuf_r+0x18>
 8004868:	f023 0303 	bic.w	r3, r3, #3
 800486c:	f043 0302 	orr.w	r3, r3, #2
 8004870:	81a3      	strh	r3, [r4, #12]
 8004872:	e7e3      	b.n	800483c <__smakebuf_r+0xc>
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <__smakebuf_r+0x7c>)
 8004876:	62b3      	str	r3, [r6, #40]	; 0x28
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	6020      	str	r0, [r4, #0]
 800487c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	9b00      	ldr	r3, [sp, #0]
 8004884:	6163      	str	r3, [r4, #20]
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	6120      	str	r0, [r4, #16]
 800488a:	b15b      	cbz	r3, 80048a4 <__smakebuf_r+0x74>
 800488c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004890:	4630      	mov	r0, r6
 8004892:	f000 fb33 	bl	8004efc <_isatty_r>
 8004896:	b128      	cbz	r0, 80048a4 <__smakebuf_r+0x74>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f023 0303 	bic.w	r3, r3, #3
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	89a0      	ldrh	r0, [r4, #12]
 80048a6:	4305      	orrs	r5, r0
 80048a8:	81a5      	strh	r5, [r4, #12]
 80048aa:	e7cd      	b.n	8004848 <__smakebuf_r+0x18>
 80048ac:	08003e19 	.word	0x08003e19

080048b0 <malloc>:
 80048b0:	4b02      	ldr	r3, [pc, #8]	; (80048bc <malloc+0xc>)
 80048b2:	4601      	mov	r1, r0
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f7ff bc01 	b.w	80040bc <_malloc_r>
 80048ba:	bf00      	nop
 80048bc:	20000164 	.word	0x20000164

080048c0 <__malloc_lock>:
 80048c0:	4801      	ldr	r0, [pc, #4]	; (80048c8 <__malloc_lock+0x8>)
 80048c2:	f7ff bba0 	b.w	8004006 <__retarget_lock_acquire_recursive>
 80048c6:	bf00      	nop
 80048c8:	200002e4 	.word	0x200002e4

080048cc <__malloc_unlock>:
 80048cc:	4801      	ldr	r0, [pc, #4]	; (80048d4 <__malloc_unlock+0x8>)
 80048ce:	f7ff bb9b 	b.w	8004008 <__retarget_lock_release_recursive>
 80048d2:	bf00      	nop
 80048d4:	200002e4 	.word	0x200002e4

080048d8 <__sfputc_r>:
 80048d8:	6893      	ldr	r3, [r2, #8]
 80048da:	3b01      	subs	r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	b410      	push	{r4}
 80048e0:	6093      	str	r3, [r2, #8]
 80048e2:	da08      	bge.n	80048f6 <__sfputc_r+0x1e>
 80048e4:	6994      	ldr	r4, [r2, #24]
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	db01      	blt.n	80048ee <__sfputc_r+0x16>
 80048ea:	290a      	cmp	r1, #10
 80048ec:	d103      	bne.n	80048f6 <__sfputc_r+0x1e>
 80048ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048f2:	f7ff be85 	b.w	8004600 <__swbuf_r>
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	1c58      	adds	r0, r3, #1
 80048fa:	6010      	str	r0, [r2, #0]
 80048fc:	7019      	strb	r1, [r3, #0]
 80048fe:	4608      	mov	r0, r1
 8004900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004904:	4770      	bx	lr

08004906 <__sfputs_r>:
 8004906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004908:	4606      	mov	r6, r0
 800490a:	460f      	mov	r7, r1
 800490c:	4614      	mov	r4, r2
 800490e:	18d5      	adds	r5, r2, r3
 8004910:	42ac      	cmp	r4, r5
 8004912:	d101      	bne.n	8004918 <__sfputs_r+0x12>
 8004914:	2000      	movs	r0, #0
 8004916:	e007      	b.n	8004928 <__sfputs_r+0x22>
 8004918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491c:	463a      	mov	r2, r7
 800491e:	4630      	mov	r0, r6
 8004920:	f7ff ffda 	bl	80048d8 <__sfputc_r>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d1f3      	bne.n	8004910 <__sfputs_r+0xa>
 8004928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800492c <_vfiprintf_r>:
 800492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	460d      	mov	r5, r1
 8004932:	b09d      	sub	sp, #116	; 0x74
 8004934:	4614      	mov	r4, r2
 8004936:	4698      	mov	r8, r3
 8004938:	4606      	mov	r6, r0
 800493a:	b118      	cbz	r0, 8004944 <_vfiprintf_r+0x18>
 800493c:	6983      	ldr	r3, [r0, #24]
 800493e:	b90b      	cbnz	r3, 8004944 <_vfiprintf_r+0x18>
 8004940:	f7ff fa9e 	bl	8003e80 <__sinit>
 8004944:	4b89      	ldr	r3, [pc, #548]	; (8004b6c <_vfiprintf_r+0x240>)
 8004946:	429d      	cmp	r5, r3
 8004948:	d11b      	bne.n	8004982 <_vfiprintf_r+0x56>
 800494a:	6875      	ldr	r5, [r6, #4]
 800494c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800494e:	07d9      	lsls	r1, r3, #31
 8004950:	d405      	bmi.n	800495e <_vfiprintf_r+0x32>
 8004952:	89ab      	ldrh	r3, [r5, #12]
 8004954:	059a      	lsls	r2, r3, #22
 8004956:	d402      	bmi.n	800495e <_vfiprintf_r+0x32>
 8004958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800495a:	f7ff fb54 	bl	8004006 <__retarget_lock_acquire_recursive>
 800495e:	89ab      	ldrh	r3, [r5, #12]
 8004960:	071b      	lsls	r3, r3, #28
 8004962:	d501      	bpl.n	8004968 <_vfiprintf_r+0x3c>
 8004964:	692b      	ldr	r3, [r5, #16]
 8004966:	b9eb      	cbnz	r3, 80049a4 <_vfiprintf_r+0x78>
 8004968:	4629      	mov	r1, r5
 800496a:	4630      	mov	r0, r6
 800496c:	f7ff feac 	bl	80046c8 <__swsetup_r>
 8004970:	b1c0      	cbz	r0, 80049a4 <_vfiprintf_r+0x78>
 8004972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004974:	07dc      	lsls	r4, r3, #31
 8004976:	d50e      	bpl.n	8004996 <_vfiprintf_r+0x6a>
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	b01d      	add	sp, #116	; 0x74
 800497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004982:	4b7b      	ldr	r3, [pc, #492]	; (8004b70 <_vfiprintf_r+0x244>)
 8004984:	429d      	cmp	r5, r3
 8004986:	d101      	bne.n	800498c <_vfiprintf_r+0x60>
 8004988:	68b5      	ldr	r5, [r6, #8]
 800498a:	e7df      	b.n	800494c <_vfiprintf_r+0x20>
 800498c:	4b79      	ldr	r3, [pc, #484]	; (8004b74 <_vfiprintf_r+0x248>)
 800498e:	429d      	cmp	r5, r3
 8004990:	bf08      	it	eq
 8004992:	68f5      	ldreq	r5, [r6, #12]
 8004994:	e7da      	b.n	800494c <_vfiprintf_r+0x20>
 8004996:	89ab      	ldrh	r3, [r5, #12]
 8004998:	0598      	lsls	r0, r3, #22
 800499a:	d4ed      	bmi.n	8004978 <_vfiprintf_r+0x4c>
 800499c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800499e:	f7ff fb33 	bl	8004008 <__retarget_lock_release_recursive>
 80049a2:	e7e9      	b.n	8004978 <_vfiprintf_r+0x4c>
 80049a4:	2300      	movs	r3, #0
 80049a6:	9309      	str	r3, [sp, #36]	; 0x24
 80049a8:	2320      	movs	r3, #32
 80049aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b2:	2330      	movs	r3, #48	; 0x30
 80049b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b78 <_vfiprintf_r+0x24c>
 80049b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049bc:	f04f 0901 	mov.w	r9, #1
 80049c0:	4623      	mov	r3, r4
 80049c2:	469a      	mov	sl, r3
 80049c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049c8:	b10a      	cbz	r2, 80049ce <_vfiprintf_r+0xa2>
 80049ca:	2a25      	cmp	r2, #37	; 0x25
 80049cc:	d1f9      	bne.n	80049c2 <_vfiprintf_r+0x96>
 80049ce:	ebba 0b04 	subs.w	fp, sl, r4
 80049d2:	d00b      	beq.n	80049ec <_vfiprintf_r+0xc0>
 80049d4:	465b      	mov	r3, fp
 80049d6:	4622      	mov	r2, r4
 80049d8:	4629      	mov	r1, r5
 80049da:	4630      	mov	r0, r6
 80049dc:	f7ff ff93 	bl	8004906 <__sfputs_r>
 80049e0:	3001      	adds	r0, #1
 80049e2:	f000 80aa 	beq.w	8004b3a <_vfiprintf_r+0x20e>
 80049e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049e8:	445a      	add	r2, fp
 80049ea:	9209      	str	r2, [sp, #36]	; 0x24
 80049ec:	f89a 3000 	ldrb.w	r3, [sl]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a2 	beq.w	8004b3a <_vfiprintf_r+0x20e>
 80049f6:	2300      	movs	r3, #0
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295
 80049fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a00:	f10a 0a01 	add.w	sl, sl, #1
 8004a04:	9304      	str	r3, [sp, #16]
 8004a06:	9307      	str	r3, [sp, #28]
 8004a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a0e:	4654      	mov	r4, sl
 8004a10:	2205      	movs	r2, #5
 8004a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a16:	4858      	ldr	r0, [pc, #352]	; (8004b78 <_vfiprintf_r+0x24c>)
 8004a18:	f7fb fbf2 	bl	8000200 <memchr>
 8004a1c:	9a04      	ldr	r2, [sp, #16]
 8004a1e:	b9d8      	cbnz	r0, 8004a58 <_vfiprintf_r+0x12c>
 8004a20:	06d1      	lsls	r1, r2, #27
 8004a22:	bf44      	itt	mi
 8004a24:	2320      	movmi	r3, #32
 8004a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a2a:	0713      	lsls	r3, r2, #28
 8004a2c:	bf44      	itt	mi
 8004a2e:	232b      	movmi	r3, #43	; 0x2b
 8004a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a34:	f89a 3000 	ldrb.w	r3, [sl]
 8004a38:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3a:	d015      	beq.n	8004a68 <_vfiprintf_r+0x13c>
 8004a3c:	9a07      	ldr	r2, [sp, #28]
 8004a3e:	4654      	mov	r4, sl
 8004a40:	2000      	movs	r0, #0
 8004a42:	f04f 0c0a 	mov.w	ip, #10
 8004a46:	4621      	mov	r1, r4
 8004a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a4c:	3b30      	subs	r3, #48	; 0x30
 8004a4e:	2b09      	cmp	r3, #9
 8004a50:	d94e      	bls.n	8004af0 <_vfiprintf_r+0x1c4>
 8004a52:	b1b0      	cbz	r0, 8004a82 <_vfiprintf_r+0x156>
 8004a54:	9207      	str	r2, [sp, #28]
 8004a56:	e014      	b.n	8004a82 <_vfiprintf_r+0x156>
 8004a58:	eba0 0308 	sub.w	r3, r0, r8
 8004a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	46a2      	mov	sl, r4
 8004a66:	e7d2      	b.n	8004a0e <_vfiprintf_r+0xe2>
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	1d19      	adds	r1, r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	9103      	str	r1, [sp, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bfbb      	ittet	lt
 8004a74:	425b      	neglt	r3, r3
 8004a76:	f042 0202 	orrlt.w	r2, r2, #2
 8004a7a:	9307      	strge	r3, [sp, #28]
 8004a7c:	9307      	strlt	r3, [sp, #28]
 8004a7e:	bfb8      	it	lt
 8004a80:	9204      	strlt	r2, [sp, #16]
 8004a82:	7823      	ldrb	r3, [r4, #0]
 8004a84:	2b2e      	cmp	r3, #46	; 0x2e
 8004a86:	d10c      	bne.n	8004aa2 <_vfiprintf_r+0x176>
 8004a88:	7863      	ldrb	r3, [r4, #1]
 8004a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8c:	d135      	bne.n	8004afa <_vfiprintf_r+0x1ce>
 8004a8e:	9b03      	ldr	r3, [sp, #12]
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	9203      	str	r2, [sp, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bfb8      	it	lt
 8004a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a9e:	3402      	adds	r4, #2
 8004aa0:	9305      	str	r3, [sp, #20]
 8004aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b88 <_vfiprintf_r+0x25c>
 8004aa6:	7821      	ldrb	r1, [r4, #0]
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	4650      	mov	r0, sl
 8004aac:	f7fb fba8 	bl	8000200 <memchr>
 8004ab0:	b140      	cbz	r0, 8004ac4 <_vfiprintf_r+0x198>
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	eba0 000a 	sub.w	r0, r0, sl
 8004ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8004abc:	9b04      	ldr	r3, [sp, #16]
 8004abe:	4303      	orrs	r3, r0
 8004ac0:	3401      	adds	r4, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac8:	482c      	ldr	r0, [pc, #176]	; (8004b7c <_vfiprintf_r+0x250>)
 8004aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ace:	2206      	movs	r2, #6
 8004ad0:	f7fb fb96 	bl	8000200 <memchr>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d03f      	beq.n	8004b58 <_vfiprintf_r+0x22c>
 8004ad8:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <_vfiprintf_r+0x254>)
 8004ada:	bb1b      	cbnz	r3, 8004b24 <_vfiprintf_r+0x1f8>
 8004adc:	9b03      	ldr	r3, [sp, #12]
 8004ade:	3307      	adds	r3, #7
 8004ae0:	f023 0307 	bic.w	r3, r3, #7
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	9303      	str	r3, [sp, #12]
 8004ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aea:	443b      	add	r3, r7
 8004aec:	9309      	str	r3, [sp, #36]	; 0x24
 8004aee:	e767      	b.n	80049c0 <_vfiprintf_r+0x94>
 8004af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004af4:	460c      	mov	r4, r1
 8004af6:	2001      	movs	r0, #1
 8004af8:	e7a5      	b.n	8004a46 <_vfiprintf_r+0x11a>
 8004afa:	2300      	movs	r3, #0
 8004afc:	3401      	adds	r4, #1
 8004afe:	9305      	str	r3, [sp, #20]
 8004b00:	4619      	mov	r1, r3
 8004b02:	f04f 0c0a 	mov.w	ip, #10
 8004b06:	4620      	mov	r0, r4
 8004b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b0c:	3a30      	subs	r2, #48	; 0x30
 8004b0e:	2a09      	cmp	r2, #9
 8004b10:	d903      	bls.n	8004b1a <_vfiprintf_r+0x1ee>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0c5      	beq.n	8004aa2 <_vfiprintf_r+0x176>
 8004b16:	9105      	str	r1, [sp, #20]
 8004b18:	e7c3      	b.n	8004aa2 <_vfiprintf_r+0x176>
 8004b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b1e:	4604      	mov	r4, r0
 8004b20:	2301      	movs	r3, #1
 8004b22:	e7f0      	b.n	8004b06 <_vfiprintf_r+0x1da>
 8004b24:	ab03      	add	r3, sp, #12
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <_vfiprintf_r+0x258>)
 8004b2c:	a904      	add	r1, sp, #16
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f3af 8000 	nop.w
 8004b34:	4607      	mov	r7, r0
 8004b36:	1c78      	adds	r0, r7, #1
 8004b38:	d1d6      	bne.n	8004ae8 <_vfiprintf_r+0x1bc>
 8004b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b3c:	07d9      	lsls	r1, r3, #31
 8004b3e:	d405      	bmi.n	8004b4c <_vfiprintf_r+0x220>
 8004b40:	89ab      	ldrh	r3, [r5, #12]
 8004b42:	059a      	lsls	r2, r3, #22
 8004b44:	d402      	bmi.n	8004b4c <_vfiprintf_r+0x220>
 8004b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b48:	f7ff fa5e 	bl	8004008 <__retarget_lock_release_recursive>
 8004b4c:	89ab      	ldrh	r3, [r5, #12]
 8004b4e:	065b      	lsls	r3, r3, #25
 8004b50:	f53f af12 	bmi.w	8004978 <_vfiprintf_r+0x4c>
 8004b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b56:	e711      	b.n	800497c <_vfiprintf_r+0x50>
 8004b58:	ab03      	add	r3, sp, #12
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <_vfiprintf_r+0x258>)
 8004b60:	a904      	add	r1, sp, #16
 8004b62:	4630      	mov	r0, r6
 8004b64:	f000 f880 	bl	8004c68 <_printf_i>
 8004b68:	e7e4      	b.n	8004b34 <_vfiprintf_r+0x208>
 8004b6a:	bf00      	nop
 8004b6c:	08005068 	.word	0x08005068
 8004b70:	08005088 	.word	0x08005088
 8004b74:	08005048 	.word	0x08005048
 8004b78:	080051ad 	.word	0x080051ad
 8004b7c:	080051b7 	.word	0x080051b7
 8004b80:	00000000 	.word	0x00000000
 8004b84:	08004907 	.word	0x08004907
 8004b88:	080051b3 	.word	0x080051b3

08004b8c <_printf_common>:
 8004b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	4616      	mov	r6, r2
 8004b92:	4699      	mov	r9, r3
 8004b94:	688a      	ldr	r2, [r1, #8]
 8004b96:	690b      	ldr	r3, [r1, #16]
 8004b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	bfb8      	it	lt
 8004ba0:	4613      	movlt	r3, r2
 8004ba2:	6033      	str	r3, [r6, #0]
 8004ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ba8:	4607      	mov	r7, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	b10a      	cbz	r2, 8004bb2 <_printf_common+0x26>
 8004bae:	3301      	adds	r3, #1
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	0699      	lsls	r1, r3, #26
 8004bb6:	bf42      	ittt	mi
 8004bb8:	6833      	ldrmi	r3, [r6, #0]
 8004bba:	3302      	addmi	r3, #2
 8004bbc:	6033      	strmi	r3, [r6, #0]
 8004bbe:	6825      	ldr	r5, [r4, #0]
 8004bc0:	f015 0506 	ands.w	r5, r5, #6
 8004bc4:	d106      	bne.n	8004bd4 <_printf_common+0x48>
 8004bc6:	f104 0a19 	add.w	sl, r4, #25
 8004bca:	68e3      	ldr	r3, [r4, #12]
 8004bcc:	6832      	ldr	r2, [r6, #0]
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	42ab      	cmp	r3, r5
 8004bd2:	dc26      	bgt.n	8004c22 <_printf_common+0x96>
 8004bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bd8:	1e13      	subs	r3, r2, #0
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	bf18      	it	ne
 8004bde:	2301      	movne	r3, #1
 8004be0:	0692      	lsls	r2, r2, #26
 8004be2:	d42b      	bmi.n	8004c3c <_printf_common+0xb0>
 8004be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be8:	4649      	mov	r1, r9
 8004bea:	4638      	mov	r0, r7
 8004bec:	47c0      	blx	r8
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d01e      	beq.n	8004c30 <_printf_common+0xa4>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	68e5      	ldr	r5, [r4, #12]
 8004bf6:	6832      	ldr	r2, [r6, #0]
 8004bf8:	f003 0306 	and.w	r3, r3, #6
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	bf08      	it	eq
 8004c00:	1aad      	subeq	r5, r5, r2
 8004c02:	68a3      	ldr	r3, [r4, #8]
 8004c04:	6922      	ldr	r2, [r4, #16]
 8004c06:	bf0c      	ite	eq
 8004c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c0c:	2500      	movne	r5, #0
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	bfc4      	itt	gt
 8004c12:	1a9b      	subgt	r3, r3, r2
 8004c14:	18ed      	addgt	r5, r5, r3
 8004c16:	2600      	movs	r6, #0
 8004c18:	341a      	adds	r4, #26
 8004c1a:	42b5      	cmp	r5, r6
 8004c1c:	d11a      	bne.n	8004c54 <_printf_common+0xc8>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e008      	b.n	8004c34 <_printf_common+0xa8>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4652      	mov	r2, sl
 8004c26:	4649      	mov	r1, r9
 8004c28:	4638      	mov	r0, r7
 8004c2a:	47c0      	blx	r8
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d103      	bne.n	8004c38 <_printf_common+0xac>
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295
 8004c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c38:	3501      	adds	r5, #1
 8004c3a:	e7c6      	b.n	8004bca <_printf_common+0x3e>
 8004c3c:	18e1      	adds	r1, r4, r3
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	2030      	movs	r0, #48	; 0x30
 8004c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c46:	4422      	add	r2, r4
 8004c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c50:	3302      	adds	r3, #2
 8004c52:	e7c7      	b.n	8004be4 <_printf_common+0x58>
 8004c54:	2301      	movs	r3, #1
 8004c56:	4622      	mov	r2, r4
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	47c0      	blx	r8
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d0e6      	beq.n	8004c30 <_printf_common+0xa4>
 8004c62:	3601      	adds	r6, #1
 8004c64:	e7d9      	b.n	8004c1a <_printf_common+0x8e>
	...

08004c68 <_printf_i>:
 8004c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	4691      	mov	r9, r2
 8004c70:	7e27      	ldrb	r7, [r4, #24]
 8004c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c74:	2f78      	cmp	r7, #120	; 0x78
 8004c76:	4680      	mov	r8, r0
 8004c78:	469a      	mov	sl, r3
 8004c7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7e:	d807      	bhi.n	8004c90 <_printf_i+0x28>
 8004c80:	2f62      	cmp	r7, #98	; 0x62
 8004c82:	d80a      	bhi.n	8004c9a <_printf_i+0x32>
 8004c84:	2f00      	cmp	r7, #0
 8004c86:	f000 80d8 	beq.w	8004e3a <_printf_i+0x1d2>
 8004c8a:	2f58      	cmp	r7, #88	; 0x58
 8004c8c:	f000 80a3 	beq.w	8004dd6 <_printf_i+0x16e>
 8004c90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c98:	e03a      	b.n	8004d10 <_printf_i+0xa8>
 8004c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c9e:	2b15      	cmp	r3, #21
 8004ca0:	d8f6      	bhi.n	8004c90 <_printf_i+0x28>
 8004ca2:	a001      	add	r0, pc, #4	; (adr r0, 8004ca8 <_printf_i+0x40>)
 8004ca4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ca8:	08004d01 	.word	0x08004d01
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004c91 	.word	0x08004c91
 8004cb4:	08004c91 	.word	0x08004c91
 8004cb8:	08004c91 	.word	0x08004c91
 8004cbc:	08004c91 	.word	0x08004c91
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004c91 	.word	0x08004c91
 8004cc8:	08004c91 	.word	0x08004c91
 8004ccc:	08004c91 	.word	0x08004c91
 8004cd0:	08004c91 	.word	0x08004c91
 8004cd4:	08004e21 	.word	0x08004e21
 8004cd8:	08004d45 	.word	0x08004d45
 8004cdc:	08004e03 	.word	0x08004e03
 8004ce0:	08004c91 	.word	0x08004c91
 8004ce4:	08004c91 	.word	0x08004c91
 8004ce8:	08004e43 	.word	0x08004e43
 8004cec:	08004c91 	.word	0x08004c91
 8004cf0:	08004d45 	.word	0x08004d45
 8004cf4:	08004c91 	.word	0x08004c91
 8004cf8:	08004c91 	.word	0x08004c91
 8004cfc:	08004e0b 	.word	0x08004e0b
 8004d00:	680b      	ldr	r3, [r1, #0]
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	600a      	str	r2, [r1, #0]
 8004d08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0a3      	b.n	8004e5c <_printf_i+0x1f4>
 8004d14:	6825      	ldr	r5, [r4, #0]
 8004d16:	6808      	ldr	r0, [r1, #0]
 8004d18:	062e      	lsls	r6, r5, #24
 8004d1a:	f100 0304 	add.w	r3, r0, #4
 8004d1e:	d50a      	bpl.n	8004d36 <_printf_i+0xce>
 8004d20:	6805      	ldr	r5, [r0, #0]
 8004d22:	600b      	str	r3, [r1, #0]
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	da03      	bge.n	8004d30 <_printf_i+0xc8>
 8004d28:	232d      	movs	r3, #45	; 0x2d
 8004d2a:	426d      	negs	r5, r5
 8004d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d30:	485e      	ldr	r0, [pc, #376]	; (8004eac <_printf_i+0x244>)
 8004d32:	230a      	movs	r3, #10
 8004d34:	e019      	b.n	8004d6a <_printf_i+0x102>
 8004d36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d3a:	6805      	ldr	r5, [r0, #0]
 8004d3c:	600b      	str	r3, [r1, #0]
 8004d3e:	bf18      	it	ne
 8004d40:	b22d      	sxthne	r5, r5
 8004d42:	e7ef      	b.n	8004d24 <_printf_i+0xbc>
 8004d44:	680b      	ldr	r3, [r1, #0]
 8004d46:	6825      	ldr	r5, [r4, #0]
 8004d48:	1d18      	adds	r0, r3, #4
 8004d4a:	6008      	str	r0, [r1, #0]
 8004d4c:	0628      	lsls	r0, r5, #24
 8004d4e:	d501      	bpl.n	8004d54 <_printf_i+0xec>
 8004d50:	681d      	ldr	r5, [r3, #0]
 8004d52:	e002      	b.n	8004d5a <_printf_i+0xf2>
 8004d54:	0669      	lsls	r1, r5, #25
 8004d56:	d5fb      	bpl.n	8004d50 <_printf_i+0xe8>
 8004d58:	881d      	ldrh	r5, [r3, #0]
 8004d5a:	4854      	ldr	r0, [pc, #336]	; (8004eac <_printf_i+0x244>)
 8004d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d5e:	bf0c      	ite	eq
 8004d60:	2308      	moveq	r3, #8
 8004d62:	230a      	movne	r3, #10
 8004d64:	2100      	movs	r1, #0
 8004d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d6a:	6866      	ldr	r6, [r4, #4]
 8004d6c:	60a6      	str	r6, [r4, #8]
 8004d6e:	2e00      	cmp	r6, #0
 8004d70:	bfa2      	ittt	ge
 8004d72:	6821      	ldrge	r1, [r4, #0]
 8004d74:	f021 0104 	bicge.w	r1, r1, #4
 8004d78:	6021      	strge	r1, [r4, #0]
 8004d7a:	b90d      	cbnz	r5, 8004d80 <_printf_i+0x118>
 8004d7c:	2e00      	cmp	r6, #0
 8004d7e:	d04d      	beq.n	8004e1c <_printf_i+0x1b4>
 8004d80:	4616      	mov	r6, r2
 8004d82:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d86:	fb03 5711 	mls	r7, r3, r1, r5
 8004d8a:	5dc7      	ldrb	r7, [r0, r7]
 8004d8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d90:	462f      	mov	r7, r5
 8004d92:	42bb      	cmp	r3, r7
 8004d94:	460d      	mov	r5, r1
 8004d96:	d9f4      	bls.n	8004d82 <_printf_i+0x11a>
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d10b      	bne.n	8004db4 <_printf_i+0x14c>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	07df      	lsls	r7, r3, #31
 8004da0:	d508      	bpl.n	8004db4 <_printf_i+0x14c>
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	6861      	ldr	r1, [r4, #4]
 8004da6:	4299      	cmp	r1, r3
 8004da8:	bfde      	ittt	le
 8004daa:	2330      	movle	r3, #48	; 0x30
 8004dac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004db0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004db4:	1b92      	subs	r2, r2, r6
 8004db6:	6122      	str	r2, [r4, #16]
 8004db8:	f8cd a000 	str.w	sl, [sp]
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	aa03      	add	r2, sp, #12
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	f7ff fee2 	bl	8004b8c <_printf_common>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d14c      	bne.n	8004e66 <_printf_i+0x1fe>
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	b004      	add	sp, #16
 8004dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd6:	4835      	ldr	r0, [pc, #212]	; (8004eac <_printf_i+0x244>)
 8004dd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	680e      	ldr	r6, [r1, #0]
 8004de0:	061f      	lsls	r7, r3, #24
 8004de2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004de6:	600e      	str	r6, [r1, #0]
 8004de8:	d514      	bpl.n	8004e14 <_printf_i+0x1ac>
 8004dea:	07d9      	lsls	r1, r3, #31
 8004dec:	bf44      	itt	mi
 8004dee:	f043 0320 	orrmi.w	r3, r3, #32
 8004df2:	6023      	strmi	r3, [r4, #0]
 8004df4:	b91d      	cbnz	r5, 8004dfe <_printf_i+0x196>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	f023 0320 	bic.w	r3, r3, #32
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	2310      	movs	r3, #16
 8004e00:	e7b0      	b.n	8004d64 <_printf_i+0xfc>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	f043 0320 	orr.w	r3, r3, #32
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	2378      	movs	r3, #120	; 0x78
 8004e0c:	4828      	ldr	r0, [pc, #160]	; (8004eb0 <_printf_i+0x248>)
 8004e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e12:	e7e3      	b.n	8004ddc <_printf_i+0x174>
 8004e14:	065e      	lsls	r6, r3, #25
 8004e16:	bf48      	it	mi
 8004e18:	b2ad      	uxthmi	r5, r5
 8004e1a:	e7e6      	b.n	8004dea <_printf_i+0x182>
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	e7bb      	b.n	8004d98 <_printf_i+0x130>
 8004e20:	680b      	ldr	r3, [r1, #0]
 8004e22:	6826      	ldr	r6, [r4, #0]
 8004e24:	6960      	ldr	r0, [r4, #20]
 8004e26:	1d1d      	adds	r5, r3, #4
 8004e28:	600d      	str	r5, [r1, #0]
 8004e2a:	0635      	lsls	r5, r6, #24
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	d501      	bpl.n	8004e34 <_printf_i+0x1cc>
 8004e30:	6018      	str	r0, [r3, #0]
 8004e32:	e002      	b.n	8004e3a <_printf_i+0x1d2>
 8004e34:	0671      	lsls	r1, r6, #25
 8004e36:	d5fb      	bpl.n	8004e30 <_printf_i+0x1c8>
 8004e38:	8018      	strh	r0, [r3, #0]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	6123      	str	r3, [r4, #16]
 8004e3e:	4616      	mov	r6, r2
 8004e40:	e7ba      	b.n	8004db8 <_printf_i+0x150>
 8004e42:	680b      	ldr	r3, [r1, #0]
 8004e44:	1d1a      	adds	r2, r3, #4
 8004e46:	600a      	str	r2, [r1, #0]
 8004e48:	681e      	ldr	r6, [r3, #0]
 8004e4a:	6862      	ldr	r2, [r4, #4]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f7fb f9d6 	bl	8000200 <memchr>
 8004e54:	b108      	cbz	r0, 8004e5a <_printf_i+0x1f2>
 8004e56:	1b80      	subs	r0, r0, r6
 8004e58:	6060      	str	r0, [r4, #4]
 8004e5a:	6863      	ldr	r3, [r4, #4]
 8004e5c:	6123      	str	r3, [r4, #16]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e64:	e7a8      	b.n	8004db8 <_printf_i+0x150>
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	4632      	mov	r2, r6
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	47d0      	blx	sl
 8004e70:	3001      	adds	r0, #1
 8004e72:	d0ab      	beq.n	8004dcc <_printf_i+0x164>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	079b      	lsls	r3, r3, #30
 8004e78:	d413      	bmi.n	8004ea2 <_printf_i+0x23a>
 8004e7a:	68e0      	ldr	r0, [r4, #12]
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	4298      	cmp	r0, r3
 8004e80:	bfb8      	it	lt
 8004e82:	4618      	movlt	r0, r3
 8004e84:	e7a4      	b.n	8004dd0 <_printf_i+0x168>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4632      	mov	r2, r6
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	47d0      	blx	sl
 8004e90:	3001      	adds	r0, #1
 8004e92:	d09b      	beq.n	8004dcc <_printf_i+0x164>
 8004e94:	3501      	adds	r5, #1
 8004e96:	68e3      	ldr	r3, [r4, #12]
 8004e98:	9903      	ldr	r1, [sp, #12]
 8004e9a:	1a5b      	subs	r3, r3, r1
 8004e9c:	42ab      	cmp	r3, r5
 8004e9e:	dcf2      	bgt.n	8004e86 <_printf_i+0x21e>
 8004ea0:	e7eb      	b.n	8004e7a <_printf_i+0x212>
 8004ea2:	2500      	movs	r5, #0
 8004ea4:	f104 0619 	add.w	r6, r4, #25
 8004ea8:	e7f5      	b.n	8004e96 <_printf_i+0x22e>
 8004eaa:	bf00      	nop
 8004eac:	080051be 	.word	0x080051be
 8004eb0:	080051cf 	.word	0x080051cf

08004eb4 <_read_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d07      	ldr	r5, [pc, #28]	; (8004ed4 <_read_r+0x20>)
 8004eb8:	4604      	mov	r4, r0
 8004eba:	4608      	mov	r0, r1
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	602a      	str	r2, [r5, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f7fb fd36 	bl	8000934 <_read>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_read_r+0x1e>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_read_r+0x1e>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	200002ec 	.word	0x200002ec

08004ed8 <_fstat_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d07      	ldr	r5, [pc, #28]	; (8004ef8 <_fstat_r+0x20>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	602b      	str	r3, [r5, #0]
 8004ee6:	f7fb fd4e 	bl	8000986 <_fstat>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d102      	bne.n	8004ef4 <_fstat_r+0x1c>
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	b103      	cbz	r3, 8004ef4 <_fstat_r+0x1c>
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200002ec 	.word	0x200002ec

08004efc <_isatty_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d06      	ldr	r5, [pc, #24]	; (8004f18 <_isatty_r+0x1c>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	f7fb fd4d 	bl	80009a6 <_isatty>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_isatty_r+0x1a>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_isatty_r+0x1a>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200002ec 	.word	0x200002ec

08004f1c <_init>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr

08004f28 <_fini>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr
